
SD_FreeRTOS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800d3e8  0800d3e8  0001d3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d980  0800d980  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800d980  0800d980  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d980  0800d980  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d980  0800d980  0001d980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d984  0800d984  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e0  20000010  0800d998  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200043f0  0800d998  000243f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b31a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005028  00000000  00000000  0004b35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00050388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a28  00000000  00000000  00051fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006341  00000000  00000000  000539f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229e4  00000000  00000000  00059d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100e87  00000000  00000000  0007c715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d59c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007508  00000000  00000000  0017d5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3d0 	.word	0x0800d3d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800d3d0 	.word	0x0800d3d0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc8b 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82a 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8ee 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f8ce 	bl	8000380 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80001e4:	f000 f8ac 	bl	8000340 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80001e8:	f005 fd44 	bl	8005c74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f009 fc10 	bl	8009a10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x48>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x4c>)
 80001f6:	f009 fc8c 	bl	8009b12 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x50>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(Start_SD_Task, NULL, &SDTask_attributes);
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x54>)
 8000202:	2100      	movs	r1, #0
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	f009 fc84 	bl	8009b12 <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <main+0x5c>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f009 fc44 	bl	8009a9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x44>
 8000216:	bf00      	nop
 8000218:	0800d49c 	.word	0x0800d49c
 800021c:	08000445 	.word	0x08000445
 8000220:	200019bc 	.word	0x200019bc
 8000224:	0800d4c0 	.word	0x0800d4c0
 8000228:	08000455 	.word	0x08000455
 800022c:	20001a44 	.word	0x20001a44

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0b8      	sub	sp, #224	; 0xe0
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f00d f8be 	bl	800d3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2288      	movs	r2, #136	; 0x88
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f00d f8b0 	bl	800d3c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000272:	2360      	movs	r3, #96	; 0x60
 8000274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000284:	2301      	movs	r3, #1
 8000286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 800028a:	2310      	movs	r3, #16
 800028c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000290:	2307      	movs	r3, #7
 8000292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fa8e 	bl	80017c8 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002b2:	f000 f937 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002d8:	2101      	movs	r1, #1
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fe5a 	bl	8001f94 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002e6:	f000 f91d 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80002ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80002f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002f4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002fe:	2310      	movs	r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800030e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000312:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f874 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000322:	f000 f8ff 	bl	8000524 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032a:	f001 f9f7 	bl	800171c <HAL_PWREx_ControlVoltageScaling>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000334:	f000 f8f6 	bl	8000524 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	37e0      	adds	r7, #224	; 0xe0
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <MX_SDMMC1_SD_Init+0x3c>)
 8000348:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	200019c0 	.word	0x200019c0
 800037c:	40012800 	.word	0x40012800

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6493      	str	r3, [r2, #72]	; 0x48
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2105      	movs	r1, #5
 80003a2:	203b      	movs	r0, #59	; 0x3b
 80003a4:	f000 fcb8 	bl	8000d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80003a8:	203b      	movs	r0, #59	; 0x3b
 80003aa:	f000 fcd1 	bl	8000d50 <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x84>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x84>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x84>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <MX_GPIO_Init+0x84>)
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_GPIO_Init+0x84>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f000 ffa3 	bl	800137c <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f009 fbf2 	bl	8009c36 <osDelay>
 8000452:	e7fb      	b.n	800044c <StartDefaultTask+0x8>

08000454 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	f6ad 1d74 	subw	sp, sp, #2420	; 0x974
 800045a:	af00      	add	r7, sp, #0
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  SD_CARD sd;
  int32_t byteswritten, bytesread; //file write/read counts
  uint8_t wtext[] = "Test run"; //file buffer
 8000460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000464:	4a24      	ldr	r2, [pc, #144]	; (80004f8 <Start_SD_Task+0xa4>)
 8000466:	ca07      	ldmia	r2, {r0, r1, r2}
 8000468:	c303      	stmia	r3!, {r0, r1}
 800046a:	701a      	strb	r2, [r3, #0]
  uint8_t file_path[50] = "/sub_test/stm32.txt";
 800046c:	f107 060c 	add.w	r6, r7, #12
 8000470:	4b22      	ldr	r3, [pc, #136]	; (80004fc <Start_SD_Task+0xa8>)
 8000472:	4634      	mov	r4, r6
 8000474:	461d      	mov	r5, r3
 8000476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047a:	682b      	ldr	r3, [r5, #0]
 800047c:	6023      	str	r3, [r4, #0]
 800047e:	f106 0314 	add.w	r3, r6, #20
 8000482:	221e      	movs	r2, #30
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f00c ff9a 	bl	800d3c0 <memset>
  for(;;)
  {
	//taskENTER_CRITICAL();
	if(init_sd(&sd) != FR_OK) {
 800048c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000490:	4618      	mov	r0, r3
 8000492:	f000 f84d 	bl	8000530 <init_sd>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <Start_SD_Task+0x4e>
	  Error_Handler();
 800049c:	f000 f842 	bl	8000524 <Error_Handler>
 80004a0:	e021      	b.n	80004e6 <Start_SD_Task+0x92>
    }
	else { //file system already exists, try to open a file

		bytesread = read_from_file(&sd, file_path, 35);
 80004a2:	f107 010c 	add.w	r1, r7, #12
 80004a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004aa:	2223      	movs	r2, #35	; 0x23
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f87f 	bl	80005b0 <read_from_file>
 80004b2:	f8c7 096c 	str.w	r0, [r7, #2412]	; 0x96c

		memcpy(&sd.write_buffer, wtext, sizeof(wtext));
 80004b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004be:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80004c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004c4:	c303      	stmia	r3!, {r0, r1}
 80004c6:	701a      	strb	r2, [r3, #0]
		byteswritten = write_to_file(&sd, file_path, sizeof(wtext) - 1);
 80004c8:	f107 010c 	add.w	r1, r7, #12
 80004cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004d0:	2208      	movs	r2, #8
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f8b6 	bl	8000644 <write_to_file>
 80004d8:	f8c7 0968 	str.w	r0, [r7, #2408]	; 0x968

		unmount(&sd);
 80004dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f92b 	bl	800073c <unmount>
	}
	//taskEXIT_CRITICAL();
	vTaskSuspend(NULL);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f00b f902 	bl	800b6f0 <vTaskSuspend>
	osDelay(10000);
 80004ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f0:	f009 fba1 	bl	8009c36 <osDelay>
	if(init_sd(&sd) != FR_OK) {
 80004f4:	e7ca      	b.n	800048c <Start_SD_Task+0x38>
 80004f6:	bf00      	nop
 80004f8:	0800d3fc 	.word	0x0800d3fc
 80004fc:	0800d408 	.word	0x0800d408

08000500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d101      	bne.n	8000516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000512:	f000 fb05 	bl	8000b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40001000 	.word	0x40001000

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <init_sd>:
 */

int8_t
init_sd(SD_CARD *sd //SD Card instance
		)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  	 //check that SD Card is slotted correctly
  	 if(!BSP_SD_IsDetected()) {
 8000538:	f005 fc55 	bl	8005de6 <BSP_SD_IsDetected>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d102      	bne.n	8000548 <init_sd+0x18>
  		 return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	e02b      	b.n	80005a0 <init_sd+0x70>
  	 }

  	 //instantly mount SD card on startup
  	 sd->res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	4917      	ldr	r1, [pc, #92]	; (80005a8 <init_sd+0x78>)
 800054c:	4817      	ldr	r0, [pc, #92]	; (80005ac <init_sd+0x7c>)
 800054e:	f008 f993 	bl	8008878 <f_mount>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	701a      	strb	r2, [r3, #0]
  	 if(sd->res != FR_OK) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <init_sd+0x38>
  		 return -1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000566:	e01b      	b.n	80005a0 <init_sd+0x70>
  	 }

  	 //initialize R/W buffers
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800056e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f00c ff23 	bl	800d3c0 <memset>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00b      	beq.n	8000598 <init_sd+0x68>
  			 memset(sd->write_buffer, 0, sizeof(sd->write_buffer)) == NULL) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8000586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f00c ff17 	bl	800d3c0 <memset>
 8000592:	4603      	mov	r3, r0
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <init_sd+0x6e>
  		 return -1;
 8000598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059c:	e000      	b.n	80005a0 <init_sd+0x70>
  	 }

  	 //return success
  	 return 0;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20002340 	.word	0x20002340
 80005ac:	20003374 	.word	0x20003374

080005b0 <read_from_file>:
int32_t
read_from_file(SD_CARD *sd,			//SD card instance
		  uint8_t file_path[50],//path to the file
		  uint16_t read_amount  //amount of bytes to read
		  )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	4613      	mov	r3, r2
 80005bc:	80fb      	strh	r3, [r7, #6]

	UINT bytes_read;

	//set default state, will be overwritten if file exists
	sd->res = FR_NO_FILE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2204      	movs	r2, #4
 80005c2:	701a      	strb	r2, [r3, #0]

	//check if file exists
	sd->res = f_stat((TCHAR *)file_path, &sd->finfo);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3304      	adds	r3, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	68b8      	ldr	r0, [r7, #8]
 80005cc:	f009 f824 	bl	8009618 <f_stat>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	701a      	strb	r2, [r3, #0]
	//file can't be read if it doesn't exist
	if(sd->res != FR_OK) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <read_from_file+0x36>
		return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e4:	e028      	b.n	8000638 <read_from_file+0x88>
	}

	//open file for reading
	sd->res = f_open(&SDFile, (char*)file_path, FA_READ);
 80005e6:	2201      	movs	r2, #1
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <read_from_file+0x90>)
 80005ec:	f008 f9a8 	bl	8008940 <f_open>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	701a      	strb	r2, [r3, #0]
	if(sd->res != FR_OK) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <read_from_file+0x56>
		return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	e018      	b.n	8000638 <read_from_file+0x88>
	}

	//prevent out of range access
	if(f_size(&SDFile) < read_amount) {
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <read_from_file+0x90>)
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	429a      	cmp	r2, r3
 800060e:	d202      	bcs.n	8000616 <read_from_file+0x66>
		read_amount = f_size(&SDFile);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <read_from_file+0x90>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	80fb      	strh	r3, [r7, #6]
	}
	//read bytes from file and store them in read buffer
	sd->res = f_read(&SDFile, &sd->read_buffer, read_amount, &bytes_read);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <read_from_file+0x90>)
 8000624:	f008 fbef 	bl	8008e06 <f_read>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <read_from_file+0x90>)
 8000632:	f008 ffc2 	bl	80095ba <f_close>

	return bytes_read;
 8000636:	697b      	ldr	r3, [r7, #20]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20002344 	.word	0x20002344

08000644 <write_to_file>:
int32_t
write_to_file(SD_CARD *sd,		 //SD card instance
		   uint8_t file_path[50],//path to the file
		   uint16_t write_amount //amount of bytes to be written
		   )
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	466b      	mov	r3, sp
 8000654:	461d      	mov	r5, r3
	UINT bytes_written;
	uint8_t w_str[write_amount+1];
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	1c5c      	adds	r4, r3, #1
 800065a:	1e63      	subs	r3, r4, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	4623      	mov	r3, r4
 8000660:	4618      	mov	r0, r3
 8000662:	f04f 0100 	mov.w	r1, #0
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	00cb      	lsls	r3, r1, #3
 8000670:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000674:	00c2      	lsls	r2, r0, #3
 8000676:	4623      	mov	r3, r4
 8000678:	4618      	mov	r0, r3
 800067a:	f04f 0100 	mov.w	r1, #0
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	00cb      	lsls	r3, r1, #3
 8000688:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800068c:	00c2      	lsls	r2, r0, #3
 800068e:	4623      	mov	r3, r4
 8000690:	3307      	adds	r3, #7
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	ebad 0d03 	sub.w	sp, sp, r3
 800069a:	466b      	mov	r3, sp
 800069c:	3300      	adds	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
	//copy buffer to local array (may need to improve this later)
	memcpy(w_str, &sd->write_buffer, write_amount);
 80006a0:	69b8      	ldr	r0, [r7, #24]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80006a8:	88fa      	ldrh	r2, [r7, #6]
 80006aa:	4619      	mov	r1, r3
 80006ac:	f00c fe7a 	bl	800d3a4 <memcpy>

	//check if file exists
	sd->res = f_stat((TCHAR *)file_path, &sd->finfo);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3304      	adds	r3, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	68b8      	ldr	r0, [r7, #8]
 80006b8:	f008 ffae 	bl	8009618 <f_stat>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	701a      	strb	r2, [r3, #0]

	//adhere to different cases
	switch(sd->res) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <write_to_file+0x8e>
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d00a      	beq.n	80006e6 <write_to_file+0xa2>
 80006d0:	e013      	b.n	80006fa <write_to_file+0xb6>

	case FR_OK:
		//file exists, append to it
		sd->res = f_open(&SDFile, (char*)file_path, FA_OPEN_APPEND | FA_WRITE);
 80006d2:	2232      	movs	r2, #50	; 0x32
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <write_to_file+0xf4>)
 80006d8:	f008 f932 	bl	8008940 <f_open>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	701a      	strb	r2, [r3, #0]
		break;
 80006e4:	e013      	b.n	800070e <write_to_file+0xca>
	case FR_NO_FILE:
		//file does not exist, create it
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006e6:	2206      	movs	r2, #6
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <write_to_file+0xf4>)
 80006ec:	f008 f928 	bl	8008940 <f_open>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	701a      	strb	r2, [r3, #0]
		break;
 80006f8:	e009      	b.n	800070e <write_to_file+0xca>
	default:
		//default case should overwrite to prevent system failure
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006fa:	2206      	movs	r2, #6
 80006fc:	68b9      	ldr	r1, [r7, #8]
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <write_to_file+0xf4>)
 8000700:	f008 f91e 	bl	8008940 <f_open>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	701a      	strb	r2, [r3, #0]
		break;
 800070c:	bf00      	nop
	}

	//write to file
	sd->res = f_write(&SDFile, w_str, (UINT)write_amount, (UINT*)&bytes_written);
 800070e:	69b9      	ldr	r1, [r7, #24]
 8000710:	88fa      	ldrh	r2, [r7, #6]
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <write_to_file+0xf4>)
 8000718:	f008 fd03 	bl	8009122 <f_write>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <write_to_file+0xf4>)
 8000726:	f008 ff48 	bl	80095ba <f_close>

	return bytes_written;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	46ad      	mov	sp, r5
}
 800072e:	4618      	mov	r0, r3
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bdb0      	pop	{r4, r5, r7, pc}
 8000736:	bf00      	nop
 8000738:	20002344 	.word	0x20002344

0800073c <unmount>:
 * Unmount SD card
 */
void
unmount(SD_CARD *sd //SD Card instance
		)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	sd->res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <unmount+0x24>)
 800074a:	f008 f895 	bl	8008878 <f_mount>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20003374 	.word	0x20003374

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_MspInit+0x4c>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <HAL_MspInit+0x4c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6613      	str	r3, [r2, #96]	; 0x60
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x4c>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_MspInit+0x4c>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_MspInit+0x4c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6593      	str	r3, [r2, #88]	; 0x58
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x4c>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 fab9 	bl	8000d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a42      	ldr	r2, [pc, #264]	; (80008dc <HAL_SD_MspInit+0x128>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d17e      	bne.n	80008d4 <HAL_SD_MspInit+0x120>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a41      	ldr	r2, [pc, #260]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a35      	ldr	r2, [pc, #212]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <HAL_SD_MspInit+0x12c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800081e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000830:	230c      	movs	r3, #12
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	482a      	ldr	r0, [pc, #168]	; (80008e4 <HAL_SD_MspInit+0x130>)
 800083c:	f000 fd9e 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000840:	2304      	movs	r3, #4
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000850:	230c      	movs	r3, #12
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4823      	ldr	r0, [pc, #140]	; (80008e8 <HAL_SD_MspInit+0x134>)
 800085c:	f000 fd8e 	bl	800137c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000862:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <HAL_SD_MspInit+0x13c>)
 8000864:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000868:	2207      	movs	r2, #7
 800086a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_SD_MspInit+0x138>)
 800086e:	2210      	movs	r2, #16
 8000870:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_SD_MspInit+0x138>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_SD_MspInit+0x138>)
 8000896:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800089a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <HAL_SD_MspInit+0x138>)
 800089e:	f000 fa65 	bl	8000d6c <HAL_DMA_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 80008a8:	f7ff fe3c 	bl	8000524 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_SD_MspInit+0x138>)
 80008b0:	641a      	str	r2, [r3, #64]	; 0x40
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_SD_MspInit+0x138>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <HAL_SD_MspInit+0x138>)
 80008bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_SD_MspInit+0x138>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	2031      	movs	r0, #49	; 0x31
 80008ca:	f000 fa25 	bl	8000d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ce:	2031      	movs	r0, #49	; 0x31
 80008d0:	f000 fa3e 	bl	8000d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40012800 	.word	0x40012800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800
 80008e8:	48000c00 	.word	0x48000c00
 80008ec:	200022a4 	.word	0x200022a4
 80008f0:	40020444 	.word	0x40020444

080008f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2036      	movs	r0, #54	; 0x36
 800090a:	f000 fa05 	bl	8000d18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800090e:	2036      	movs	r0, #54	; 0x36
 8000910:	f000 fa1e 	bl	8000d50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_InitTick+0x9c>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <HAL_InitTick+0x9c>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6593      	str	r3, [r2, #88]	; 0x58
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_InitTick+0x9c>)
 8000922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 0210 	add.w	r2, r7, #16
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fcd2 	bl	80022e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800093c:	f001 fca4 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8000940:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_InitTick+0xa0>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0xa4>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_InitTick+0xa8>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_InitTick+0xa4>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_InitTick+0xa4>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_InitTick+0xa4>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_InitTick+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_InitTick+0xa4>)
 8000972:	f004 f979 	bl	8004c68 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_InitTick+0xa4>)
 800097e:	f004 f9d5 	bl	8004d2c <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	431bde83 	.word	0x431bde83
 8000998:	200022ec 	.word	0x200022ec
 800099c:	40001000 	.word	0x40001000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <SDMMC1_IRQHandler+0x10>)
 80009d2:	f003 faa9 	bl	8003f28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200019c0 	.word	0x200019c0

080009e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM6_DAC_IRQHandler+0x10>)
 80009e6:	f004 fa11 	bl	8004e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200022ec 	.word	0x200022ec

080009f4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
#ifndef CODE_CORRECTION_SD
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */
#else
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	2b81      	cmp	r3, #129	; 0x81
 80009fe:	d003      	beq.n	8000a08 <DMA2_Channel4_IRQHandler+0x14>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000a04:	2b82      	cmp	r3, #130	; 0x82
 8000a06:	d105      	bne.n	8000a14 <DMA2_Channel4_IRQHandler+0x20>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmarx);
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fbd6 	bl	80011be <HAL_DMA_IRQHandler>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
  }
#endif
  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000a12:	e00c      	b.n	8000a2e <DMA2_Channel4_IRQHandler+0x3a>
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	2b90      	cmp	r3, #144	; 0x90
 8000a1a:	d003      	beq.n	8000a24 <DMA2_Channel4_IRQHandler+0x30>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a20:	2ba0      	cmp	r3, #160	; 0xa0
 8000a22:	d104      	bne.n	8000a2e <DMA2_Channel4_IRQHandler+0x3a>
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <DMA2_Channel4_IRQHandler+0x40>)
 8000a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fbc8 	bl	80011be <HAL_DMA_IRQHandler>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200019c0 	.word	0x200019c0

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SystemInit+0x5c>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <SystemInit+0x5c>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <SystemInit+0x60>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <SystemInit+0x60>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <SystemInit+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <SystemInit+0x60>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <SystemInit+0x60>)
 8000a64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SystemInit+0x60>)
 8000a70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x60>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <SystemInit+0x60>)
 8000a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SystemInit+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00
 8000a98:	40021000 	.word	0x40021000

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffca 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aa6:	e003      	b.n	8000ab0 <LoopCopyDataInit>

08000aa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000aac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aae:	3104      	adds	r1, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ab0:	480a      	ldr	r0, [pc, #40]	; (8000adc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ab4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ab6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ab8:	d3f6      	bcc.n	8000aa8 <CopyDataInit>
	ldr	r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000abc:	e002      	b.n	8000ac4 <LoopFillZerobss>

08000abe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000abe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ac0:	f842 3b04 	str.w	r3, [r2], #4

08000ac4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ac6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ac8:	d3f9      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f00c fc47 	bl	800d35c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fb7f 	bl	80001d0 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ad8:	0800d988 	.word	0x0800d988
	ldr	r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ae0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000ae4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000ae8:	200043f0 	.word	0x200043f0

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f902 	bl	8000d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff fef8 	bl	80008f4 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fe28 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20002338 	.word	0x20002338

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20002338 	.word	0x20002338

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff ffee 	bl	8000b48 <HAL_GetTick>
 8000b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	bf00      	nop
 8000b88:	f7ff ffde 	bl	8000b48 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	; (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff4c 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2a:	f7ff ff61 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f7ff ffb1 	bl	8000c9c <NVIC_EncodePriority>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff80 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e098      	b.n	8000eb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_DMA_Init+0x150>)
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d80f      	bhi.n	8000daa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <HAL_DMA_Init+0x154>)
 8000d92:	4413      	add	r3, r2
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <HAL_DMA_Init+0x158>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	009a      	lsls	r2, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_DMA_Init+0x15c>)
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
 8000da8:	e00e      	b.n	8000dc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_DMA_Init+0x160>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4a43      	ldr	r2, [pc, #268]	; (8000ec4 <HAL_DMA_Init+0x158>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a42      	ldr	r2, [pc, #264]	; (8000ed0 <HAL_DMA_Init+0x164>)
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e22:	d039      	beq.n	8000e98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_DMA_Init+0x15c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d11a      	bne.n	8000e64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <HAL_DMA_Init+0x168>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f003 031c 	and.w	r3, r3, #28
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4924      	ldr	r1, [pc, #144]	; (8000ed4 <HAL_DMA_Init+0x168>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_DMA_Init+0x168>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f003 031c 	and.w	r3, r3, #28
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	491d      	ldr	r1, [pc, #116]	; (8000ed4 <HAL_DMA_Init+0x168>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
 8000e62:	e019      	b.n	8000e98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_DMA_Init+0x16c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f003 031c 	and.w	r3, r3, #28
 8000e70:	210f      	movs	r1, #15
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4917      	ldr	r1, [pc, #92]	; (8000ed8 <HAL_DMA_Init+0x16c>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_DMA_Init+0x16c>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f003 031c 	and.w	r3, r3, #28
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	4911      	ldr	r1, [pc, #68]	; (8000ed8 <HAL_DMA_Init+0x16c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40020407 	.word	0x40020407
 8000ec0:	bffdfff8 	.word	0xbffdfff8
 8000ec4:	cccccccd 	.word	0xcccccccd
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	bffdfbf8 	.word	0xbffdfbf8
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	400200a8 	.word	0x400200a8
 8000ed8:	400204a8 	.word	0x400204a8

08000edc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e072      	b.n	8000fd4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_DMA_DeInit+0x104>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d80f      	bhi.n	8000f2a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <HAL_DMA_DeInit+0x108>)
 8000f12:	4413      	add	r3, r2
 8000f14:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <HAL_DMA_DeInit+0x10c>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a31      	ldr	r2, [pc, #196]	; (8000fec <HAL_DMA_DeInit+0x110>)
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
 8000f28:	e00e      	b.n	8000f48 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_DMA_DeInit+0x114>)
 8000f32:	4413      	add	r3, r2
 8000f34:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <HAL_DMA_DeInit+0x10c>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	009a      	lsls	r2, r3, #2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a2b      	ldr	r2, [pc, #172]	; (8000ff4 <HAL_DMA_DeInit+0x118>)
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f003 021c 	and.w	r2, r3, #28
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <HAL_DMA_DeInit+0x110>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10d      	bne.n	8000f8a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_DMA_DeInit+0x11c>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f003 031c 	and.w	r3, r3, #28
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	491d      	ldr	r1, [pc, #116]	; (8000ff8 <HAL_DMA_DeInit+0x11c>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
 8000f88:	e00c      	b.n	8000fa4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_DMA_DeInit+0x120>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f003 031c 	and.w	r3, r3, #28
 8000f96:	210f      	movs	r1, #15
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4917      	ldr	r1, [pc, #92]	; (8000ffc <HAL_DMA_DeInit+0x120>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40020407 	.word	0x40020407
 8000fe4:	bffdfff8 	.word	0xbffdfff8
 8000fe8:	cccccccd 	.word	0xcccccccd
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	bffdfbf8 	.word	0xbffdfbf8
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	400200a8 	.word	0x400200a8
 8000ffc:	400204a8 	.word	0x400204a8

08001000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_DMA_Start_IT+0x20>
 800101c:	2302      	movs	r3, #2
 800101e:	e04b      	b.n	80010b8 <HAL_DMA_Start_IT+0xb8>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d13a      	bne.n	80010aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f95f 	bl	800131c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 020e 	orr.w	r2, r2, #14
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e00f      	b.n	8001098 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 020a 	orr.w	r2, r2, #10
 8001096:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e005      	b.n	80010b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010b2:	2302      	movs	r3, #2
 80010b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d008      	beq.n	80010ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2204      	movs	r2, #4
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e022      	b.n	8001130 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 020e 	bic.w	r2, r2, #14
 80010f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 021c 	and.w	r2, r3, #28
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d005      	beq.n	8001160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2204      	movs	r2, #4
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e029      	b.n	80011b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 020e 	bic.w	r2, r2, #14
 800116e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	f003 021c 	and.w	r2, r3, #28
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
    }
  }
  return status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f003 031c 	and.w	r3, r3, #28
 80011de:	2204      	movs	r2, #4
 80011e0:	409a      	lsls	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d026      	beq.n	8001238 <HAL_DMA_IRQHandler+0x7a>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d021      	beq.n	8001238 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0204 	bic.w	r2, r2, #4
 8001210:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 021c 	and.w	r2, r3, #28
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2104      	movs	r1, #4
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	2b00      	cmp	r3, #0
 800122c:	d071      	beq.n	8001312 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001236:	e06c      	b.n	8001312 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	f003 031c 	and.w	r3, r3, #28
 8001240:	2202      	movs	r2, #2
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d02e      	beq.n	80012aa <HAL_DMA_IRQHandler+0xec>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d029      	beq.n	80012aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10b      	bne.n	800127c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020a 	bic.w	r2, r2, #10
 8001272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f003 021c 	and.w	r2, r3, #28
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2102      	movs	r1, #2
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d038      	beq.n	8001312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012a8:	e033      	b.n	8001312 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f003 031c 	and.w	r3, r3, #28
 80012b2:	2208      	movs	r2, #8
 80012b4:	409a      	lsls	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d02a      	beq.n	8001314 <HAL_DMA_IRQHandler+0x156>
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d025      	beq.n	8001314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020e 	bic.w	r2, r2, #14
 80012d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f003 021c 	and.w	r2, r3, #28
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001312:	bf00      	nop
 8001314:	bf00      	nop
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 021c 	and.w	r2, r3, #28
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d108      	bne.n	8001360 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800135e:	e007      	b.n	8001370 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138a:	e17f      	b.n	800168c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8171 	beq.w	8001686 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d00b      	beq.n	80013c4 <HAL_GPIO_Init+0x48>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d007      	beq.n	80013c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	2b11      	cmp	r3, #17
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b12      	cmp	r3, #18
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d118      	bne.n	8001464 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001438:	2201      	movs	r2, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f003 0201 	and.w	r2, r3, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x128>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b12      	cmp	r3, #18
 80014a2:	d123      	bne.n	80014ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	6939      	ldr	r1, [r7, #16]
 80014e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80ac 	beq.w	8001686 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_GPIO_Init+0x330>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_GPIO_Init+0x330>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_GPIO_Init+0x330>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x242>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x338>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x23e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4e      	ldr	r2, [pc, #312]	; (80016b8 <HAL_GPIO_Init+0x33c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x23a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x340>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x236>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_GPIO_Init+0x344>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x232>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_GPIO_Init+0x348>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x22e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <HAL_GPIO_Init+0x34c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x22a>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x244>
 80015be:	2300      	movs	r3, #0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x350>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x350>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x350>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x350>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x350>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f ae78 	bne.w	800138c <HAL_GPIO_Init+0x10>
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48000c00 	.word	0x48000c00
 80016c0:	48001000 	.word	0x48001000
 80016c4:	48001400 	.word	0x48001400
 80016c8:	48001800 	.word	0x48001800
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_PWREx_GetVoltageRange+0x18>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40007000 	.word	0x40007000

0800171c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172a:	d130      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001738:	d038      	beq.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001742:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001748:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2232      	movs	r2, #50	; 0x32
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	3301      	adds	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001760:	e002      	b.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3b01      	subs	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001774:	d102      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f2      	bne.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001788:	d110      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e00f      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	d007      	beq.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40007000 	.word	0x40007000
 80017c0:	20000000 	.word	0x20000000
 80017c4:	431bde83 	.word	0x431bde83

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e3d4      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4ba1      	ldr	r3, [pc, #644]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4b9e      	ldr	r3, [pc, #632]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80e4 	beq.w	80019c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_RCC_OscConfig+0x4a>
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	f040 808b 	bne.w	8001920 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 8087 	bne.w	8001920 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001812:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e3ac      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_RCC_OscConfig+0x7c>
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001842:	e005      	b.n	8001850 <HAL_RCC_OscConfig+0x88>
 8001844:	4b86      	ldr	r3, [pc, #536]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001850:	4293      	cmp	r3, r2
 8001852:	d223      	bcs.n	800189c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fd73 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e38d      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001868:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7c      	ldr	r2, [pc, #496]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4977      	ldr	r1, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4972      	ldr	r1, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e025      	b.n	80018e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6f      	ldr	r2, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b6d      	ldr	r3, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	496a      	ldr	r1, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ba:	4b69      	ldr	r3, [pc, #420]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4965      	ldr	r1, [pc, #404]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fd33 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e34d      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018e8:	f000 fc36 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	495a      	ldr	r1, [pc, #360]	; (8001a64 <HAL_RCC_OscConfig+0x29c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x2a0>)
 8001906:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fff1 	bl	80008f4 <HAL_InitTick>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d052      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	e331      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d032      	beq.n	800198e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001934:	f7ff f908 	bl	8000b48 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193c:	f7ff f904 	bl	8000b48 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e31a      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	493b      	ldr	r1, [pc, #236]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e01a      	b.n	80019c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800199a:	f7ff f8d5 	bl	8000b48 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a2:	f7ff f8d1 	bl	8000b48 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e2e7      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1da>
 80019c0:	e000      	b.n	80019c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d074      	beq.n	8001aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x21a>
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d10e      	bne.n	80019fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d064      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2f0>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d160      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e2c4      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x24a>
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e01d      	b.n	8001a4e <HAL_RCC_OscConfig+0x286>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x26e>
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x286>
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x298>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f877 	bl	8000b48 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5c:	e011      	b.n	8001a82 <HAL_RCC_OscConfig+0x2ba>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	0800d4e4 	.word	0x0800d4e4
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff f86a 	bl	8000b48 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e280      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a82:	4baf      	ldr	r3, [pc, #700]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2a8>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f85a 	bl	8000b48 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f856 	bl	8000b48 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e26c      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aaa:	4ba5      	ldr	r3, [pc, #660]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2d0>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d060      	beq.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x310>
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d116      	bne.n	8001b06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad8:	4b99      	ldr	r3, [pc, #612]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x328>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e249      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b93      	ldr	r3, [pc, #588]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	4990      	ldr	r1, [pc, #576]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b04:	e040      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d023      	beq.n	8001b56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0e:	4b8c      	ldr	r3, [pc, #560]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a8b      	ldr	r2, [pc, #556]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f815 	bl	8000b48 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff f811 	bl	8000b48 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e227      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b34:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b7f      	ldr	r3, [pc, #508]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	497c      	ldr	r1, [pc, #496]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
 8001b54:	e018      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b7a      	ldr	r3, [pc, #488]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a79      	ldr	r2, [pc, #484]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7fe fff1 	bl	8000b48 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7fe ffed 	bl	8000b48 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e203      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b7c:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9c:	4b68      	ldr	r3, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7fe ffcc 	bl	8000b48 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7fe ffc8 	bl	8000b48 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1de      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc6:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0ef      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x3ec>
 8001bd4:	e01b      	b.n	8001c0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bdc:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7fe ffaf 	bl	8000b48 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bee:	f7fe ffab 	bl	8000b48 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1c1      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ef      	bne.n	8001bee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80a6 	beq.w	8001d68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a43      	ldr	r2, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
 8001c38:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c44:	2301      	movs	r3, #1
 8001c46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c48:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_RCC_OscConfig+0x57c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d118      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3a      	ldr	r2, [pc, #232]	; (8001d44 <HAL_RCC_OscConfig+0x57c>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c60:	f7fe ff72 	bl	8000b48 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c68:	f7fe ff6e 	bl	8000b48 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e184      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_RCC_OscConfig+0x57c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4d8>
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c94:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c9e:	e024      	b.n	8001cea <HAL_RCC_OscConfig+0x522>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d110      	bne.n	8001cca <HAL_RCC_OscConfig+0x502>
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc8:	e00f      	b.n	8001cea <HAL_RCC_OscConfig+0x522>
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7fe ff29 	bl	8000b48 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe ff25 	bl	8000b48 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e139      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x578>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ed      	beq.n	8001cfa <HAL_RCC_OscConfig+0x532>
 8001d1e:	e01a      	b.n	8001d56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7fe ff12 	bl	8000b48 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe ff0e 	bl	8000b48 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d906      	bls.n	8001d48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e122      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e8      	bne.n	8001d28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d56:	7ffb      	ldrb	r3, [r7, #31]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b8b      	ldr	r3, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	4a8a      	ldr	r2, [pc, #552]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8108 	beq.w	8001f82 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	f040 80d0 	bne.w	8001f1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d130      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d127      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d11f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dbc:	2a07      	cmp	r2, #7
 8001dbe:	bf14      	ite	ne
 8001dc0:	2201      	movne	r2, #1
 8001dc2:	2200      	moveq	r2, #0
 8001dc4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d113      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d06e      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d069      	beq.n	8001ecc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001df8:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e04:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b7      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e14:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e20:	f7fe fe92 	bl	8000b48 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fe8e 	bl	8000b48 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0a4      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_RCC_OscConfig+0x7c8>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e56:	3a01      	subs	r2, #1
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e60:	0212      	lsls	r2, r2, #8
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e68:	0852      	lsrs	r2, r2, #1
 8001e6a:	3a01      	subs	r2, #1
 8001e6c:	0552      	lsls	r2, r2, #21
 8001e6e:	4311      	orrs	r1, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e74:	0852      	lsrs	r2, r2, #1
 8001e76:	3a01      	subs	r2, #1
 8001e78:	0652      	lsls	r2, r2, #25
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e80:	0912      	lsrs	r2, r2, #4
 8001e82:	0452      	lsls	r2, r2, #17
 8001e84:	430a      	orrs	r2, r1
 8001e86:	4941      	ldr	r1, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea4:	f7fe fe50 	bl	8000b48 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe fe4c 	bl	8000b48 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e062      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eca:	e05a      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e059      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d152      	bne.n	8001f82 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef4:	f7fe fe28 	bl	8000b48 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fe24 	bl	8000b48 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e03a      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x734>
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d02d      	beq.n	8001f7e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f40:	f023 0303 	bic.w	r3, r3, #3
 8001f44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe fdf7 	bl	8000b48 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fdf3 	bl	8000b48 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e009      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x796>
 8001f7c:	e001      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	f99d808c 	.word	0xf99d808c

08001f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0c8      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d910      	bls.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4961      	ldr	r1, [pc, #388]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0b0      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d04c      	beq.n	800207e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fec:	4b56      	ldr	r3, [pc, #344]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d121      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e09e      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002004:	4b50      	ldr	r3, [pc, #320]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d115      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e092      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e086      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07e      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 0203 	bic.w	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	493f      	ldr	r1, [pc, #252]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204e:	f7fe fd7b 	bl	8000b48 <HAL_GetTick>
 8002052:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	e00a      	b.n	800206c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002056:	f7fe fd77 	bl	8000b48 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e066      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 020c 	and.w	r2, r3, #12
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	429a      	cmp	r2, r3
 800207c:	d1eb      	bne.n	8002056 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	492c      	ldr	r1, [pc, #176]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d210      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_RCC_ClockConfig+0x1b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e036      	b.n	800213a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4918      	ldr	r1, [pc, #96]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4910      	ldr	r1, [pc, #64]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210a:	f000 f825 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800210e:	4602      	mov	r2, r0
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	490c      	ldr	r1, [pc, #48]	; (800214c <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	5ccb      	ldrb	r3, [r1, r3]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fbe0 	bl	80008f4 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	72fb      	strb	r3, [r7, #11]

  return status;
 8002138:	7afb      	ldrb	r3, [r7, #11]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	0800d4e4 	.word	0x0800d4e4
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x34>
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d121      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d11e      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 800219a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e004      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_RCC_GetSysClockFreq+0x114>)
 80021de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d134      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0xa6>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d003      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0xac>
 80021fc:	e005      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	e005      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_GetSysClockFreq+0x114>)
 8002206:	617b      	str	r3, [r7, #20]
      break;
 8002208:	e002      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	617b      	str	r3, [r7, #20]
      break;
 800220e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	fb02 f203 	mul.w	r2, r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	0e5b      	lsrs	r3, r3, #25
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	3301      	adds	r3, #1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002250:	69bb      	ldr	r3, [r7, #24]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	0800d4fc 	.word	0x0800d4fc
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCC_GetHCLKFreq+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000

08002288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800228c:	f7ff fff0 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	0800d4f4 	.word	0x0800d4f4

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b8:	f7ff ffda 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0adb      	lsrs	r3, r3, #11
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4904      	ldr	r1, [pc, #16]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	0800d4f4 	.word	0x0800d4f4

080022e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	220f      	movs	r2, #15
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_GetClockConfig+0x5c>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCC_GetClockConfig+0x60>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40022000 	.word	0x40022000

08002344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800235c:	f7ff f9d0 	bl	8001700 <HAL_PWREx_GetVoltageRange>
 8002360:	6178      	str	r0, [r7, #20]
 8002362:	e014      	b.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f9c0 	bl	8001700 <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d10b      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d919      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2ba0      	cmp	r3, #160	; 0xa0
 80023a0:	d902      	bls.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a2:	2302      	movs	r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e013      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e010      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d902      	bls.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b4:	2303      	movs	r3, #3
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e00a      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d102      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e004      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d101      	bne.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 0207 	bic.w	r2, r3, #7
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800240c:	2300      	movs	r3, #0
 800240e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002410:	2300      	movs	r3, #0
 8002412:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241c:	2b00      	cmp	r3, #0
 800241e:	d041      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002424:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002428:	d02a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800242a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800242e:	d824      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002430:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002434:	d008      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800243a:	d81e      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002444:	d010      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002446:	e018      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002448:	4b86      	ldr	r3, [pc, #536]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a85      	ldr	r2, [pc, #532]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002454:	e015      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3304      	adds	r3, #4
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f001 f825 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002466:	e00c      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3320      	adds	r3, #32
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f910 	bl	8003694 <RCCEx_PLLSAI2_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002478:	e003      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	74fb      	strb	r3, [r7, #19]
      break;
 800247e:	e000      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002488:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002496:	4973      	ldr	r1, [pc, #460]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800249e:	e001      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d041      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024b8:	d02a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024be:	d824      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c4:	d008      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ca:	d81e      	bhi.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d010      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024d6:	e018      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024d8:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a61      	ldr	r2, [pc, #388]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e4:	e015      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 ffdd 	bl	80034ac <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024f6:	e00c      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3320      	adds	r3, #32
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 f8c8 	bl	8003694 <RCCEx_PLLSAI2_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002508:	e003      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	74fb      	strb	r3, [r7, #19]
      break;
 800250e:	e000      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002518:	4b52      	ldr	r3, [pc, #328]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002526:	494f      	ldr	r1, [pc, #316]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800252e:	e001      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	; 0x58
 8002568:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002574:	2301      	movs	r3, #1
 8002576:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002584:	f7fe fae0 	bl	8000b48 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800258a:	e009      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe fadc 	bl	8000b48 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d902      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	74fb      	strb	r3, [r7, #19]
        break;
 800259e:	e005      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a0:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ef      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d15c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01f      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d019      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fa9b 	bl	8000b48 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002614:	e00b      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fa97 	bl	8000b48 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d902      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	74fb      	strb	r3, [r7, #19]
            break;
 800262c:	e006      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ec      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002652:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800265a:	e009      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
 8002660:	e006      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7c7b      	ldrb	r3, [r7, #17]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b9e      	ldr	r3, [pc, #632]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a9d      	ldr	r2, [pc, #628]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800268e:	4b98      	ldr	r3, [pc, #608]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f023 0203 	bic.w	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	4994      	ldr	r1, [pc, #592]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b0:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 020c 	bic.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	498c      	ldr	r1, [pc, #560]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026d2:	4b87      	ldr	r3, [pc, #540]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4983      	ldr	r1, [pc, #524]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f4:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	497b      	ldr	r1, [pc, #492]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	4972      	ldr	r1, [pc, #456]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002738:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	496a      	ldr	r1, [pc, #424]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	4961      	ldr	r1, [pc, #388]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800277c:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	4959      	ldr	r1, [pc, #356]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ac:	4950      	ldr	r1, [pc, #320]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	4948      	ldr	r1, [pc, #288]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	493f      	ldr	r1, [pc, #252]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d028      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	4937      	ldr	r1, [pc, #220]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002822:	d106      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a31      	ldr	r2, [pc, #196]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282e:	60d3      	str	r3, [r2, #12]
 8002830:	e011      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800283a:	d10c      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fe32 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d028      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	491f      	ldr	r1, [pc, #124]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002880:	d106      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288c:	60d3      	str	r3, [r2, #12]
 800288e:	e011      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fe03 	bl	80034ac <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02b      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028de:	d109      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a02      	ldr	r2, [pc, #8]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e014      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fdd1 	bl	80034ac <RCCEx_PLLSAI1_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02f      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	4928      	ldr	r1, [pc, #160]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002942:	d10d      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fdae 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	74bb      	strb	r3, [r7, #18]
 800295e:	e011      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002968:	d10c      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3320      	adds	r3, #32
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fe8f 	bl	8003694 <RCCEx_PLLSAI2_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029c2:	4904      	ldr	r1, [pc, #16]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ea:	d13e      	bne.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80029ec:	4bbe      	ldr	r3, [pc, #760]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fe:	d028      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a06:	f200 853e 	bhi.w	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d005      	beq.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d00e      	beq.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002a1a:	f000 bd34 	b.w	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a1e:	4bb2      	ldr	r3, [pc, #712]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	f040 852e 	bne.w	800348a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 8002a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a32:	61fb      	str	r3, [r7, #28]
      break;
 8002a34:	f000 bd29 	b.w	800348a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a38:	4bab      	ldr	r3, [pc, #684]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 8523 	bne.w	800348e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002a48:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002a4c:	61fb      	str	r3, [r7, #28]
      break;
 8002a4e:	f000 bd1e 	b.w	800348e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a52:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a5e:	f040 8518 	bne.w	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 8002a62:	4ba2      	ldr	r3, [pc, #648]	; (8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002a64:	61fb      	str	r3, [r7, #28]
      break;
 8002a66:	f000 bd14 	b.w	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6a:	4b9f      	ldr	r3, [pc, #636]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d840      	bhi.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d003      	beq.n	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d020      	beq.n	8002ace <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002a8c:	e039      	b.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002a8e:	4b96      	ldr	r3, [pc, #600]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002a9a:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002aa6:	4b90      	ldr	r3, [pc, #576]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	e005      	b.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002ab2:	4b8d      	ldr	r3, [pc, #564]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a8c      	ldr	r2, [pc, #560]	; (8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ac6:	e01f      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
      break;
 8002acc:	e01c      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ace:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002adc:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002ade:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ae0:	e012      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
      break;
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ae8:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002af4:	d102      	bne.n	8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002af6:	4b80      	ldr	r3, [pc, #512]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002af8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
      break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
      break;
 8002b06:	bf00      	nop
    }

    switch(PeriphClk)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b0e:	f000 80d2 	beq.w	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b18:	f200 84bd 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b22:	f000 80c8 	beq.w	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b2c:	f200 84b3 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	f000 835b 	beq.w	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	f200 84a9 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4a:	f000 847f 	beq.w	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b54:	f200 849f 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5e:	f000 82ce 	beq.w	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b68:	f200 8495 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b72:	f000 80a0 	beq.w	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7c:	f200 848b 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	f000 808f 	beq.w	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	f200 8481 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9a:	d07e      	beq.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba2:	f200 8478 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	f000 8404 	beq.w	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	f200 846e 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	f000 83b0 	beq.w	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bca:	f200 8464 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	f000 837a 	beq.w	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	f200 845a 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	f000 8345 	beq.w	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	f200 8452 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d84b      	bhi.n	8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 844b 	beq.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	2b1f      	cmp	r3, #31
 8002c06:	f200 8446 	bhi.w	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002c0a:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002dfb 	.word	0x08002dfb
 8002c14:	08002e6b 	.word	0x08002e6b
 8002c18:	08003497 	.word	0x08003497
 8002c1c:	08002eff 	.word	0x08002eff
 8002c20:	08003497 	.word	0x08003497
 8002c24:	08003497 	.word	0x08003497
 8002c28:	08003497 	.word	0x08003497
 8002c2c:	08002f77 	.word	0x08002f77
 8002c30:	08003497 	.word	0x08003497
 8002c34:	08003497 	.word	0x08003497
 8002c38:	08003497 	.word	0x08003497
 8002c3c:	08003497 	.word	0x08003497
 8002c40:	08003497 	.word	0x08003497
 8002c44:	08003497 	.word	0x08003497
 8002c48:	08003497 	.word	0x08003497
 8002c4c:	08002ffb 	.word	0x08002ffb
 8002c50:	08003497 	.word	0x08003497
 8002c54:	08003497 	.word	0x08003497
 8002c58:	08003497 	.word	0x08003497
 8002c5c:	08003497 	.word	0x08003497
 8002c60:	08003497 	.word	0x08003497
 8002c64:	08003497 	.word	0x08003497
 8002c68:	08003497 	.word	0x08003497
 8002c6c:	08003497 	.word	0x08003497
 8002c70:	08003497 	.word	0x08003497
 8002c74:	08003497 	.word	0x08003497
 8002c78:	08003497 	.word	0x08003497
 8002c7c:	08003497 	.word	0x08003497
 8002c80:	08003497 	.word	0x08003497
 8002c84:	08003497 	.word	0x08003497
 8002c88:	08003497 	.word	0x08003497
 8002c8c:	0800307d 	.word	0x0800307d
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	f000 82bd 	beq.w	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002c98:	e3fd      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ca0:	f000 fdd6 	bl	8003850 <RCCEx_GetSAIxPeriphCLKFreq>
 8002ca4:	61f8      	str	r0, [r7, #28]
      break;
 8002ca6:	e3f7      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cae:	f000 fdcf 	bl	8003850 <RCCEx_GetSAIxPeriphCLKFreq>
 8002cb2:	61f8      	str	r0, [r7, #28]
      break;
 8002cb4:	e3f0      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cc8:	d018      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cd0:	f200 808b 	bhi.w	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cda:	d059      	beq.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce2:	d028      	beq.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8002ce4:	e081      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	0003d090 	.word	0x0003d090
 8002cf0:	0800d4fc 	.word	0x0800d4fc
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002cfc:	4bae      	ldr	r3, [pc, #696]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d172      	bne.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002d08:	4bab      	ldr	r3, [pc, #684]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002d14:	4ba8      	ldr	r3, [pc, #672]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	e005      	b.n	8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d20:	4ba5      	ldr	r3, [pc, #660]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	4aa3      	ldr	r2, [pc, #652]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61fb      	str	r3, [r7, #28]
          break;
 8002d34:	e05b      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002d36:	4ba0      	ldr	r3, [pc, #640]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d42:	d156      	bne.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002d44:	4b9c      	ldr	r3, [pc, #624]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d50:	d14f      	bne.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002d52:	4b99      	ldr	r3, [pc, #612]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	fb02 f203 	mul.w	r2, r2, r3
 8002d66:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	3301      	adds	r3, #1
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002d78:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0d5b      	lsrs	r3, r3, #21
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	61fb      	str	r3, [r7, #28]
          break;
 8002d8e:	e030      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002d90:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d12b      	bne.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002d9e:	4b86      	ldr	r3, [pc, #536]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002daa:	d124      	bne.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002dac:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	fb02 f203 	mul.w	r2, r2, r3
 8002dc0:	4b7d      	ldr	r3, [pc, #500]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	3301      	adds	r3, #1
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	0d5b      	lsrs	r3, r3, #21
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	61fb      	str	r3, [r7, #28]
          break;
 8002de8:	e005      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002dea:	bf00      	nop
 8002dec:	e354      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dee:	bf00      	nop
 8002df0:	e352      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002df2:	bf00      	nop
 8002df4:	e350      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002df6:	bf00      	nop
        break;
 8002df8:	e34e      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002dfa:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d828      	bhi.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e2d 	.word	0x08002e2d
 8002e1c:	08002e35 	.word	0x08002e35
 8002e20:	08002e49 	.word	0x08002e49
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7ff fa46 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8002e28:	61f8      	str	r0, [r7, #28]
          break;
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e2c:	f7ff f994 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002e30:	61f8      	str	r0, [r7, #28]
          break;
 8002e32:	e019      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d10f      	bne.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002e42:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002e44:	61fb      	str	r3, [r7, #28]
          break;
 8002e46:	e00c      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e48:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	61fb      	str	r3, [r7, #28]
          break;
 8002e5c:	e003      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002e5e:	bf00      	nop
 8002e60:	e31a      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e62:	bf00      	nop
 8002e64:	e318      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e66:	bf00      	nop
        break;
 8002e68:	e316      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d83a      	bhi.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002ef3 	.word	0x08002ef3
 8002e8c:	08002ef3 	.word	0x08002ef3
 8002e90:	08002ef3 	.word	0x08002ef3
 8002e94:	08002ec1 	.word	0x08002ec1
 8002e98:	08002ef3 	.word	0x08002ef3
 8002e9c:	08002ef3 	.word	0x08002ef3
 8002ea0:	08002ef3 	.word	0x08002ef3
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002ef3 	.word	0x08002ef3
 8002eac:	08002ef3 	.word	0x08002ef3
 8002eb0:	08002ef3 	.word	0x08002ef3
 8002eb4:	08002edd 	.word	0x08002edd
          frequency = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7ff f9e6 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	61f8      	str	r0, [r7, #28]
          break;
 8002ebe:	e01d      	b.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ec0:	f7ff f94a 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002ec4:	61f8      	str	r0, [r7, #28]
          break;
 8002ec6:	e019      	b.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002ed8:	61fb      	str	r3, [r7, #28]
          break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eee:	61fb      	str	r3, [r7, #28]
          break;
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8002ef2:	bf00      	nop
 8002ef4:	e2d0      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ef6:	bf00      	nop
 8002ef8:	e2ce      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002efa:	bf00      	nop
        break;
 8002efc:	e2cc      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002efe:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b30      	cmp	r3, #48	; 0x30
 8002f0e:	d021      	beq.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b30      	cmp	r3, #48	; 0x30
 8002f14:	d829      	bhi.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d011      	beq.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d823      	bhi.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d004      	beq.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002f2e:	e01c      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff f9aa 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8002f34:	61f8      	str	r0, [r7, #28]
          break;
 8002f36:	e01d      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f38:	f7ff f90e 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002f3c:	61f8      	str	r0, [r7, #28]
          break;
 8002f3e:	e019      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4c:	d10f      	bne.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002f50:	61fb      	str	r3, [r7, #28]
          break;
 8002f52:	e00c      	b.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f54:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d107      	bne.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61fb      	str	r3, [r7, #28]
          break;
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002f6a:	bf00      	nop
 8002f6c:	e294      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f6e:	bf00      	nop
 8002f70:	e292      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f72:	bf00      	nop
        break;
 8002f74:	e290      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2bc0      	cmp	r3, #192	; 0xc0
 8002f86:	d027      	beq.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f8c:	d82f      	bhi.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d017      	beq.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b80      	cmp	r3, #128	; 0x80
 8002f98:	d829      	bhi.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d004      	beq.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002fa6:	e022      	b.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff f96e 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8002fac:	61f8      	str	r0, [r7, #28]
          break;
 8002fae:	e023      	b.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002fb0:	f7ff f8d2 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002fb4:	61f8      	str	r0, [r7, #28]
          break;
 8002fb6:	e01f      	b.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	0800d4fc 	.word	0x0800d4fc
 8002fc0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fc4:	4ba9      	ldr	r3, [pc, #676]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8002fd2:	4ba7      	ldr	r3, [pc, #668]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002fd4:	61fb      	str	r3, [r7, #28]
          break;
 8002fd6:	e00c      	b.n	8002ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fd8:	4ba4      	ldr	r3, [pc, #656]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fea:	61fb      	str	r3, [r7, #28]
          break;
 8002fec:	e003      	b.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002fee:	bf00      	nop
 8002ff0:	e252      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ff2:	bf00      	nop
 8002ff4:	e250      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ff6:	bf00      	nop
        break;
 8002ff8:	e24e      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002ffa:	4b9c      	ldr	r3, [pc, #624]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d025      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003014:	d82c      	bhi.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301c:	d013      	beq.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003024:	d824      	bhi.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8003034:	e01c      	b.n	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003036:	f7ff f927 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 800303a:	61f8      	str	r0, [r7, #28]
          break;
 800303c:	e01d      	b.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800303e:	f7ff f88b 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8003042:	61f8      	str	r0, [r7, #28]
          break;
 8003044:	e019      	b.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003046:	4b89      	ldr	r3, [pc, #548]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d10f      	bne.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8003054:	4b86      	ldr	r3, [pc, #536]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8003056:	61fb      	str	r3, [r7, #28]
          break;
 8003058:	e00c      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800305a:	4b84      	ldr	r3, [pc, #528]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d107      	bne.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8003068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306c:	61fb      	str	r3, [r7, #28]
          break;
 800306e:	e003      	b.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8003070:	bf00      	nop
 8003072:	e211      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003074:	bf00      	nop
 8003076:	e20f      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003078:	bf00      	nop
        break;
 800307a:	e20d      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800307c:	4b7b      	ldr	r3, [pc, #492]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308e:	d025      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003096:	d82c      	bhi.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d013      	beq.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a6:	d824      	bhi.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b4:	d004      	beq.n	80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 80030b6:	e01c      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7ff f8e6 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80030bc:	61f8      	str	r0, [r7, #28]
          break;
 80030be:	e01d      	b.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 80030c0:	f7ff f84a 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80030c4:	61f8      	str	r0, [r7, #28]
          break;
 80030c6:	e019      	b.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80030d8:	61fb      	str	r3, [r7, #28]
          break;
 80030da:	e00c      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030dc:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	61fb      	str	r3, [r7, #28]
          break;
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80030f2:	bf00      	nop
 80030f4:	e1d0      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030f6:	bf00      	nop
 80030f8:	e1ce      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030fa:	bf00      	nop
        break;
 80030fc:	e1cc      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003110:	d00c      	beq.n	800312c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003118:	d864      	bhi.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003128:	d030      	beq.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800312a:	e05b      	b.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800312c:	f7ff f814 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8003130:	61f8      	str	r0, [r7, #28]
          break;
 8003132:	e05c      	b.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003134:	4b4d      	ldr	r3, [pc, #308]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003140:	d152      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04c      	beq.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003158:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	fb02 f203 	mul.w	r2, r2, r3
 8003162:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	3301      	adds	r3, #1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	0e5b      	lsrs	r3, r3, #25
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	3301      	adds	r3, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	61fb      	str	r3, [r7, #28]
          break;
 800318a:	e02d      	b.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d128      	bne.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d022      	beq.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	fb02 f203 	mul.w	r2, r2, r3
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	3301      	adds	r3, #1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	0e5b      	lsrs	r3, r3, #25
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	61fb      	str	r3, [r7, #28]
          break;
 80031e2:	e003      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 80031e4:	bf00      	nop
 80031e6:	e157      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031e8:	bf00      	nop
 80031ea:	e155      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031ec:	bf00      	nop
        break;
 80031ee:	e153      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031fa:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003202:	f7ff f857 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 8003206:	61f8      	str	r0, [r7, #28]
        break;
 8003208:	e146      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 800320a:	f7fe ffa5 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800320e:	61f8      	str	r0, [r7, #28]
        break;
 8003210:	e142      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003224:	d013      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322c:	d819      	bhi.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323a:	d004      	beq.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800323c:	e011      	b.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800323e:	f7ff f823 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003242:	61f8      	str	r0, [r7, #28]
          break;
 8003244:	e010      	b.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8003246:	f7fe ff87 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 800324a:	61f8      	str	r0, [r7, #28]
          break;
 800324c:	e00c      	b.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d104      	bne.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800325e:	61fb      	str	r3, [r7, #28]
          break;
 8003260:	e001      	b.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8003262:	bf00      	nop
 8003264:	e118      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003266:	bf00      	nop
        break;
 8003268:	e116      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003274:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	d013      	beq.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328e:	d819      	bhi.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329c:	d004      	beq.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800329e:	e011      	b.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7fe fff2 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
          break;
 80032a6:	e010      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80032a8:	f7fe ff56 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80032ac:	61f8      	str	r0, [r7, #28]
          break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032b0:	4b7c      	ldr	r3, [pc, #496]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d104      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80032be:	4b7a      	ldr	r3, [pc, #488]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80032c0:	61fb      	str	r3, [r7, #28]
          break;
 80032c2:	e001      	b.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80032c4:	bf00      	nop
 80032c6:	e0e7      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80032c8:	bf00      	nop
        break;
 80032ca:	e0e5      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80032cc:	4b75      	ldr	r3, [pc, #468]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032de:	d013      	beq.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e6:	d819      	bhi.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d004      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 80032f6:	e011      	b.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe ffc6 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80032fc:	61f8      	str	r0, [r7, #28]
          break;
 80032fe:	e010      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003300:	f7fe ff2a 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8003304:	61f8      	str	r0, [r7, #28]
          break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003308:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d104      	bne.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8003316:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003318:	61fb      	str	r3, [r7, #28]
          break;
 800331a:	e001      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 800331c:	bf00      	nop
 800331e:	e0bb      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003320:	bf00      	nop
        break;
 8003322:	e0b9      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003324:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003336:	d02c      	beq.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800333e:	d833      	bhi.n	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003346:	d01a      	beq.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800334e:	d82b      	bhi.n	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800335c:	d004      	beq.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800335e:	e023      	b.n	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003360:	f7fe ff92 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003364:	61f8      	str	r0, [r7, #28]
          break;
 8003366:	e026      	b.n	80033b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003368:	4b4e      	ldr	r3, [pc, #312]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d11a      	bne.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8003376:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800337a:	61fb      	str	r3, [r7, #28]
          break;
 800337c:	e016      	b.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800337e:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	d111      	bne.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800338c:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800338e:	61fb      	str	r3, [r7, #28]
          break;
 8003390:	e00e      	b.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003392:	4b44      	ldr	r3, [pc, #272]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d109      	bne.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 80033a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a4:	61fb      	str	r3, [r7, #28]
          break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80033a8:	bf00      	nop
 80033aa:	e075      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033ac:	bf00      	nop
 80033ae:	e073      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033b0:	bf00      	nop
 80033b2:	e071      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80033b4:	bf00      	nop
        break;
 80033b6:	e06f      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80033b8:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ca:	d02c      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d2:	d833      	bhi.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033da:	d01a      	beq.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e2:	d82b      	bhi.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f0:	d004      	beq.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80033f2:	e023      	b.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe ff48 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80033f8:	61f8      	str	r0, [r7, #28]
          break;
 80033fa:	e026      	b.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80033fc:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d11a      	bne.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800340a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800340e:	61fb      	str	r3, [r7, #28]
          break;
 8003410:	e016      	b.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d111      	bne.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003420:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003422:	61fb      	str	r3, [r7, #28]
          break;
 8003424:	e00e      	b.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d109      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003438:	61fb      	str	r3, [r7, #28]
          break;
 800343a:	e005      	b.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800343c:	bf00      	nop
 800343e:	e02b      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003440:	bf00      	nop
 8003442:	e029      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003444:	bf00      	nop
 8003446:	e027      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003448:	bf00      	nop
        break;
 800344a:	e025      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d004      	beq.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8003466:	e00d      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe ff0e 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 800346c:	61f8      	str	r0, [r7, #28]
          break;
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003480:	61fb      	str	r3, [r7, #28]
          break;
 8003482:	bf00      	nop
        break;
 8003484:	e008      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003486:	bf00      	nop
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800348a:	bf00      	nop
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003496:	bf00      	nop
    }
  }

  return(frequency);
 8003498:	69fb      	ldr	r3, [r7, #28]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	00f42400 	.word	0x00f42400

080034ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d018      	beq.n	80034f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0203 	and.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
       ||
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034de:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
       ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d047      	beq.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e044      	b.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d018      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x86>
 8003500:	2b03      	cmp	r3, #3
 8003502:	d825      	bhi.n	8003550 <RCCEx_PLLSAI1_Config+0xa4>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x62>
 8003508:	2b02      	cmp	r3, #2
 800350a:	d009      	beq.n	8003520 <RCCEx_PLLSAI1_Config+0x74>
 800350c:	e020      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800350e:	4b60      	ldr	r3, [pc, #384]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e01a      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003520:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e013      	b.n	800355a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800354e:	e006      	b.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e004      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	430b      	orrs	r3, r1
 800357c:	4944      	ldr	r1, [pc, #272]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d17d      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003588:	4b41      	ldr	r3, [pc, #260]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a40      	ldr	r2, [pc, #256]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fd fad8 	bl	8000b48 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800359a:	e009      	b.n	80035b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800359c:	f7fd fad4 	bl	8000b48 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	73fb      	strb	r3, [r7, #15]
        break;
 80035ae:	e005      	b.n	80035bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ef      	bne.n	800359c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d160      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d111      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	0211      	lsls	r1, r2, #8
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68d2      	ldr	r2, [r2, #12]
 80035de:	0912      	lsrs	r2, r2, #4
 80035e0:	0452      	lsls	r2, r2, #17
 80035e2:	430a      	orrs	r2, r1
 80035e4:	492a      	ldr	r1, [pc, #168]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]
 80035ea:	e027      	b.n	800363c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d112      	bne.n	8003618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	0211      	lsls	r1, r2, #8
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6912      	ldr	r2, [r2, #16]
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0552      	lsls	r2, r2, #21
 800360e:	430a      	orrs	r2, r1
 8003610:	491f      	ldr	r1, [pc, #124]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	610b      	str	r3, [r1, #16]
 8003616:	e011      	b.n	800363c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	0211      	lsls	r1, r2, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6952      	ldr	r2, [r2, #20]
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	0652      	lsls	r2, r2, #25
 8003634:	430a      	orrs	r2, r1
 8003636:	4916      	ldr	r1, [pc, #88]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a13      	ldr	r2, [pc, #76]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fa7e 	bl	8000b48 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fd fa7a 	bl	8000b48 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
          break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	4904      	ldr	r1, [pc, #16]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000

08003694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a2:	4b6a      	ldr	r3, [pc, #424]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d018      	beq.n	80036e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
       ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036c6:	4b61      	ldr	r3, [pc, #388]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
       ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d047      	beq.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	e044      	b.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d018      	beq.n	800371a <RCCEx_PLLSAI2_Config+0x86>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d825      	bhi.n	8003738 <RCCEx_PLLSAI2_Config+0xa4>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <RCCEx_PLLSAI2_Config+0x62>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d009      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0x74>
 80036f4:	e020      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f6:	4b55      	ldr	r3, [pc, #340]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11d      	bne.n	800373e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003706:	e01a      	b.n	800373e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e013      	b.n	8003742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800371a:	4b4c      	ldr	r3, [pc, #304]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003726:	4b49      	ldr	r3, [pc, #292]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003736:	e006      	b.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e004      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003746:	bf00      	nop
    }

    if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	430b      	orrs	r3, r1
 8003764:	4939      	ldr	r1, [pc, #228]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d167      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a35      	ldr	r2, [pc, #212]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377c:	f7fd f9e4 	bl	8000b48 <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003782:	e009      	b.n	8003798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003784:	f7fd f9e0 	bl	8000b48 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d902      	bls.n	8003798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	73fb      	strb	r3, [r7, #15]
        break;
 8003796:	e005      	b.n	80037a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ef      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d14a      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	0211      	lsls	r1, r2, #8
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	0912      	lsrs	r2, r2, #4
 80037c8:	0452      	lsls	r2, r2, #17
 80037ca:	430a      	orrs	r2, r1
 80037cc:	491f      	ldr	r1, [pc, #124]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	614b      	str	r3, [r1, #20]
 80037d2:	e011      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6912      	ldr	r2, [r2, #16]
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0652      	lsls	r2, r2, #25
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4916      	ldr	r1, [pc, #88]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fd f9a0 	bl	8000b48 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800380a:	e009      	b.n	8003820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800380c:	f7fd f99c 	bl	8000b48 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	73fb      	strb	r3, [r7, #15]
          break;
 800381e:	e005      	b.n	800382c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ef      	beq.n	800380c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386c:	d10c      	bne.n	8003888 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003878:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003880:	d112      	bne.n	80038a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e00f      	b.n	80038a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d10b      	bne.n	80038a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003890:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800389a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a2:	d101      	bne.n	80038a8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80038a6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 80b4 	bne.w	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ba:	d003      	beq.n	80038c4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c2:	d135      	bne.n	8003930 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d0:	f040 80a1 	bne.w	8003a16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80038d4:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 809a 	beq.w	8003a16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	3301      	adds	r3, #1
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80038f6:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003900:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003908:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003914:	2311      	movs	r3, #17
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e001      	b.n	800391e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800391a:	2307      	movs	r3, #7
 800391c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	fb02 f203 	mul.w	r2, r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800392e:	e072      	b.n	8003a16 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d133      	bne.n	800399e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003936:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003942:	d169      	bne.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d063      	beq.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003950:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	3301      	adds	r3, #1
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003982:	2311      	movs	r3, #17
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e001      	b.n	800398c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003988:	2307      	movs	r3, #7
 800398a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	fb02 f203 	mul.w	r2, r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e03c      	b.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a4:	d003      	beq.n	80039ae <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ac:	d134      	bne.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ba:	d12d      	bne.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d027      	beq.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	3301      	adds	r3, #1
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80039fa:	2311      	movs	r3, #17
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e001      	b.n	8003a04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8003a00:	2307      	movs	r3, #7
 8003a02:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	fb02 f203 	mul.w	r2, r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e000      	b.n	8003a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003a16:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003a18:	69fb      	ldr	r3, [r7, #28]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	001fff68 	.word	0x001fff68

08003a30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e022      	b.n	8003a88 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fc fead 	bl	80007b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f814 	bl	8003a90 <HAL_SD_InitCard>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00a      	b.n	8003a88 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b090      	sub	sp, #64	; 0x40
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003aac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ab0:	f7fe ff92 	bl	80029d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e08d      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	09db      	lsrs	r3, r3, #7
 8003ad4:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <HAL_SD_InitCard+0x164>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	3b02      	subs	r3, #2
 8003ade:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681d      	ldr	r5, [r3, #0]
 8003ae4:	466c      	mov	r4, sp
 8003ae6:	f107 0318 	add.w	r3, r7, #24
 8003aea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af8:	4628      	mov	r0, r5
 8003afa:	f001 fb87 	bl	800520c <SDMMC_Init>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003b04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e06d      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fbbc 	bl	80052a2 <SDMMC_PowerState_ON>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003b30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e057      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	3302      	adds	r3, #2
 8003b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_SD_InitCard+0x168>)
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fffc 	bl	8000b60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 ff21 	bl	80049b0 <SD_PowerON>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e02e      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fe42 	bl	8004818 <SD_InitCard>
 8003b94:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e01b      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fc03 	bl	80053c8 <SDMMC_CmdBlockLength>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00f      	beq.n	8003bea <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <HAL_SD_InitCard+0x16c>)
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3730      	adds	r7, #48	; 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf4:	014f8b59 	.word	0x014f8b59
 8003bf8:	00012110 	.word	0x00012110
 8003bfc:	004005ff 	.word	0x004005ff

08003c00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a9      	b.n	8003d7c <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 80a2 	bne.w	8003d7a <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d907      	bls.n	8003c5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e090      	b.n	8003d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a45      	ldr	r2, [pc, #276]	; (8003d84 <HAL_SD_ReadBlocks_DMA+0x184>)
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a44      	ldr	r2, [pc, #272]	; (8003d88 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2200      	movs	r2, #0
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3380      	adds	r3, #128	; 0x80
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	f7fd f9b3 	bl	8001000 <HAL_DMA_Start_IT>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a39      	ldr	r2, [pc, #228]	; (8003d8c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e05d      	b.n	8003d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d002      	beq.n	8003cde <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	025b      	lsls	r3, r3, #9
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ce2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	025b      	lsls	r3, r3, #9
 8003ce8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003cea:	2390      	movs	r3, #144	; 0x90
 8003cec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f107 0210 	add.w	r2, r7, #16
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fb33 	bl	8005370 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d90a      	bls.n	8003d26 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2282      	movs	r2, #130	; 0x82
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fb97 	bl	8005450 <SDMMC_CmdReadMultiBlock>
 8003d22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d24:	e009      	b.n	8003d3a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2281      	movs	r2, #129	; 0x81
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fb6a 	bl	800540c <SDMMC_CmdReadSingleBlock>
 8003d38:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d012      	beq.n	8003d66 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e00a      	b.n	8003d7c <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3730      	adds	r7, #48	; 0x30
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	08004633 	.word	0x08004633
 8003d88:	080046a5 	.word	0x080046a5
 8003d8c:	004005ff 	.word	0x004005ff

08003d90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	; 0x30
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d107      	bne.n	8003db8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0ac      	b.n	8003f12 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 80a5 	bne.w	8003f10 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d907      	bls.n	8003dea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e093      	b.n	8003f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	4a47      	ldr	r2, [pc, #284]	; (8003f1c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	4a46      	ldr	r2, [pc, #280]	; (8003f20 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	025b      	lsls	r3, r3, #9
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d90a      	bls.n	8003e3c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22a0      	movs	r2, #160	; 0xa0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 fb50 	bl	80054d8 <SDMMC_CmdWriteMultiBlock>
 8003e38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e3a:	e009      	b.n	8003e50 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2290      	movs	r2, #144	; 0x90
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fb23 	bl	8005494 <SDMMC_CmdWriteSingleBlock>
 8003e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04a      	b.n	8003f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3380      	adds	r3, #128	; 0x80
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	f7fd f8ae 	bl	8001000 <HAL_DMA_Start_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d012      	beq.n	8003ed0 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e020      	b.n	8003f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	025b      	lsls	r3, r3, #9
 8003eda:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003edc:	2390      	movs	r3, #144	; 0x90
 8003ede:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f107 0210 	add.w	r2, r7, #16
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fa3a 	bl	8005370 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 021a 	orr.w	r2, r2, #26
 8003f0a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	; 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08004609 	.word	0x08004609
 8003f20:	080046a5 	.word	0x080046a5
 8003f24:	004005ff 	.word	0x004005ff

08003f28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_SD_IRQHandler+0x2e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fde4 	bl	8004b1c <SD_Read_IT>
 8003f54:	e155      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 808f 	beq.w	8004084 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003f7e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f82:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d039      	beq.n	8004012 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_SD_IRQHandler+0x8a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d011      	beq.n	8003fd6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fab0 	bl	800551c <SDMMC_CmdStopTransfer>
 8003fbc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f91f 	bl	8004214 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <HAL_SD_IRQHandler+0xda>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fede 	bl	8005dc4 <HAL_SD_RxCpltCallback>
 8004008:	e0fb      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 fed0 	bl	8005db0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8004010:	e0f7      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80f2 	beq.w	8004202 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fa75 	bl	800551c <SDMMC_CmdStopTransfer>
 8004032:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f8e4 	bl	8004214 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f040 80d5 	bne.w	8004202 <HAL_SD_IRQHandler+0x2da>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 80cf 	bne.w	8004202 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0208 	bic.w	r2, r2, #8
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fe97 	bl	8005db0 <HAL_SD_TxCpltCallback>
}
 8004082:	e0be      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_SD_IRQHandler+0x17c>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fd8e 	bl	8004bbe <SD_Write_IT>
 80040a2:	e0ae      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a7 	beq.w	8004202 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	f043 0208 	orr.w	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	f043 0210 	orr.w	r2, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f240 523a 	movw	r2, #1338	; 0x53a
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f9ee 	bl	800551c <SDMMC_CmdStopTransfer>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f855 	bl	8004214 <HAL_SD_ErrorCallback>
}
 800416a:	e04a      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d045      	beq.n	8004202 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_SD_IRQHandler+0x262>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	4a1f      	ldr	r2, [pc, #124]	; (800420c <HAL_SD_IRQHandler+0x2e4>)
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc ffd0 	bl	800113c <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02f      	beq.n	8004202 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fac8 	bl	800473c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041ac:	e029      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_SD_IRQHandler+0x29a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <HAL_SD_IRQHandler+0x2e8>)
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc ffb4 	bl	800113c <HAL_DMA_Abort_IT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fae3 	bl	80047aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041e4:	e00d      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 fdce 	bl	8005d9c <HAL_SD_AbortCallback>
}
 8004200:	e7ff      	b.n	8004202 <HAL_SD_IRQHandler+0x2da>
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	0800473d 	.word	0x0800473d
 8004210:	080047ab 	.word	0x080047ab

08004214 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004236:	0f9b      	lsrs	r3, r3, #30
 8004238:	b2da      	uxtb	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	b2da      	uxtb	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	b2da      	uxtb	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b2da      	uxtb	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427e:	b2da      	uxtb	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004288:	0d1b      	lsrs	r3, r3, #20
 800428a:	b29a      	uxth	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	b2da      	uxtb	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a6:	0bdb      	lsrs	r3, r3, #15
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b8:	0b9b      	lsrs	r3, r3, #14
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042dc:	0b1b      	lsrs	r3, r3, #12
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d163      	bne.n	80043c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fc:	009a      	lsls	r2, r3, #2
 80042fe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004302:	4013      	ands	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004308:	0f92      	lsrs	r2, r2, #30
 800430a:	431a      	orrs	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004314:	0edb      	lsrs	r3, r3, #27
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	b2da      	uxtb	r2, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	0e1b      	lsrs	r3, r3, #24
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	b2da      	uxtb	r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004338:	0d5b      	lsrs	r3, r3, #21
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	b2da      	uxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	0c9b      	lsrs	r3, r3, #18
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	b2da      	uxtb	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435c:	0bdb      	lsrs	r3, r3, #15
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	b2da      	uxtb	r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	7e1b      	ldrb	r3, [r3, #24]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	3302      	adds	r3, #2
 8004380:	2201      	movs	r2, #1
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800438a:	fb02 f203 	mul.w	r2, r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	7a1b      	ldrb	r3, [r3, #8]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	2201      	movs	r2, #1
 800439e:	409a      	lsls	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043ac:	0a52      	lsrs	r2, r2, #9
 80043ae:	fb02 f203 	mul.w	r2, r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
 80043be:	e031      	b.n	8004424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11d      	bne.n	8004404 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043cc:	041b      	lsls	r3, r3, #16
 80043ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	431a      	orrs	r2, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	3301      	adds	r3, #1
 80043e4:	029a      	lsls	r2, r3, #10
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
 8004402:	e00f      	b.n	8004424 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_SD_GetCardCSD+0x344>)
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e09d      	b.n	8004560 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004428:	0b9b      	lsrs	r3, r3, #14
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004442:	b2da      	uxtb	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004452:	b2da      	uxtb	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	0fdb      	lsrs	r3, r3, #31
 800445e:	b2da      	uxtb	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	0f5b      	lsrs	r3, r3, #29
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	b2da      	uxtb	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	b2da      	uxtb	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	0d9b      	lsrs	r3, r3, #22
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	0d5b      	lsrs	r3, r3, #21
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	0bdb      	lsrs	r3, r3, #15
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	0b9b      	lsrs	r3, r3, #14
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	0b5b      	lsrs	r3, r3, #13
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	0b1b      	lsrs	r3, r3, #12
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	b2da      	uxtb	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454e:	b2da      	uxtb	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	004005ff 	.word	0x004005ff

08004570 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa76 	bl	8004acc <SD_SendStatus>
 80045e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	0a5b      	lsrs	r3, r3, #9
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045fe:	693b      	ldr	r3, [r7, #16]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b82      	cmp	r3, #130	; 0x82
 8004646:	d111      	bne.n	800466c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 ff65 	bl	800551c <SDMMC_CmdStopTransfer>
 8004652:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fdd4 	bl	8004214 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0208 	bic.w	r2, r2, #8
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f240 523a 	movw	r2, #1338	; 0x53a
 8004684:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f001 fb95 	bl	8005dc4 <HAL_SD_RxCpltCallback>
#endif
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d002      	beq.n	80046ce <SD_DMAError+0x2a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d12d      	bne.n	800472a <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <SD_DMAError+0x94>)
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80046e4:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff68 	bl	80045c8 <HAL_SD_GetCardState>
 80046f8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d002      	beq.n	8004706 <SD_DMAError+0x62>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b05      	cmp	r3, #5
 8004704:	d10a      	bne.n	800471c <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 ff06 	bl	800551c <SDMMC_CmdStopTransfer>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	431a      	orrs	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff fd72 	bl	8004214 <HAL_SD_ErrorCallback>
#endif
}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	004005ff 	.word	0x004005ff

0800473c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ff37 	bl	80045c8 <HAL_SD_GetCardState>
 800475a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b06      	cmp	r3, #6
 800476e:	d002      	beq.n	8004776 <SD_DMATxAbort+0x3a>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d10a      	bne.n	800478c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fece 	bl	800551c <SDMMC_CmdStopTransfer>
 8004780:	4602      	mov	r2, r0
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	431a      	orrs	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f001 fb01 	bl	8005d9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800479a:	e002      	b.n	80047a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fd39 	bl	8004214 <HAL_SD_ErrorCallback>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff ff00 	bl	80045c8 <HAL_SD_GetCardState>
 80047c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d002      	beq.n	80047e4 <SD_DMARxAbort+0x3a>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d10a      	bne.n	80047fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fe97 	bl	800551c <SDMMC_CmdStopTransfer>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f001 faca 	bl	8005d9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004808:	e002      	b.n	8004810 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fd02 	bl	8004214 <HAL_SD_ErrorCallback>
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b094      	sub	sp, #80	; 0x50
 800481c:	af04      	add	r7, sp, #16
 800481e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004820:	2301      	movs	r3, #1
 8004822:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fd49 	bl	80052c0 <SDMMC_GetPowerState>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004834:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004838:	e0b6      	b.n	80049a8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	2b03      	cmp	r3, #3
 8004840:	d02f      	beq.n	80048a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 ff2f 	bl	80056aa <SDMMC_CmdSendCID>
 800484c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <SD_InitCard+0x40>
    {
      return errorstate;
 8004854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004856:	e0a7      	b.n	80049a8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fd73 	bl	800534a <SDMMC_GetResponse>
 8004864:	4602      	mov	r2, r0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2104      	movs	r1, #4
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fd6a 	bl	800534a <SDMMC_GetResponse>
 8004876:	4602      	mov	r2, r0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2108      	movs	r1, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fd61 	bl	800534a <SDMMC_GetResponse>
 8004888:	4602      	mov	r2, r0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	210c      	movs	r1, #12
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fd58 	bl	800534a <SDMMC_GetResponse>
 800489a:	4602      	mov	r2, r0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d00d      	beq.n	80048c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f107 020e 	add.w	r2, r7, #14
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 ff35 	bl	8005724 <SDMMC_CmdSetRelAdd>
 80048ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	e070      	b.n	80049a8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d036      	beq.n	800493c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048ce:	89fb      	ldrh	r3, [r7, #14]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 feff 	bl	80056e6 <SDMMC_CmdSendCSD>
 80048e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	e059      	b.n	80049a8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd25 	bl	800534a <SDMMC_GetResponse>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2104      	movs	r1, #4
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fd1c 	bl	800534a <SDMMC_GetResponse>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2108      	movs	r1, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fd13 	bl	800534a <SDMMC_GetResponse>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	210c      	movs	r1, #12
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fd0a 	bl	800534a <SDMMC_GetResponse>
 8004936:	4602      	mov	r2, r0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2104      	movs	r1, #4
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd01 	bl	800534a <SDMMC_GetResponse>
 8004948:	4603      	mov	r3, r0
 800494a:	0d1a      	lsrs	r2, r3, #20
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fc66 	bl	8004228 <HAL_SD_GetCardCSD>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004962:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004966:	e01f      	b.n	80049a8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	461a      	mov	r2, r3
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	4608      	mov	r0, r1
 800497a:	f000 fdf1 	bl	8005560 <SDMMC_CmdSelDesel>
 800497e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <SD_InitCard+0x172>
  {
    return errorstate;
 8004986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004988:	e00e      	b.n	80049a8 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681d      	ldr	r5, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	466c      	mov	r4, sp
 8004992:	f103 0210 	add.w	r2, r3, #16
 8004996:	ca07      	ldmia	r2, {r0, r1, r2}
 8004998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800499c:	3304      	adds	r3, #4
 800499e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a0:	4628      	mov	r0, r5
 80049a2:	f000 fc33 	bl	800520c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3740      	adds	r7, #64	; 0x40
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bdb0      	pop	{r4, r5, r7, pc}

080049b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fdec 	bl	80055a6 <SDMMC_CmdGoIdleState>
 80049ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <SD_PowerON+0x2a>
  {
    return errorstate;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	e072      	b.n	8004ac0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fdff 	bl	80055e2 <SDMMC_CmdOperCond>
 80049e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fdd5 	bl	80055a6 <SDMMC_CmdGoIdleState>
 80049fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	e05b      	b.n	8004ac0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d137      	bne.n	8004a86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fdff 	bl	8005620 <SDMMC_CmdAppCommand>
 8004a22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d02d      	beq.n	8004a86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a2e:	e047      	b.n	8004ac0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fdf2 	bl	8005620 <SDMMC_CmdAppCommand>
 8004a3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	e03b      	b.n	8004ac0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	491e      	ldr	r1, [pc, #120]	; (8004ac8 <SD_PowerON+0x118>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fe08 	bl	8005664 <SDMMC_CmdAppOperCommand>
 8004a54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a60:	e02e      	b.n	8004ac0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fc6e 	bl	800534a <SDMMC_GetResponse>
 8004a6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	0fdb      	lsrs	r3, r3, #31
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <SD_PowerON+0xcc>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <SD_PowerON+0xce>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]

    count++;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d802      	bhi.n	8004a96 <SD_PowerON+0xe6>
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0cc      	beq.n	8004a30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d902      	bls.n	8004aa6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aa4:	e00c      	b.n	8004ac0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab6:	e002      	b.n	8004abe <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	c1100000 	.word	0xc1100000

08004acc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004adc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae0:	e018      	b.n	8004b14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 fe39 	bl	8005766 <SDMMC_CmdSendStatus>
 8004af4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	e009      	b.n	8004b14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fc1f 	bl	800534a <SDMMC_GetResponse>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03f      	beq.n	8004bb6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e033      	b.n	8004ba4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb90 	bl	8005266 <SDMMC_ReadFIFO>
 8004b46:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	0e1b      	lsrs	r3, r3, #24
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	d9c8      	bls.n	8004b3c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d043      	beq.n	8004c60 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e037      	b.n	8004c4e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	061a      	lsls	r2, r3, #24
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f107 0208 	add.w	r2, r7, #8
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fb1c 	bl	8005280 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b07      	cmp	r3, #7
 8004c52:	d9c4      	bls.n	8004bde <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e049      	b.n	8004d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f841 	bl	8004d16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 f9f8 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e04f      	b.n	8004de4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d018      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_TIM_Base_Start_IT+0x76>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d115      	bne.n	8004dce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d015      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0xb4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d011      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	e008      	b.n	8004de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e000      	b.n	8004de2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	00010007 	.word	0x00010007

08004e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0202 	mvn.w	r2, #2
 8004e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f905 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8f7 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f908 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0204 	mvn.w	r2, #4
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8db 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8cd 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8de 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0208 	mvn.w	r2, #8
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8b1 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f8a3 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8b4 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f887 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f879 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f88a 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0201 	mvn.w	r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fb fab8 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f914 	bl	80051e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d10e      	bne.n	8004fea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d107      	bne.n	8004fea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f907 	bl	80051f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d10e      	bne.n	8005016 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d107      	bne.n	8005016 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800500e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f838 	bl	8005086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0220 	mvn.w	r2, #32
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8c7 	bl	80051d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <TIM_Base_SetConfig+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3a      	ldr	r2, [pc, #232]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d01b      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d017      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00f      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00b      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800520c:	b084      	sub	sp, #16
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	f107 001c 	add.w	r0, r7, #28
 800521a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800522a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800522e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005232:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005236:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800523a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800524a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	b004      	add	sp, #16
 8005264:	4770      	bx	lr

08005266 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005274:	4618      	mov	r0, r3
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80052b0:	2002      	movs	r0, #2
 80052b2:	f7fb fc55 	bl	8000b60 <HAL_Delay>

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0303 	and.w	r3, r3, #3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005300:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005306:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	b2db      	uxtb	r3, r3
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3314      	adds	r3, #20
 8005358:	461a      	mov	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005396:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800539c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0

}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053d6:	2310      	movs	r3, #16
 80053d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053da:	2340      	movs	r3, #64	; 0x40
 80053dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff ff74 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80053f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f8:	2110      	movs	r1, #16
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9d6 	bl	80057ac <SDMMC_GetCmdResp1>
 8005400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005402:	69fb      	ldr	r3, [r7, #28]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800541a:	2311      	movs	r3, #17
 800541c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff ff52 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	2111      	movs	r1, #17
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9b4 	bl	80057ac <SDMMC_GetCmdResp1>
 8005444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005446:	69fb      	ldr	r3, [r7, #28]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800545e:	2312      	movs	r3, #18
 8005460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800546a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005470:	f107 0308 	add.w	r3, r7, #8
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff30 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	2112      	movs	r1, #18
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f992 	bl	80057ac <SDMMC_GetCmdResp1>
 8005488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800548a:	69fb      	ldr	r3, [r7, #28]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80054a2:	2318      	movs	r3, #24
 80054a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff ff0e 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	2118      	movs	r1, #24
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f970 	bl	80057ac <SDMMC_GetCmdResp1>
 80054cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ce:	69fb      	ldr	r3, [r7, #28]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80054e6:	2319      	movs	r3, #25
 80054e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff feec 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005504:	f241 3288 	movw	r2, #5000	; 0x1388
 8005508:	2119      	movs	r1, #25
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f94e 	bl	80057ac <SDMMC_GetCmdResp1>
 8005510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005512:	69fb      	ldr	r3, [r7, #28]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005528:	230c      	movs	r3, #12
 800552a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800552c:	2340      	movs	r3, #64	; 0x40
 800552e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005538:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fecb 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005546:	4a05      	ldr	r2, [pc, #20]	; (800555c <SDMMC_CmdStopTransfer+0x40>)
 8005548:	210c      	movs	r1, #12
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f92e 	bl	80057ac <SDMMC_GetCmdResp1>
 8005550:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8005552:	69fb      	ldr	r3, [r7, #28]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	05f5e100 	.word	0x05f5e100

08005560 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005570:	2307      	movs	r3, #7
 8005572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005574:	2340      	movs	r3, #64	; 0x40
 8005576:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800557c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005580:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	4619      	mov	r1, r3
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fea7 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	2107      	movs	r1, #7
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f909 	bl	80057ac <SDMMC_GetCmdResp1>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b088      	sub	sp, #32
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055c4:	f107 0308 	add.w	r3, r7, #8
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe86 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fb23 	bl	8005c1c <SDMMC_GetCmdError>
 80055d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055d8:	69fb      	ldr	r3, [r7, #28]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b088      	sub	sp, #32
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80055ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80055ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80055f0:	2308      	movs	r3, #8
 80055f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005602:	f107 0308 	add.w	r3, r7, #8
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fe67 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fab6 	bl	8005b80 <SDMMC_GetCmdResp7>
 8005614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005616:	69fb      	ldr	r3, [r7, #28]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800562e:	2337      	movs	r3, #55	; 0x37
 8005630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800563a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005640:	f107 0308 	add.w	r3, r7, #8
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe48 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	2137      	movs	r1, #55	; 0x37
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8aa 	bl	80057ac <SDMMC_GetCmdResp1>
 8005658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800565a:	69fb      	ldr	r3, [r7, #28]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005678:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800567a:	2329      	movs	r3, #41	; 0x29
 800567c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800567e:	2340      	movs	r3, #64	; 0x40
 8005680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800568a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fe22 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9bd 	bl	8005a18 <SDMMC_GetCmdResp3>
 800569e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056a0:	69fb      	ldr	r3, [r7, #28]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b088      	sub	sp, #32
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80056b6:	2302      	movs	r3, #2
 80056b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056ba:	23c0      	movs	r3, #192	; 0xc0
 80056bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fe04 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f957 	bl	8005988 <SDMMC_GetCmdResp2>
 80056da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056dc:	69fb      	ldr	r3, [r7, #28]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b088      	sub	sp, #32
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80056f4:	2309      	movs	r3, #9
 80056f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056f8:	23c0      	movs	r3, #192	; 0xc0
 80056fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005706:	f107 0308 	add.w	r3, r7, #8
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fde5 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f938 	bl	8005988 <SDMMC_GetCmdResp2>
 8005718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005732:	2303      	movs	r3, #3
 8005734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800573e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005744:	f107 0308 	add.w	r3, r7, #8
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fdc6 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	2103      	movs	r1, #3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f99d 	bl	8005a94 <SDMMC_GetCmdResp6>
 800575a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800575c:	69fb      	ldr	r3, [r7, #28]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005774:	230d      	movs	r3, #13
 8005776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fda5 	bl	80052dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005792:	f241 3288 	movw	r2, #5000	; 0x1388
 8005796:	210d      	movs	r1, #13
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f807 	bl	80057ac <SDMMC_GetCmdResp1>
 800579e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057a0:	69fb      	ldr	r3, [r7, #28]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	460b      	mov	r3, r1
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057ba:	4b70      	ldr	r3, [pc, #448]	; (800597c <SDMMC_GetCmdResp1+0x1d0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a70      	ldr	r2, [pc, #448]	; (8005980 <SDMMC_GetCmdResp1+0x1d4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	0a5a      	lsrs	r2, r3, #9
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	61fa      	str	r2, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057dc:	e0c9      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0ef      	beq.n	80057ce <SDMMC_GetCmdResp1+0x22>
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ea      	bne.n	80057ce <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2204      	movs	r2, #4
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800580a:	2304      	movs	r3, #4
 800580c:	e0b1      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005820:	2301      	movs	r3, #1
 8005822:	e0a6      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	22c5      	movs	r2, #197	; 0xc5
 8005828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fd80 	bl	8005330 <SDMMC_GetCommandResponse>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	4293      	cmp	r3, r2
 8005838:	d001      	beq.n	800583e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800583a:	2301      	movs	r3, #1
 800583c:	e099      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800583e:	2100      	movs	r1, #0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fd82 	bl	800534a <SDMMC_GetResponse>
 8005846:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4b4e      	ldr	r3, [pc, #312]	; (8005984 <SDMMC_GetCmdResp1+0x1d8>)
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005852:	2300      	movs	r3, #0
 8005854:	e08d      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	da02      	bge.n	8005862 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800585c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005860:	e087      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	e080      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	e079      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588c:	e071      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800589c:	e069      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80058a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ac:	e061      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80058b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058bc:	e059      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058cc:	e051      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058dc:	e049      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058ec:	e041      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80058f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fc:	e039      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800590c:	e031      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800591c:	e029      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005928:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800592c:	e021      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005938:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800593c:	e019      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800594c:	e011      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005958:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800595c:	e009      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005968:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800596c:	e001      	b.n	8005972 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800596e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000000 	.word	0x20000000
 8005980:	10624dd3 	.word	0x10624dd3
 8005984:	fdffe008 	.word	0xfdffe008

08005988 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005990:	4b1f      	ldr	r3, [pc, #124]	; (8005a10 <SDMMC_GetCmdResp2+0x88>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <SDMMC_GetCmdResp2+0x8c>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	0a5b      	lsrs	r3, r3, #9
 800599c:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a0:	fb02 f303 	mul.w	r3, r2, r3
 80059a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	60fa      	str	r2, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059b4:	e026      	b.n	8005a04 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0ef      	beq.n	80059a6 <SDMMC_GetCmdResp2+0x1e>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ea      	bne.n	80059a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059e2:	2304      	movs	r3, #4
 80059e4:	e00e      	b.n	8005a04 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e003      	b.n	8005a04 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	22c5      	movs	r2, #197	; 0xc5
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000000 	.word	0x20000000
 8005a14:	10624dd3 	.word	0x10624dd3

08005a18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a20:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <SDMMC_GetCmdResp3+0x74>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <SDMMC_GetCmdResp3+0x78>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	60fa      	str	r2, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a44:	e01b      	b.n	8005a7e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0ef      	beq.n	8005a36 <SDMMC_GetCmdResp3+0x1e>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ea      	bne.n	8005a36 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2204      	movs	r2, #4
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a72:	2304      	movs	r3, #4
 8005a74:	e003      	b.n	8005a7e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	22c5      	movs	r2, #197	; 0xc5
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000000 	.word	0x20000000
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005aa2:	4b35      	ldr	r3, [pc, #212]	; (8005b78 <SDMMC_GetCmdResp6+0xe4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <SDMMC_GetCmdResp6+0xe8>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	0a5b      	lsrs	r3, r3, #9
 8005aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	1e5a      	subs	r2, r3, #1
 8005abc:	61fa      	str	r2, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac6:	e052      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0ef      	beq.n	8005ab8 <SDMMC_GetCmdResp6+0x24>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1ea      	bne.n	8005ab8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2204      	movs	r2, #4
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005af4:	2304      	movs	r3, #4
 8005af6:	e03a      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e02f      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fc0e 	bl	8005330 <SDMMC_GetCommandResponse>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d001      	beq.n	8005b22 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e025      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	22c5      	movs	r2, #197	; 0xc5
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b28:	2100      	movs	r1, #0
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fc0d 	bl	800534a <SDMMC_GetResponse>
 8005b30:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e011      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b58:	e009      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b68:	e001      	b.n	8005b6e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	10624dd3 	.word	0x10624dd3

08005b80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b88:	4b22      	ldr	r3, [pc, #136]	; (8005c14 <SDMMC_GetCmdResp7+0x94>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <SDMMC_GetCmdResp7+0x98>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0a5b      	lsrs	r3, r3, #9
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1e5a      	subs	r2, r3, #1
 8005ba2:	60fa      	str	r2, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bac:	e02c      	b.n	8005c08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0ef      	beq.n	8005b9e <SDMMC_GetCmdResp7+0x1e>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1ea      	bne.n	8005b9e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bda:	2304      	movs	r3, #4
 8005bdc:	e014      	b.n	8005c08 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e009      	b.n	8005c08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005c06:	2300      	movs	r3, #0

}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000000 	.word	0x20000000
 8005c18:	10624dd3 	.word	0x10624dd3

08005c1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c24:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <SDMMC_GetCmdError+0x50>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <SDMMC_GetCmdError+0x54>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a5b      	lsrs	r3, r3, #9
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
 8005c38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	60fa      	str	r2, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c48:	e009      	b.n	8005c5e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f1      	beq.n	8005c3a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	22c5      	movs	r2, #197	; 0xc5
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	10624dd3 	.word	0x10624dd3

08005c74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c78:	4904      	ldr	r1, [pc, #16]	; (8005c8c <MX_FATFS_Init+0x18>)
 8005c7a:	4805      	ldr	r0, [pc, #20]	; (8005c90 <MX_FATFS_Init+0x1c>)
 8005c7c:	f003 fd66 	bl	800974c <FATFS_LinkDriver>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <MX_FATFS_Init+0x20>)
 8005c86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c88:	bf00      	nop
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20002340 	.word	0x20002340
 8005c90:	0800d52c 	.word	0x0800d52c
 8005c94:	2000233c 	.word	0x2000233c

08005c98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005cb2:	f000 f898 	bl	8005de6 <BSP_SD_IsDetected>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e005      	b.n	8005ccc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005cc0:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <BSP_SD_Init+0x2c>)
 8005cc2:	f7fd feb5 	bl	8003a30 <HAL_SD_Init>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005cca:	79fb      	ldrb	r3, [r7, #7]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200019c0 	.word	0x200019c0

08005cd8 <BSP_SD_ReadBlocks_DMA>:
}

/* USER CODE BEGIN BeforeReadDMABlocksSection */
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmatx = NULL;
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c
  sd_state = SD_DMAConfigRx(&hsd1);
 8005cee:	480a      	ldr	r0, [pc, #40]	; (8005d18 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cf0:	f000 f88c 	bl	8005e0c <SD_DMAConfigRx>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4806      	ldr	r0, [pc, #24]	; (8005d18 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005d00:	f7fd ff7e 	bl	8003c00 <HAL_SD_ReadBlocks_DMA>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <BSP_SD_ReadBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200019c0 	.word	0x200019c0

08005d1c <BSP_SD_WriteBlocks_DMA>:

/* USER CODE BEGIN BeforeWriteDMABlocksSection */
#endif
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmarx = NULL;
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
  sd_state = SD_DMAConfigTx(&hsd1);
 8005d32:	480a      	ldr	r0, [pc, #40]	; (8005d5c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d34:	f000 f8ae 	bl	8005e94 <SD_DMAConfigTx>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	4806      	ldr	r0, [pc, #24]	; (8005d5c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d44:	f7fe f824 	bl	8003d90 <HAL_SD_WriteBlocks_DMA>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <BSP_SD_WriteBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200019c0 	.word	0x200019c0

08005d60 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d64:	4805      	ldr	r0, [pc, #20]	; (8005d7c <BSP_SD_GetCardState+0x1c>)
 8005d66:	f7fe fc2f 	bl	80045c8 <HAL_SD_GetCardState>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200019c0 	.word	0x200019c0

08005d80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4803      	ldr	r0, [pc, #12]	; (8005d98 <BSP_SD_GetCardInfo+0x18>)
 8005d8c:	f7fe fbf0 	bl	8004570 <HAL_SD_GetCardInfo>
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	200019c0 	.word	0x200019c0

08005d9c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005da4:	f000 f818 	bl	8005dd8 <BSP_SD_AbortCallback>
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005db8:	f000 fa38 	bl	800622c <BSP_SD_WriteCpltCallback>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005dcc:	f000 fa40 	bl	8006250 <BSP_SD_ReadCpltCallback>
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0

}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005dec:	2301      	movs	r3, #1
 8005dee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005df0:	f000 f892 	bl	8005f18 <BSP_PlatformIsDetected>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	b2db      	uxtb	r3, r3
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <SD_DMAConfigRx>:
 */
#define SD_DMAx_STREAM DMA2_Channel4
#define SD_DMAx_IRQn DMA2_Channel4_IRQn
//#define SD_DMAx_IRQHandler DMA2_Channel4_IRQHandler
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_rx;
 HAL_StatusTypeDef status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
 /* Configure DMA Rx parameters */
 hdma_rx.Init.Request = DMA_REQUEST_7;
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	605a      	str	r2, [r3, #4]
 hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
 hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	60da      	str	r2, [r3, #12]
 hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	611a      	str	r2, [r3, #16]
 hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e36:	615a      	str	r2, [r3, #20]
 hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e3e:	619a      	str	r2, [r3, #24]
 hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005e46:	621a      	str	r2, [r3, #32]
 hdma_rx.Instance = SD_DMAx_STREAM;
 8005e48:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e4a:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <SD_DMAConfigRx+0x84>)
 8005e4c:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a0e      	ldr	r2, [pc, #56]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_rx);
 8005e5a:	480c      	ldr	r0, [pc, #48]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e5c:	f7fb f930 	bl	80010c0 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_rx);
 8005e60:	480a      	ldr	r0, [pc, #40]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e62:	f7fb f83b 	bl	8000edc <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_rx);
 8005e66:	4809      	ldr	r0, [pc, #36]	; (8005e8c <SD_DMAConfigRx+0x80>)
 8005e68:	f7fa ff80 	bl	8000d6c <HAL_DMA_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005e70:	2200      	movs	r2, #0
 8005e72:	2106      	movs	r1, #6
 8005e74:	203b      	movs	r0, #59	; 0x3b
 8005e76:	f7fa ff4f 	bl	8000d18 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005e7a:	203b      	movs	r0, #59	; 0x3b
 8005e7c:	f7fa ff68 	bl	8000d50 <HAL_NVIC_EnableIRQ>
 return (status);
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000002c 	.word	0x2000002c
 8005e90:	40020444 	.word	0x40020444

08005e94 <SD_DMAConfigTx>:
 * @brief Configure the DMA to transmit data to the SD card
 * @retval
 * HAL_ERROR or HAL_OK
 */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_tx;
 HAL_StatusTypeDef status;
 /* Configure DMA Tx parameters */
 hdma_tx.Init.Request = DMA_REQUEST_7;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	605a      	str	r2, [r3, #4]
 hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	609a      	str	r2, [r3, #8]
 hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ea8:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	60da      	str	r2, [r3, #12]
 hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	611a      	str	r2, [r3, #16]
 hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005eb4:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eba:	615a      	str	r2, [r3, #20]
 hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ebc:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec2:	619a      	str	r2, [r3, #24]
 hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ec6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005eca:	621a      	str	r2, [r3, #32]
 hdma_tx.Instance = SD_DMAx_STREAM;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ece:	4a11      	ldr	r2, [pc, #68]	; (8005f14 <SD_DMAConfigTx+0x80>)
 8005ed0:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ed6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ed8:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_tx);
 8005ede:	480c      	ldr	r0, [pc, #48]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ee0:	f7fb f8ee 	bl	80010c0 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_tx);
 8005ee4:	480a      	ldr	r0, [pc, #40]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005ee6:	f7fa fff9 	bl	8000edc <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_tx);
 8005eea:	4809      	ldr	r0, [pc, #36]	; (8005f10 <SD_DMAConfigTx+0x7c>)
 8005eec:	f7fa ff3e 	bl	8000d6c <HAL_DMA_Init>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]

 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2106      	movs	r1, #6
 8005ef8:	203b      	movs	r0, #59	; 0x3b
 8005efa:	f7fa ff0d 	bl	8000d18 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005efe:	203b      	movs	r0, #59	; 0x3b
 8005f00:	f7fa ff26 	bl	8000d50 <HAL_NVIC_EnableIRQ>
 return (status);
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000074 	.word	0x20000074
 8005f14:	40020444 	.word	0x40020444

08005f18 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f2a:	f7fb fbd1 	bl	80016d0 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005f34:	2300      	movs	r3, #0
 8005f36:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f38:	79fb      	ldrb	r3, [r7, #7]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005f4a:	f003 fdcd 	bl	8009ae8 <osKernelGetTickCount>
 8005f4e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005f50:	e006      	b.n	8005f60 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f52:	f7ff ff05 	bl	8005d60 <BSP_SD_GetCardState>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e009      	b.n	8005f74 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005f60:	f003 fdc2 	bl	8009ae8 <osKernelGetTickCount>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d8f0      	bhi.n	8005f52 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <SD_CheckStatus+0x38>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f8c:	f7ff fee8 	bl	8005d60 <BSP_SD_GetCardState>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <SD_CheckStatus+0x38>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <SD_CheckStatus+0x38>)
 8005fa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005fa6:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <SD_CheckStatus+0x38>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000009 	.word	0x20000009

08005fb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <SD_initialize+0x7c>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005fc8:	f003 fd46 	bl	8009a58 <osKernelGetState>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d129      	bne.n	8006026 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005fd2:	f7ff fe69 	bl	8005ca8 <BSP_SD_Init>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff ffcc 	bl	8005f7c <SD_CheckStatus>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b12      	ldr	r3, [pc, #72]	; (8006034 <SD_initialize+0x7c>)
 8005fea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005fec:	4b11      	ldr	r3, [pc, #68]	; (8006034 <SD_initialize+0x7c>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d017      	beq.n	8006026 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <SD_initialize+0x80>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2102      	movs	r1, #2
 8006002:	200a      	movs	r0, #10
 8006004:	f003 ff76 	bl	8009ef4 <osMessageQueueNew>
 8006008:	4603      	mov	r3, r0
 800600a:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <SD_initialize+0x80>)
 800600c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <SD_initialize+0x80>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <SD_initialize+0x7c>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <SD_initialize+0x7c>)
 8006024:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006026:	4b03      	ldr	r3, [pc, #12]	; (8006034 <SD_initialize+0x7c>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	b2db      	uxtb	r3, r3
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000009 	.word	0x20000009
 8006038:	200000bc 	.word	0x200000bc

0800603c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff97 	bl	8005f7c <SD_CheckStatus>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4603      	mov	r3, r0
 8006066:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800606c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006070:	f7ff ff67 	bl	8005f42 <SD_CheckStatusWithTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	da01      	bge.n	800607e <SD_read+0x26>
  {
    return res;
 800607a:	7ffb      	ldrb	r3, [r7, #31]
 800607c:	e02f      	b.n	80060de <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68b8      	ldr	r0, [r7, #8]
 8006084:	f7ff fe28 	bl	8005cd8 <BSP_SD_ReadBlocks_DMA>
 8006088:	4603      	mov	r3, r0
 800608a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800608c:	7fbb      	ldrb	r3, [r7, #30]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d124      	bne.n	80060dc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <SD_read+0x90>)
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f107 0112 	add.w	r1, r7, #18
 800609a:	f247 5330 	movw	r3, #30000	; 0x7530
 800609e:	2200      	movs	r2, #0
 80060a0:	f003 fffc 	bl	800a09c <osMessageQueueGet>
 80060a4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d117      	bne.n	80060dc <SD_read+0x84>
 80060ac:	8a7b      	ldrh	r3, [r7, #18]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d114      	bne.n	80060dc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80060b2:	f003 fd19 	bl	8009ae8 <osKernelGetTickCount>
 80060b6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060b8:	e007      	b.n	80060ca <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060ba:	f7ff fe51 	bl	8005d60 <BSP_SD_GetCardState>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <SD_read+0x72>
              {
                res = RES_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80060c8:	e008      	b.n	80060dc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060ca:	f003 fd0d 	bl	8009ae8 <osKernelGetTickCount>
 80060ce:	4602      	mov	r2, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80060d8:	4293      	cmp	r3, r2
 80060da:	d9ee      	bls.n	80060ba <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80060dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200000bc 	.word	0x200000bc

080060ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006100:	f247 5030 	movw	r0, #30000	; 0x7530
 8006104:	f7ff ff1d 	bl	8005f42 <SD_CheckStatusWithTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	da01      	bge.n	8006112 <SD_write+0x26>
  {
    return res;
 800610e:	7ffb      	ldrb	r3, [r7, #31]
 8006110:	e02d      	b.n	800616e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	68b8      	ldr	r0, [r7, #8]
 8006118:	f7ff fe00 	bl	8005d1c <BSP_SD_WriteBlocks_DMA>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d124      	bne.n	800616c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <SD_write+0x8c>)
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f107 0112 	add.w	r1, r7, #18
 800612a:	f247 5330 	movw	r3, #30000	; 0x7530
 800612e:	2200      	movs	r2, #0
 8006130:	f003 ffb4 	bl	800a09c <osMessageQueueGet>
 8006134:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d117      	bne.n	800616c <SD_write+0x80>
 800613c:	8a7b      	ldrh	r3, [r7, #18]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d114      	bne.n	800616c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006142:	f003 fcd1 	bl	8009ae8 <osKernelGetTickCount>
 8006146:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006148:	e007      	b.n	800615a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800614a:	f7ff fe09 	bl	8005d60 <BSP_SD_GetCardState>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <SD_write+0x6e>
          {
            res = RES_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	77fb      	strb	r3, [r7, #31]
            break;
 8006158:	e008      	b.n	800616c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800615a:	f003 fcc5 	bl	8009ae8 <osKernelGetTickCount>
 800615e:	4602      	mov	r2, r0
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f247 522f 	movw	r2, #29999	; 0x752f
 8006168:	4293      	cmp	r3, r2
 800616a:	d9ee      	bls.n	800614a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800616c:	7ffb      	ldrb	r3, [r7, #31]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200000bc 	.word	0x200000bc

0800617c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	603a      	str	r2, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]
 8006188:	460b      	mov	r3, r1
 800618a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006192:	4b25      	ldr	r3, [pc, #148]	; (8006228 <SD_ioctl+0xac>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <SD_ioctl+0x28>
 80061a0:	2303      	movs	r3, #3
 80061a2:	e03c      	b.n	800621e <SD_ioctl+0xa2>

  switch (cmd)
 80061a4:	79bb      	ldrb	r3, [r7, #6]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d834      	bhi.n	8006214 <SD_ioctl+0x98>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <SD_ioctl+0x34>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061c1 	.word	0x080061c1
 80061b4:	080061c9 	.word	0x080061c9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061fb 	.word	0x080061fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061c6:	e028      	b.n	800621a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fdd7 	bl	8005d80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061de:	e01c      	b.n	800621a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fdcb 	bl	8005d80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061f8:	e00f      	b.n	800621a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061fa:	f107 030c 	add.w	r3, r7, #12
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fdbe 	bl	8005d80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	0a5a      	lsrs	r2, r3, #9
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006212:	e002      	b.n	800621a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006214:	2304      	movs	r3, #4
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800621a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800621e:	4618      	mov	r0, r3
 8006220:	3730      	adds	r7, #48	; 0x30
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000009 	.word	0x20000009

0800622c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8006232:	2302      	movs	r3, #2
 8006234:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <BSP_SD_WriteCpltCallback+0x20>)
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	1db9      	adds	r1, r7, #6
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	f003 fecc 	bl	8009fdc <osMessageQueuePut>
#endif
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200000bc 	.word	0x200000bc

08006250 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006256:	2301      	movs	r3, #1
 8006258:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <BSP_SD_ReadCpltCallback+0x20>)
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	1db9      	adds	r1, r7, #6
 8006260:	2300      	movs	r3, #0
 8006262:	2200      	movs	r2, #0
 8006264:	f003 feba 	bl	8009fdc <osMessageQueuePut>
#endif
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200000bc 	.word	0x200000bc

08006274 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <disk_status+0x30>)
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	79fa      	ldrb	r2, [r7, #7]
 800628c:	4905      	ldr	r1, [pc, #20]	; (80062a4 <disk_status+0x30>)
 800628e:	440a      	add	r2, r1
 8006290:	7a12      	ldrb	r2, [r2, #8]
 8006292:	4610      	mov	r0, r2
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
  return stat;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200000e8 	.word	0x200000e8

080062a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <disk_initialize+0x48>)
 80062ba:	5cd3      	ldrb	r3, [r2, r3]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d111      	bne.n	80062e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	4a0b      	ldr	r2, [pc, #44]	; (80062f0 <disk_initialize+0x48>)
 80062c4:	2101      	movs	r1, #1
 80062c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <disk_initialize+0x48>)
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	4906      	ldr	r1, [pc, #24]	; (80062f0 <disk_initialize+0x48>)
 80062d8:	440a      	add	r2, r1
 80062da:	7a12      	ldrb	r2, [r2, #8]
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200000e8 	.word	0x200000e8

080062f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <disk_read+0x3c>)
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	689c      	ldr	r4, [r3, #8]
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	4a07      	ldr	r2, [pc, #28]	; (8006330 <disk_read+0x3c>)
 8006314:	4413      	add	r3, r2
 8006316:	7a18      	ldrb	r0, [r3, #8]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	47a0      	blx	r4
 8006320:	4603      	mov	r3, r0
 8006322:	75fb      	strb	r3, [r7, #23]
  return res;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
}
 8006326:	4618      	mov	r0, r3
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	bf00      	nop
 8006330:	200000e8 	.word	0x200000e8

08006334 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <disk_write+0x3c>)
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68dc      	ldr	r4, [r3, #12]
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <disk_write+0x3c>)
 8006354:	4413      	add	r3, r2
 8006356:	7a18      	ldrb	r0, [r3, #8]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	47a0      	blx	r4
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]
  return res;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}
 800636e:	bf00      	nop
 8006370:	200000e8 	.word	0x200000e8

08006374 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	603a      	str	r2, [r7, #0]
 800637e:	71fb      	strb	r3, [r7, #7]
 8006380:	460b      	mov	r3, r1
 8006382:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <disk_ioctl+0x38>)
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	79fa      	ldrb	r2, [r7, #7]
 8006392:	4906      	ldr	r1, [pc, #24]	; (80063ac <disk_ioctl+0x38>)
 8006394:	440a      	add	r2, r1
 8006396:	7a10      	ldrb	r0, [r2, #8]
 8006398:	79b9      	ldrb	r1, [r7, #6]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200000e8 	.word	0x200000e8

080063b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3301      	adds	r3, #1
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063c0:	89fb      	ldrh	r3, [r7, #14]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	b21a      	sxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b21b      	sxth	r3, r3
 80063d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063d2:	89fb      	ldrh	r3, [r7, #14]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3303      	adds	r3, #3
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	3202      	adds	r2, #2
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	3201      	adds	r2, #1
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	return rv;
 8006418:	68fb      	ldr	r3, [r7, #12]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	887b      	ldrh	r3, [r7, #2]
 8006440:	0a1b      	lsrs	r3, r3, #8
 8006442:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	1c53      	adds	r3, r2, #1
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	6179      	str	r1, [r7, #20]
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f1      	bne.n	80064ce <mem_cpy+0x1a>
	}
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	617a      	str	r2, [r7, #20]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3b01      	subs	r3, #1
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f3      	bne.n	8006506 <mem_set+0x10>
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	; 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	61fa      	str	r2, [r7, #28]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	4619      	mov	r1, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	61ba      	str	r2, [r7, #24]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	1acb      	subs	r3, r1, r3
 8006558:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3b01      	subs	r3, #1
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <mem_cmp+0x40>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0eb      	beq.n	8006544 <mem_cmp+0x18>

	return r;
 800656c:	697b      	ldr	r3, [r7, #20]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3724      	adds	r7, #36	; 0x24
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006584:	e002      	b.n	800658c <chk_chr+0x12>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3301      	adds	r3, #1
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <chk_chr+0x26>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	4293      	cmp	r3, r2
 800659e:	d1f2      	bne.n	8006586 <chk_chr+0xc>
	return *str;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	781b      	ldrb	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <lock_fs+0x22>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f003 f9bf 	bl	8009946 <ff_req_grant>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <lock_fs+0x22>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <lock_fs+0x24>
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <unlock_fs+0x2e>
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	2b0c      	cmp	r3, #12
 80065f2:	d00a      	beq.n	800660a <unlock_fs+0x2e>
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	2b0b      	cmp	r3, #11
 80065f8:	d007      	beq.n	800660a <unlock_fs+0x2e>
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2b0f      	cmp	r3, #15
 80065fe:	d004      	beq.n	800660a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	4618      	mov	r0, r3
 8006606:	f003 f9b3 	bl	8009970 <ff_rel_grant>
	}
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e029      	b.n	800667c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006628:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <chk_lock+0xb4>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01d      	beq.n	8006672 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006636:	4a24      	ldr	r2, [pc, #144]	; (80066c8 <chk_lock+0xb4>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	4413      	add	r3, r2
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d116      	bne.n	8006676 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006648:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <chk_lock+0xb4>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006658:	429a      	cmp	r2, r3
 800665a:	d10c      	bne.n	8006676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800665c:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <chk_lock+0xb4>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	3308      	adds	r3, #8
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800666c:	429a      	cmp	r2, r3
 800666e:	d102      	bne.n	8006676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006670:	e007      	b.n	8006682 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d9d2      	bls.n	8006628 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d109      	bne.n	800669c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <chk_lock+0x80>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d101      	bne.n	8006698 <chk_lock+0x84>
 8006694:	2300      	movs	r3, #0
 8006696:	e010      	b.n	80066ba <chk_lock+0xa6>
 8006698:	2312      	movs	r3, #18
 800669a:	e00e      	b.n	80066ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <chk_lock+0xa0>
 80066a2:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <chk_lock+0xb4>)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	4413      	add	r3, r2
 80066aa:	330c      	adds	r3, #12
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d101      	bne.n	80066b8 <chk_lock+0xa4>
 80066b4:	2310      	movs	r3, #16
 80066b6:	e000      	b.n	80066ba <chk_lock+0xa6>
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	200000c8 	.word	0x200000c8

080066cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e002      	b.n	80066de <enq_lock+0x12>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3301      	adds	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d806      	bhi.n	80066f2 <enq_lock+0x26>
 80066e4:	4a09      	ldr	r2, [pc, #36]	; (800670c <enq_lock+0x40>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4413      	add	r3, r2
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f2      	bne.n	80066d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
}
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	200000c8 	.word	0x200000c8

08006710 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e01f      	b.n	8006760 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006720:	4a41      	ldr	r2, [pc, #260]	; (8006828 <inc_lock+0x118>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	4413      	add	r3, r2
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d113      	bne.n	800675a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006732:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <inc_lock+0x118>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	4413      	add	r3, r2
 800673a:	3304      	adds	r3, #4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006742:	429a      	cmp	r2, r3
 8006744:	d109      	bne.n	800675a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006746:	4a38      	ldr	r2, [pc, #224]	; (8006828 <inc_lock+0x118>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4413      	add	r3, r2
 800674e:	3308      	adds	r3, #8
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006756:	429a      	cmp	r2, r3
 8006758:	d006      	beq.n	8006768 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d9dc      	bls.n	8006720 <inc_lock+0x10>
 8006766:	e000      	b.n	800676a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006768:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d132      	bne.n	80067d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <inc_lock+0x6c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d806      	bhi.n	8006790 <inc_lock+0x80>
 8006782:	4a29      	ldr	r2, [pc, #164]	; (8006828 <inc_lock+0x118>)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	4413      	add	r3, r2
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f2      	bne.n	8006776 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d101      	bne.n	800679a <inc_lock+0x8a>
 8006796:	2300      	movs	r3, #0
 8006798:	e040      	b.n	800681c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4922      	ldr	r1, [pc, #136]	; (8006828 <inc_lock+0x118>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	440b      	add	r3, r1
 80067a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	491e      	ldr	r1, [pc, #120]	; (8006828 <inc_lock+0x118>)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	440b      	add	r3, r1
 80067b4:	3304      	adds	r3, #4
 80067b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	491a      	ldr	r1, [pc, #104]	; (8006828 <inc_lock+0x118>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	440b      	add	r3, r1
 80067c4:	3308      	adds	r3, #8
 80067c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <inc_lock+0x118>)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	4413      	add	r3, r2
 80067d0:	330c      	adds	r3, #12
 80067d2:	2200      	movs	r2, #0
 80067d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <inc_lock+0xe0>
 80067dc:	4a12      	ldr	r2, [pc, #72]	; (8006828 <inc_lock+0x118>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	4413      	add	r3, r2
 80067e4:	330c      	adds	r3, #12
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <inc_lock+0xe0>
 80067ec:	2300      	movs	r3, #0
 80067ee:	e015      	b.n	800681c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d108      	bne.n	8006808 <inc_lock+0xf8>
 80067f6:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <inc_lock+0x118>)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	330c      	adds	r3, #12
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	e001      	b.n	800680c <inc_lock+0xfc>
 8006808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800680c:	4906      	ldr	r1, [pc, #24]	; (8006828 <inc_lock+0x118>)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	440b      	add	r3, r1
 8006814:	330c      	adds	r3, #12
 8006816:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	200000c8 	.word	0x200000c8

0800682c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3b01      	subs	r3, #1
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d825      	bhi.n	800688c <dec_lock+0x60>
		n = Files[i].ctr;
 8006840:	4a17      	ldr	r2, [pc, #92]	; (80068a0 <dec_lock+0x74>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	4413      	add	r3, r2
 8006848:	330c      	adds	r3, #12
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006854:	d101      	bne.n	800685a <dec_lock+0x2e>
 8006856:	2300      	movs	r3, #0
 8006858:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <dec_lock+0x3a>
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	3b01      	subs	r3, #1
 8006864:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006866:	4a0e      	ldr	r2, [pc, #56]	; (80068a0 <dec_lock+0x74>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	4413      	add	r3, r2
 800686e:	330c      	adds	r3, #12
 8006870:	89fa      	ldrh	r2, [r7, #14]
 8006872:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <dec_lock+0x5a>
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <dec_lock+0x74>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4413      	add	r3, r2
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	737b      	strb	r3, [r7, #13]
 800688a:	e001      	b.n	8006890 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800688c:	2302      	movs	r3, #2
 800688e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006890:	7b7b      	ldrb	r3, [r7, #13]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	200000c8 	.word	0x200000c8

080068a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e010      	b.n	80068d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80068b2:	4a0d      	ldr	r2, [pc, #52]	; (80068e8 <clear_lock+0x44>)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	4413      	add	r3, r2
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d105      	bne.n	80068ce <clear_lock+0x2a>
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <clear_lock+0x44>)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	4413      	add	r3, r2
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d9eb      	bls.n	80068b2 <clear_lock+0xe>
	}
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200000c8 	.word	0x200000c8

080068ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	78db      	ldrb	r3, [r3, #3]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d034      	beq.n	800696a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7858      	ldrb	r0, [r3, #1]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006910:	2301      	movs	r3, #1
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	f7ff fd0e 	bl	8006334 <disk_write>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <sync_window+0x38>
			res = FR_DISK_ERR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	e022      	b.n	800696a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	1ad2      	subs	r2, r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	429a      	cmp	r2, r3
 8006938:	d217      	bcs.n	800696a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	e010      	b.n	8006964 <sync_window+0x78>
					wsect += fs->fsize;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7858      	ldrb	r0, [r3, #1]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006956:	2301      	movs	r3, #1
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	f7ff fceb 	bl	8006334 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3b01      	subs	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d8eb      	bhi.n	8006942 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d01b      	beq.n	80069c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ffad 	bl	80068ec <sync_window>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	7858      	ldrb	r0, [r3, #1]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069a6:	2301      	movs	r3, #1
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	f7ff fca3 	bl	80062f4 <disk_read>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ff87 	bl	80068ec <sync_window>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d159      	bne.n	8006a9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d149      	bne.n	8006a84 <sync_fs+0xb4>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	791b      	ldrb	r3, [r3, #4]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d145      	bne.n	8006a84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	899b      	ldrh	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	2100      	movs	r1, #0
 8006a06:	f7ff fd76 	bl	80064f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	333c      	adds	r3, #60	; 0x3c
 8006a0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a12:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fd05 	bl	8006426 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	333c      	adds	r3, #60	; 0x3c
 8006a20:	4921      	ldr	r1, [pc, #132]	; (8006aa8 <sync_fs+0xd8>)
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fd1a 	bl	800645c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	333c      	adds	r3, #60	; 0x3c
 8006a2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a30:	491e      	ldr	r1, [pc, #120]	; (8006aac <sync_fs+0xdc>)
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fd12 	bl	800645c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	333c      	adds	r3, #60	; 0x3c
 8006a3c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7ff fd08 	bl	800645c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	333c      	adds	r3, #60	; 0x3c
 8006a50:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7ff fcfe 	bl	800645c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7858      	ldrb	r0, [r3, #1]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f7ff fc5b 	bl	8006334 <disk_write>
			fs->fsi_flag = 0;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fc71 	bl	8006374 <disk_ioctl>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <sync_fs+0xcc>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	41615252 	.word	0x41615252
 8006aac:	61417272 	.word	0x61417272

08006ab0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3b02      	subs	r3, #2
 8006abe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	3b02      	subs	r3, #2
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d301      	bcc.n	8006ad0 <clust2sect+0x20>
 8006acc:	2300      	movs	r3, #0
 8006ace:	e008      	b.n	8006ae2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	895b      	ldrh	r3, [r3, #10]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	fb03 f202 	mul.w	r2, r3, r2
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	4413      	add	r3, r2
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d904      	bls.n	8006b0e <get_fat+0x20>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d302      	bcc.n	8006b14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e0bb      	b.n	8006c8c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	f000 8083 	beq.w	8006c2a <get_fat+0x13c>
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	f300 80a7 	bgt.w	8006c78 <get_fat+0x18a>
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d002      	beq.n	8006b34 <get_fat+0x46>
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d056      	beq.n	8006be0 <get_fat+0xf2>
 8006b32:	e0a1      	b.n	8006c78 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	899b      	ldrh	r3, [r3, #12]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b52:	4413      	add	r3, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f7ff ff0c 	bl	8006974 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 808d 	bne.w	8006c7e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	60fa      	str	r2, [r7, #12]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	8992      	ldrh	r2, [r2, #12]
 8006b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b72:	fb02 f201 	mul.w	r2, r2, r1
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	899b      	ldrh	r3, [r3, #12]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b92:	4413      	add	r3, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	6938      	ldr	r0, [r7, #16]
 8006b98:	f7ff feec 	bl	8006974 <move_window>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d16f      	bne.n	8006c82 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	899b      	ldrh	r3, [r3, #12]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bae:	fb02 f201 	mul.w	r2, r2, r1
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <get_fat+0xe8>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	e002      	b.n	8006bdc <get_fat+0xee>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bdc:	617b      	str	r3, [r7, #20]
			break;
 8006bde:	e055      	b.n	8006c8c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	899b      	ldrh	r3, [r3, #12]
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6938      	ldr	r0, [r7, #16]
 8006bfa:	f7ff febb 	bl	8006974 <move_window>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d140      	bne.n	8006c86 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	8992      	ldrh	r2, [r2, #12]
 8006c12:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c16:	fb02 f200 	mul.w	r2, r2, r0
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fbc6 	bl	80063b0 <ld_word>
 8006c24:	4603      	mov	r3, r0
 8006c26:	617b      	str	r3, [r7, #20]
			break;
 8006c28:	e030      	b.n	8006c8c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	899b      	ldrh	r3, [r3, #12]
 8006c32:	089b      	lsrs	r3, r3, #2
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4619      	mov	r1, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c3e:	4413      	add	r3, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f7ff fe96 	bl	8006974 <move_window>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d11d      	bne.n	8006c8a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	8992      	ldrh	r2, [r2, #12]
 8006c5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c60:	fb02 f200 	mul.w	r2, r2, r0
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	440b      	add	r3, r1
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fbb9 	bl	80063e0 <ld_dword>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c74:	617b      	str	r3, [r7, #20]
			break;
 8006c76:	e009      	b.n	8006c8c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e006      	b.n	8006c8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c8a:	bf00      	nop
		}
	}

	return val;
 8006c8c:	697b      	ldr	r3, [r7, #20]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c96:	b590      	push	{r4, r7, lr}
 8006c98:	b089      	sub	sp, #36	; 0x24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f240 8102 	bls.w	8006eb2 <put_fat+0x21c>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	f080 80fc 	bcs.w	8006eb2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	f000 80b6 	beq.w	8006e30 <put_fat+0x19a>
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	f300 80fd 	bgt.w	8006ec4 <put_fat+0x22e>
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d003      	beq.n	8006cd6 <put_fat+0x40>
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	f000 8083 	beq.w	8006dda <put_fat+0x144>
 8006cd4:	e0f6      	b.n	8006ec4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	899b      	ldrh	r3, [r3, #12]
 8006cec:	4619      	mov	r1, r3
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf4:	4413      	add	r3, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fe3b 	bl	8006974 <move_window>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 80d6 	bne.w	8006eb6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	61ba      	str	r2, [r7, #24]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	8992      	ldrh	r2, [r2, #12]
 8006d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d1e:	fb02 f200 	mul.w	r2, r2, r0
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	440b      	add	r3, r1
 8006d26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00d      	beq.n	8006d4e <put_fat+0xb8>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	b25a      	sxtb	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e001      	b.n	8006d52 <put_fat+0xbc>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	899b      	ldrh	r3, [r3, #12]
 8006d64:	4619      	mov	r1, r3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fdff 	bl	8006974 <move_window>
 8006d76:	4603      	mov	r3, r0
 8006d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d7a:	7ffb      	ldrb	r3, [r7, #31]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 809c 	bne.w	8006eba <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	899b      	ldrh	r3, [r3, #12]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d94:	fb02 f200 	mul.w	r2, r2, r0
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <put_fat+0x11a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e00e      	b.n	8006dce <put_fat+0x138>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	f023 030f 	bic.w	r3, r3, #15
 8006dba:	b25a      	sxtb	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	b25b      	sxtb	r3, r3
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	70da      	strb	r2, [r3, #3]
			break;
 8006dd8:	e074      	b.n	8006ec4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	899b      	ldrh	r3, [r3, #12]
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	4619      	mov	r1, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dee:	4413      	add	r3, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fdbe 	bl	8006974 <move_window>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dfc:	7ffb      	ldrb	r3, [r7, #31]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d15d      	bne.n	8006ebe <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	8992      	ldrh	r2, [r2, #12]
 8006e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e14:	fb02 f200 	mul.w	r2, r2, r0
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	4611      	mov	r1, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff faff 	bl	8006426 <st_word>
			fs->wflag = 1;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	70da      	strb	r2, [r3, #3]
			break;
 8006e2e:	e049      	b.n	8006ec4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	899b      	ldrh	r3, [r3, #12]
 8006e38:	089b      	lsrs	r3, r3, #2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e44:	4413      	add	r3, r2
 8006e46:	4619      	mov	r1, r3
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fd93 	bl	8006974 <move_window>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e52:	7ffb      	ldrb	r3, [r7, #31]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d134      	bne.n	8006ec2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	8992      	ldrh	r2, [r2, #12]
 8006e6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e70:	fb02 f200 	mul.w	r2, r2, r0
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	440b      	add	r3, r1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff fab1 	bl	80063e0 <ld_dword>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e84:	4323      	orrs	r3, r4
 8006e86:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	8992      	ldrh	r2, [r2, #12]
 8006e96:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e9a:	fb02 f200 	mul.w	r2, r2, r0
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff fad9 	bl	800645c <st_dword>
			fs->wflag = 1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	70da      	strb	r2, [r3, #3]
			break;
 8006eb0:	e008      	b.n	8006ec4 <put_fat+0x22e>
		}
	}
 8006eb2:	bf00      	nop
 8006eb4:	e006      	b.n	8006ec4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006eb6:	bf00      	nop
 8006eb8:	e004      	b.n	8006ec4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ec2:	bf00      	nop
	return res;
 8006ec4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3724      	adds	r7, #36	; 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd90      	pop	{r4, r7, pc}

08006ece <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b088      	sub	sp, #32
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d904      	bls.n	8006ef4 <remove_chain+0x26>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d301      	bcc.n	8006ef8 <remove_chain+0x2a>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e04b      	b.n	8006f90 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	69b8      	ldr	r0, [r7, #24]
 8006f06:	f7ff fec6 	bl	8006c96 <put_fat>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <remove_chain+0x4a>
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
 8006f16:	e03b      	b.n	8006f90 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fde7 	bl	8006aee <get_fat>
 8006f20:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d031      	beq.n	8006f8c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <remove_chain+0x64>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e02e      	b.n	8006f90 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f38:	d101      	bne.n	8006f3e <remove_chain+0x70>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e028      	b.n	8006f90 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f3e:	2200      	movs	r2, #0
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	69b8      	ldr	r0, [r7, #24]
 8006f44:	f7ff fea7 	bl	8006c96 <put_fat>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f4c:	7ffb      	ldrb	r3, [r7, #31]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <remove_chain+0x88>
 8006f52:	7ffb      	ldrb	r3, [r7, #31]
 8006f54:	e01c      	b.n	8006f90 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	69da      	ldr	r2, [r3, #28]
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	3b02      	subs	r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d20b      	bcs.n	8006f7c <remove_chain+0xae>
			fs->free_clst++;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	791b      	ldrb	r3, [r3, #4]
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d3c6      	bcc.n	8006f18 <remove_chain+0x4a>
 8006f8a:	e000      	b.n	8006f8e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f8c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3720      	adds	r7, #32
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10d      	bne.n	8006fca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <create_chain+0x2c>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d31b      	bcc.n	8006ffc <create_chain+0x64>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e018      	b.n	8006ffc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fd8e 	bl	8006aee <get_fat>
 8006fd2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d801      	bhi.n	8006fde <create_chain+0x46>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e070      	b.n	80070c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe4:	d101      	bne.n	8006fea <create_chain+0x52>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	e06a      	b.n	80070c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d201      	bcs.n	8006ff8 <create_chain+0x60>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e063      	b.n	80070c0 <create_chain+0x128>
		scl = clst;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	429a      	cmp	r2, r3
 800700e:	d307      	bcc.n	8007020 <create_chain+0x88>
				ncl = 2;
 8007010:	2302      	movs	r3, #2
 8007012:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	429a      	cmp	r2, r3
 800701a:	d901      	bls.n	8007020 <create_chain+0x88>
 800701c:	2300      	movs	r3, #0
 800701e:	e04f      	b.n	80070c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007020:	69f9      	ldr	r1, [r7, #28]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fd63 	bl	8006aee <get_fat>
 8007028:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d003      	beq.n	800703e <create_chain+0xa6>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703c:	d101      	bne.n	8007042 <create_chain+0xaa>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	e03e      	b.n	80070c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	429a      	cmp	r2, r3
 8007048:	d1da      	bne.n	8007000 <create_chain+0x68>
 800704a:	2300      	movs	r3, #0
 800704c:	e038      	b.n	80070c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800704e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007054:	69f9      	ldr	r1, [r7, #28]
 8007056:	6938      	ldr	r0, [r7, #16]
 8007058:	f7ff fe1d 	bl	8006c96 <put_fat>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <create_chain+0xe2>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d006      	beq.n	800707a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6938      	ldr	r0, [r7, #16]
 8007072:	f7ff fe10 	bl	8006c96 <put_fat>
 8007076:	4603      	mov	r3, r0
 8007078:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d116      	bne.n	80070ae <create_chain+0x116>
		fs->last_clst = ncl;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	3b02      	subs	r3, #2
 8007090:	429a      	cmp	r2, r3
 8007092:	d804      	bhi.n	800709e <create_chain+0x106>
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	1e5a      	subs	r2, r3, #1
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	711a      	strb	r2, [r3, #4]
 80070ac:	e007      	b.n	80070be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d102      	bne.n	80070ba <create_chain+0x122>
 80070b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b8:	e000      	b.n	80070bc <create_chain+0x124>
 80070ba:	2301      	movs	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070be:	69fb      	ldr	r3, [r7, #28]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b087      	sub	sp, #28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	3304      	adds	r3, #4
 80070de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	899b      	ldrh	r3, [r3, #12]
 80070e4:	461a      	mov	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	8952      	ldrh	r2, [r2, #10]
 80070f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	613a      	str	r2, [r7, #16]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <clmt_clust+0x42>
 8007106:	2300      	movs	r3, #0
 8007108:	e010      	b.n	800712c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	d307      	bcc.n	8007122 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3304      	adds	r3, #4
 800711e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007120:	e7e9      	b.n	80070f6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007122:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800714e:	d204      	bcs.n	800715a <dir_sdi+0x22>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <dir_sdi+0x26>
		return FR_INT_ERR;
 800715a:	2302      	movs	r3, #2
 800715c:	e071      	b.n	8007242 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <dir_sdi+0x46>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d902      	bls.n	800717e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	8912      	ldrh	r2, [r2, #8]
 800718c:	4293      	cmp	r3, r2
 800718e:	d301      	bcc.n	8007194 <dir_sdi+0x5c>
 8007190:	2302      	movs	r3, #2
 8007192:	e056      	b.n	8007242 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	61da      	str	r2, [r3, #28]
 800719c:	e02d      	b.n	80071fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	895b      	ldrh	r3, [r3, #10]
 80071a2:	461a      	mov	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	899b      	ldrh	r3, [r3, #12]
 80071a8:	fb03 f302 	mul.w	r3, r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071ae:	e019      	b.n	80071e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6979      	ldr	r1, [r7, #20]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fc9a 	bl	8006aee <get_fat>
 80071ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c2:	d101      	bne.n	80071c8 <dir_sdi+0x90>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e03c      	b.n	8007242 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d904      	bls.n	80071d8 <dir_sdi+0xa0>
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d301      	bcc.n	80071dc <dir_sdi+0xa4>
 80071d8:	2302      	movs	r3, #2
 80071da:	e032      	b.n	8007242 <dir_sdi+0x10a>
			ofs -= csz;
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d2e1      	bcs.n	80071b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	6938      	ldr	r0, [r7, #16]
 80071f0:	f7ff fc5e 	bl	8006ab0 <clust2sect>
 80071f4:	4602      	mov	r2, r0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <dir_sdi+0xd4>
 8007208:	2302      	movs	r3, #2
 800720a:	e01a      	b.n	8007242 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	899b      	ldrh	r3, [r3, #12]
 8007214:	4619      	mov	r1, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	fbb3 f3f1 	udiv	r3, r3, r1
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	899b      	ldrh	r3, [r3, #12]
 800722c:	461a      	mov	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	fbb3 f0f2 	udiv	r0, r3, r2
 8007234:	fb02 f200 	mul.w	r2, r2, r0
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	18ca      	adds	r2, r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	3320      	adds	r3, #32
 8007260:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <dir_next+0x28>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007270:	d301      	bcc.n	8007276 <dir_next+0x2c>
 8007272:	2304      	movs	r3, #4
 8007274:	e0bb      	b.n	80073ee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	899b      	ldrh	r3, [r3, #12]
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007282:	fb02 f201 	mul.w	r2, r2, r1
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 809d 	bne.w	80073c8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10b      	bne.n	80072b8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	8912      	ldrh	r2, [r2, #8]
 80072a8:	4293      	cmp	r3, r2
 80072aa:	f0c0 808d 	bcc.w	80073c8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	61da      	str	r2, [r3, #28]
 80072b4:	2304      	movs	r3, #4
 80072b6:	e09a      	b.n	80073ee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	899b      	ldrh	r3, [r3, #12]
 80072bc:	461a      	mov	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	8952      	ldrh	r2, [r2, #10]
 80072c8:	3a01      	subs	r2, #1
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d17b      	bne.n	80073c8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fc08 	bl	8006aee <get_fat>
 80072de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d801      	bhi.n	80072ea <dir_next+0xa0>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e081      	b.n	80073ee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f0:	d101      	bne.n	80072f6 <dir_next+0xac>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e07b      	b.n	80073ee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d359      	bcc.n	80073b4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	61da      	str	r2, [r3, #28]
 800730c:	2304      	movs	r3, #4
 800730e:	e06e      	b.n	80073ee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7ff fe3d 	bl	8006f98 <create_chain>
 800731e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <dir_next+0xe0>
 8007326:	2307      	movs	r3, #7
 8007328:	e061      	b.n	80073ee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <dir_next+0xea>
 8007330:	2302      	movs	r3, #2
 8007332:	e05c      	b.n	80073ee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733a:	d101      	bne.n	8007340 <dir_next+0xf6>
 800733c:	2301      	movs	r3, #1
 800733e:	e056      	b.n	80073ee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fad3 	bl	80068ec <sync_window>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <dir_next+0x106>
 800734c:	2301      	movs	r3, #1
 800734e:	e04e      	b.n	80073ee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	899b      	ldrh	r3, [r3, #12]
 800735a:	461a      	mov	r2, r3
 800735c:	2100      	movs	r1, #0
 800735e:	f7ff f8ca 	bl	80064f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	6979      	ldr	r1, [r7, #20]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff fba1 	bl	8006ab0 <clust2sect>
 800736e:	4602      	mov	r2, r0
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	639a      	str	r2, [r3, #56]	; 0x38
 8007374:	e012      	b.n	800739c <dir_next+0x152>
						fs->wflag = 1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fab5 	bl	80068ec <sync_window>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <dir_next+0x142>
 8007388:	2301      	movs	r3, #1
 800738a:	e030      	b.n	80073ee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	3301      	adds	r3, #1
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	895b      	ldrh	r3, [r3, #10]
 80073a0:	461a      	mov	r2, r3
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d3e6      	bcc.n	8007376 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fb77 	bl	8006ab0 <clust2sect>
 80073c2:	4602      	mov	r2, r0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	899b      	ldrh	r3, [r3, #12]
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80073e0:	fb02 f200 	mul.w	r2, r2, r0
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	18ca      	adds	r2, r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007406:	2100      	movs	r1, #0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff fe95 	bl	8007138 <dir_sdi>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d12b      	bne.n	8007470 <dir_alloc+0x7a>
		n = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	4619      	mov	r1, r3
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff faa6 	bl	8006974 <move_window>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11d      	bne.n	800746e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2be5      	cmp	r3, #229	; 0xe5
 800743a:	d004      	beq.n	8007446 <dir_alloc+0x50>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d107      	bne.n	8007456 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d102      	bne.n	800745a <dir_alloc+0x64>
 8007454:	e00c      	b.n	8007470 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff fef4 	bl	800724a <dir_next>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0d7      	beq.n	800741c <dir_alloc+0x26>
 800746c:	e000      	b.n	8007470 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800746e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d101      	bne.n	800747a <dir_alloc+0x84>
 8007476:	2307      	movs	r3, #7
 8007478:	75fb      	strb	r3, [r7, #23]
	return res;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	331a      	adds	r3, #26
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe ff8c 	bl	80063b0 <ld_word>
 8007498:	4603      	mov	r3, r0
 800749a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d109      	bne.n	80074b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe ff81 	bl	80063b0 <ld_word>
 80074ae:	4603      	mov	r3, r0
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074b8:	68fb      	ldr	r3, [r7, #12]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	331a      	adds	r3, #26
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	b292      	uxth	r2, r2
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe ffa4 	bl	8006426 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d109      	bne.n	80074fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f103 0214 	add.w	r2, r3, #20
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7fe ff96 	bl	8006426 <st_word>
	}
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	331a      	adds	r3, #26
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe ff4c 	bl	80063b0 <ld_word>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <cmp_lfn+0x1e>
 800751e:	2300      	movs	r3, #0
 8007520:	e059      	b.n	80075d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800752a:	1e5a      	subs	r2, r3, #1
 800752c:	4613      	mov	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007538:	2301      	movs	r3, #1
 800753a:	81fb      	strh	r3, [r7, #14]
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e033      	b.n	80075aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007542:	4a27      	ldr	r2, [pc, #156]	; (80075e0 <cmp_lfn+0xdc>)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	4413      	add	r3, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe ff2d 	bl	80063b0 <ld_word>
 8007556:	4603      	mov	r3, r0
 8007558:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800755a:	89fb      	ldrh	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2bfe      	cmp	r3, #254	; 0xfe
 8007564:	d812      	bhi.n	800758c <cmp_lfn+0x88>
 8007566:	89bb      	ldrh	r3, [r7, #12]
 8007568:	4618      	mov	r0, r3
 800756a:	f002 f93b 	bl	80097e4 <ff_wtoupper>
 800756e:	4603      	mov	r3, r0
 8007570:	461c      	mov	r4, r3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	617a      	str	r2, [r7, #20]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f002 f92f 	bl	80097e4 <ff_wtoupper>
 8007586:	4603      	mov	r3, r0
 8007588:	429c      	cmp	r4, r3
 800758a:	d001      	beq.n	8007590 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800758c:	2300      	movs	r3, #0
 800758e:	e022      	b.n	80075d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007590:	89bb      	ldrh	r3, [r7, #12]
 8007592:	81fb      	strh	r3, [r7, #14]
 8007594:	e006      	b.n	80075a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007596:	89bb      	ldrh	r3, [r7, #12]
 8007598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800759c:	4293      	cmp	r3, r2
 800759e:	d001      	beq.n	80075a4 <cmp_lfn+0xa0>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e018      	b.n	80075d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b0c      	cmp	r3, #12
 80075ae:	d9c8      	bls.n	8007542 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <cmp_lfn+0xd0>
 80075bc:	89fb      	ldrh	r3, [r7, #14]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <cmp_lfn+0xd0>
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	4413      	add	r3, r2
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <cmp_lfn+0xd0>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e000      	b.n	80075d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075d4:	2301      	movs	r3, #1
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd90      	pop	{r4, r7, pc}
 80075de:	bf00      	nop
 80075e0:	0800d5c0 	.word	0x0800d5c0

080075e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4611      	mov	r1, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	460b      	mov	r3, r1
 80075f4:	71fb      	strb	r3, [r7, #7]
 80075f6:	4613      	mov	r3, r2
 80075f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	330d      	adds	r3, #13
 80075fe:	79ba      	ldrb	r2, [r7, #6]
 8007600:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	330b      	adds	r3, #11
 8007606:	220f      	movs	r2, #15
 8007608:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	330c      	adds	r3, #12
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	331a      	adds	r3, #26
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe ff04 	bl	8006426 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	1e5a      	subs	r2, r3, #1
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	82fb      	strh	r3, [r7, #22]
 8007632:	2300      	movs	r3, #0
 8007634:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007636:	8afb      	ldrh	r3, [r7, #22]
 8007638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <put_lfn+0x6c>
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	61fa      	str	r2, [r7, #28]
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007650:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <put_lfn+0xcc>)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	4413      	add	r3, r2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	8afa      	ldrh	r2, [r7, #22]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fedf 	bl	8006426 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007668:	8afb      	ldrh	r3, [r7, #22]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <put_lfn+0x90>
 800766e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007672:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3301      	adds	r3, #1
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d9da      	bls.n	8007636 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007680:	8afb      	ldrh	r3, [r7, #22]
 8007682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007686:	4293      	cmp	r3, r2
 8007688:	d006      	beq.n	8007698 <put_lfn+0xb4>
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d103      	bne.n	80076a0 <put_lfn+0xbc>
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	79fa      	ldrb	r2, [r7, #7]
 80076a4:	701a      	strb	r2, [r3, #0]
}
 80076a6:	bf00      	nop
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	0800d5c0 	.word	0x0800d5c0

080076b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08c      	sub	sp, #48	; 0x30
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076c2:	220b      	movs	r2, #11
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7fe fef4 	bl	80064b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d92b      	bls.n	800772a <gen_numname+0x76>
		sr = seq;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076d6:	e022      	b.n	800771e <gen_numname+0x6a>
			wc = *lfn++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	1c9a      	adds	r2, r3, #2
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076e2:	2300      	movs	r3, #0
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e6:	e017      	b.n	8007718 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	005a      	lsls	r2, r3, #1
 80076ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <gen_numname+0x5e>
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800770c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007710:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	3301      	adds	r3, #1
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b0f      	cmp	r3, #15
 800771c:	d9e4      	bls.n	80076e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1d8      	bne.n	80076d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800772a:	2307      	movs	r3, #7
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	b2db      	uxtb	r3, r3
 8007738:	3330      	adds	r3, #48	; 0x30
 800773a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800773e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007742:	2b39      	cmp	r3, #57	; 0x39
 8007744:	d904      	bls.n	8007750 <gen_numname+0x9c>
 8007746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800774a:	3307      	adds	r3, #7
 800774c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	1e5a      	subs	r2, r3, #1
 8007754:	62ba      	str	r2, [r7, #40]	; 0x28
 8007756:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800775a:	4413      	add	r3, r2
 800775c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007760:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	091b      	lsrs	r3, r3, #4
 8007768:	603b      	str	r3, [r7, #0]
	} while (seq);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1de      	bne.n	800772e <gen_numname+0x7a>
	ns[i] = '~';
 8007770:	f107 0214 	add.w	r2, r7, #20
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	4413      	add	r3, r2
 8007778:	227e      	movs	r2, #126	; 0x7e
 800777a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
 8007780:	e002      	b.n	8007788 <gen_numname+0xd4>
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	3301      	adds	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	429a      	cmp	r2, r3
 800778e:	d205      	bcs.n	800779c <gen_numname+0xe8>
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b20      	cmp	r3, #32
 800779a:	d1f2      	bne.n	8007782 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	2b07      	cmp	r3, #7
 80077a0:	d808      	bhi.n	80077b4 <gen_numname+0x100>
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80077a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077ac:	4413      	add	r3, r2
 80077ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80077b2:	e000      	b.n	80077b6 <gen_numname+0x102>
 80077b4:	2120      	movs	r1, #32
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	627a      	str	r2, [r7, #36]	; 0x24
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	460a      	mov	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	2b07      	cmp	r3, #7
 80077c8:	d9e8      	bls.n	800779c <gen_numname+0xe8>
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	3730      	adds	r7, #48	; 0x30
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077e0:	230b      	movs	r3, #11
 80077e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	0852      	lsrs	r2, r2, #1
 80077ea:	01db      	lsls	r3, r3, #7
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	1c59      	adds	r1, r3, #1
 80077f4:	6079      	str	r1, [r7, #4]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4413      	add	r3, r2
 80077fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	3b01      	subs	r3, #1
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1ed      	bne.n	80077e4 <sum_sfn+0x10>
	return sum;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fc86 	bl	8007138 <dir_sdi>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <dir_find+0x24>
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	e0a9      	b.n	800798e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800783a:	23ff      	movs	r3, #255	; 0xff
 800783c:	753b      	strb	r3, [r7, #20]
 800783e:	7d3b      	ldrb	r3, [r7, #20]
 8007840:	757b      	strb	r3, [r7, #21]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4619      	mov	r1, r3
 8007850:	6938      	ldr	r0, [r7, #16]
 8007852:	f7ff f88f 	bl	8006974 <move_window>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8090 	bne.w	8007982 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800786a:	7dbb      	ldrb	r3, [r7, #22]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <dir_find+0x60>
 8007870:	2304      	movs	r3, #4
 8007872:	75fb      	strb	r3, [r7, #23]
 8007874:	e08a      	b.n	800798c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	330b      	adds	r3, #11
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007882:	73fb      	strb	r3, [r7, #15]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7bfa      	ldrb	r2, [r7, #15]
 8007888:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800788a:	7dbb      	ldrb	r3, [r7, #22]
 800788c:	2be5      	cmp	r3, #229	; 0xe5
 800788e:	d007      	beq.n	80078a0 <dir_find+0x8a>
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <dir_find+0x98>
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d006      	beq.n	80078ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078a0:	23ff      	movs	r3, #255	; 0xff
 80078a2:	757b      	strb	r3, [r7, #21]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
 80078ac:	e05e      	b.n	800796c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	d136      	bne.n	8007922 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d154      	bne.n	800796c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078c2:	7dbb      	ldrb	r3, [r7, #22]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	7b5b      	ldrb	r3, [r3, #13]
 80078d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078d4:	7dbb      	ldrb	r3, [r7, #22]
 80078d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078da:	75bb      	strb	r3, [r7, #22]
 80078dc:	7dbb      	ldrb	r3, [r7, #22]
 80078de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695a      	ldr	r2, [r3, #20]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078e8:	7dba      	ldrb	r2, [r7, #22]
 80078ea:	7d7b      	ldrb	r3, [r7, #21]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d115      	bne.n	800791c <dir_find+0x106>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	330d      	adds	r3, #13
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	7d3a      	ldrb	r2, [r7, #20]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d10e      	bne.n	800791c <dir_find+0x106>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7ff fdfb 	bl	8007504 <cmp_lfn>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <dir_find+0x106>
 8007914:	7d7b      	ldrb	r3, [r7, #21]
 8007916:	3b01      	subs	r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	e000      	b.n	800791e <dir_find+0x108>
 800791c:	23ff      	movs	r3, #255	; 0xff
 800791e:	757b      	strb	r3, [r7, #21]
 8007920:	e024      	b.n	800796c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007922:	7d7b      	ldrb	r3, [r7, #21]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <dir_find+0x126>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff ff51 	bl	80077d4 <sum_sfn>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	7d3b      	ldrb	r3, [r7, #20]
 8007938:	4293      	cmp	r3, r2
 800793a:	d024      	beq.n	8007986 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <dir_find+0x14a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a18      	ldr	r0, [r3, #32]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	220b      	movs	r2, #11
 8007954:	4619      	mov	r1, r3
 8007956:	f7fe fde9 	bl	800652c <mem_cmp>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d014      	beq.n	800798a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007960:	23ff      	movs	r3, #255	; 0xff
 8007962:	757b      	strb	r3, [r7, #21]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800796c:	2100      	movs	r1, #0
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fc6b 	bl	800724a <dir_next>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f43f af65 	beq.w	800784a <dir_find+0x34>
 8007980:	e004      	b.n	800798c <dir_find+0x176>
		if (res != FR_OK) break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800798a:	bf00      	nop

	return res;
 800798c:	7dfb      	ldrb	r3, [r7, #23]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80079ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <dir_register+0x20>
 80079b4:	2306      	movs	r3, #6
 80079b6:	e0e0      	b.n	8007b7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80079b8:	2300      	movs	r3, #0
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
 80079bc:	e002      	b.n	80079c4 <dir_register+0x2c>
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	3301      	adds	r3, #1
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f4      	bne.n	80079be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079da:	f107 030c 	add.w	r3, r7, #12
 80079de:	220c      	movs	r2, #12
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fd67 	bl	80064b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d032      	beq.n	8007a56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2240      	movs	r2, #64	; 0x40
 80079f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079f8:	2301      	movs	r3, #1
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fc:	e016      	b.n	8007a2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	f107 010c 	add.w	r1, r7, #12
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	f7ff fe51 	bl	80076b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff feff 	bl	8007816 <dir_find>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	3301      	adds	r3, #1
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b63      	cmp	r3, #99	; 0x63
 8007a30:	d9e5      	bls.n	80079fe <dir_register+0x66>
 8007a32:	e000      	b.n	8007a36 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	2b64      	cmp	r3, #100	; 0x64
 8007a3a:	d101      	bne.n	8007a40 <dir_register+0xa8>
 8007a3c:	2307      	movs	r3, #7
 8007a3e:	e09c      	b.n	8007b7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d002      	beq.n	8007a4e <dir_register+0xb6>
 8007a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a4c:	e095      	b.n	8007b7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a4e:	7dfa      	ldrb	r2, [r7, #23]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	f003 0302 	and.w	r3, r3, #2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <dir_register+0xd8>
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	330c      	adds	r3, #12
 8007a64:	4a47      	ldr	r2, [pc, #284]	; (8007b84 <dir_register+0x1ec>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	e000      	b.n	8007a72 <dir_register+0xda>
 8007a70:	2301      	movs	r3, #1
 8007a72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a74:	6a39      	ldr	r1, [r7, #32]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fcbd 	bl	80073f6 <dir_alloc>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d148      	bne.n	8007b1c <dir_register+0x184>
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d042      	beq.n	8007b1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	015b      	lsls	r3, r3, #5
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fb48 	bl	8007138 <dir_sdi>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d132      	bne.n	8007b1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fe8a 	bl	80077d4 <sum_sfn>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	69f8      	ldr	r0, [r7, #28]
 8007acc:	f7fe ff52 	bl	8006974 <move_window>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11d      	bne.n	8007b1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	6918      	ldr	r0, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a19      	ldr	r1, [r3, #32]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	7efb      	ldrb	r3, [r7, #27]
 8007aec:	f7ff fd7a 	bl	80075e4 <put_lfn>
				fs->wflag = 1;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2201      	movs	r2, #1
 8007af4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007af6:	2100      	movs	r1, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fba6 	bl	800724a <dir_next>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d107      	bne.n	8007b1c <dir_register+0x184>
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	623b      	str	r3, [r7, #32]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1d5      	bne.n	8007ac4 <dir_register+0x12c>
 8007b18:	e000      	b.n	8007b1c <dir_register+0x184>
				if (res != FR_OK) break;
 8007b1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d128      	bne.n	8007b76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	f7fe ff22 	bl	8006974 <move_window>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d11b      	bne.n	8007b76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	2220      	movs	r2, #32
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fcd5 	bl	80064f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a18      	ldr	r0, [r3, #32]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3324      	adds	r3, #36	; 0x24
 8007b54:	220b      	movs	r2, #11
 8007b56:	4619      	mov	r1, r3
 8007b58:	f7fe fcac 	bl	80064b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	330c      	adds	r3, #12
 8007b68:	f002 0218 	and.w	r2, r2, #24
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	2201      	movs	r2, #1
 8007b74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3730      	adds	r7, #48	; 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	4ec4ec4f 	.word	0x4ec4ec4f

08007b88 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 80c9 	beq.w	8007d3a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb0:	d032      	beq.n	8007c18 <get_fileinfo+0x90>
			i = j = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007bba:	e01b      	b.n	8007bf4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fdd3 	bl	800976c <ff_convert>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007bca:	89fb      	ldrh	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <get_fileinfo+0x4e>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	e01a      	b.n	8007c0c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8007bda:	d902      	bls.n	8007be2 <get_fileinfo+0x5a>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	e014      	b.n	8007c0c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	61fa      	str	r2, [r7, #28]
 8007be8:	89fa      	ldrh	r2, [r7, #14]
 8007bea:	b2d1      	uxtb	r1, r2
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	4413      	add	r3, r2
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	1c59      	adds	r1, r3, #1
 8007bfc:	61b9      	str	r1, [r7, #24]
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	81fb      	strh	r3, [r7, #14]
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1d7      	bne.n	8007bbc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	4413      	add	r3, r2
 8007c12:	3316      	adds	r3, #22
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	3316      	adds	r3, #22
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007c2c:	e04c      	b.n	8007cc8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	1c59      	adds	r1, r3, #1
 8007c36:	61f9      	str	r1, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d100      	bne.n	8007c46 <get_fileinfo+0xbe>
 8007c44:	e040      	b.n	8007cc8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2b05      	cmp	r3, #5
 8007c4a:	d101      	bne.n	8007c50 <get_fileinfo+0xc8>
 8007c4c:	23e5      	movs	r3, #229	; 0xe5
 8007c4e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d10f      	bne.n	8007c76 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007c56:	89bb      	ldrh	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d105      	bne.n	8007c68 <get_fileinfo+0xe0>
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	4413      	add	r3, r2
 8007c62:	3316      	adds	r3, #22
 8007c64:	222e      	movs	r2, #46	; 0x2e
 8007c66:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	61ba      	str	r2, [r7, #24]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	222e      	movs	r2, #46	; 0x2e
 8007c74:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3309      	adds	r3, #9
 8007c7e:	7dfa      	ldrb	r2, [r7, #23]
 8007c80:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007c82:	89bb      	ldrh	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11c      	bne.n	8007cc2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d913      	bls.n	8007cb6 <get_fileinfo+0x12e>
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b5a      	cmp	r3, #90	; 0x5a
 8007c92:	d810      	bhi.n	8007cb6 <get_fileinfo+0x12e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	330c      	adds	r3, #12
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d901      	bls.n	8007ca8 <get_fileinfo+0x120>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	e000      	b.n	8007caa <get_fileinfo+0x122>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	3320      	adds	r3, #32
 8007cb4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	4413      	add	r3, r2
 8007cbc:	3316      	adds	r3, #22
 8007cbe:	7dfa      	ldrb	r2, [r7, #23]
 8007cc0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b0a      	cmp	r3, #10
 8007ccc:	d9af      	bls.n	8007c2e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007cce:	89bb      	ldrh	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10d      	bne.n	8007cf0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3316      	adds	r3, #22
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <get_fileinfo+0x168>
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3309      	adds	r3, #9
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	7ada      	ldrb	r2, [r3, #11]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	331c      	adds	r3, #28
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fb67 	bl	80063e0 <ld_dword>
 8007d12:	4602      	mov	r2, r0
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	3316      	adds	r3, #22
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fb5e 	bl	80063e0 <ld_dword>
 8007d24:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	80da      	strh	r2, [r3, #6]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	809a      	strh	r2, [r3, #4]
 8007d38:	e000      	b.n	8007d3c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007d3a:	bf00      	nop
}
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	; 0x28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	61ba      	str	r2, [r7, #24]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d74:	2b1f      	cmp	r3, #31
 8007d76:	d940      	bls.n	8007dfa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d7a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d7c:	d006      	beq.n	8007d8c <create_name+0x48>
 8007d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d80:	2b5c      	cmp	r3, #92	; 0x5c
 8007d82:	d110      	bne.n	8007da6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d84:	e002      	b.n	8007d8c <create_name+0x48>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	61bb      	str	r3, [r7, #24]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4413      	add	r3, r2
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b2f      	cmp	r3, #47	; 0x2f
 8007d96:	d0f6      	beq.n	8007d86 <create_name+0x42>
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b5c      	cmp	r3, #92	; 0x5c
 8007da2:	d0f0      	beq.n	8007d86 <create_name+0x42>
			break;
 8007da4:	e02a      	b.n	8007dfc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2bfe      	cmp	r3, #254	; 0xfe
 8007daa:	d901      	bls.n	8007db0 <create_name+0x6c>
 8007dac:	2306      	movs	r3, #6
 8007dae:	e177      	b.n	80080a0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fcd6 	bl	800976c <ff_convert>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <create_name+0x8a>
 8007dca:	2306      	movs	r3, #6
 8007dcc:	e168      	b.n	80080a0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd2:	d809      	bhi.n	8007de8 <create_name+0xa4>
 8007dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	48b3      	ldr	r0, [pc, #716]	; (80080a8 <create_name+0x364>)
 8007dda:	f7fe fbce 	bl	800657a <chk_chr>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <create_name+0xa4>
 8007de4:	2306      	movs	r3, #6
 8007de6:	e15b      	b.n	80080a0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	617a      	str	r2, [r7, #20]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007df6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007df8:	e7b4      	b.n	8007d64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007dfa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	441a      	add	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e08:	2b1f      	cmp	r3, #31
 8007e0a:	d801      	bhi.n	8007e10 <create_name+0xcc>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	e000      	b.n	8007e12 <create_name+0xce>
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e16:	e011      	b.n	8007e3c <create_name+0xf8>
		w = lfn[di - 1];
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d002      	beq.n	8007e36 <create_name+0xf2>
 8007e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e32:	2b2e      	cmp	r3, #46	; 0x2e
 8007e34:	d106      	bne.n	8007e44 <create_name+0x100>
		di--;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1ea      	bne.n	8007e18 <create_name+0xd4>
 8007e42:	e000      	b.n	8007e46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007e44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <create_name+0x118>
 8007e58:	2306      	movs	r3, #6
 8007e5a:	e121      	b.n	80080a0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3324      	adds	r3, #36	; 0x24
 8007e60:	220b      	movs	r2, #11
 8007e62:	2120      	movs	r1, #32
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fb46 	bl	80064f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e002      	b.n	8007e76 <create_name+0x132>
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	3301      	adds	r3, #1
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d0f5      	beq.n	8007e70 <create_name+0x12c>
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e90:	d0ee      	beq.n	8007e70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <create_name+0x168>
 8007e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e9c:	f043 0303 	orr.w	r3, r3, #3
 8007ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007ea4:	e002      	b.n	8007eac <create_name+0x168>
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <create_name+0x182>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec4:	d1ef      	bne.n	8007ea6 <create_name+0x162>

	i = b = 0; ni = 8;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ecc:	2300      	movs	r3, #0
 8007ece:	623b      	str	r3, [r7, #32]
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	61ba      	str	r2, [r7, #24]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ee4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8090 	beq.w	800800c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d006      	beq.n	8007f00 <create_name+0x1bc>
 8007ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef6:	d10a      	bne.n	8007f0e <create_name+0x1ca>
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d006      	beq.n	8007f0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f04:	f043 0303 	orr.w	r3, r3, #3
 8007f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f0c:	e07d      	b.n	800800a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007f0e:	6a3a      	ldr	r2, [r7, #32]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d203      	bcs.n	8007f1e <create_name+0x1da>
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d123      	bne.n	8007f66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	2b0b      	cmp	r3, #11
 8007f22:	d106      	bne.n	8007f32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f28:	f043 0303 	orr.w	r3, r3, #3
 8007f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f30:	e06f      	b.n	8008012 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d005      	beq.n	8007f46 <create_name+0x202>
 8007f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f3e:	f043 0303 	orr.w	r3, r3, #3
 8007f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d860      	bhi.n	8008010 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	2308      	movs	r3, #8
 8007f54:	623b      	str	r3, [r7, #32]
 8007f56:	230b      	movs	r3, #11
 8007f58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f64:	e051      	b.n	800800a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f68:	2b7f      	cmp	r3, #127	; 0x7f
 8007f6a:	d914      	bls.n	8007f96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007f6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fbfb 	bl	800976c <ff_convert>
 8007f76:	4603      	mov	r3, r0
 8007f78:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <create_name+0x246>
 8007f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f82:	3b80      	subs	r3, #128	; 0x80
 8007f84:	4a49      	ldr	r2, [pc, #292]	; (80080ac <create_name+0x368>)
 8007f86:	5cd3      	ldrb	r3, [r2, r3]
 8007f88:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f8e:	f043 0302 	orr.w	r3, r3, #2
 8007f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <create_name+0x268>
 8007f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4843      	ldr	r0, [pc, #268]	; (80080b0 <create_name+0x36c>)
 8007fa2:	f7fe faea 	bl	800657a <chk_chr>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007fac:	235f      	movs	r3, #95	; 0x5f
 8007fae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb4:	f043 0303 	orr.w	r3, r3, #3
 8007fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fbc:	e01b      	b.n	8007ff6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d909      	bls.n	8007fd8 <create_name+0x294>
 8007fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc6:	2b5a      	cmp	r3, #90	; 0x5a
 8007fc8:	d806      	bhi.n	8007fd8 <create_name+0x294>
					b |= 2;
 8007fca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fce:	f043 0302 	orr.w	r3, r3, #2
 8007fd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fd6:	e00e      	b.n	8007ff6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fda:	2b60      	cmp	r3, #96	; 0x60
 8007fdc:	d90b      	bls.n	8007ff6 <create_name+0x2b2>
 8007fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fe0:	2b7a      	cmp	r3, #122	; 0x7a
 8007fe2:	d808      	bhi.n	8007ff6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ff2:	3b20      	subs	r3, #32
 8007ff4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	623a      	str	r2, [r7, #32]
 8007ffc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ffe:	b2d1      	uxtb	r1, r2
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	460a      	mov	r2, r1
 8008006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800800a:	e763      	b.n	8007ed4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008010:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008018:	2be5      	cmp	r3, #229	; 0xe5
 800801a:	d103      	bne.n	8008024 <create_name+0x2e0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2205      	movs	r2, #5
 8008020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b08      	cmp	r3, #8
 8008028:	d104      	bne.n	8008034 <create_name+0x2f0>
 800802a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008038:	f003 030c 	and.w	r3, r3, #12
 800803c:	2b0c      	cmp	r3, #12
 800803e:	d005      	beq.n	800804c <create_name+0x308>
 8008040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d105      	bne.n	8008058 <create_name+0x314>
 800804c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d117      	bne.n	8008094 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d105      	bne.n	800807c <create_name+0x338>
 8008070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008074:	f043 0310 	orr.w	r3, r3, #16
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800807c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008080:	f003 030c 	and.w	r3, r3, #12
 8008084:	2b04      	cmp	r3, #4
 8008086:	d105      	bne.n	8008094 <create_name+0x350>
 8008088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800808c:	f043 0308 	orr.w	r3, r3, #8
 8008090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800809a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800809e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	; 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	0800d43c 	.word	0x0800d43c
 80080ac:	0800d540 	.word	0x0800d540
 80080b0:	0800d448 	.word	0x0800d448

080080b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080c8:	e002      	b.n	80080d0 <follow_path+0x1c>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b2f      	cmp	r3, #47	; 0x2f
 80080d6:	d0f8      	beq.n	80080ca <follow_path+0x16>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b5c      	cmp	r3, #92	; 0x5c
 80080de:	d0f4      	beq.n	80080ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2200      	movs	r2, #0
 80080e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b1f      	cmp	r3, #31
 80080ec:	d80a      	bhi.n	8008104 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2280      	movs	r2, #128	; 0x80
 80080f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080f6:	2100      	movs	r1, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff f81d 	bl	8007138 <dir_sdi>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
 8008102:	e048      	b.n	8008196 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008104:	463b      	mov	r3, r7
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff fe1b 	bl	8007d44 <create_name>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d139      	bne.n	800818c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fb7c 	bl	8007816 <dir_find>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008128:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d12c      	bne.n	8008190 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d127      	bne.n	8008190 <follow_path+0xdc>
 8008140:	2305      	movs	r3, #5
 8008142:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008144:	e024      	b.n	8008190 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d121      	bne.n	8008194 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	799b      	ldrb	r3, [r3, #6]
 8008154:	f003 0310 	and.w	r3, r3, #16
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800815c:	2305      	movs	r3, #5
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	e019      	b.n	8008196 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	8992      	ldrh	r2, [r2, #12]
 8008170:	fbb3 f0f2 	udiv	r0, r3, r2
 8008174:	fb02 f200 	mul.w	r2, r2, r0
 8008178:	1a9b      	subs	r3, r3, r2
 800817a:	440b      	add	r3, r1
 800817c:	4619      	mov	r1, r3
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff f980 	bl	8007484 <ld_clust>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800818a:	e7bb      	b.n	8008104 <follow_path+0x50>
			if (res != FR_OK) break;
 800818c:	bf00      	nop
 800818e:	e002      	b.n	8008196 <follow_path+0xe2>
				break;
 8008190:	bf00      	nop
 8008192:	e000      	b.n	8008196 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008194:	bf00      	nop
			}
		}
	}

	return res;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80081a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d031      	beq.n	800821a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e002      	b.n	80081c4 <get_ldnumber+0x24>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	3301      	adds	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b1f      	cmp	r3, #31
 80081ca:	d903      	bls.n	80081d4 <get_ldnumber+0x34>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b3a      	cmp	r3, #58	; 0x3a
 80081d2:	d1f4      	bne.n	80081be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b3a      	cmp	r3, #58	; 0x3a
 80081da:	d11c      	bne.n	8008216 <get_ldnumber+0x76>
			tp = *path;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	60fa      	str	r2, [r7, #12]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	3b30      	subs	r3, #48	; 0x30
 80081ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d80e      	bhi.n	8008212 <get_ldnumber+0x72>
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d10a      	bne.n	8008212 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d107      	bne.n	8008212 <get_ldnumber+0x72>
					vol = (int)i;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	3301      	adds	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	e002      	b.n	800821c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800821a:	693b      	ldr	r3, [r7, #16]
}
 800821c:	4618      	mov	r0, r3
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	70da      	strb	r2, [r3, #3]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800823e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fe fb96 	bl	8006974 <move_window>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <check_fs+0x2a>
 800824e:	2304      	movs	r3, #4
 8008250:	e038      	b.n	80082c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	333c      	adds	r3, #60	; 0x3c
 8008256:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe f8a8 	bl	80063b0 <ld_word>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008268:	429a      	cmp	r2, r3
 800826a:	d001      	beq.n	8008270 <check_fs+0x48>
 800826c:	2303      	movs	r3, #3
 800826e:	e029      	b.n	80082c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008276:	2be9      	cmp	r3, #233	; 0xe9
 8008278:	d009      	beq.n	800828e <check_fs+0x66>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008280:	2beb      	cmp	r3, #235	; 0xeb
 8008282:	d11e      	bne.n	80082c2 <check_fs+0x9a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800828a:	2b90      	cmp	r3, #144	; 0x90
 800828c:	d119      	bne.n	80082c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	333c      	adds	r3, #60	; 0x3c
 8008292:	3336      	adds	r3, #54	; 0x36
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f8a3 	bl	80063e0 <ld_dword>
 800829a:	4603      	mov	r3, r0
 800829c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <check_fs+0xa4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d101      	bne.n	80082aa <check_fs+0x82>
 80082a6:	2300      	movs	r3, #0
 80082a8:	e00c      	b.n	80082c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	333c      	adds	r3, #60	; 0x3c
 80082ae:	3352      	adds	r3, #82	; 0x52
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe f895 	bl	80063e0 <ld_dword>
 80082b6:	4603      	mov	r3, r0
 80082b8:	4a05      	ldr	r2, [pc, #20]	; (80082d0 <check_fs+0xa8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d101      	bne.n	80082c2 <check_fs+0x9a>
 80082be:	2300      	movs	r3, #0
 80082c0:	e000      	b.n	80082c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082c2:	2302      	movs	r3, #2
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	00544146 	.word	0x00544146
 80082d0:	33544146 	.word	0x33544146

080082d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b096      	sub	sp, #88	; 0x58
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff ff59 	bl	80081a0 <get_ldnumber>
 80082ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da01      	bge.n	80082fa <find_volume+0x26>
 80082f6:	230b      	movs	r3, #11
 80082f8:	e26c      	b.n	80087d4 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082fa:	4aa4      	ldr	r2, [pc, #656]	; (800858c <find_volume+0x2b8>)
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008302:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <find_volume+0x3a>
 800830a:	230c      	movs	r3, #12
 800830c:	e262      	b.n	80087d4 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800830e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008310:	f7fe f94e 	bl	80065b0 <lock_fs>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <find_volume+0x4a>
 800831a:	230f      	movs	r3, #15
 800831c:	e25a      	b.n	80087d4 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008322:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	f023 0301 	bic.w	r3, r3, #1
 800832a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01a      	beq.n	800836a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd ff9b 	bl	8006274 <disk_status>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10c      	bne.n	800836a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <find_volume+0x92>
 8008356:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008362:	230a      	movs	r3, #10
 8008364:	e236      	b.n	80087d4 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8008366:	2300      	movs	r3, #0
 8008368:	e234      	b.n	80087d4 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008372:	b2da      	uxtb	r2, r3
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	785b      	ldrb	r3, [r3, #1]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fd ff93 	bl	80062a8 <disk_initialize>
 8008382:	4603      	mov	r3, r0
 8008384:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008388:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008394:	2303      	movs	r3, #3
 8008396:	e21d      	b.n	80087d4 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <find_volume+0xda>
 800839e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80083aa:	230a      	movs	r3, #10
 80083ac:	e212      	b.n	80087d4 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	7858      	ldrb	r0, [r3, #1]
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	330c      	adds	r3, #12
 80083b6:	461a      	mov	r2, r3
 80083b8:	2102      	movs	r1, #2
 80083ba:	f7fd ffdb 	bl	8006374 <disk_ioctl>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <find_volume+0xf4>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e205      	b.n	80087d4 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	899b      	ldrh	r3, [r3, #12]
 80083cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d0:	d80d      	bhi.n	80083ee <find_volume+0x11a>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	899b      	ldrh	r3, [r3, #12]
 80083d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083da:	d308      	bcc.n	80083ee <find_volume+0x11a>
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	899b      	ldrh	r3, [r3, #12]
 80083e0:	461a      	mov	r2, r3
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	899b      	ldrh	r3, [r3, #12]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4013      	ands	r3, r2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <find_volume+0x11e>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e1f0      	b.n	80087d4 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083fa:	f7ff ff15 	bl	8008228 <check_fs>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008408:	2b02      	cmp	r3, #2
 800840a:	d14b      	bne.n	80084a4 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800840c:	2300      	movs	r3, #0
 800840e:	643b      	str	r3, [r7, #64]	; 0x40
 8008410:	e01f      	b.n	8008452 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008420:	4413      	add	r3, r2
 8008422:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	3304      	adds	r3, #4
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d006      	beq.n	800843c <find_volume+0x168>
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	3308      	adds	r3, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f7fd ffd4 	bl	80063e0 <ld_dword>
 8008438:	4602      	mov	r2, r0
 800843a:	e000      	b.n	800843e <find_volume+0x16a>
 800843c:	2200      	movs	r2, #0
 800843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008446:	440b      	add	r3, r1
 8008448:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800844c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844e:	3301      	adds	r3, #1
 8008450:	643b      	str	r3, [r7, #64]	; 0x40
 8008452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008454:	2b03      	cmp	r3, #3
 8008456:	d9dc      	bls.n	8008412 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800845c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <find_volume+0x194>
 8008462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008464:	3b01      	subs	r3, #1
 8008466:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008470:	4413      	add	r3, r2
 8008472:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008476:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <find_volume+0x1b6>
 800847e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008482:	f7ff fed1 	bl	8008228 <check_fs>
 8008486:	4603      	mov	r3, r0
 8008488:	e000      	b.n	800848c <find_volume+0x1b8>
 800848a:	2303      	movs	r3, #3
 800848c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008494:	2b01      	cmp	r3, #1
 8008496:	d905      	bls.n	80084a4 <find_volume+0x1d0>
 8008498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849a:	3301      	adds	r3, #1
 800849c:	643b      	str	r3, [r7, #64]	; 0x40
 800849e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d9e1      	bls.n	8008468 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80084a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d101      	bne.n	80084b0 <find_volume+0x1dc>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e191      	b.n	80087d4 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80084b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d901      	bls.n	80084bc <find_volume+0x1e8>
 80084b8:	230d      	movs	r3, #13
 80084ba:	e18b      	b.n	80087d4 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	333c      	adds	r3, #60	; 0x3c
 80084c0:	330b      	adds	r3, #11
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd ff74 	bl	80063b0 <ld_word>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	899b      	ldrh	r3, [r3, #12]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <find_volume+0x204>
 80084d4:	230d      	movs	r3, #13
 80084d6:	e17d      	b.n	80087d4 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	333c      	adds	r3, #60	; 0x3c
 80084dc:	3316      	adds	r3, #22
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fd ff66 	bl	80063b0 <ld_word>
 80084e4:	4603      	mov	r3, r0
 80084e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <find_volume+0x228>
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	333c      	adds	r3, #60	; 0x3c
 80084f2:	3324      	adds	r3, #36	; 0x24
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fd ff73 	bl	80063e0 <ld_dword>
 80084fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008500:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	789b      	ldrb	r3, [r3, #2]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d005      	beq.n	8008520 <find_volume+0x24c>
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	789b      	ldrb	r3, [r3, #2]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d001      	beq.n	8008520 <find_volume+0x24c>
 800851c:	230d      	movs	r3, #13
 800851e:	e159      	b.n	80087d4 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	789b      	ldrb	r3, [r3, #2]
 8008524:	461a      	mov	r2, r3
 8008526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008534:	b29a      	uxth	r2, r3
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	895b      	ldrh	r3, [r3, #10]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <find_volume+0x280>
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	461a      	mov	r2, r3
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	895b      	ldrh	r3, [r3, #10]
 800854c:	3b01      	subs	r3, #1
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <find_volume+0x284>
 8008554:	230d      	movs	r3, #13
 8008556:	e13d      	b.n	80087d4 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	333c      	adds	r3, #60	; 0x3c
 800855c:	3311      	adds	r3, #17
 800855e:	4618      	mov	r0, r3
 8008560:	f7fd ff26 	bl	80063b0 <ld_word>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	891b      	ldrh	r3, [r3, #8]
 8008570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008572:	8992      	ldrh	r2, [r2, #12]
 8008574:	0952      	lsrs	r2, r2, #5
 8008576:	b292      	uxth	r2, r2
 8008578:	fbb3 f1f2 	udiv	r1, r3, r2
 800857c:	fb02 f201 	mul.w	r2, r2, r1
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <find_volume+0x2bc>
 8008588:	230d      	movs	r3, #13
 800858a:	e123      	b.n	80087d4 <find_volume+0x500>
 800858c:	200000c0 	.word	0x200000c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	333c      	adds	r3, #60	; 0x3c
 8008594:	3313      	adds	r3, #19
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd ff0a 	bl	80063b0 <ld_word>
 800859c:	4603      	mov	r3, r0
 800859e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80085a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <find_volume+0x2e0>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	333c      	adds	r3, #60	; 0x3c
 80085aa:	3320      	adds	r3, #32
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd ff17 	bl	80063e0 <ld_dword>
 80085b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	333c      	adds	r3, #60	; 0x3c
 80085b8:	330e      	adds	r3, #14
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd fef8 	bl	80063b0 <ld_word>
 80085c0:	4603      	mov	r3, r0
 80085c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <find_volume+0x2fa>
 80085ca:	230d      	movs	r3, #13
 80085cc:	e102      	b.n	80087d4 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d2:	4413      	add	r3, r2
 80085d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d6:	8911      	ldrh	r1, [r2, #8]
 80085d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085da:	8992      	ldrh	r2, [r2, #12]
 80085dc:	0952      	lsrs	r2, r2, #5
 80085de:	b292      	uxth	r2, r2
 80085e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80085e4:	b292      	uxth	r2, r2
 80085e6:	4413      	add	r3, r2
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d201      	bcs.n	80085f6 <find_volume+0x322>
 80085f2:	230d      	movs	r3, #13
 80085f4:	e0ee      	b.n	80087d4 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085fe:	8952      	ldrh	r2, [r2, #10]
 8008600:	fbb3 f3f2 	udiv	r3, r3, r2
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <find_volume+0x33c>
 800860c:	230d      	movs	r3, #13
 800860e:	e0e1      	b.n	80087d4 <find_volume+0x500>
		fmt = FS_FAT32;
 8008610:	2303      	movs	r3, #3
 8008612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800861c:	4293      	cmp	r3, r2
 800861e:	d802      	bhi.n	8008626 <find_volume+0x352>
 8008620:	2302      	movs	r3, #2
 8008622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	f640 72f5 	movw	r2, #4085	; 0xff5
 800862c:	4293      	cmp	r3, r2
 800862e:	d802      	bhi.n	8008636 <find_volume+0x362>
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008642:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008648:	441a      	add	r2, r3
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800864e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	441a      	add	r2, r3
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8008658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800865c:	2b03      	cmp	r3, #3
 800865e:	d11e      	bne.n	800869e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	333c      	adds	r3, #60	; 0x3c
 8008664:	332a      	adds	r3, #42	; 0x2a
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fea2 	bl	80063b0 <ld_word>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <find_volume+0x3a2>
 8008672:	230d      	movs	r3, #13
 8008674:	e0ae      	b.n	80087d4 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	891b      	ldrh	r3, [r3, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <find_volume+0x3ae>
 800867e:	230d      	movs	r3, #13
 8008680:	e0a8      	b.n	80087d4 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	333c      	adds	r3, #60	; 0x3c
 8008686:	332c      	adds	r3, #44	; 0x2c
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd fea9 	bl	80063e0 <ld_dword>
 800868e:	4602      	mov	r2, r0
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	647b      	str	r3, [r7, #68]	; 0x44
 800869c:	e01f      	b.n	80086de <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	891b      	ldrh	r3, [r3, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <find_volume+0x3d6>
 80086a6:	230d      	movs	r3, #13
 80086a8:	e094      	b.n	80087d4 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b0:	441a      	add	r2, r3
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80086b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d103      	bne.n	80086c6 <find_volume+0x3f2>
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	e00a      	b.n	80086dc <find_volume+0x408>
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	6a1a      	ldr	r2, [r3, #32]
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	085a      	lsrs	r2, r3, #1
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	899b      	ldrh	r3, [r3, #12]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	440b      	add	r3, r1
 80086ec:	3b01      	subs	r3, #1
 80086ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086f0:	8989      	ldrh	r1, [r1, #12]
 80086f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d201      	bcs.n	80086fe <find_volume+0x42a>
 80086fa:	230d      	movs	r3, #13
 80086fc:	e06a      	b.n	80087d4 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008704:	61da      	str	r2, [r3, #28]
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2280      	movs	r2, #128	; 0x80
 8008712:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008718:	2b03      	cmp	r3, #3
 800871a:	d149      	bne.n	80087b0 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	333c      	adds	r3, #60	; 0x3c
 8008720:	3330      	adds	r3, #48	; 0x30
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fe44 	bl	80063b0 <ld_word>
 8008728:	4603      	mov	r3, r0
 800872a:	2b01      	cmp	r3, #1
 800872c:	d140      	bne.n	80087b0 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800872e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008730:	3301      	adds	r3, #1
 8008732:	4619      	mov	r1, r3
 8008734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008736:	f7fe f91d 	bl	8006974 <move_window>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d137      	bne.n	80087b0 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2200      	movs	r2, #0
 8008744:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	333c      	adds	r3, #60	; 0x3c
 800874a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800874e:	4618      	mov	r0, r3
 8008750:	f7fd fe2e 	bl	80063b0 <ld_word>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800875c:	429a      	cmp	r2, r3
 800875e:	d127      	bne.n	80087b0 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	333c      	adds	r3, #60	; 0x3c
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd fe3b 	bl	80063e0 <ld_dword>
 800876a:	4603      	mov	r3, r0
 800876c:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <find_volume+0x508>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d11e      	bne.n	80087b0 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	333c      	adds	r3, #60	; 0x3c
 8008776:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd fe30 	bl	80063e0 <ld_dword>
 8008780:	4603      	mov	r3, r0
 8008782:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <find_volume+0x50c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d113      	bne.n	80087b0 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	333c      	adds	r3, #60	; 0x3c
 800878c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008790:	4618      	mov	r0, r3
 8008792:	f7fd fe25 	bl	80063e0 <ld_dword>
 8008796:	4602      	mov	r2, r0
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	333c      	adds	r3, #60	; 0x3c
 80087a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd fe1b 	bl	80063e0 <ld_dword>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80087b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <find_volume+0x510>)
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <find_volume+0x510>)
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <find_volume+0x510>)
 80087c6:	881a      	ldrh	r2, [r3, #0]
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80087cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ce:	f7fe f869 	bl	80068a4 <clear_lock>
#endif
	return FR_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3758      	adds	r7, #88	; 0x58
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	41615252 	.word	0x41615252
 80087e0:	61417272 	.word	0x61417272
 80087e4:	200000c4 	.word	0x200000c4

080087e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087f2:	2309      	movs	r3, #9
 80087f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02e      	beq.n	800885a <validate+0x72>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02a      	beq.n	800885a <validate+0x72>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d025      	beq.n	800885a <validate+0x72>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	889a      	ldrh	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	88db      	ldrh	r3, [r3, #6]
 8008818:	429a      	cmp	r2, r3
 800881a:	d11e      	bne.n	800885a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fec5 	bl	80065b0 <lock_fs>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d014      	beq.n	8008856 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fd fd1e 	bl	8006274 <disk_status>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <validate+0x60>
				res = FR_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e008      	b.n	800885a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f7fd fec4 	bl	80065dc <unlock_fs>
 8008854:	e001      	b.n	800885a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008856:	230f      	movs	r3, #15
 8008858:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <validate+0x7e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	e000      	b.n	8008868 <validate+0x80>
 8008866:	2300      	movs	r3, #0
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	6013      	str	r3, [r2, #0]
	return res;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800888a:	f107 0310 	add.w	r3, r7, #16
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fc86 	bl	80081a0 <get_ldnumber>
 8008894:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	2b00      	cmp	r3, #0
 800889a:	da01      	bge.n	80088a0 <f_mount+0x28>
 800889c:	230b      	movs	r3, #11
 800889e:	e048      	b.n	8008932 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80088a0:	4a26      	ldr	r2, [pc, #152]	; (800893c <f_mount+0xc4>)
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80088b0:	69b8      	ldr	r0, [r7, #24]
 80088b2:	f7fd fff7 	bl	80068a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f837 	bl	800992e <ff_del_syncobj>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <f_mount+0x52>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e033      	b.n	8008932 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00f      	beq.n	80088f6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3314      	adds	r3, #20
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f001 f806 	bl	80098f8 <ff_cre_syncobj>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <f_mount+0x7e>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e01d      	b.n	8008932 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4910      	ldr	r1, [pc, #64]	; (800893c <f_mount+0xc4>)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <f_mount+0x94>
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d001      	beq.n	8008910 <f_mount+0x98>
 800890c:	2300      	movs	r3, #0
 800890e:	e010      	b.n	8008932 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008910:	f107 010c 	add.w	r1, r7, #12
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	2200      	movs	r2, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fcda 	bl	80082d4 <find_volume>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7dfa      	ldrb	r2, [r7, #23]
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd fe56 	bl	80065dc <unlock_fs>
 8008930:	7dfb      	ldrb	r3, [r7, #23]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3720      	adds	r7, #32
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200000c0 	.word	0x200000c0

08008940 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8008946:	af00      	add	r7, sp, #0
 8008948:	f107 030c 	add.w	r3, r7, #12
 800894c:	6018      	str	r0, [r3, #0]
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	6019      	str	r1, [r3, #0]
 8008954:	1dfb      	adds	r3, r7, #7
 8008956:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <f_open+0x26>
 8008962:	2309      	movs	r3, #9
 8008964:	e24a      	b.n	8008dfc <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008966:	1dfb      	adds	r3, r7, #7
 8008968:	1dfa      	adds	r2, r7, #7
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008970:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008972:	1dfb      	adds	r3, r7, #7
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fca8 	bl	80082d4 <find_volume>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800898a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800898e:	2b00      	cmp	r3, #0
 8008990:	f040 8221 	bne.w	8008dd6 <f_open+0x496>
		dj.obj.fs = fs;
 8008994:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008998:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800899c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80089a0:	f107 0214 	add.w	r2, r7, #20
 80089a4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80089a6:	f107 0308 	add.w	r3, r7, #8
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fb7e 	bl	80080b4 <follow_path>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80089be:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d11b      	bne.n	80089fe <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80089c6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80089ca:	b25b      	sxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da03      	bge.n	80089d8 <f_open+0x98>
				res = FR_INVALID_NAME;
 80089d0:	2306      	movs	r3, #6
 80089d2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80089d6:	e012      	b.n	80089fe <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089d8:	1dfb      	adds	r3, r7, #7
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f023 0301 	bic.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fe0e 	bl	8006614 <chk_lock>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089fe:	1dfb      	adds	r3, r7, #7
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	f003 031c 	and.w	r3, r3, #28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 809b 	beq.w	8008b42 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8008a0c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d019      	beq.n	8008a48 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008a14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d10e      	bne.n	8008a3a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a1c:	f7fd fe56 	bl	80066cc <enq_lock>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d006      	beq.n	8008a34 <f_open+0xf4>
 8008a26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe ffb4 	bl	8007998 <dir_register>
 8008a30:	4603      	mov	r3, r0
 8008a32:	e000      	b.n	8008a36 <f_open+0xf6>
 8008a34:	2312      	movs	r3, #18
 8008a36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a3a:	1dfb      	adds	r3, r7, #7
 8008a3c:	1dfa      	adds	r2, r7, #7
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	f042 0208 	orr.w	r2, r2, #8
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	e012      	b.n	8008a6e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a48:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008a4c:	f003 0311 	and.w	r3, r3, #17
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <f_open+0x11c>
					res = FR_DENIED;
 8008a54:	2307      	movs	r3, #7
 8008a56:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008a5a:	e008      	b.n	8008a6e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a5c:	1dfb      	adds	r3, r7, #7
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <f_open+0x12e>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a6e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 8082 	bne.w	8008b7c <f_open+0x23c>
 8008a78:	1dfb      	adds	r3, r7, #7
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d07b      	beq.n	8008b7c <f_open+0x23c>
				dw = GET_FATTIME();
 8008a84:	f7fd f908 	bl	8005c98 <get_fattime>
 8008a88:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a8c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008a90:	330e      	adds	r3, #14
 8008a92:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fd fce0 	bl	800645c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008aa0:	3316      	adds	r3, #22
 8008aa2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fcd8 	bl	800645c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008aac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008ab0:	330b      	adds	r3, #11
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008ab6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008aba:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fcdf 	bl	8007484 <ld_clust>
 8008ac6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008aca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ace:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe fcf4 	bl	80074c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ada:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008ade:	331c      	adds	r3, #28
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fd fcba 	bl	800645c <st_dword>
					fs->wflag = 1;
 8008ae8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008aec:	2201      	movs	r2, #1
 8008aee:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008af0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d041      	beq.n	8008b7c <f_open+0x23c>
						dw = fs->winsect;
 8008af8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008b02:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe f9de 	bl	8006ece <remove_chain>
 8008b12:	4603      	mov	r3, r0
 8008b14:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8008b18:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d12d      	bne.n	8008b7c <f_open+0x23c>
							res = move_window(fs, dw);
 8008b20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008b24:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fd ff23 	bl	8006974 <move_window>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008b38:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008b3c:	3a01      	subs	r2, #1
 8008b3e:	619a      	str	r2, [r3, #24]
 8008b40:	e01c      	b.n	8008b7c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008b42:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d118      	bne.n	8008b7c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b4a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <f_open+0x21e>
					res = FR_NO_FILE;
 8008b56:	2304      	movs	r3, #4
 8008b58:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008b5c:	e00e      	b.n	8008b7c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b5e:	1dfb      	adds	r3, r7, #7
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <f_open+0x23c>
 8008b6a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <f_open+0x23c>
						res = FR_DENIED;
 8008b76:	2307      	movs	r3, #7
 8008b78:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b7c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d136      	bne.n	8008bf2 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b84:	1dfb      	adds	r3, r7, #7
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008b90:	1dfb      	adds	r3, r7, #7
 8008b92:	1dfa      	adds	r2, r7, #7
 8008b94:	7812      	ldrb	r2, [r2, #0]
 8008b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b9a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba2:	f107 030c 	add.w	r3, r7, #12
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008baa:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008bae:	f107 030c 	add.w	r3, r7, #12
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bb6:	1dfb      	adds	r3, r7, #7
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f023 0301 	bic.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf14      	ite	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fd fd9d 	bl	8006710 <inc_lock>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <f_open+0x2b2>
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008bf2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80ed 	bne.w	8008dd6 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008bfc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c00:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fc3c 	bl	8007484 <ld_clust>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c16:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008c1a:	331c      	adds	r3, #28
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fd fbdf 	bl	80063e0 <ld_dword>
 8008c22:	4602      	mov	r2, r0
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c36:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008c3a:	f107 030c 	add.w	r3, r7, #12
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c42:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c46:	88da      	ldrh	r2, [r3, #6]
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c50:	f107 030c 	add.w	r3, r7, #12
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	1dfa      	adds	r2, r7, #7
 8008c58:	7812      	ldrb	r2, [r2, #0]
 8008c5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c5c:	f107 030c 	add.w	r3, r7, #12
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3330      	adds	r3, #48	; 0x30
 8008c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fd fc34 	bl	80064f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c8e:	1dfb      	adds	r3, r7, #7
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 809d 	beq.w	8008dd6 <f_open+0x496>
 8008c9c:	f107 030c 	add.w	r3, r7, #12
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8096 	beq.w	8008dd6 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	f107 030c 	add.w	r3, r7, #12
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008cba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008cbe:	895b      	ldrh	r3, [r3, #10]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008cc6:	899b      	ldrh	r3, [r3, #12]
 8008cc8:	fb03 f302 	mul.w	r3, r3, r2
 8008ccc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cdc:	f107 030c 	add.w	r3, r7, #12
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008ce8:	e01f      	b.n	8008d2a <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fefa 	bl	8006aee <get_fat>
 8008cfa:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008cfe:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d802      	bhi.n	8008d0c <f_open+0x3cc>
 8008d06:	2302      	movs	r3, #2
 8008d08:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d0c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d14:	d102      	bne.n	8008d1c <f_open+0x3dc>
 8008d16:	2301      	movs	r3, #1
 8008d18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d1c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008d20:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008d2a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <f_open+0x3fe>
 8008d32:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008d36:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d8d5      	bhi.n	8008cea <f_open+0x3aa>
				}
				fp->clust = clst;
 8008d3e:	f107 030c 	add.w	r3, r7, #12
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008d48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d4a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d141      	bne.n	8008dd6 <f_open+0x496>
 8008d52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d56:	899b      	ldrh	r3, [r3, #12]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d62:	fb02 f201 	mul.w	r2, r2, r1
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d034      	beq.n	8008dd6 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d70:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fd fe9b 	bl	8006ab0 <clust2sect>
 8008d7a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008d7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <f_open+0x44e>
						res = FR_INT_ERR;
 8008d86:	2302      	movs	r3, #2
 8008d88:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008d8c:	e023      	b.n	8008dd6 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d92:	899b      	ldrh	r3, [r3, #12]
 8008d94:	461a      	mov	r2, r3
 8008d96:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da2:	441a      	add	r2, r3
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008dac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008db0:	7858      	ldrb	r0, [r3, #1]
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6a1a      	ldr	r2, [r3, #32]
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f7fd fa95 	bl	80062f4 <disk_read>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <f_open+0x496>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008dd6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <f_open+0x4a8>
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008de8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008dec:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd fbf2 	bl	80065dc <unlock_fs>
 8008df8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b08e      	sub	sp, #56	; 0x38
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
 8008e12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f107 0214 	add.w	r2, r7, #20
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fcde 	bl	80087e8 <validate>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d107      	bne.n	8008e4a <f_read+0x44>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	7d5b      	ldrb	r3, [r3, #21]
 8008e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <f_read+0x58>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fd fbc2 	bl	80065dc <unlock_fs>
 8008e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e5c:	e15d      	b.n	800911a <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	7d1b      	ldrb	r3, [r3, #20]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <f_read+0x72>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2107      	movs	r1, #7
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fd fbb4 	bl	80065dc <unlock_fs>
 8008e74:	2307      	movs	r3, #7
 8008e76:	e150      	b.n	800911a <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	f240 813c 	bls.w	8009106 <f_read+0x300>
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008e92:	e138      	b.n	8009106 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	8992      	ldrh	r2, [r2, #12]
 8008e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea0:	fb02 f201 	mul.w	r2, r2, r1
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 80f3 	bne.w	8009092 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	8992      	ldrh	r2, [r2, #12]
 8008eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	8952      	ldrh	r2, [r2, #10]
 8008ebc:	3a01      	subs	r2, #1
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d139      	bne.n	8008f3c <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed6:	e013      	b.n	8008f00 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7fe f8ee 	bl	80070c8 <clmt_clust>
 8008eec:	6338      	str	r0, [r7, #48]	; 0x30
 8008eee:	e007      	b.n	8008f00 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fd fdf8 	bl	8006aee <get_fat>
 8008efe:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d809      	bhi.n	8008f1a <f_read+0x114>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	755a      	strb	r2, [r3, #21]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fd fb63 	bl	80065dc <unlock_fs>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e0ff      	b.n	800911a <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f20:	d109      	bne.n	8008f36 <f_read+0x130>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	755a      	strb	r2, [r3, #21]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fd fb55 	bl	80065dc <unlock_fs>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e0f1      	b.n	800911a <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f3a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fd fdb3 	bl	8006ab0 <clust2sect>
 8008f4a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <f_read+0x160>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2202      	movs	r2, #2
 8008f56:	755a      	strb	r2, [r3, #21]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2102      	movs	r1, #2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fd fb3d 	bl	80065dc <unlock_fs>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e0d9      	b.n	800911a <f_read+0x314>
			sect += csect;
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	899b      	ldrh	r3, [r3, #12]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d046      	beq.n	8009010 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	4413      	add	r3, r2
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	8952      	ldrh	r2, [r2, #10]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d905      	bls.n	8008f9c <f_read+0x196>
					cc = fs->csize - csect;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	895b      	ldrh	r3, [r3, #10]
 8008f94:	461a      	mov	r2, r3
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	7858      	ldrb	r0, [r3, #1]
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fa6:	f7fd f9a5 	bl	80062f4 <disk_read>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d009      	beq.n	8008fc4 <f_read+0x1be>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	755a      	strb	r2, [r3, #21]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2101      	movs	r1, #1
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd fb0e 	bl	80065dc <unlock_fs>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0aa      	b.n	800911a <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	7d1b      	ldrb	r3, [r3, #20]
 8008fc8:	b25b      	sxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da18      	bge.n	8009000 <f_read+0x1fa>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d911      	bls.n	8009000 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a1a      	ldr	r2, [r3, #32]
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	8992      	ldrh	r2, [r2, #12]
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fee:	18d0      	adds	r0, r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	899b      	ldrh	r3, [r3, #12]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7fd fa5a 	bl	80064b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	899b      	ldrh	r3, [r3, #12]
 8009004:	461a      	mov	r2, r3
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	fb02 f303 	mul.w	r3, r2, r3
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800900e:	e066      	b.n	80090de <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	429a      	cmp	r2, r3
 8009018:	d038      	beq.n	800908c <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	7d1b      	ldrb	r3, [r3, #20]
 800901e:	b25b      	sxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	da1d      	bge.n	8009060 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	7858      	ldrb	r0, [r3, #1]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1a      	ldr	r2, [r3, #32]
 8009032:	2301      	movs	r3, #1
 8009034:	f7fd f97e 	bl	8006334 <disk_write>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d009      	beq.n	8009052 <f_read+0x24c>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	755a      	strb	r2, [r3, #21]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f7fd fac7 	bl	80065dc <unlock_fs>
 800904e:	2301      	movs	r3, #1
 8009050:	e063      	b.n	800911a <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	7d1b      	ldrb	r3, [r3, #20]
 8009056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800905a:	b2da      	uxtb	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	7858      	ldrb	r0, [r3, #1]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800906a:	2301      	movs	r3, #1
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	f7fd f941 	bl	80062f4 <disk_read>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <f_read+0x286>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	755a      	strb	r2, [r3, #21]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2101      	movs	r1, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd faaa 	bl	80065dc <unlock_fs>
 8009088:	2301      	movs	r3, #1
 800908a:	e046      	b.n	800911a <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	899b      	ldrh	r3, [r3, #12]
 8009096:	4618      	mov	r0, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	8992      	ldrh	r2, [r2, #12]
 80090a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80090a4:	fb02 f201 	mul.w	r2, r2, r1
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	1ac3      	subs	r3, r0, r3
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80090ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d901      	bls.n	80090ba <f_read+0x2b4>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	8992      	ldrh	r2, [r2, #12]
 80090c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80090cc:	fb02 f200 	mul.w	r2, r2, r0
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	440b      	add	r3, r1
 80090d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d6:	4619      	mov	r1, r3
 80090d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090da:	f7fd f9eb 	bl	80064b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80090de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	4413      	add	r3, r2
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	441a      	add	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	619a      	str	r2, [r3, #24]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	441a      	add	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f aec3 	bne.w	8008e94 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2100      	movs	r1, #0
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd fa62 	bl	80065dc <unlock_fs>
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3738      	adds	r7, #56	; 0x38
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b08c      	sub	sp, #48	; 0x30
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f107 0210 	add.w	r2, r7, #16
 8009140:	4611      	mov	r1, r2
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff fb50 	bl	80087e8 <validate>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800914e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009152:	2b00      	cmp	r3, #0
 8009154:	d107      	bne.n	8009166 <f_write+0x44>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7d5b      	ldrb	r3, [r3, #21]
 800915a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800915e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <f_write+0x58>
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800916c:	4611      	mov	r1, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd fa34 	bl	80065dc <unlock_fs>
 8009174:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009178:	e192      	b.n	80094a0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	7d1b      	ldrb	r3, [r3, #20]
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <f_write+0x72>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2107      	movs	r1, #7
 800918a:	4618      	mov	r0, r3
 800918c:	f7fd fa26 	bl	80065dc <unlock_fs>
 8009190:	2307      	movs	r3, #7
 8009192:	e185      	b.n	80094a0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	699a      	ldr	r2, [r3, #24]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	441a      	add	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	f080 816a 	bcs.w	800947a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	43db      	mvns	r3, r3
 80091ac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80091ae:	e164      	b.n	800947a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	8992      	ldrh	r2, [r2, #12]
 80091b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091bc:	fb02 f201 	mul.w	r2, r2, r1
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 810f 	bne.w	80093e6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	8992      	ldrh	r2, [r2, #12]
 80091d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	8952      	ldrh	r2, [r2, #10]
 80091d8:	3a01      	subs	r2, #1
 80091da:	4013      	ands	r3, r2
 80091dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d14d      	bne.n	8009280 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10c      	bne.n	8009206 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11a      	bne.n	800922e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fd fecb 	bl	8006f98 <create_chain>
 8009202:	62b8      	str	r0, [r7, #40]	; 0x28
 8009204:	e013      	b.n	800922e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d007      	beq.n	800921e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	4619      	mov	r1, r3
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7fd ff57 	bl	80070c8 <clmt_clust>
 800921a:	62b8      	str	r0, [r7, #40]	; 0x28
 800921c:	e007      	b.n	800922e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7fd feb6 	bl	8006f98 <create_chain>
 800922c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8127 	beq.w	8009484 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	2b01      	cmp	r3, #1
 800923a:	d109      	bne.n	8009250 <f_write+0x12e>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2202      	movs	r2, #2
 8009240:	755a      	strb	r2, [r3, #21]
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	2102      	movs	r1, #2
 8009246:	4618      	mov	r0, r3
 8009248:	f7fd f9c8 	bl	80065dc <unlock_fs>
 800924c:	2302      	movs	r3, #2
 800924e:	e127      	b.n	80094a0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009256:	d109      	bne.n	800926c <f_write+0x14a>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	755a      	strb	r2, [r3, #21]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f7fd f9ba 	bl	80065dc <unlock_fs>
 8009268:	2301      	movs	r3, #1
 800926a:	e119      	b.n	80094a0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009270:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d102      	bne.n	8009280 <f_write+0x15e>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800927e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	7d1b      	ldrb	r3, [r3, #20]
 8009284:	b25b      	sxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	da1d      	bge.n	80092c6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	7858      	ldrb	r0, [r3, #1]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1a      	ldr	r2, [r3, #32]
 8009298:	2301      	movs	r3, #1
 800929a:	f7fd f84b 	bl	8006334 <disk_write>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d009      	beq.n	80092b8 <f_write+0x196>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	755a      	strb	r2, [r3, #21]
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2101      	movs	r1, #1
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd f994 	bl	80065dc <unlock_fs>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0f3      	b.n	80094a0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	7d1b      	ldrb	r3, [r3, #20]
 80092bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fd fbee 	bl	8006ab0 <clust2sect>
 80092d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d109      	bne.n	80092f0 <f_write+0x1ce>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2202      	movs	r2, #2
 80092e0:	755a      	strb	r2, [r3, #21]
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2102      	movs	r1, #2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fd f978 	bl	80065dc <unlock_fs>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0d7      	b.n	80094a0 <f_write+0x37e>
			sect += csect;
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	4413      	add	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	899b      	ldrh	r3, [r3, #12]
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	fbb3 f3f2 	udiv	r3, r3, r2
 8009304:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d048      	beq.n	800939e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	4413      	add	r3, r2
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	8952      	ldrh	r2, [r2, #10]
 8009316:	4293      	cmp	r3, r2
 8009318:	d905      	bls.n	8009326 <f_write+0x204>
					cc = fs->csize - csect;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	895b      	ldrh	r3, [r3, #10]
 800931e:	461a      	mov	r2, r3
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	7858      	ldrb	r0, [r3, #1]
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	69f9      	ldr	r1, [r7, #28]
 8009330:	f7fd f800 	bl	8006334 <disk_write>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d009      	beq.n	800934e <f_write+0x22c>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	755a      	strb	r2, [r3, #21]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd f949 	bl	80065dc <unlock_fs>
 800934a:	2301      	movs	r3, #1
 800934c:	e0a8      	b.n	80094a0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	6a3a      	ldr	r2, [r7, #32]
 8009358:	429a      	cmp	r2, r3
 800935a:	d918      	bls.n	800938e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a1a      	ldr	r2, [r3, #32]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	8992      	ldrh	r2, [r2, #12]
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	18d1      	adds	r1, r2, r3
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	899b      	ldrh	r3, [r3, #12]
 800937a:	461a      	mov	r2, r3
 800937c:	f7fd f89a 	bl	80064b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	7d1b      	ldrb	r3, [r3, #20]
 8009384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	899b      	ldrh	r3, [r3, #12]
 8009392:	461a      	mov	r2, r3
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	fb02 f303 	mul.w	r3, r2, r3
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800939c:	e050      	b.n	8009440 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d01b      	beq.n	80093e0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d215      	bcs.n	80093e0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	7858      	ldrb	r0, [r3, #1]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093be:	2301      	movs	r3, #1
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	f7fc ff97 	bl	80062f4 <disk_read>
 80093c6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	755a      	strb	r2, [r3, #21]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2101      	movs	r1, #1
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fd f900 	bl	80065dc <unlock_fs>
 80093dc:	2301      	movs	r3, #1
 80093de:	e05f      	b.n	80094a0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	899b      	ldrh	r3, [r3, #12]
 80093ea:	4618      	mov	r0, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	8992      	ldrh	r2, [r2, #12]
 80093f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093f8:	fb02 f201 	mul.w	r2, r2, r1
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	1ac3      	subs	r3, r0, r3
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d901      	bls.n	800940e <f_write+0x2ec>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	8992      	ldrh	r2, [r2, #12]
 800941c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009420:	fb02 f200 	mul.w	r2, r2, r0
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	440b      	add	r3, r1
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	69f9      	ldr	r1, [r7, #28]
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd f841 	bl	80064b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	7d1b      	ldrb	r3, [r3, #20]
 8009436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800943a:	b2da      	uxtb	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009440:	69fa      	ldr	r2, [r7, #28]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	4413      	add	r3, r2
 8009446:	61fb      	str	r3, [r7, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	441a      	add	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	619a      	str	r2, [r3, #24]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	bf38      	it	cc
 8009460:	461a      	movcc	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	441a      	add	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f ae97 	bne.w	80091b0 <f_write+0x8e>
 8009482:	e000      	b.n	8009486 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009484:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	7d1b      	ldrb	r3, [r3, #20]
 800948a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948e:	b2da      	uxtb	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd f89f 	bl	80065dc <unlock_fs>
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3730      	adds	r7, #48	; 0x30
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f107 0208 	add.w	r2, r7, #8
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff f995 	bl	80087e8 <validate>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d16d      	bne.n	80095a4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7d1b      	ldrb	r3, [r3, #20]
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d067      	beq.n	80095a4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7d1b      	ldrb	r3, [r3, #20]
 80094d8:	b25b      	sxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da1a      	bge.n	8009514 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	7858      	ldrb	r0, [r3, #1]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	2301      	movs	r3, #1
 80094ee:	f7fc ff21 	bl	8006334 <disk_write>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d006      	beq.n	8009506 <f_sync+0x5e>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2101      	movs	r1, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fd f86d 	bl	80065dc <unlock_fs>
 8009502:	2301      	movs	r3, #1
 8009504:	e055      	b.n	80095b2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7d1b      	ldrb	r3, [r3, #20]
 800950a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950e:	b2da      	uxtb	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009514:	f7fc fbc0 	bl	8005c98 <get_fattime>
 8009518:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fd fa26 	bl	8006974 <move_window>
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d138      	bne.n	80095a4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	330b      	adds	r3, #11
 800953c:	781a      	ldrb	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	330b      	adds	r3, #11
 8009542:	f042 0220 	orr.w	r2, r2, #32
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	461a      	mov	r2, r3
 8009554:	68f9      	ldr	r1, [r7, #12]
 8009556:	f7fd ffb4 	bl	80074c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f103 021c 	add.w	r2, r3, #28
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fc ff78 	bl	800645c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3316      	adds	r3, #22
 8009570:	6939      	ldr	r1, [r7, #16]
 8009572:	4618      	mov	r0, r3
 8009574:	f7fc ff72 	bl	800645c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3312      	adds	r3, #18
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f7fc ff51 	bl	8006426 <st_word>
					fs->wflag = 1;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2201      	movs	r2, #1
 8009588:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd fa1f 	bl	80069d0 <sync_fs>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7d1b      	ldrb	r3, [r3, #20]
 800959a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	7dfa      	ldrb	r2, [r7, #23]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fd f816 	bl	80065dc <unlock_fs>
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff ff70 	bl	80094a8 <f_sync>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11d      	bne.n	800960e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f107 0208 	add.w	r2, r7, #8
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f904 	bl	80087e8 <validate>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d111      	bne.n	800960e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd f91c 	bl	800682c <dec_lock>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2100      	movs	r1, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f7fc ffe7 	bl	80065dc <unlock_fs>
#endif
		}
	}
	return res;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800961e:	af00      	add	r7, sp, #0
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	6018      	str	r0, [r3, #0]
 8009624:	463b      	mov	r3, r7
 8009626:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009628:	f507 7102 	add.w	r1, r7, #520	; 0x208
 800962c:	1d3b      	adds	r3, r7, #4
 800962e:	2200      	movs	r2, #0
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fe4f 	bl	80082d4 <find_volume>
 8009636:	4603      	mov	r3, r0
 8009638:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 800963c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8009640:	2b00      	cmp	r3, #0
 8009642:	d127      	bne.n	8009694 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8009644:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009648:	f107 0208 	add.w	r2, r7, #8
 800964c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800964e:	1d3b      	adds	r3, r7, #4
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fd2b 	bl	80080b4 <follow_path>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8009664:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8009668:	2b00      	cmp	r3, #0
 800966a:	d113      	bne.n	8009694 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800966c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8009670:	b25b      	sxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	da03      	bge.n	800967e <f_stat+0x66>
				res = FR_INVALID_NAME;
 8009676:	2306      	movs	r3, #6
 8009678:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800967c:	e00a      	b.n	8009694 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800967e:	463b      	mov	r3, r7
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <f_stat+0x7c>
 8009686:	463b      	mov	r3, r7
 8009688:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800968c:	6819      	ldr	r1, [r3, #0]
 800968e:	4610      	mov	r0, r2
 8009690:	f7fe fa7a 	bl	8007b88 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009694:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009698:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fc ff9c 	bl	80065dc <unlock_fs>
 80096a4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096ca:	4b1f      	ldr	r3, [pc, #124]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096cc:	7a5b      	ldrb	r3, [r3, #9]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d131      	bne.n	8009738 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096d4:	4b1c      	ldr	r3, [pc, #112]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096d6:	7a5b      	ldrb	r3, [r3, #9]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096de:	2100      	movs	r1, #0
 80096e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096e4:	7a5b      	ldrb	r3, [r3, #9]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	4a17      	ldr	r2, [pc, #92]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096f4:	7a5b      	ldrb	r3, [r3, #9]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 80096fc:	4413      	add	r3, r2
 80096fe:	79fa      	ldrb	r2, [r7, #7]
 8009700:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009702:	4b11      	ldr	r3, [pc, #68]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 8009704:	7a5b      	ldrb	r3, [r3, #9]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	b2d1      	uxtb	r1, r2
 800970c:	4a0e      	ldr	r2, [pc, #56]	; (8009748 <FATFS_LinkDriverEx+0x94>)
 800970e:	7251      	strb	r1, [r2, #9]
 8009710:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009712:	7dbb      	ldrb	r3, [r7, #22]
 8009714:	3330      	adds	r3, #48	; 0x30
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3301      	adds	r3, #1
 8009720:	223a      	movs	r2, #58	; 0x3a
 8009722:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3302      	adds	r3, #2
 8009728:	222f      	movs	r2, #47	; 0x2f
 800972a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	3303      	adds	r3, #3
 8009730:	2200      	movs	r2, #0
 8009732:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	200000e8 	.word	0x200000e8

0800974c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009756:	2200      	movs	r2, #0
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff ffaa 	bl	80096b4 <FATFS_LinkDriverEx>
 8009760:	4603      	mov	r3, r0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	2b7f      	cmp	r3, #127	; 0x7f
 800977c:	d802      	bhi.n	8009784 <ff_convert+0x18>
		c = chr;
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	81fb      	strh	r3, [r7, #14]
 8009782:	e025      	b.n	80097d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	2bff      	cmp	r3, #255	; 0xff
 800978e:	d805      	bhi.n	800979c <ff_convert+0x30>
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	3b80      	subs	r3, #128	; 0x80
 8009794:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <ff_convert+0x74>)
 8009796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800979a:	e000      	b.n	800979e <ff_convert+0x32>
 800979c:	2300      	movs	r3, #0
 800979e:	81fb      	strh	r3, [r7, #14]
 80097a0:	e016      	b.n	80097d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80097a2:	2300      	movs	r3, #0
 80097a4:	81fb      	strh	r3, [r7, #14]
 80097a6:	e009      	b.n	80097bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80097a8:	89fb      	ldrh	r3, [r7, #14]
 80097aa:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <ff_convert+0x74>)
 80097ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b0:	88fa      	ldrh	r2, [r7, #6]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d006      	beq.n	80097c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80097b6:	89fb      	ldrh	r3, [r7, #14]
 80097b8:	3301      	adds	r3, #1
 80097ba:	81fb      	strh	r3, [r7, #14]
 80097bc:	89fb      	ldrh	r3, [r7, #14]
 80097be:	2b7f      	cmp	r3, #127	; 0x7f
 80097c0:	d9f2      	bls.n	80097a8 <ff_convert+0x3c>
 80097c2:	e000      	b.n	80097c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80097c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80097c6:	89fb      	ldrh	r3, [r7, #14]
 80097c8:	3380      	adds	r3, #128	; 0x80
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80097d0:	89fb      	ldrh	r3, [r7, #14]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	0800d5d0 	.word	0x0800d5d0

080097e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f4:	d201      	bcs.n	80097fa <ff_wtoupper+0x16>
 80097f6:	4b3e      	ldr	r3, [pc, #248]	; (80098f0 <ff_wtoupper+0x10c>)
 80097f8:	e000      	b.n	80097fc <ff_wtoupper+0x18>
 80097fa:	4b3e      	ldr	r3, [pc, #248]	; (80098f4 <ff_wtoupper+0x110>)
 80097fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	1c9a      	adds	r2, r3, #2
 8009802:	617a      	str	r2, [r7, #20]
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009808:	8a7b      	ldrh	r3, [r7, #18]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d068      	beq.n	80098e0 <ff_wtoupper+0xfc>
 800980e:	88fa      	ldrh	r2, [r7, #6]
 8009810:	8a7b      	ldrh	r3, [r7, #18]
 8009812:	429a      	cmp	r2, r3
 8009814:	d364      	bcc.n	80098e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	1c9a      	adds	r2, r3, #2
 800981a:	617a      	str	r2, [r7, #20]
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	823b      	strh	r3, [r7, #16]
 8009820:	8a3b      	ldrh	r3, [r7, #16]
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	81fb      	strh	r3, [r7, #14]
 8009826:	8a3b      	ldrh	r3, [r7, #16]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800982c:	88fa      	ldrh	r2, [r7, #6]
 800982e:	8a79      	ldrh	r1, [r7, #18]
 8009830:	8a3b      	ldrh	r3, [r7, #16]
 8009832:	440b      	add	r3, r1
 8009834:	429a      	cmp	r2, r3
 8009836:	da49      	bge.n	80098cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8009838:	89fb      	ldrh	r3, [r7, #14]
 800983a:	2b08      	cmp	r3, #8
 800983c:	d84f      	bhi.n	80098de <ff_wtoupper+0xfa>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <ff_wtoupper+0x60>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009869 	.word	0x08009869
 8009848:	0800987b 	.word	0x0800987b
 800984c:	08009891 	.word	0x08009891
 8009850:	08009899 	.word	0x08009899
 8009854:	080098a1 	.word	0x080098a1
 8009858:	080098a9 	.word	0x080098a9
 800985c:	080098b1 	.word	0x080098b1
 8009860:	080098b9 	.word	0x080098b9
 8009864:	080098c1 	.word	0x080098c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	8a7b      	ldrh	r3, [r7, #18]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	80fb      	strh	r3, [r7, #6]
 8009878:	e027      	b.n	80098ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	8a7b      	ldrh	r3, [r7, #18]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	b29b      	uxth	r3, r3
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	b29b      	uxth	r3, r3
 8009888:	88fa      	ldrh	r2, [r7, #6]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	80fb      	strh	r3, [r7, #6]
 800988e:	e01c      	b.n	80098ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	3b10      	subs	r3, #16
 8009894:	80fb      	strh	r3, [r7, #6]
 8009896:	e018      	b.n	80098ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	3b20      	subs	r3, #32
 800989c:	80fb      	strh	r3, [r7, #6]
 800989e:	e014      	b.n	80098ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	3b30      	subs	r3, #48	; 0x30
 80098a4:	80fb      	strh	r3, [r7, #6]
 80098a6:	e010      	b.n	80098ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	3b1a      	subs	r3, #26
 80098ac:	80fb      	strh	r3, [r7, #6]
 80098ae:	e00c      	b.n	80098ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	3308      	adds	r3, #8
 80098b4:	80fb      	strh	r3, [r7, #6]
 80098b6:	e008      	b.n	80098ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80098b8:	88fb      	ldrh	r3, [r7, #6]
 80098ba:	3b50      	subs	r3, #80	; 0x50
 80098bc:	80fb      	strh	r3, [r7, #6]
 80098be:	e004      	b.n	80098ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80098c0:	88fb      	ldrh	r3, [r7, #6]
 80098c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80098c6:	80fb      	strh	r3, [r7, #6]
 80098c8:	bf00      	nop
			}
			break;
 80098ca:	e008      	b.n	80098de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d195      	bne.n	80097fe <ff_wtoupper+0x1a>
 80098d2:	8a3b      	ldrh	r3, [r7, #16]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80098dc:	e78f      	b.n	80097fe <ff_wtoupper+0x1a>
			break;
 80098de:	bf00      	nop
	}

	return chr;
 80098e0:	88fb      	ldrh	r3, [r7, #6]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	0800d6d0 	.word	0x0800d6d0
 80098f4:	0800d8c4 	.word	0x0800d8c4

080098f8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009904:	2200      	movs	r2, #0
 8009906:	2101      	movs	r1, #1
 8009908:	2001      	movs	r0, #1
 800990a:	f000 f9af 	bl	8009c6c <osSemaphoreNew>
 800990e:	4602      	mov	r2, r0
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	60fb      	str	r3, [r7, #12]

    return ret;
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fab8 	bl	8009eac <osSemaphoreDelete>
#endif
    return 1;
 800993c:	2301      	movs	r3, #1
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa12 	bl	8009d80 <osSemaphoreAcquire>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009962:	2301      	movs	r3, #1
 8009964:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009966:	68fb      	ldr	r3, [r7, #12]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa53 	bl	8009e24 <osSemaphoreRelease>
#endif
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <__NVIC_SetPriority>:
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	6039      	str	r1, [r7, #0]
 8009992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009998:	2b00      	cmp	r3, #0
 800999a:	db0a      	blt.n	80099b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	490c      	ldr	r1, [pc, #48]	; (80099d4 <__NVIC_SetPriority+0x4c>)
 80099a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a6:	0112      	lsls	r2, r2, #4
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	440b      	add	r3, r1
 80099ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80099b0:	e00a      	b.n	80099c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	4908      	ldr	r1, [pc, #32]	; (80099d8 <__NVIC_SetPriority+0x50>)
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	3b04      	subs	r3, #4
 80099c0:	0112      	lsls	r2, r2, #4
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	440b      	add	r3, r1
 80099c6:	761a      	strb	r2, [r3, #24]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	e000e100 	.word	0xe000e100
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <SysTick_Handler+0x1c>)
 80099e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80099e4:	f002 fb54 	bl	800c090 <xTaskGetSchedulerState>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d001      	beq.n	80099f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80099ee:	f003 fa3b 	bl	800ce68 <xPortSysTickHandler>
  }
}
 80099f2:	bf00      	nop
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	e000e010 	.word	0xe000e010

080099fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a00:	2100      	movs	r1, #0
 8009a02:	f06f 0004 	mvn.w	r0, #4
 8009a06:	f7ff ffbf 	bl	8009988 <__NVIC_SetPriority>
#endif
}
 8009a0a:	bf00      	nop
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a16:	f3ef 8305 	mrs	r3, IPSR
 8009a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a22:	f06f 0305 	mvn.w	r3, #5
 8009a26:	607b      	str	r3, [r7, #4]
 8009a28:	e00c      	b.n	8009a44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a2a:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <osKernelInitialize+0x44>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d105      	bne.n	8009a3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a32:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <osKernelInitialize+0x44>)
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	607b      	str	r3, [r7, #4]
 8009a3c:	e002      	b.n	8009a44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a44:	687b      	ldr	r3, [r7, #4]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200000f4 	.word	0x200000f4

08009a58 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009a5e:	f002 fb17 	bl	800c090 <xTaskGetSchedulerState>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <osKernelGetState+0x1a>
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d105      	bne.n	8009a78 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	607b      	str	r3, [r7, #4]
      break;
 8009a70:	e00c      	b.n	8009a8c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009a72:	2303      	movs	r3, #3
 8009a74:	607b      	str	r3, [r7, #4]
      break;
 8009a76:	e009      	b.n	8009a8c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <osKernelGetState+0x40>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d102      	bne.n	8009a86 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009a80:	2301      	movs	r3, #1
 8009a82:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009a84:	e001      	b.n	8009a8a <osKernelGetState+0x32>
        state = osKernelInactive;
 8009a86:	2300      	movs	r3, #0
 8009a88:	607b      	str	r3, [r7, #4]
      break;
 8009a8a:	bf00      	nop
  }

  return (state);
 8009a8c:	687b      	ldr	r3, [r7, #4]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200000f4 	.word	0x200000f4

08009a9c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa2:	f3ef 8305 	mrs	r3, IPSR
 8009aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8009aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009aae:	f06f 0305 	mvn.w	r3, #5
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	e010      	b.n	8009ad8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <osKernelStart+0x48>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d109      	bne.n	8009ad2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009abe:	f7ff ff9d 	bl	80099fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ac2:	4b08      	ldr	r3, [pc, #32]	; (8009ae4 <osKernelStart+0x48>)
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ac8:	f001 fe88 	bl	800b7dc <vTaskStartScheduler>
      stat = osOK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e002      	b.n	8009ad8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ad8:	687b      	ldr	r3, [r7, #4]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200000f4 	.word	0x200000f4

08009ae8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aee:	f3ef 8305 	mrs	r3, IPSR
 8009af2:	603b      	str	r3, [r7, #0]
  return(result);
 8009af4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009afa:	f001 ff91 	bl	800ba20 <xTaskGetTickCountFromISR>
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	e002      	b.n	8009b08 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009b02:	f001 ff7d 	bl	800ba00 <xTaskGetTickCount>
 8009b06:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009b08:	687b      	ldr	r3, [r7, #4]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b08e      	sub	sp, #56	; 0x38
 8009b16:	af04      	add	r7, sp, #16
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b22:	f3ef 8305 	mrs	r3, IPSR
 8009b26:	617b      	str	r3, [r7, #20]
  return(result);
 8009b28:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d17e      	bne.n	8009c2c <osThreadNew+0x11a>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d07b      	beq.n	8009c2c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b38:	2318      	movs	r3, #24
 8009b3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d045      	beq.n	8009bd8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <osThreadNew+0x48>
        name = attr->name;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <osThreadNew+0x6e>
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	2b38      	cmp	r3, #56	; 0x38
 8009b72:	d805      	bhi.n	8009b80 <osThreadNew+0x6e>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <osThreadNew+0x72>
        return (NULL);
 8009b80:	2300      	movs	r3, #0
 8009b82:	e054      	b.n	8009c2e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	089b      	lsrs	r3, r3, #2
 8009b92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00e      	beq.n	8009bba <osThreadNew+0xa8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	2b5b      	cmp	r3, #91	; 0x5b
 8009ba2:	d90a      	bls.n	8009bba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d006      	beq.n	8009bba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <osThreadNew+0xa8>
        mem = 1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	e010      	b.n	8009bdc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <osThreadNew+0xca>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d108      	bne.n	8009bdc <osThreadNew+0xca>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d104      	bne.n	8009bdc <osThreadNew+0xca>
          mem = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	e001      	b.n	8009bdc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d110      	bne.n	8009c04 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bea:	9202      	str	r2, [sp, #8]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6a3a      	ldr	r2, [r7, #32]
 8009bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f001 fba3 	bl	800b344 <xTaskCreateStatic>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	e013      	b.n	8009c2c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d110      	bne.n	8009c2c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	f107 0310 	add.w	r3, r7, #16
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f001 fbee 	bl	800b3fe <xTaskCreate>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d001      	beq.n	8009c2c <osThreadNew+0x11a>
            hTask = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c2c:	693b      	ldr	r3, [r7, #16]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <osDelay+0x1c>
    stat = osErrorISR;
 8009c4a:	f06f 0305 	mvn.w	r3, #5
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e007      	b.n	8009c62 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fd13 	bl	800b688 <vTaskDelay>
    }
  }

  return (stat);
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7c:	f3ef 8305 	mrs	r3, IPSR
 8009c80:	613b      	str	r3, [r7, #16]
  return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d175      	bne.n	8009d74 <osSemaphoreNew+0x108>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d072      	beq.n	8009d74 <osSemaphoreNew+0x108>
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d86e      	bhi.n	8009d74 <osSemaphoreNew+0x108>
    mem = -1;
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d015      	beq.n	8009cce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d006      	beq.n	8009cb8 <osSemaphoreNew+0x4c>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	2b4f      	cmp	r3, #79	; 0x4f
 8009cb0:	d902      	bls.n	8009cb8 <osSemaphoreNew+0x4c>
        mem = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e00c      	b.n	8009cd2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <osSemaphoreNew+0x66>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d104      	bne.n	8009cd2 <osSemaphoreNew+0x66>
          mem = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e001      	b.n	8009cd2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd8:	d04c      	beq.n	8009d74 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d128      	bne.n	8009d32 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10a      	bne.n	8009cfc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2203      	movs	r2, #3
 8009cec:	9200      	str	r2, [sp, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	f000 fb80 	bl	800a3f8 <xQueueGenericCreateStatic>
 8009cf8:	61f8      	str	r0, [r7, #28]
 8009cfa:	e005      	b.n	8009d08 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	2100      	movs	r1, #0
 8009d00:	2001      	movs	r0, #1
 8009d02:	f000 fbf1 	bl	800a4e8 <xQueueGenericCreate>
 8009d06:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d022      	beq.n	8009d54 <osSemaphoreNew+0xe8>
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01f      	beq.n	8009d54 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d14:	2300      	movs	r3, #0
 8009d16:	2200      	movs	r2, #0
 8009d18:	2100      	movs	r1, #0
 8009d1a:	69f8      	ldr	r0, [r7, #28]
 8009d1c:	f000 fcac 	bl	800a678 <xQueueGenericSend>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d016      	beq.n	8009d54 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d26:	69f8      	ldr	r0, [r7, #28]
 8009d28:	f001 f938 	bl	800af9c <vQueueDelete>
            hSemaphore = NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e010      	b.n	8009d54 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d108      	bne.n	8009d4a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 fc2e 	bl	800a5a2 <xQueueCreateCountingSemaphoreStatic>
 8009d46:	61f8      	str	r0, [r7, #28]
 8009d48:	e004      	b.n	8009d54 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fc5f 	bl	800a610 <xQueueCreateCountingSemaphore>
 8009d52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00c      	beq.n	8009d74 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	e001      	b.n	8009d6c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d6c:	6979      	ldr	r1, [r7, #20]
 8009d6e:	69f8      	ldr	r0, [r7, #28]
 8009d70:	f001 fa60 	bl	800b234 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009d74:	69fb      	ldr	r3, [r7, #28]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009d98:	f06f 0303 	mvn.w	r3, #3
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	e039      	b.n	8009e14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da0:	f3ef 8305 	mrs	r3, IPSR
 8009da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009da6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d022      	beq.n	8009df2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009db2:	f06f 0303 	mvn.w	r3, #3
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e02c      	b.n	8009e14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6938      	ldr	r0, [r7, #16]
 8009dc8:	f001 f868 	bl	800ae9c <xQueueReceiveFromISR>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d003      	beq.n	8009dda <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009dd2:	f06f 0302 	mvn.w	r3, #2
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	e01c      	b.n	8009e14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d019      	beq.n	8009e14 <osSemaphoreAcquire+0x94>
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <osSemaphoreAcquire+0xa0>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	e010      	b.n	8009e14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6938      	ldr	r0, [r7, #16]
 8009df6:	f000 ff45 	bl	800ac84 <xQueueSemaphoreTake>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d009      	beq.n	8009e14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009e06:	f06f 0301 	mvn.w	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e002      	b.n	8009e14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009e0e:	f06f 0302 	mvn.w	r3, #2
 8009e12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009e14:	697b      	ldr	r3, [r7, #20]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e3a:	f06f 0303 	mvn.w	r3, #3
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	e02c      	b.n	8009e9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e42:	f3ef 8305 	mrs	r3, IPSR
 8009e46:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d01a      	beq.n	8009e84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009e52:	f107 0308 	add.w	r3, r7, #8
 8009e56:	4619      	mov	r1, r3
 8009e58:	6938      	ldr	r0, [r7, #16]
 8009e5a:	f000 fda6 	bl	800a9aa <xQueueGiveFromISR>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d003      	beq.n	8009e6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009e64:	f06f 0302 	mvn.w	r3, #2
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e017      	b.n	8009e9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d014      	beq.n	8009e9c <osSemaphoreRelease+0x78>
 8009e72:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <osSemaphoreRelease+0x84>)
 8009e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	e00b      	b.n	8009e9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e84:	2300      	movs	r3, #0
 8009e86:	2200      	movs	r2, #0
 8009e88:	2100      	movs	r1, #0
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f000 fbf4 	bl	800a678 <xQueueGenericSend>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d002      	beq.n	8009e9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009e96:	f06f 0302 	mvn.w	r3, #2
 8009e9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009e9c:	697b      	ldr	r3, [r7, #20]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eb8:	f3ef 8305 	mrs	r3, IPSR
 8009ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009ec4:	f06f 0305 	mvn.w	r3, #5
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e00e      	b.n	8009eea <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009ed2:	f06f 0303 	mvn.w	r3, #3
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e007      	b.n	8009eea <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009eda:	6938      	ldr	r0, [r7, #16]
 8009edc:	f001 f9d4 	bl	800b288 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009ee4:	6938      	ldr	r0, [r7, #16]
 8009ee6:	f001 f859 	bl	800af9c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009eea:	697b      	ldr	r3, [r7, #20]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08a      	sub	sp, #40	; 0x28
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f04:	f3ef 8305 	mrs	r3, IPSR
 8009f08:	613b      	str	r3, [r7, #16]
  return(result);
 8009f0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d15f      	bne.n	8009fd0 <osMessageQueueNew+0xdc>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d05c      	beq.n	8009fd0 <osMessageQueueNew+0xdc>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d059      	beq.n	8009fd0 <osMessageQueueNew+0xdc>
    mem = -1;
 8009f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d029      	beq.n	8009f7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d012      	beq.n	8009f56 <osMessageQueueNew+0x62>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b4f      	cmp	r3, #79	; 0x4f
 8009f36:	d90e      	bls.n	8009f56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	695a      	ldr	r2, [r3, #20]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	fb01 f303 	mul.w	r3, r1, r3
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d302      	bcc.n	8009f56 <osMessageQueueNew+0x62>
        mem = 1;
 8009f50:	2301      	movs	r3, #1
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	e014      	b.n	8009f80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d110      	bne.n	8009f80 <osMessageQueueNew+0x8c>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10c      	bne.n	8009f80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d108      	bne.n	8009f80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <osMessageQueueNew+0x8c>
          mem = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	e001      	b.n	8009f80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d10b      	bne.n	8009f9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	2100      	movs	r1, #0
 8009f90:	9100      	str	r1, [sp, #0]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 fa2f 	bl	800a3f8 <xQueueGenericCreateStatic>
 8009f9a:	61f8      	str	r0, [r7, #28]
 8009f9c:	e008      	b.n	8009fb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 fa9d 	bl	800a4e8 <xQueueGenericCreate>
 8009fae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00c      	beq.n	8009fd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e001      	b.n	8009fc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009fc8:	6979      	ldr	r1, [r7, #20]
 8009fca:	69f8      	ldr	r0, [r7, #28]
 8009fcc:	f001 f932 	bl	800b234 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009fd0:	69fb      	ldr	r3, [r7, #28]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff4:	f3ef 8305 	mrs	r3, IPSR
 8009ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d028      	beq.n	800a052 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <osMessageQueuePut+0x36>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <osMessageQueuePut+0x36>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a012:	f06f 0303 	mvn.w	r3, #3
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e038      	b.n	800a08c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a01e:	f107 0210 	add.w	r2, r7, #16
 800a022:	2300      	movs	r3, #0
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	69b8      	ldr	r0, [r7, #24]
 800a028:	f000 fc24 	bl	800a874 <xQueueGenericSendFromISR>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d003      	beq.n	800a03a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a032:	f06f 0302 	mvn.w	r3, #2
 800a036:	61fb      	str	r3, [r7, #28]
 800a038:	e028      	b.n	800a08c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d025      	beq.n	800a08c <osMessageQueuePut+0xb0>
 800a040:	4b15      	ldr	r3, [pc, #84]	; (800a098 <osMessageQueuePut+0xbc>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	e01c      	b.n	800a08c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <osMessageQueuePut+0x82>
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a05e:	f06f 0303 	mvn.w	r3, #3
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e012      	b.n	800a08c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a066:	2300      	movs	r3, #0
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	69b8      	ldr	r0, [r7, #24]
 800a06e:	f000 fb03 	bl	800a678 <xQueueGenericSend>
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d009      	beq.n	800a08c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a07e:	f06f 0301 	mvn.w	r3, #1
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	e002      	b.n	800a08c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a086:	f06f 0302 	mvn.w	r3, #2
 800a08a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a08c:	69fb      	ldr	r3, [r7, #28]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3720      	adds	r7, #32
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b2:	f3ef 8305 	mrs	r3, IPSR
 800a0b6:	617b      	str	r3, [r7, #20]
  return(result);
 800a0b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d028      	beq.n	800a110 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <osMessageQueueGet+0x34>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <osMessageQueueGet+0x34>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a0d0:	f06f 0303 	mvn.w	r3, #3
 800a0d4:	61fb      	str	r3, [r7, #28]
 800a0d6:	e037      	b.n	800a148 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0dc:	f107 0310 	add.w	r3, r7, #16
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f000 fed9 	bl	800ae9c <xQueueReceiveFromISR>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d003      	beq.n	800a0f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a0f0:	f06f 0302 	mvn.w	r3, #2
 800a0f4:	61fb      	str	r3, [r7, #28]
 800a0f6:	e027      	b.n	800a148 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d024      	beq.n	800a148 <osMessageQueueGet+0xac>
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <osMessageQueueGet+0xb8>)
 800a100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	e01b      	b.n	800a148 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <osMessageQueueGet+0x80>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d103      	bne.n	800a124 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a11c:	f06f 0303 	mvn.w	r3, #3
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	e011      	b.n	800a148 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	69b8      	ldr	r0, [r7, #24]
 800a12a:	f000 fccb 	bl	800aac4 <xQueueReceive>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b01      	cmp	r3, #1
 800a132:	d009      	beq.n	800a148 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a13a:	f06f 0301 	mvn.w	r3, #1
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e002      	b.n	800a148 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a142:	f06f 0302 	mvn.w	r3, #2
 800a146:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a148:	69fb      	ldr	r3, [r7, #28]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3720      	adds	r7, #32
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	e000ed04 	.word	0xe000ed04

0800a158 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4a07      	ldr	r2, [pc, #28]	; (800a184 <vApplicationGetIdleTaskMemory+0x2c>)
 800a168:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4a06      	ldr	r2, [pc, #24]	; (800a188 <vApplicationGetIdleTaskMemory+0x30>)
 800a16e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2280      	movs	r2, #128	; 0x80
 800a174:	601a      	str	r2, [r3, #0]
}
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	200000f8 	.word	0x200000f8
 800a188:	20000154 	.word	0x20000154

0800a18c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4a07      	ldr	r2, [pc, #28]	; (800a1b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a19c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4a06      	ldr	r2, [pc, #24]	; (800a1bc <vApplicationGetTimerTaskMemory+0x30>)
 800a1a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1aa:	601a      	str	r2, [r3, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	20000354 	.word	0x20000354
 800a1bc:	200003b0 	.word	0x200003b0

0800a1c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f103 0208 	add.w	r2, r3, #8
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f103 0208 	add.w	r2, r3, #8
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f103 0208 	add.w	r2, r3, #8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a20e:	bf00      	nop
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
}
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a262:	b480      	push	{r7}
 800a264:	b085      	sub	sp, #20
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a278:	d103      	bne.n	800a282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e00c      	b.n	800a29c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3308      	adds	r3, #8
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e002      	b.n	800a290 <vListInsert+0x2e>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d2f6      	bcs.n	800a28a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
}
 800a2c8:	bf00      	nop
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6892      	ldr	r2, [r2, #8]
 800a2ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6852      	ldr	r2, [r2, #4]
 800a2f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d103      	bne.n	800a308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a352:	f002 fcf7 	bl	800cd44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a362:	fb01 f303 	mul.w	r3, r1, r3
 800a366:	441a      	add	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	3b01      	subs	r3, #1
 800a384:	68f9      	ldr	r1, [r7, #12]
 800a386:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	441a      	add	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	22ff      	movs	r2, #255	; 0xff
 800a396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	22ff      	movs	r2, #255	; 0xff
 800a39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d114      	bne.n	800a3d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01a      	beq.n	800a3e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3310      	adds	r3, #16
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fcad 	bl	800bd14 <xTaskRemoveFromEventList>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d012      	beq.n	800a3e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3c0:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <xQueueGenericReset+0xcc>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	e009      	b.n	800a3e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fef2 	bl	800a1c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3324      	adds	r3, #36	; 0x24
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff feed 	bl	800a1c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3e6:	f002 fcdd 	bl	800cda4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3ea:	2301      	movs	r3, #1
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af02      	add	r7, sp, #8
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <xQueueGenericCreateStatic+0x52>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <xQueueGenericCreateStatic+0x56>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <xQueueGenericCreateStatic+0x58>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	623b      	str	r3, [r7, #32]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <xQueueGenericCreateStatic+0x7e>
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <xQueueGenericCreateStatic+0x82>
 800a476:	2301      	movs	r3, #1
 800a478:	e000      	b.n	800a47c <xQueueGenericCreateStatic+0x84>
 800a47a:	2300      	movs	r3, #0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	61fb      	str	r3, [r7, #28]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a496:	2350      	movs	r3, #80	; 0x50
 800a498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b50      	cmp	r3, #80	; 0x50
 800a49e:	d00a      	beq.n	800a4b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	61bb      	str	r3, [r7, #24]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00d      	beq.n	800a4de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f83f 	bl	800a55c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3730      	adds	r7, #48	; 0x30
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08a      	sub	sp, #40	; 0x28
 800a4ec:	af02      	add	r7, sp, #8
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10a      	bne.n	800a512 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	613b      	str	r3, [r7, #16]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	fb02 f303 	mul.w	r3, r2, r3
 800a51a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3350      	adds	r3, #80	; 0x50
 800a520:	4618      	mov	r0, r3
 800a522:	f002 fd31 	bl	800cf88 <pvPortMalloc>
 800a526:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d011      	beq.n	800a552 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	3350      	adds	r3, #80	; 0x50
 800a536:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a540:	79fa      	ldrb	r2, [r7, #7]
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	4613      	mov	r3, r2
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f805 	bl	800a55c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a552:	69bb      	ldr	r3, [r7, #24]
	}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d103      	bne.n	800a578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	69ba      	ldr	r2, [r7, #24]
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e002      	b.n	800a57e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a58a:	2101      	movs	r1, #1
 800a58c:	69b8      	ldr	r0, [r7, #24]
 800a58e:	f7ff fecb 	bl	800a328 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	78fa      	ldrb	r2, [r7, #3]
 800a596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b08a      	sub	sp, #40	; 0x28
 800a5a6:	af02      	add	r7, sp, #8
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	61bb      	str	r3, [r7, #24]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d90a      	bls.n	800a5e8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	617b      	str	r3, [r7, #20]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f7ff ff00 	bl	800a3f8 <xQueueGenericCreateStatic>
 800a5f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a606:	69fb      	ldr	r3, [r7, #28]
	}
 800a608:	4618      	mov	r0, r3
 800a60a:	3720      	adds	r7, #32
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d90a      	bls.n	800a654 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	60fb      	str	r3, [r7, #12]
}
 800a650:	bf00      	nop
 800a652:	e7fe      	b.n	800a652 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a654:	2202      	movs	r2, #2
 800a656:	2100      	movs	r1, #0
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ff45 	bl	800a4e8 <xQueueGenericCreate>
 800a65e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a66c:	697b      	ldr	r3, [r7, #20]
	}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	; 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a686:	2300      	movs	r3, #0
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10a      	bne.n	800a6aa <xQueueGenericSend+0x32>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <xQueueGenericSend+0x40>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d101      	bne.n	800a6bc <xQueueGenericSend+0x44>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <xQueueGenericSend+0x46>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <xQueueGenericSend+0x60>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d103      	bne.n	800a6e6 <xQueueGenericSend+0x6e>
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d101      	bne.n	800a6ea <xQueueGenericSend+0x72>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e000      	b.n	800a6ec <xQueueGenericSend+0x74>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	623b      	str	r3, [r7, #32]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a706:	f001 fcc3 	bl	800c090 <xTaskGetSchedulerState>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <xQueueGenericSend+0x9e>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <xQueueGenericSend+0xa2>
 800a716:	2301      	movs	r3, #1
 800a718:	e000      	b.n	800a71c <xQueueGenericSend+0xa4>
 800a71a:	2300      	movs	r3, #0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <xQueueGenericSend+0xbe>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	61fb      	str	r3, [r7, #28]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a736:	f002 fb05 	bl	800cd44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a742:	429a      	cmp	r2, r3
 800a744:	d302      	bcc.n	800a74c <xQueueGenericSend+0xd4>
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d129      	bne.n	800a7a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fc5e 	bl	800b012 <prvCopyDataToQueue>
 800a756:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d010      	beq.n	800a782 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	3324      	adds	r3, #36	; 0x24
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fad5 	bl	800bd14 <xTaskRemoveFromEventList>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d013      	beq.n	800a798 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a770:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <xQueueGenericSend+0x1f8>)
 800a772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	e00a      	b.n	800a798 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d007      	beq.n	800a798 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a788:	4b39      	ldr	r3, [pc, #228]	; (800a870 <xQueueGenericSend+0x1f8>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a798:	f002 fb04 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e063      	b.n	800a868 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d103      	bne.n	800a7ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7a6:	f002 fafd 	bl	800cda4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e05c      	b.n	800a868 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d106      	bne.n	800a7c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7b4:	f107 0314 	add.w	r3, r7, #20
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fb0f 	bl	800bddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7c2:	f002 faef 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7c6:	f001 f86f 	bl	800b8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7ca:	f002 fabb 	bl	800cd44 <vPortEnterCritical>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d4:	b25b      	sxtb	r3, r3
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7da:	d103      	bne.n	800a7e4 <xQueueGenericSend+0x16c>
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f0:	d103      	bne.n	800a7fa <xQueueGenericSend+0x182>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7fa:	f002 fad3 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7fe:	1d3a      	adds	r2, r7, #4
 800a800:	f107 0314 	add.w	r3, r7, #20
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f001 fafe 	bl	800be08 <xTaskCheckForTimeOut>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d124      	bne.n	800a85c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a814:	f000 fcf5 	bl	800b202 <prvIsQueueFull>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d018      	beq.n	800a850 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	3310      	adds	r3, #16
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f001 fa24 	bl	800bc74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a82c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82e:	f000 fc80 	bl	800b132 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a832:	f001 f847 	bl	800b8c4 <xTaskResumeAll>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f47f af7c 	bne.w	800a736 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <xQueueGenericSend+0x1f8>)
 800a840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	e772      	b.n	800a736 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a852:	f000 fc6e 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a856:	f001 f835 	bl	800b8c4 <xTaskResumeAll>
 800a85a:	e76c      	b.n	800a736 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85e:	f000 fc68 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a862:	f001 f82f 	bl	800b8c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a866:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3738      	adds	r7, #56	; 0x38
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	e000ed04 	.word	0xe000ed04

0800a874 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b090      	sub	sp, #64	; 0x40
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10a      	bne.n	800a8a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x3c>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <xQueueGenericSendFromISR+0x40>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <xQueueGenericSendFromISR+0x42>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d103      	bne.n	800a8de <xQueueGenericSendFromISR+0x6a>
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <xQueueGenericSendFromISR+0x6e>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <xQueueGenericSendFromISR+0x70>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	623b      	str	r3, [r7, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8fe:	f002 fb03 	bl	800cf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a902:	f3ef 8211 	mrs	r2, BASEPRI
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	61fa      	str	r2, [r7, #28]
 800a918:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a91a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a91c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	429a      	cmp	r2, r3
 800a928:	d302      	bcc.n	800a930 <xQueueGenericSendFromISR+0xbc>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d12f      	bne.n	800a990 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68b9      	ldr	r1, [r7, #8]
 800a944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a946:	f000 fb64 	bl	800b012 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a94a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a94e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a952:	d112      	bne.n	800a97a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d016      	beq.n	800a98a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	4618      	mov	r0, r3
 800a962:	f001 f9d7 	bl	800bd14 <xTaskRemoveFromEventList>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00e      	beq.n	800a98a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	e007      	b.n	800a98a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a97a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a97e:	3301      	adds	r3, #1
 800a980:	b2db      	uxtb	r3, r3
 800a982:	b25a      	sxtb	r2, r3
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a98a:	2301      	movs	r3, #1
 800a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a98e:	e001      	b.n	800a994 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a990:	2300      	movs	r3, #0
 800a992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a996:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a99e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3740      	adds	r7, #64	; 0x40
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b08e      	sub	sp, #56	; 0x38
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10a      	bne.n	800a9d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	623b      	str	r3, [r7, #32]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61fb      	str	r3, [r7, #28]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <xQueueGiveFromISR+0x58>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <xQueueGiveFromISR+0x5c>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueGiveFromISR+0x5e>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueGiveFromISR+0x78>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	61bb      	str	r3, [r7, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa22:	f002 fa71 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800aa26:	f3ef 8211 	mrs	r2, BASEPRI
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	617a      	str	r2, [r7, #20]
 800aa3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d22b      	bcs.n	800aaaa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa6c:	d112      	bne.n	800aa94 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d016      	beq.n	800aaa4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	3324      	adds	r3, #36	; 0x24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 f94a 	bl	800bd14 <xTaskRemoveFromEventList>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00e      	beq.n	800aaa4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e007      	b.n	800aaa4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	b25a      	sxtb	r2, r3
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	e001      	b.n	800aaae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f383 8811 	msr	BASEPRI, r3
}
 800aab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3738      	adds	r7, #56	; 0x38
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08c      	sub	sp, #48	; 0x30
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aad0:	2300      	movs	r3, #0
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <xQueueReceive+0x30>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	623b      	str	r3, [r7, #32]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d103      	bne.n	800ab02 <xQueueReceive+0x3e>
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <xQueueReceive+0x42>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <xQueueReceive+0x44>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <xQueueReceive+0x5e>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	61fb      	str	r3, [r7, #28]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab22:	f001 fab5 	bl	800c090 <xTaskGetSchedulerState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <xQueueReceive+0x6e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <xQueueReceive+0x72>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <xQueueReceive+0x74>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xQueueReceive+0x8e>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	61bb      	str	r3, [r7, #24]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab52:	f002 f8f7 	bl	800cd44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d01f      	beq.n	800aba2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab66:	f000 fabe 	bl	800b0e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	1e5a      	subs	r2, r3, #1
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00f      	beq.n	800ab9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	3310      	adds	r3, #16
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 f8c8 	bl	800bd14 <xTaskRemoveFromEventList>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab8a:	4b3d      	ldr	r3, [pc, #244]	; (800ac80 <xQueueReceive+0x1bc>)
 800ab8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab9a:	f002 f903 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e069      	b.n	800ac76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aba8:	f002 f8fc 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abac:	2300      	movs	r3, #0
 800abae:	e062      	b.n	800ac76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abb6:	f107 0310 	add.w	r3, r7, #16
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 f90e 	bl	800bddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abc0:	2301      	movs	r3, #1
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abc4:	f002 f8ee 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abc8:	f000 fe6e 	bl	800b8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abcc:	f002 f8ba 	bl	800cd44 <vPortEnterCritical>
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd6:	b25b      	sxtb	r3, r3
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abdc:	d103      	bne.n	800abe6 <xQueueReceive+0x122>
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abec:	b25b      	sxtb	r3, r3
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abf2:	d103      	bne.n	800abfc <xQueueReceive+0x138>
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abfc:	f002 f8d2 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac00:	1d3a      	adds	r2, r7, #4
 800ac02:	f107 0310 	add.w	r3, r7, #16
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f001 f8fd 	bl	800be08 <xTaskCheckForTimeOut>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d123      	bne.n	800ac5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac16:	f000 fade 	bl	800b1d6 <prvIsQueueEmpty>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d017      	beq.n	800ac50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	3324      	adds	r3, #36	; 0x24
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	4611      	mov	r1, r2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 f823 	bl	800bc74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac30:	f000 fa7f 	bl	800b132 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac34:	f000 fe46 	bl	800b8c4 <xTaskResumeAll>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d189      	bne.n	800ab52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac3e:	4b10      	ldr	r3, [pc, #64]	; (800ac80 <xQueueReceive+0x1bc>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	e780      	b.n	800ab52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac52:	f000 fa6e 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac56:	f000 fe35 	bl	800b8c4 <xTaskResumeAll>
 800ac5a:	e77a      	b.n	800ab52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac5e:	f000 fa68 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac62:	f000 fe2f 	bl	800b8c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac68:	f000 fab5 	bl	800b1d6 <prvIsQueueEmpty>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f43f af6f 	beq.w	800ab52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3730      	adds	r7, #48	; 0x30
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08e      	sub	sp, #56	; 0x38
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	623b      	str	r3, [r7, #32]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61fb      	str	r3, [r7, #28]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acd4:	f001 f9dc 	bl	800c090 <xTaskGetSchedulerState>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d102      	bne.n	800ace4 <xQueueSemaphoreTake+0x60>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <xQueueSemaphoreTake+0x64>
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <xQueueSemaphoreTake+0x66>
 800ace8:	2300      	movs	r3, #0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	61bb      	str	r3, [r7, #24]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad04:	f002 f81e 	bl	800cd44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d024      	beq.n	800ad5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	1e5a      	subs	r2, r3, #1
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d104      	bne.n	800ad2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad24:	f001 fb2a 	bl	800c37c <pvTaskIncrementMutexHeldCount>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00f      	beq.n	800ad56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	3310      	adds	r3, #16
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 ffea 	bl	800bd14 <xTaskRemoveFromEventList>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad46:	4b54      	ldr	r3, [pc, #336]	; (800ae98 <xQueueSemaphoreTake+0x214>)
 800ad48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad56:	f002 f825 	bl	800cda4 <vPortExitCritical>
				return pdPASS;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e097      	b.n	800ae8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d111      	bne.n	800ad88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00a      	beq.n	800ad80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	617b      	str	r3, [r7, #20]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad80:	f002 f810 	bl	800cda4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad84:	2300      	movs	r3, #0
 800ad86:	e082      	b.n	800ae8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d106      	bne.n	800ad9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad8e:	f107 030c 	add.w	r3, r7, #12
 800ad92:	4618      	mov	r0, r3
 800ad94:	f001 f822 	bl	800bddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad9c:	f002 f802 	bl	800cda4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ada0:	f000 fd82 	bl	800b8a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ada4:	f001 ffce 	bl	800cd44 <vPortEnterCritical>
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adae:	b25b      	sxtb	r3, r3
 800adb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adb4:	d103      	bne.n	800adbe <xQueueSemaphoreTake+0x13a>
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adca:	d103      	bne.n	800add4 <xQueueSemaphoreTake+0x150>
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800add4:	f001 ffe6 	bl	800cda4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add8:	463a      	mov	r2, r7
 800adda:	f107 030c 	add.w	r3, r7, #12
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 f811 	bl	800be08 <xTaskCheckForTimeOut>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d132      	bne.n	800ae52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adee:	f000 f9f2 	bl	800b1d6 <prvIsQueueEmpty>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d026      	beq.n	800ae46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d109      	bne.n	800ae14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae00:	f001 ffa0 	bl	800cd44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f001 f95f 	bl	800c0cc <xTaskPriorityInherit>
 800ae0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae10:	f001 ffc8 	bl	800cda4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae16:	3324      	adds	r3, #36	; 0x24
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 ff29 	bl	800bc74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae24:	f000 f985 	bl	800b132 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae28:	f000 fd4c 	bl	800b8c4 <xTaskResumeAll>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f47f af68 	bne.w	800ad04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae34:	4b18      	ldr	r3, [pc, #96]	; (800ae98 <xQueueSemaphoreTake+0x214>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	e75e      	b.n	800ad04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae48:	f000 f973 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae4c:	f000 fd3a 	bl	800b8c4 <xTaskResumeAll>
 800ae50:	e758      	b.n	800ad04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae54:	f000 f96d 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae58:	f000 fd34 	bl	800b8c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5e:	f000 f9ba 	bl	800b1d6 <prvIsQueueEmpty>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f43f af4d 	beq.w	800ad04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00d      	beq.n	800ae8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae70:	f001 ff68 	bl	800cd44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae76:	f000 f8b4 	bl	800afe2 <prvGetDisinheritPriorityAfterTimeout>
 800ae7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 f9f8 	bl	800c278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae88:	f001 ff8c 	bl	800cda4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3738      	adds	r7, #56	; 0x38
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08e      	sub	sp, #56	; 0x38
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	623b      	str	r3, [r7, #32]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d103      	bne.n	800aed6 <xQueueReceiveFromISR+0x3a>
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <xQueueReceiveFromISR+0x3e>
 800aed6:	2301      	movs	r3, #1
 800aed8:	e000      	b.n	800aedc <xQueueReceiveFromISR+0x40>
 800aeda:	2300      	movs	r3, #0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	61fb      	str	r3, [r7, #28]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef6:	f002 f807 	bl	800cf08 <vPortValidateInterruptPriority>
	__asm volatile
 800aefa:	f3ef 8211 	mrs	r2, BASEPRI
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	61ba      	str	r2, [r7, #24]
 800af10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02f      	beq.n	800af82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af30:	f000 f8d9 	bl	800b0e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	1e5a      	subs	r2, r3, #1
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af44:	d112      	bne.n	800af6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d016      	beq.n	800af7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	3310      	adds	r3, #16
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fede 	bl	800bd14 <xTaskRemoveFromEventList>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00e      	beq.n	800af7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e007      	b.n	800af7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af70:	3301      	adds	r3, #1
 800af72:	b2db      	uxtb	r3, r3
 800af74:	b25a      	sxtb	r2, r3
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af7c:	2301      	movs	r3, #1
 800af7e:	637b      	str	r3, [r7, #52]	; 0x34
 800af80:	e001      	b.n	800af86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af82:	2300      	movs	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f383 8811 	msr	BASEPRI, r3
}
 800af90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af94:	4618      	mov	r0, r3
 800af96:	3738      	adds	r7, #56	; 0x38
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <vQueueDelete+0x28>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	60bb      	str	r3, [r7, #8]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f95f 	bl	800b288 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f002 f8a3 	bl	800d120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e001      	b.n	800b004 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b004:	68fb      	ldr	r3, [r7, #12]
	}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10d      	bne.n	800b04c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d14d      	bne.n	800b0d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 f8ad 	bl	800c19c <xTaskPriorityDisinherit>
 800b042:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
 800b04a:	e043      	b.n	800b0d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d119      	bne.n	800b086 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6858      	ldr	r0, [r3, #4]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	461a      	mov	r2, r3
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	f002 f9a1 	bl	800d3a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	441a      	add	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d32b      	bcc.n	800b0d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]
 800b084:	e026      	b.n	800b0d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68d8      	ldr	r0, [r3, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	461a      	mov	r2, r3
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	f002 f987 	bl	800d3a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	425b      	negs	r3, r3
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d207      	bcs.n	800b0c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	689a      	ldr	r2, [r3, #8]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	425b      	negs	r3, r3
 800b0bc:	441a      	add	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d105      	bne.n	800b0d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d018      	beq.n	800b12a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b100:	441a      	add	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d303      	bcc.n	800b11a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68d9      	ldr	r1, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	461a      	mov	r2, r3
 800b124:	6838      	ldr	r0, [r7, #0]
 800b126:	f002 f93d 	bl	800d3a4 <memcpy>
	}
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b13a:	f001 fe03 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b144:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b146:	e011      	b.n	800b16c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d012      	beq.n	800b176 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3324      	adds	r3, #36	; 0x24
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fddd 	bl	800bd14 <xTaskRemoveFromEventList>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b160:	f000 feb4 	bl	800becc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	3b01      	subs	r3, #1
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b170:	2b00      	cmp	r3, #0
 800b172:	dce9      	bgt.n	800b148 <prvUnlockQueue+0x16>
 800b174:	e000      	b.n	800b178 <prvUnlockQueue+0x46>
					break;
 800b176:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	22ff      	movs	r2, #255	; 0xff
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b180:	f001 fe10 	bl	800cda4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b184:	f001 fdde 	bl	800cd44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b190:	e011      	b.n	800b1b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d012      	beq.n	800b1c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3310      	adds	r3, #16
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fdb8 	bl	800bd14 <xTaskRemoveFromEventList>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1aa:	f000 fe8f 	bl	800becc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dce9      	bgt.n	800b192 <prvUnlockQueue+0x60>
 800b1be:	e000      	b.n	800b1c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	22ff      	movs	r2, #255	; 0xff
 800b1c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1ca:	f001 fdeb 	bl	800cda4 <vPortExitCritical>
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1de:	f001 fdb1 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	e001      	b.n	800b1f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f4:	f001 fdd6 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b20a:	f001 fd9b 	bl	800cd44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b216:	429a      	cmp	r2, r3
 800b218:	d102      	bne.n	800b220 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e001      	b.n	800b224 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b224:	f001 fdbe 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800b228:	68fb      	ldr	r3, [r7, #12]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e014      	b.n	800b26e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b244:	4a0f      	ldr	r2, [pc, #60]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b250:	490c      	ldr	r1, [pc, #48]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b266:	e006      	b.n	800b276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b07      	cmp	r3, #7
 800b272:	d9e7      	bls.n	800b244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	200043b0 	.word	0x200043b0

0800b288 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e016      	b.n	800b2c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b296:	4a10      	ldr	r2, [pc, #64]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	4413      	add	r3, r2
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d10b      	bne.n	800b2be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b2b0:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]
				break;
 800b2bc:	e006      	b.n	800b2cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	d9e5      	bls.n	800b296 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	200043b0 	.word	0x200043b0

0800b2dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2ec:	f001 fd2a 	bl	800cd44 <vPortEnterCritical>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2f6:	b25b      	sxtb	r3, r3
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2fc:	d103      	bne.n	800b306 <vQueueWaitForMessageRestricted+0x2a>
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b312:	d103      	bne.n	800b31c <vQueueWaitForMessageRestricted+0x40>
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b31c:	f001 fd42 	bl	800cda4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	3324      	adds	r3, #36	; 0x24
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fcc3 	bl	800bcbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b336:	6978      	ldr	r0, [r7, #20]
 800b338:	f7ff fefb 	bl	800b132 <prvUnlockQueue>
	}
 800b33c:	bf00      	nop
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08e      	sub	sp, #56	; 0x38
 800b348:	af04      	add	r7, sp, #16
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	623b      	str	r3, [r7, #32]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <xTaskCreateStatic+0x46>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	61fb      	str	r3, [r7, #28]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b38a:	235c      	movs	r3, #92	; 0x5c
 800b38c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b5c      	cmp	r3, #92	; 0x5c
 800b392:	d00a      	beq.n	800b3aa <xTaskCreateStatic+0x66>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	61bb      	str	r3, [r7, #24]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d01e      	beq.n	800b3f0 <xTaskCreateStatic+0xac>
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01b      	beq.n	800b3f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	9302      	str	r3, [sp, #8]
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f850 	bl	800b488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ea:	f000 f8dd 	bl	800b5a8 <prvAddNewTaskToReadyList>
 800b3ee:	e001      	b.n	800b3f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3f4:	697b      	ldr	r3, [r7, #20]
	}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3728      	adds	r7, #40	; 0x28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b08c      	sub	sp, #48	; 0x30
 800b402:	af04      	add	r7, sp, #16
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	603b      	str	r3, [r7, #0]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b40e:	88fb      	ldrh	r3, [r7, #6]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4618      	mov	r0, r3
 800b414:	f001 fdb8 	bl	800cf88 <pvPortMalloc>
 800b418:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00e      	beq.n	800b43e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b420:	205c      	movs	r0, #92	; 0x5c
 800b422:	f001 fdb1 	bl	800cf88 <pvPortMalloc>
 800b426:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	631a      	str	r2, [r3, #48]	; 0x30
 800b434:	e005      	b.n	800b442 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b436:	6978      	ldr	r0, [r7, #20]
 800b438:	f001 fe72 	bl	800d120 <vPortFree>
 800b43c:	e001      	b.n	800b442 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b43e:	2300      	movs	r3, #0
 800b440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d017      	beq.n	800b478 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b450:	88fa      	ldrh	r2, [r7, #6]
 800b452:	2300      	movs	r3, #0
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f80e 	bl	800b488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b46c:	69f8      	ldr	r0, [r7, #28]
 800b46e:	f000 f89b 	bl	800b5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b472:	2301      	movs	r3, #1
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	e002      	b.n	800b47e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b47c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b47e:	69bb      	ldr	r3, [r7, #24]
	}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	461a      	mov	r2, r3
 800b4a0:	21a5      	movs	r1, #165	; 0xa5
 800b4a2:	f001 ff8d 	bl	800d3c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	f023 0307 	bic.w	r3, r3, #7
 800b4be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	617b      	str	r3, [r7, #20]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01f      	beq.n	800b526 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	e012      	b.n	800b512 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	7819      	ldrb	r1, [r3, #0]
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3334      	adds	r3, #52	; 0x34
 800b4fc:	460a      	mov	r2, r1
 800b4fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	3301      	adds	r3, #1
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d9e9      	bls.n	800b4ec <prvInitialiseNewTask+0x64>
 800b518:	e000      	b.n	800b51c <prvInitialiseNewTask+0x94>
			{
				break;
 800b51a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b524:	e003      	b.n	800b52e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	2b37      	cmp	r3, #55	; 0x37
 800b532:	d901      	bls.n	800b538 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b534:	2337      	movs	r3, #55	; 0x37
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	2200      	movs	r2, #0
 800b548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fe56 	bl	800a200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	3318      	adds	r3, #24
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fe51 	bl	800a200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	2200      	movs	r2, #0
 800b578:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	68f9      	ldr	r1, [r7, #12]
 800b586:	69b8      	ldr	r0, [r7, #24]
 800b588:	f001 faae 	bl	800cae8 <pxPortInitialiseStack>
 800b58c:	4602      	mov	r2, r0
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b59c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b59e:	bf00      	nop
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5b0:	f001 fbc8 	bl	800cd44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5b4:	4b2d      	ldr	r3, [pc, #180]	; (800b66c <prvAddNewTaskToReadyList+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a2c      	ldr	r2, [pc, #176]	; (800b66c <prvAddNewTaskToReadyList+0xc4>)
 800b5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5be:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <prvAddNewTaskToReadyList+0xc8>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d109      	bne.n	800b5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5c6:	4a2a      	ldr	r2, [pc, #168]	; (800b670 <prvAddNewTaskToReadyList+0xc8>)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5cc:	4b27      	ldr	r3, [pc, #156]	; (800b66c <prvAddNewTaskToReadyList+0xc4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d110      	bne.n	800b5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5d4:	f000 fc9e 	bl	800bf14 <prvInitialiseTaskLists>
 800b5d8:	e00d      	b.n	800b5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5da:	4b26      	ldr	r3, [pc, #152]	; (800b674 <prvAddNewTaskToReadyList+0xcc>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5e2:	4b23      	ldr	r3, [pc, #140]	; (800b670 <prvAddNewTaskToReadyList+0xc8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d802      	bhi.n	800b5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5f0:	4a1f      	ldr	r2, [pc, #124]	; (800b670 <prvAddNewTaskToReadyList+0xc8>)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5f6:	4b20      	ldr	r3, [pc, #128]	; (800b678 <prvAddNewTaskToReadyList+0xd0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <prvAddNewTaskToReadyList+0xd0>)
 800b5fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b600:	4b1d      	ldr	r3, [pc, #116]	; (800b678 <prvAddNewTaskToReadyList+0xd0>)
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60c:	4b1b      	ldr	r3, [pc, #108]	; (800b67c <prvAddNewTaskToReadyList+0xd4>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d903      	bls.n	800b61c <prvAddNewTaskToReadyList+0x74>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	4a18      	ldr	r2, [pc, #96]	; (800b67c <prvAddNewTaskToReadyList+0xd4>)
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b620:	4613      	mov	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4413      	add	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4a15      	ldr	r2, [pc, #84]	; (800b680 <prvAddNewTaskToReadyList+0xd8>)
 800b62a:	441a      	add	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3304      	adds	r3, #4
 800b630:	4619      	mov	r1, r3
 800b632:	4610      	mov	r0, r2
 800b634:	f7fe fdf1 	bl	800a21a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b638:	f001 fbb4 	bl	800cda4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <prvAddNewTaskToReadyList+0xcc>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00e      	beq.n	800b662 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <prvAddNewTaskToReadyList+0xc8>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	429a      	cmp	r2, r3
 800b650:	d207      	bcs.n	800b662 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b652:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <prvAddNewTaskToReadyList+0xdc>)
 800b654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b662:	bf00      	nop
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000c84 	.word	0x20000c84
 800b670:	200007b0 	.word	0x200007b0
 800b674:	20000c90 	.word	0x20000c90
 800b678:	20000ca0 	.word	0x20000ca0
 800b67c:	20000c8c 	.word	0x20000c8c
 800b680:	200007b4 	.word	0x200007b4
 800b684:	e000ed04 	.word	0xe000ed04

0800b688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d017      	beq.n	800b6ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b69a:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <vTaskDelay+0x60>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00a      	beq.n	800b6b8 <vTaskDelay+0x30>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6b8:	f000 f8f6 	bl	800b8a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fe70 	bl	800c3a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6c4:	f000 f8fe 	bl	800b8c4 <xTaskResumeAll>
 800b6c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d107      	bne.n	800b6e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6d0:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <vTaskDelay+0x64>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20000cac 	.word	0x20000cac
 800b6ec:	e000ed04 	.word	0xe000ed04

0800b6f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b6f8:	f001 fb24 	bl	800cd44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <vTaskSuspend+0x18>
 800b702:	4b30      	ldr	r3, [pc, #192]	; (800b7c4 <vTaskSuspend+0xd4>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	e000      	b.n	800b70a <vTaskSuspend+0x1a>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	3304      	adds	r3, #4
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fddf 	bl	800a2d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3318      	adds	r3, #24
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fdd6 	bl	800a2d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4619      	mov	r1, r3
 800b72e:	4826      	ldr	r0, [pc, #152]	; (800b7c8 <vTaskSuspend+0xd8>)
 800b730:	f7fe fd73 	bl	800a21a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d103      	bne.n	800b748 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b748:	f001 fb2c 	bl	800cda4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b74c:	4b1f      	ldr	r3, [pc, #124]	; (800b7cc <vTaskSuspend+0xdc>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d005      	beq.n	800b760 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b754:	f001 faf6 	bl	800cd44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b758:	f000 fc7a 	bl	800c050 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b75c:	f001 fb22 	bl	800cda4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b760:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <vTaskSuspend+0xd4>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	429a      	cmp	r2, r3
 800b768:	d127      	bne.n	800b7ba <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b76a:	4b18      	ldr	r3, [pc, #96]	; (800b7cc <vTaskSuspend+0xdc>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d017      	beq.n	800b7a2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b772:	4b17      	ldr	r3, [pc, #92]	; (800b7d0 <vTaskSuspend+0xe0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <vTaskSuspend+0xa0>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	60bb      	str	r3, [r7, #8]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b790:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <vTaskSuspend+0xe4>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7a0:	e00b      	b.n	800b7ba <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b7a2:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <vTaskSuspend+0xd8>)
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <vTaskSuspend+0xe8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d103      	bne.n	800b7b6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b7ae:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <vTaskSuspend+0xd4>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]
	}
 800b7b4:	e001      	b.n	800b7ba <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b7b6:	f000 f9ff 	bl	800bbb8 <vTaskSwitchContext>
	}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	200007b0 	.word	0x200007b0
 800b7c8:	20000c70 	.word	0x20000c70
 800b7cc:	20000c90 	.word	0x20000c90
 800b7d0:	20000cac 	.word	0x20000cac
 800b7d4:	e000ed04 	.word	0xe000ed04
 800b7d8:	20000c84 	.word	0x20000c84

0800b7dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	1d39      	adds	r1, r7, #4
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fcb0 	bl	800a158 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	9202      	str	r2, [sp, #8]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	2300      	movs	r3, #0
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	2300      	movs	r3, #0
 800b808:	460a      	mov	r2, r1
 800b80a:	4921      	ldr	r1, [pc, #132]	; (800b890 <vTaskStartScheduler+0xb4>)
 800b80c:	4821      	ldr	r0, [pc, #132]	; (800b894 <vTaskStartScheduler+0xb8>)
 800b80e:	f7ff fd99 	bl	800b344 <xTaskCreateStatic>
 800b812:	4603      	mov	r3, r0
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <vTaskStartScheduler+0xbc>)
 800b816:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b818:	4b1f      	ldr	r3, [pc, #124]	; (800b898 <vTaskStartScheduler+0xbc>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b820:	2301      	movs	r3, #1
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e001      	b.n	800b82a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d102      	bne.n	800b836 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b830:	f000 fe0c 	bl	800c44c <xTimerCreateTimerTask>
 800b834:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d116      	bne.n	800b86a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	613b      	str	r3, [r7, #16]
}
 800b84e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b850:	4b12      	ldr	r3, [pc, #72]	; (800b89c <vTaskStartScheduler+0xc0>)
 800b852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b856:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b858:	4b11      	ldr	r3, [pc, #68]	; (800b8a0 <vTaskStartScheduler+0xc4>)
 800b85a:	2201      	movs	r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b85e:	4b11      	ldr	r3, [pc, #68]	; (800b8a4 <vTaskStartScheduler+0xc8>)
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b864:	f001 f9cc 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b868:	e00e      	b.n	800b888 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b870:	d10a      	bne.n	800b888 <vTaskStartScheduler+0xac>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	60fb      	str	r3, [r7, #12]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vTaskStartScheduler+0xaa>
}
 800b888:	bf00      	nop
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	0800d484 	.word	0x0800d484
 800b894:	0800bee5 	.word	0x0800bee5
 800b898:	20000ca8 	.word	0x20000ca8
 800b89c:	20000ca4 	.word	0x20000ca4
 800b8a0:	20000c90 	.word	0x20000c90
 800b8a4:	20000c88 	.word	0x20000c88

0800b8a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <vTaskSuspendAll+0x18>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	4a03      	ldr	r2, [pc, #12]	; (800b8c0 <vTaskSuspendAll+0x18>)
 800b8b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8b6:	bf00      	nop
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000cac 	.word	0x20000cac

0800b8c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8d2:	4b42      	ldr	r3, [pc, #264]	; (800b9dc <xTaskResumeAll+0x118>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10a      	bne.n	800b8f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	603b      	str	r3, [r7, #0]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8f0:	f001 fa28 	bl	800cd44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8f4:	4b39      	ldr	r3, [pc, #228]	; (800b9dc <xTaskResumeAll+0x118>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	4a38      	ldr	r2, [pc, #224]	; (800b9dc <xTaskResumeAll+0x118>)
 800b8fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8fe:	4b37      	ldr	r3, [pc, #220]	; (800b9dc <xTaskResumeAll+0x118>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d162      	bne.n	800b9cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b906:	4b36      	ldr	r3, [pc, #216]	; (800b9e0 <xTaskResumeAll+0x11c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d05e      	beq.n	800b9cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b90e:	e02f      	b.n	800b970 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b910:	4b34      	ldr	r3, [pc, #208]	; (800b9e4 <xTaskResumeAll+0x120>)
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3318      	adds	r3, #24
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fcd9 	bl	800a2d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe fcd4 	bl	800a2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	4b2d      	ldr	r3, [pc, #180]	; (800b9e8 <xTaskResumeAll+0x124>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d903      	bls.n	800b940 <xTaskResumeAll+0x7c>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	4a2a      	ldr	r2, [pc, #168]	; (800b9e8 <xTaskResumeAll+0x124>)
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4613      	mov	r3, r2
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <xTaskResumeAll+0x128>)
 800b94e:	441a      	add	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3304      	adds	r3, #4
 800b954:	4619      	mov	r1, r3
 800b956:	4610      	mov	r0, r2
 800b958:	f7fe fc5f 	bl	800a21a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b960:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <xTaskResumeAll+0x12c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	429a      	cmp	r2, r3
 800b968:	d302      	bcc.n	800b970 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b96a:	4b22      	ldr	r3, [pc, #136]	; (800b9f4 <xTaskResumeAll+0x130>)
 800b96c:	2201      	movs	r2, #1
 800b96e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b970:	4b1c      	ldr	r3, [pc, #112]	; (800b9e4 <xTaskResumeAll+0x120>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1cb      	bne.n	800b910 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b97e:	f000 fb67 	bl	800c050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b982:	4b1d      	ldr	r3, [pc, #116]	; (800b9f8 <xTaskResumeAll+0x134>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d010      	beq.n	800b9b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b98e:	f000 f859 	bl	800ba44 <xTaskIncrementTick>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b998:	4b16      	ldr	r3, [pc, #88]	; (800b9f4 <xTaskResumeAll+0x130>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1f1      	bne.n	800b98e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b9aa:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <xTaskResumeAll+0x134>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9b0:	4b10      	ldr	r3, [pc, #64]	; (800b9f4 <xTaskResumeAll+0x130>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <xTaskResumeAll+0x138>)
 800b9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9cc:	f001 f9ea 	bl	800cda4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000cac 	.word	0x20000cac
 800b9e0:	20000c84 	.word	0x20000c84
 800b9e4:	20000c44 	.word	0x20000c44
 800b9e8:	20000c8c 	.word	0x20000c8c
 800b9ec:	200007b4 	.word	0x200007b4
 800b9f0:	200007b0 	.word	0x200007b0
 800b9f4:	20000c98 	.word	0x20000c98
 800b9f8:	20000c94 	.word	0x20000c94
 800b9fc:	e000ed04 	.word	0xe000ed04

0800ba00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba06:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <xTaskGetTickCount+0x1c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba0c:	687b      	ldr	r3, [r7, #4]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	20000c88 	.word	0x20000c88

0800ba20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba26:	f001 fa6f 	bl	800cf08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ba2e:	4b04      	ldr	r3, [pc, #16]	; (800ba40 <xTaskGetTickCountFromISR+0x20>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba34:	683b      	ldr	r3, [r7, #0]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000c88 	.word	0x20000c88

0800ba44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba4e:	4b4f      	ldr	r3, [pc, #316]	; (800bb8c <xTaskIncrementTick+0x148>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 808f 	bne.w	800bb76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba58:	4b4d      	ldr	r3, [pc, #308]	; (800bb90 <xTaskIncrementTick+0x14c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba60:	4a4b      	ldr	r2, [pc, #300]	; (800bb90 <xTaskIncrementTick+0x14c>)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d120      	bne.n	800baae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba6c:	4b49      	ldr	r3, [pc, #292]	; (800bb94 <xTaskIncrementTick+0x150>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00a      	beq.n	800ba8c <xTaskIncrementTick+0x48>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	603b      	str	r3, [r7, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <xTaskIncrementTick+0x46>
 800ba8c:	4b41      	ldr	r3, [pc, #260]	; (800bb94 <xTaskIncrementTick+0x150>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	4b41      	ldr	r3, [pc, #260]	; (800bb98 <xTaskIncrementTick+0x154>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a3f      	ldr	r2, [pc, #252]	; (800bb94 <xTaskIncrementTick+0x150>)
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	4a3f      	ldr	r2, [pc, #252]	; (800bb98 <xTaskIncrementTick+0x154>)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6013      	str	r3, [r2, #0]
 800baa0:	4b3e      	ldr	r3, [pc, #248]	; (800bb9c <xTaskIncrementTick+0x158>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3301      	adds	r3, #1
 800baa6:	4a3d      	ldr	r2, [pc, #244]	; (800bb9c <xTaskIncrementTick+0x158>)
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	f000 fad1 	bl	800c050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baae:	4b3c      	ldr	r3, [pc, #240]	; (800bba0 <xTaskIncrementTick+0x15c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d349      	bcc.n	800bb4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab8:	4b36      	ldr	r3, [pc, #216]	; (800bb94 <xTaskIncrementTick+0x150>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d104      	bne.n	800bacc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac2:	4b37      	ldr	r3, [pc, #220]	; (800bba0 <xTaskIncrementTick+0x15c>)
 800bac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bac8:	601a      	str	r2, [r3, #0]
					break;
 800baca:	e03f      	b.n	800bb4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bacc:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <xTaskIncrementTick+0x150>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d203      	bcs.n	800baec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bae4:	4a2e      	ldr	r2, [pc, #184]	; (800bba0 <xTaskIncrementTick+0x15c>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baea:	e02f      	b.n	800bb4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	3304      	adds	r3, #4
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe fbef 	bl	800a2d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d004      	beq.n	800bb08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	3318      	adds	r3, #24
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fbe6 	bl	800a2d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0c:	4b25      	ldr	r3, [pc, #148]	; (800bba4 <xTaskIncrementTick+0x160>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d903      	bls.n	800bb1c <xTaskIncrementTick+0xd8>
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	4a22      	ldr	r2, [pc, #136]	; (800bba4 <xTaskIncrementTick+0x160>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4a1f      	ldr	r2, [pc, #124]	; (800bba8 <xTaskIncrementTick+0x164>)
 800bb2a:	441a      	add	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7fe fb71 	bl	800a21a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	; (800bbac <xTaskIncrementTick+0x168>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d3b8      	bcc.n	800bab8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb46:	2301      	movs	r3, #1
 800bb48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb4a:	e7b5      	b.n	800bab8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb4c:	4b17      	ldr	r3, [pc, #92]	; (800bbac <xTaskIncrementTick+0x168>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb52:	4915      	ldr	r1, [pc, #84]	; (800bba8 <xTaskIncrementTick+0x164>)
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	440b      	add	r3, r1
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d901      	bls.n	800bb68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb64:	2301      	movs	r3, #1
 800bb66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb68:	4b11      	ldr	r3, [pc, #68]	; (800bbb0 <xTaskIncrementTick+0x16c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	e004      	b.n	800bb80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb76:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <xTaskIncrementTick+0x170>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	4a0d      	ldr	r2, [pc, #52]	; (800bbb4 <xTaskIncrementTick+0x170>)
 800bb7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb80:	697b      	ldr	r3, [r7, #20]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000cac 	.word	0x20000cac
 800bb90:	20000c88 	.word	0x20000c88
 800bb94:	20000c3c 	.word	0x20000c3c
 800bb98:	20000c40 	.word	0x20000c40
 800bb9c:	20000c9c 	.word	0x20000c9c
 800bba0:	20000ca4 	.word	0x20000ca4
 800bba4:	20000c8c 	.word	0x20000c8c
 800bba8:	200007b4 	.word	0x200007b4
 800bbac:	200007b0 	.word	0x200007b0
 800bbb0:	20000c98 	.word	0x20000c98
 800bbb4:	20000c94 	.word	0x20000c94

0800bbb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbbe:	4b28      	ldr	r3, [pc, #160]	; (800bc60 <vTaskSwitchContext+0xa8>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbc6:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <vTaskSwitchContext+0xac>)
 800bbc8:	2201      	movs	r2, #1
 800bbca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbcc:	e041      	b.n	800bc52 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bbce:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <vTaskSwitchContext+0xac>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd4:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <vTaskSwitchContext+0xb0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e010      	b.n	800bbfe <vTaskSwitchContext+0x46>
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <vTaskSwitchContext+0x40>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <vTaskSwitchContext+0x3e>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	60fb      	str	r3, [r7, #12]
 800bbfe:	491b      	ldr	r1, [pc, #108]	; (800bc6c <vTaskSwitchContext+0xb4>)
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0e4      	beq.n	800bbdc <vTaskSwitchContext+0x24>
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4a13      	ldr	r2, [pc, #76]	; (800bc6c <vTaskSwitchContext+0xb4>)
 800bc1e:	4413      	add	r3, r2
 800bc20:	60bb      	str	r3, [r7, #8]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	605a      	str	r2, [r3, #4]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	685a      	ldr	r2, [r3, #4]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	3308      	adds	r3, #8
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d104      	bne.n	800bc42 <vTaskSwitchContext+0x8a>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	605a      	str	r2, [r3, #4]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	4a09      	ldr	r2, [pc, #36]	; (800bc70 <vTaskSwitchContext+0xb8>)
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	4a06      	ldr	r2, [pc, #24]	; (800bc68 <vTaskSwitchContext+0xb0>)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6013      	str	r3, [r2, #0]
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	20000cac 	.word	0x20000cac
 800bc64:	20000c98 	.word	0x20000c98
 800bc68:	20000c8c 	.word	0x20000c8c
 800bc6c:	200007b4 	.word	0x200007b4
 800bc70:	200007b0 	.word	0x200007b0

0800bc74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	60fb      	str	r3, [r7, #12]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <vTaskPlaceOnEventList+0x44>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3318      	adds	r3, #24
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7fe fadd 	bl	800a262 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bca8:	2101      	movs	r1, #1
 800bcaa:	6838      	ldr	r0, [r7, #0]
 800bcac:	f000 fb7a 	bl	800c3a4 <prvAddCurrentTaskToDelayedList>
}
 800bcb0:	bf00      	nop
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	200007b0 	.word	0x200007b0

0800bcbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10a      	bne.n	800bce4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	617b      	str	r3, [r7, #20]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <vTaskPlaceOnEventListRestricted+0x54>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3318      	adds	r3, #24
 800bcea:	4619      	mov	r1, r3
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7fe fa94 	bl	800a21a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	68b8      	ldr	r0, [r7, #8]
 800bd02:	f000 fb4f 	bl	800c3a4 <prvAddCurrentTaskToDelayedList>
	}
 800bd06:	bf00      	nop
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	200007b0 	.word	0x200007b0

0800bd14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	60fb      	str	r3, [r7, #12]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	3318      	adds	r3, #24
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fe fac5 	bl	800a2d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd4a:	4b1e      	ldr	r3, [pc, #120]	; (800bdc4 <xTaskRemoveFromEventList+0xb0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d11d      	bne.n	800bd8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fabc 	bl	800a2d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd60:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <xTaskRemoveFromEventList+0xb4>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d903      	bls.n	800bd70 <xTaskRemoveFromEventList+0x5c>
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6c:	4a16      	ldr	r2, [pc, #88]	; (800bdc8 <xTaskRemoveFromEventList+0xb4>)
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4a13      	ldr	r2, [pc, #76]	; (800bdcc <xTaskRemoveFromEventList+0xb8>)
 800bd7e:	441a      	add	r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f7fe fa47 	bl	800a21a <vListInsertEnd>
 800bd8c:	e005      	b.n	800bd9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	3318      	adds	r3, #24
 800bd92:	4619      	mov	r1, r3
 800bd94:	480e      	ldr	r0, [pc, #56]	; (800bdd0 <xTaskRemoveFromEventList+0xbc>)
 800bd96:	f7fe fa40 	bl	800a21a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <xTaskRemoveFromEventList+0xc0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d905      	bls.n	800bdb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <xTaskRemoveFromEventList+0xc4>)
 800bdae:	2201      	movs	r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	e001      	b.n	800bdb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdb8:	697b      	ldr	r3, [r7, #20]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000cac 	.word	0x20000cac
 800bdc8:	20000c8c 	.word	0x20000c8c
 800bdcc:	200007b4 	.word	0x200007b4
 800bdd0:	20000c44 	.word	0x20000c44
 800bdd4:	200007b0 	.word	0x200007b0
 800bdd8:	20000c98 	.word	0x20000c98

0800bddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bde4:	4b06      	ldr	r3, [pc, #24]	; (800be00 <vTaskInternalSetTimeOutState+0x24>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdec:	4b05      	ldr	r3, [pc, #20]	; (800be04 <vTaskInternalSetTimeOutState+0x28>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	605a      	str	r2, [r3, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20000c9c 	.word	0x20000c9c
 800be04:	20000c88 	.word	0x20000c88

0800be08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	613b      	str	r3, [r7, #16]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	60fb      	str	r3, [r7, #12]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be4a:	f000 ff7b 	bl	800cd44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be4e:	4b1d      	ldr	r3, [pc, #116]	; (800bec4 <xTaskCheckForTimeOut+0xbc>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	69ba      	ldr	r2, [r7, #24]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be66:	d102      	bne.n	800be6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be68:	2300      	movs	r3, #0
 800be6a:	61fb      	str	r3, [r7, #28]
 800be6c:	e023      	b.n	800beb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <xTaskCheckForTimeOut+0xc0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	429a      	cmp	r2, r3
 800be78:	d007      	beq.n	800be8a <xTaskCheckForTimeOut+0x82>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	429a      	cmp	r2, r3
 800be82:	d302      	bcc.n	800be8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	61fb      	str	r3, [r7, #28]
 800be88:	e015      	b.n	800beb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	429a      	cmp	r2, r3
 800be92:	d20b      	bcs.n	800beac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	1ad2      	subs	r2, r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff ff9b 	bl	800bddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bea6:	2300      	movs	r3, #0
 800bea8:	61fb      	str	r3, [r7, #28]
 800beaa:	e004      	b.n	800beb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800beb2:	2301      	movs	r3, #1
 800beb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800beb6:	f000 ff75 	bl	800cda4 <vPortExitCritical>

	return xReturn;
 800beba:	69fb      	ldr	r3, [r7, #28]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3720      	adds	r7, #32
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20000c88 	.word	0x20000c88
 800bec8:	20000c9c 	.word	0x20000c9c

0800becc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800becc:	b480      	push	{r7}
 800bece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bed0:	4b03      	ldr	r3, [pc, #12]	; (800bee0 <vTaskMissedYield+0x14>)
 800bed2:	2201      	movs	r2, #1
 800bed4:	601a      	str	r2, [r3, #0]
}
 800bed6:	bf00      	nop
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	20000c98 	.word	0x20000c98

0800bee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800beec:	f000 f852 	bl	800bf94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bef0:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <prvIdleTask+0x28>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d9f9      	bls.n	800beec <prvIdleTask+0x8>
			{
				taskYIELD();
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <prvIdleTask+0x2c>)
 800befa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf08:	e7f0      	b.n	800beec <prvIdleTask+0x8>
 800bf0a:	bf00      	nop
 800bf0c:	200007b4 	.word	0x200007b4
 800bf10:	e000ed04 	.word	0xe000ed04

0800bf14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	e00c      	b.n	800bf3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4a12      	ldr	r2, [pc, #72]	; (800bf74 <prvInitialiseTaskLists+0x60>)
 800bf2c:	4413      	add	r3, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe f946 	bl	800a1c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3301      	adds	r3, #1
 800bf38:	607b      	str	r3, [r7, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b37      	cmp	r3, #55	; 0x37
 800bf3e:	d9ef      	bls.n	800bf20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf40:	480d      	ldr	r0, [pc, #52]	; (800bf78 <prvInitialiseTaskLists+0x64>)
 800bf42:	f7fe f93d 	bl	800a1c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf46:	480d      	ldr	r0, [pc, #52]	; (800bf7c <prvInitialiseTaskLists+0x68>)
 800bf48:	f7fe f93a 	bl	800a1c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf4c:	480c      	ldr	r0, [pc, #48]	; (800bf80 <prvInitialiseTaskLists+0x6c>)
 800bf4e:	f7fe f937 	bl	800a1c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf52:	480c      	ldr	r0, [pc, #48]	; (800bf84 <prvInitialiseTaskLists+0x70>)
 800bf54:	f7fe f934 	bl	800a1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf58:	480b      	ldr	r0, [pc, #44]	; (800bf88 <prvInitialiseTaskLists+0x74>)
 800bf5a:	f7fe f931 	bl	800a1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf5e:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <prvInitialiseTaskLists+0x78>)
 800bf60:	4a05      	ldr	r2, [pc, #20]	; (800bf78 <prvInitialiseTaskLists+0x64>)
 800bf62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf64:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <prvInitialiseTaskLists+0x7c>)
 800bf66:	4a05      	ldr	r2, [pc, #20]	; (800bf7c <prvInitialiseTaskLists+0x68>)
 800bf68:	601a      	str	r2, [r3, #0]
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200007b4 	.word	0x200007b4
 800bf78:	20000c14 	.word	0x20000c14
 800bf7c:	20000c28 	.word	0x20000c28
 800bf80:	20000c44 	.word	0x20000c44
 800bf84:	20000c58 	.word	0x20000c58
 800bf88:	20000c70 	.word	0x20000c70
 800bf8c:	20000c3c 	.word	0x20000c3c
 800bf90:	20000c40 	.word	0x20000c40

0800bf94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf9a:	e019      	b.n	800bfd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf9c:	f000 fed2 	bl	800cd44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa0:	4b10      	ldr	r3, [pc, #64]	; (800bfe4 <prvCheckTasksWaitingTermination+0x50>)
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fe f991 	bl	800a2d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <prvCheckTasksWaitingTermination+0x54>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	4a0b      	ldr	r2, [pc, #44]	; (800bfe8 <prvCheckTasksWaitingTermination+0x54>)
 800bfba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <prvCheckTasksWaitingTermination+0x58>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <prvCheckTasksWaitingTermination+0x58>)
 800bfc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfc6:	f000 feed 	bl	800cda4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f810 	bl	800bff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <prvCheckTasksWaitingTermination+0x58>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e1      	bne.n	800bf9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20000c58 	.word	0x20000c58
 800bfe8:	20000c84 	.word	0x20000c84
 800bfec:	20000c6c 	.word	0x20000c6c

0800bff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d108      	bne.n	800c014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	4618      	mov	r0, r3
 800c008:	f001 f88a 	bl	800d120 <vPortFree>
				vPortFree( pxTCB );
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 f887 	bl	800d120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c012:	e018      	b.n	800c046 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d103      	bne.n	800c026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 f87e 	bl	800d120 <vPortFree>
	}
 800c024:	e00f      	b.n	800c046 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d00a      	beq.n	800c046 <prvDeleteTCB+0x56>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <prvDeleteTCB+0x54>
	}
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c056:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <prvResetNextTaskUnblockTime+0x38>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d104      	bne.n	800c06a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <prvResetNextTaskUnblockTime+0x3c>)
 800c062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c068:	e008      	b.n	800c07c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06a:	4b07      	ldr	r3, [pc, #28]	; (800c088 <prvResetNextTaskUnblockTime+0x38>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	4a04      	ldr	r2, [pc, #16]	; (800c08c <prvResetNextTaskUnblockTime+0x3c>)
 800c07a:	6013      	str	r3, [r2, #0]
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	20000c3c 	.word	0x20000c3c
 800c08c:	20000ca4 	.word	0x20000ca4

0800c090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <xTaskGetSchedulerState+0x34>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	607b      	str	r3, [r7, #4]
 800c0a2:	e008      	b.n	800c0b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a4:	4b08      	ldr	r3, [pc, #32]	; (800c0c8 <xTaskGetSchedulerState+0x38>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	607b      	str	r3, [r7, #4]
 800c0b0:	e001      	b.n	800c0b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0b6:	687b      	ldr	r3, [r7, #4]
	}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20000c90 	.word	0x20000c90
 800c0c8:	20000cac 	.word	0x20000cac

0800c0cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d051      	beq.n	800c186 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <xTaskPriorityInherit+0xc4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d241      	bcs.n	800c174 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	db06      	blt.n	800c106 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0f8:	4b25      	ldr	r3, [pc, #148]	; (800c190 <xTaskPriorityInherit+0xc4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	6959      	ldr	r1, [r3, #20]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4a1f      	ldr	r2, [pc, #124]	; (800c194 <xTaskPriorityInherit+0xc8>)
 800c118:	4413      	add	r3, r2
 800c11a:	4299      	cmp	r1, r3
 800c11c:	d122      	bne.n	800c164 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	3304      	adds	r3, #4
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe f8d6 	bl	800a2d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c128:	4b19      	ldr	r3, [pc, #100]	; (800c190 <xTaskPriorityInherit+0xc4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c136:	4b18      	ldr	r3, [pc, #96]	; (800c198 <xTaskPriorityInherit+0xcc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d903      	bls.n	800c146 <xTaskPriorityInherit+0x7a>
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c142:	4a15      	ldr	r2, [pc, #84]	; (800c198 <xTaskPriorityInherit+0xcc>)
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a10      	ldr	r2, [pc, #64]	; (800c194 <xTaskPriorityInherit+0xc8>)
 800c154:	441a      	add	r2, r3
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	3304      	adds	r3, #4
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7fe f85c 	bl	800a21a <vListInsertEnd>
 800c162:	e004      	b.n	800c16e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c164:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <xTaskPriorityInherit+0xc4>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c16e:	2301      	movs	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e008      	b.n	800c186 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c178:	4b05      	ldr	r3, [pc, #20]	; (800c190 <xTaskPriorityInherit+0xc4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	429a      	cmp	r2, r3
 800c180:	d201      	bcs.n	800c186 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c182:	2301      	movs	r3, #1
 800c184:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c186:	68fb      	ldr	r3, [r7, #12]
	}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200007b0 	.word	0x200007b0
 800c194:	200007b4 	.word	0x200007b4
 800c198:	20000c8c 	.word	0x20000c8c

0800c19c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d056      	beq.n	800c260 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1b2:	4b2e      	ldr	r3, [pc, #184]	; (800c26c <xTaskPriorityDisinherit+0xd0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d00a      	beq.n	800c1d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60fb      	str	r3, [r7, #12]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10a      	bne.n	800c1f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	60bb      	str	r3, [r7, #8]
}
 800c1ec:	bf00      	nop
 800c1ee:	e7fe      	b.n	800c1ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f4:	1e5a      	subs	r2, r3, #1
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c202:	429a      	cmp	r2, r3
 800c204:	d02c      	beq.n	800c260 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d128      	bne.n	800c260 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3304      	adds	r3, #4
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe f85e 	bl	800a2d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c230:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <xTaskPriorityDisinherit+0xd4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d903      	bls.n	800c240 <xTaskPriorityDisinherit+0xa4>
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	4a0c      	ldr	r2, [pc, #48]	; (800c270 <xTaskPriorityDisinherit+0xd4>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4a09      	ldr	r2, [pc, #36]	; (800c274 <xTaskPriorityDisinherit+0xd8>)
 800c24e:	441a      	add	r2, r3
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	3304      	adds	r3, #4
 800c254:	4619      	mov	r1, r3
 800c256:	4610      	mov	r0, r2
 800c258:	f7fd ffdf 	bl	800a21a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c25c:	2301      	movs	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c260:	697b      	ldr	r3, [r7, #20]
	}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	200007b0 	.word	0x200007b0
 800c270:	20000c8c 	.word	0x20000c8c
 800c274:	200007b4 	.word	0x200007b4

0800c278 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c286:	2301      	movs	r3, #1
 800c288:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06a      	beq.n	800c366 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	60fb      	str	r3, [r7, #12]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d902      	bls.n	800c2be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	e002      	b.n	800c2c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	69fa      	ldr	r2, [r7, #28]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d04b      	beq.n	800c366 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d146      	bne.n	800c366 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2d8:	4b25      	ldr	r3, [pc, #148]	; (800c370 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d10a      	bne.n	800c2f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	60bb      	str	r3, [r7, #8]
}
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	69fa      	ldr	r2, [r7, #28]
 800c302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	db04      	blt.n	800c316 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	6959      	ldr	r1, [r3, #20]
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4a13      	ldr	r2, [pc, #76]	; (800c374 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c326:	4413      	add	r3, r2
 800c328:	4299      	cmp	r1, r3
 800c32a:	d11c      	bne.n	800c366 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	3304      	adds	r3, #4
 800c330:	4618      	mov	r0, r3
 800c332:	f7fd ffcf 	bl	800a2d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33a:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d903      	bls.n	800c34a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c346:	4a0c      	ldr	r2, [pc, #48]	; (800c378 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4a07      	ldr	r2, [pc, #28]	; (800c374 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c358:	441a      	add	r2, r3
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	3304      	adds	r3, #4
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f7fd ff5a 	bl	800a21a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c366:	bf00      	nop
 800c368:	3720      	adds	r7, #32
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	200007b0 	.word	0x200007b0
 800c374:	200007b4 	.word	0x200007b4
 800c378:	20000c8c 	.word	0x20000c8c

0800c37c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c37c:	b480      	push	{r7}
 800c37e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c380:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c388:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c38e:	3201      	adds	r2, #1
 800c390:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c392:	4b03      	ldr	r3, [pc, #12]	; (800c3a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c394:	681b      	ldr	r3, [r3, #0]
	}
 800c396:	4618      	mov	r0, r3
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	200007b0 	.word	0x200007b0

0800c3a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3ae:	4b21      	ldr	r3, [pc, #132]	; (800c434 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b4:	4b20      	ldr	r3, [pc, #128]	; (800c438 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fd ff8a 	bl	800a2d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3c6:	d10a      	bne.n	800c3de <prvAddCurrentTaskToDelayedList+0x3a>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d007      	beq.n	800c3de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ce:	4b1a      	ldr	r3, [pc, #104]	; (800c438 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4819      	ldr	r0, [pc, #100]	; (800c43c <prvAddCurrentTaskToDelayedList+0x98>)
 800c3d8:	f7fd ff1f 	bl	800a21a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3dc:	e026      	b.n	800c42c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3e6:	4b14      	ldr	r3, [pc, #80]	; (800c438 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d209      	bcs.n	800c40a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f6:	4b12      	ldr	r3, [pc, #72]	; (800c440 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7fd ff2d 	bl	800a262 <vListInsert>
}
 800c408:	e010      	b.n	800c42c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40a:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <prvAddCurrentTaskToDelayedList+0x94>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3304      	adds	r3, #4
 800c414:	4619      	mov	r1, r3
 800c416:	4610      	mov	r0, r2
 800c418:	f7fd ff23 	bl	800a262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	429a      	cmp	r2, r3
 800c424:	d202      	bcs.n	800c42c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c426:	4a08      	ldr	r2, [pc, #32]	; (800c448 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	6013      	str	r3, [r2, #0]
}
 800c42c:	bf00      	nop
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20000c88 	.word	0x20000c88
 800c438:	200007b0 	.word	0x200007b0
 800c43c:	20000c70 	.word	0x20000c70
 800c440:	20000c40 	.word	0x20000c40
 800c444:	20000c3c 	.word	0x20000c3c
 800c448:	20000ca4 	.word	0x20000ca4

0800c44c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08a      	sub	sp, #40	; 0x28
 800c450:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c452:	2300      	movs	r3, #0
 800c454:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c456:	f000 fb07 	bl	800ca68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c45a:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <xTimerCreateTimerTask+0x80>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d021      	beq.n	800c4a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c46a:	1d3a      	adds	r2, r7, #4
 800c46c:	f107 0108 	add.w	r1, r7, #8
 800c470:	f107 030c 	add.w	r3, r7, #12
 800c474:	4618      	mov	r0, r3
 800c476:	f7fd fe89 	bl	800a18c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c47a:	6879      	ldr	r1, [r7, #4]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	9202      	str	r2, [sp, #8]
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	2302      	movs	r3, #2
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	2300      	movs	r3, #0
 800c48a:	460a      	mov	r2, r1
 800c48c:	4910      	ldr	r1, [pc, #64]	; (800c4d0 <xTimerCreateTimerTask+0x84>)
 800c48e:	4811      	ldr	r0, [pc, #68]	; (800c4d4 <xTimerCreateTimerTask+0x88>)
 800c490:	f7fe ff58 	bl	800b344 <xTaskCreateStatic>
 800c494:	4603      	mov	r3, r0
 800c496:	4a10      	ldr	r2, [pc, #64]	; (800c4d8 <xTimerCreateTimerTask+0x8c>)
 800c498:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c49a:	4b0f      	ldr	r3, [pc, #60]	; (800c4d8 <xTimerCreateTimerTask+0x8c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10a      	bne.n	800c4c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	613b      	str	r3, [r7, #16]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4c2:	697b      	ldr	r3, [r7, #20]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20000ce0 	.word	0x20000ce0
 800c4d0:	0800d48c 	.word	0x0800d48c
 800c4d4:	0800c611 	.word	0x0800c611
 800c4d8:	20000ce4 	.word	0x20000ce4

0800c4dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08a      	sub	sp, #40	; 0x28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	623b      	str	r3, [r7, #32]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c50a:	4b1a      	ldr	r3, [pc, #104]	; (800c574 <xTimerGenericCommand+0x98>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d02a      	beq.n	800c568 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b05      	cmp	r3, #5
 800c522:	dc18      	bgt.n	800c556 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c524:	f7ff fdb4 	bl	800c090 <xTaskGetSchedulerState>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d109      	bne.n	800c542 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c52e:	4b11      	ldr	r3, [pc, #68]	; (800c574 <xTimerGenericCommand+0x98>)
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f107 0110 	add.w	r1, r7, #16
 800c536:	2300      	movs	r3, #0
 800c538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53a:	f7fe f89d 	bl	800a678 <xQueueGenericSend>
 800c53e:	6278      	str	r0, [r7, #36]	; 0x24
 800c540:	e012      	b.n	800c568 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c542:	4b0c      	ldr	r3, [pc, #48]	; (800c574 <xTimerGenericCommand+0x98>)
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f107 0110 	add.w	r1, r7, #16
 800c54a:	2300      	movs	r3, #0
 800c54c:	2200      	movs	r2, #0
 800c54e:	f7fe f893 	bl	800a678 <xQueueGenericSend>
 800c552:	6278      	str	r0, [r7, #36]	; 0x24
 800c554:	e008      	b.n	800c568 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c556:	4b07      	ldr	r3, [pc, #28]	; (800c574 <xTimerGenericCommand+0x98>)
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	f107 0110 	add.w	r1, r7, #16
 800c55e:	2300      	movs	r3, #0
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	f7fe f987 	bl	800a874 <xQueueGenericSendFromISR>
 800c566:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3728      	adds	r7, #40	; 0x28
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20000ce0 	.word	0x20000ce0

0800c578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c582:	4b22      	ldr	r3, [pc, #136]	; (800c60c <prvProcessExpiredTimer+0x94>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	3304      	adds	r3, #4
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fe9f 	bl	800a2d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d022      	beq.n	800c5ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	699a      	ldr	r2, [r3, #24]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	18d1      	adds	r1, r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	6978      	ldr	r0, [r7, #20]
 800c5b2:	f000 f8d1 	bl	800c758 <prvInsertTimerInActiveList>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01f      	beq.n	800c5fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6978      	ldr	r0, [r7, #20]
 800c5c8:	f7ff ff88 	bl	800c4dc <xTimerGenericCommand>
 800c5cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d113      	bne.n	800c5fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	60fb      	str	r3, [r7, #12]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f0:	f023 0301 	bic.w	r3, r3, #1
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	6978      	ldr	r0, [r7, #20]
 800c602:	4798      	blx	r3
}
 800c604:	bf00      	nop
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000cd8 	.word	0x20000cd8

0800c610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 f857 	bl	800c6d0 <prvGetNextExpireTime>
 800c622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	4619      	mov	r1, r3
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 f803 	bl	800c634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c62e:	f000 f8d5 	bl	800c7dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c632:	e7f1      	b.n	800c618 <prvTimerTask+0x8>

0800c634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c63e:	f7ff f933 	bl	800b8a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c642:	f107 0308 	add.w	r3, r7, #8
 800c646:	4618      	mov	r0, r3
 800c648:	f000 f866 	bl	800c718 <prvSampleTimeNow>
 800c64c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d130      	bne.n	800c6b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10a      	bne.n	800c670 <prvProcessTimerOrBlockTask+0x3c>
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d806      	bhi.n	800c670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c662:	f7ff f92f 	bl	800b8c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ff85 	bl	800c578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c66e:	e024      	b.n	800c6ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d008      	beq.n	800c688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c676:	4b13      	ldr	r3, [pc, #76]	; (800c6c4 <prvProcessTimerOrBlockTask+0x90>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <prvProcessTimerOrBlockTask+0x50>
 800c680:	2301      	movs	r3, #1
 800c682:	e000      	b.n	800c686 <prvProcessTimerOrBlockTask+0x52>
 800c684:	2300      	movs	r3, #0
 800c686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c688:	4b0f      	ldr	r3, [pc, #60]	; (800c6c8 <prvProcessTimerOrBlockTask+0x94>)
 800c68a:	6818      	ldr	r0, [r3, #0]
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	4619      	mov	r1, r3
 800c696:	f7fe fe21 	bl	800b2dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c69a:	f7ff f913 	bl	800b8c4 <xTaskResumeAll>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10a      	bne.n	800c6ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6a4:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <prvProcessTimerOrBlockTask+0x98>)
 800c6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	f3bf 8f6f 	isb	sy
}
 800c6b4:	e001      	b.n	800c6ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6b6:	f7ff f905 	bl	800b8c4 <xTaskResumeAll>
}
 800c6ba:	bf00      	nop
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20000cdc 	.word	0x20000cdc
 800c6c8:	20000ce0 	.word	0x20000ce0
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6d8:	4b0e      	ldr	r3, [pc, #56]	; (800c714 <prvGetNextExpireTime+0x44>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <prvGetNextExpireTime+0x16>
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	e000      	b.n	800c6e8 <prvGetNextExpireTime+0x18>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d105      	bne.n	800c700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6f4:	4b07      	ldr	r3, [pc, #28]	; (800c714 <prvGetNextExpireTime+0x44>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e001      	b.n	800c704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c704:	68fb      	ldr	r3, [r7, #12]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	20000cd8 	.word	0x20000cd8

0800c718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c720:	f7ff f96e 	bl	800ba00 <xTaskGetTickCount>
 800c724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c726:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <prvSampleTimeNow+0x3c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d205      	bcs.n	800c73c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c730:	f000 f936 	bl	800c9a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2201      	movs	r2, #1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	e002      	b.n	800c742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c742:	4a04      	ldr	r2, [pc, #16]	; (800c754 <prvSampleTimeNow+0x3c>)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c748:	68fb      	ldr	r3, [r7, #12]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20000ce8 	.word	0x20000ce8

0800c758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d812      	bhi.n	800c7a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	1ad2      	subs	r2, r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d302      	bcc.n	800c792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c78c:	2301      	movs	r3, #1
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	e01b      	b.n	800c7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c792:	4b10      	ldr	r3, [pc, #64]	; (800c7d4 <prvInsertTimerInActiveList+0x7c>)
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fd fd60 	bl	800a262 <vListInsert>
 800c7a2:	e012      	b.n	800c7ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d206      	bcs.n	800c7ba <prvInsertTimerInActiveList+0x62>
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d302      	bcc.n	800c7ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	e007      	b.n	800c7ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7ba:	4b07      	ldr	r3, [pc, #28]	; (800c7d8 <prvInsertTimerInActiveList+0x80>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f7fd fd4c 	bl	800a262 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7ca:	697b      	ldr	r3, [r7, #20]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3718      	adds	r7, #24
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000cdc 	.word	0x20000cdc
 800c7d8:	20000cd8 	.word	0x20000cd8

0800c7dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08e      	sub	sp, #56	; 0x38
 800c7e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e2:	e0ca      	b.n	800c97a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	da18      	bge.n	800c81c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ea:	1d3b      	adds	r3, r7, #4
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10a      	bne.n	800c80c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	61fb      	str	r3, [r7, #28]
}
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c812:	6850      	ldr	r0, [r2, #4]
 800c814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c816:	6892      	ldr	r2, [r2, #8]
 800c818:	4611      	mov	r1, r2
 800c81a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f2c0 80aa 	blt.w	800c978 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd fd4d 	bl	800a2d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c83a:	463b      	mov	r3, r7
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff ff6b 	bl	800c718 <prvSampleTimeNow>
 800c842:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b09      	cmp	r3, #9
 800c848:	f200 8097 	bhi.w	800c97a <prvProcessReceivedCommands+0x19e>
 800c84c:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <prvProcessReceivedCommands+0x78>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c87d 	.word	0x0800c87d
 800c858:	0800c87d 	.word	0x0800c87d
 800c85c:	0800c87d 	.word	0x0800c87d
 800c860:	0800c8f1 	.word	0x0800c8f1
 800c864:	0800c905 	.word	0x0800c905
 800c868:	0800c94f 	.word	0x0800c94f
 800c86c:	0800c87d 	.word	0x0800c87d
 800c870:	0800c87d 	.word	0x0800c87d
 800c874:	0800c8f1 	.word	0x0800c8f1
 800c878:	0800c905 	.word	0x0800c905
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c882:	f043 0301 	orr.w	r3, r3, #1
 800c886:	b2da      	uxtb	r2, r3
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	18d1      	adds	r1, r2, r3
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c89c:	f7ff ff5c 	bl	800c758 <prvInsertTimerInActiveList>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d069      	beq.n	800c97a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d05e      	beq.n	800c97a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	441a      	add	r2, r3
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ce:	f7ff fe05 	bl	800c4dc <xTimerGenericCommand>
 800c8d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d14f      	bne.n	800c97a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	61bb      	str	r3, [r7, #24]
}
 800c8ec:	bf00      	nop
 800c8ee:	e7fe      	b.n	800c8ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8f6:	f023 0301 	bic.w	r3, r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c902:	e03a      	b.n	800c97a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90a:	f043 0301 	orr.w	r3, r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	617b      	str	r3, [r7, #20]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	18d1      	adds	r1, r2, r3
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c948:	f7ff ff06 	bl	800c758 <prvInsertTimerInActiveList>
					break;
 800c94c:	e015      	b.n	800c97a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95e:	f000 fbdf 	bl	800d120 <vPortFree>
 800c962:	e00a      	b.n	800c97a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96a:	f023 0301 	bic.w	r3, r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c976:	e000      	b.n	800c97a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c978:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97a:	4b08      	ldr	r3, [pc, #32]	; (800c99c <prvProcessReceivedCommands+0x1c0>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	1d39      	adds	r1, r7, #4
 800c980:	2200      	movs	r2, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f89e 	bl	800aac4 <xQueueReceive>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f47f af2a 	bne.w	800c7e4 <prvProcessReceivedCommands+0x8>
	}
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	3730      	adds	r7, #48	; 0x30
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000ce0 	.word	0x20000ce0

0800c9a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9a6:	e048      	b.n	800ca3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9a8:	4b2d      	ldr	r3, [pc, #180]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b2:	4b2b      	ldr	r3, [pc, #172]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fd fc87 	bl	800a2d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6a1b      	ldr	r3, [r3, #32]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d02e      	beq.n	800ca3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d90e      	bls.n	800ca0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9fa:	4b19      	ldr	r3, [pc, #100]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3304      	adds	r3, #4
 800ca02:	4619      	mov	r1, r3
 800ca04:	4610      	mov	r0, r2
 800ca06:	f7fd fc2c 	bl	800a262 <vListInsert>
 800ca0a:	e016      	b.n	800ca3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	2300      	movs	r3, #0
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	2100      	movs	r1, #0
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff fd60 	bl	800c4dc <xTimerGenericCommand>
 800ca1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10a      	bne.n	800ca3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	603b      	str	r3, [r7, #0]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3a:	4b09      	ldr	r3, [pc, #36]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1b1      	bne.n	800c9a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca44:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca4a:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <prvSwitchTimerLists+0xc4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a04      	ldr	r2, [pc, #16]	; (800ca60 <prvSwitchTimerLists+0xc0>)
 800ca50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca52:	4a04      	ldr	r2, [pc, #16]	; (800ca64 <prvSwitchTimerLists+0xc4>)
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	6013      	str	r3, [r2, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20000cd8 	.word	0x20000cd8
 800ca64:	20000cdc 	.word	0x20000cdc

0800ca68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca6e:	f000 f969 	bl	800cd44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <prvCheckForValidListAndQueue+0x60>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d120      	bne.n	800cabc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca7a:	4814      	ldr	r0, [pc, #80]	; (800cacc <prvCheckForValidListAndQueue+0x64>)
 800ca7c:	f7fd fba0 	bl	800a1c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca80:	4813      	ldr	r0, [pc, #76]	; (800cad0 <prvCheckForValidListAndQueue+0x68>)
 800ca82:	f7fd fb9d 	bl	800a1c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca86:	4b13      	ldr	r3, [pc, #76]	; (800cad4 <prvCheckForValidListAndQueue+0x6c>)
 800ca88:	4a10      	ldr	r2, [pc, #64]	; (800cacc <prvCheckForValidListAndQueue+0x64>)
 800ca8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca8c:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <prvCheckForValidListAndQueue+0x70>)
 800ca8e:	4a10      	ldr	r2, [pc, #64]	; (800cad0 <prvCheckForValidListAndQueue+0x68>)
 800ca90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca92:	2300      	movs	r3, #0
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4b11      	ldr	r3, [pc, #68]	; (800cadc <prvCheckForValidListAndQueue+0x74>)
 800ca98:	4a11      	ldr	r2, [pc, #68]	; (800cae0 <prvCheckForValidListAndQueue+0x78>)
 800ca9a:	2110      	movs	r1, #16
 800ca9c:	200a      	movs	r0, #10
 800ca9e:	f7fd fcab 	bl	800a3f8 <xQueueGenericCreateStatic>
 800caa2:	4603      	mov	r3, r0
 800caa4:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <prvCheckForValidListAndQueue+0x60>)
 800caa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caa8:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <prvCheckForValidListAndQueue+0x60>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d005      	beq.n	800cabc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <prvCheckForValidListAndQueue+0x60>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	490b      	ldr	r1, [pc, #44]	; (800cae4 <prvCheckForValidListAndQueue+0x7c>)
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fe fbbc 	bl	800b234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cabc:	f000 f972 	bl	800cda4 <vPortExitCritical>
}
 800cac0:	bf00      	nop
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000ce0 	.word	0x20000ce0
 800cacc:	20000cb0 	.word	0x20000cb0
 800cad0:	20000cc4 	.word	0x20000cc4
 800cad4:	20000cd8 	.word	0x20000cd8
 800cad8:	20000cdc 	.word	0x20000cdc
 800cadc:	20000d8c 	.word	0x20000d8c
 800cae0:	20000cec 	.word	0x20000cec
 800cae4:	0800d494 	.word	0x0800d494

0800cae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3b04      	subs	r3, #4
 800caf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3b04      	subs	r3, #4
 800cb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	f023 0201 	bic.w	r2, r3, #1
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3b04      	subs	r3, #4
 800cb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb18:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <pxPortInitialiseStack+0x64>)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3b14      	subs	r3, #20
 800cb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f06f 0202 	mvn.w	r2, #2
 800cb36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3b20      	subs	r3, #32
 800cb3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	0800cb51 	.word	0x0800cb51

0800cb50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5a:	4b12      	ldr	r3, [pc, #72]	; (800cba4 <prvTaskExitError+0x54>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb62:	d00a      	beq.n	800cb7a <prvTaskExitError+0x2a>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	60fb      	str	r3, [r7, #12]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <prvTaskExitError+0x28>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	60bb      	str	r3, [r7, #8]
}
 800cb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb8e:	bf00      	nop
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d0fc      	beq.n	800cb90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	2000000c 	.word	0x2000000c
	...

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b46      	ldr	r3, [pc, #280]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a46      	ldr	r2, [pc, #280]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x26>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc26:	4b3e      	ldr	r3, [pc, #248]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a3f      	ldr	r2, [pc, #252]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60fb      	str	r3, [r7, #12]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc46:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <xPortStartScheduler+0x130>)
 800cc6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6e:	4b31      	ldr	r3, [pc, #196]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc74:	e009      	b.n	800cc8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4a2d      	ldr	r2, [pc, #180]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc92:	2b80      	cmp	r3, #128	; 0x80
 800cc94:	d0ef      	beq.n	800cc76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f1c3 0307 	rsb	r3, r3, #7
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d00a      	beq.n	800ccb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccca:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <xPortStartScheduler+0x134>)
 800cccc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd6:	4b18      	ldr	r3, [pc, #96]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a17      	ldr	r2, [pc, #92]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cce0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <xPortStartScheduler+0x138>)
 800cce8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccee:	f000 f8dd 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	; (800cd3c <xPortStartScheduler+0x13c>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf8:	f000 f8fc 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <xPortStartScheduler+0x140>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <xPortStartScheduler+0x140>)
 800cd02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd08:	f7ff ff66 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd0c:	f7fe ff54 	bl	800bbb8 <vTaskSwitchContext>
	prvTaskExitError();
 800cd10:	f7ff ff1e 	bl	800cb50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	e000ed00 	.word	0xe000ed00
 800cd24:	410fc271 	.word	0x410fc271
 800cd28:	410fc270 	.word	0x410fc270
 800cd2c:	e000e400 	.word	0xe000e400
 800cd30:	20000ddc 	.word	0x20000ddc
 800cd34:	20000de0 	.word	0x20000de0
 800cd38:	e000ed20 	.word	0xe000ed20
 800cd3c:	2000000c 	.word	0x2000000c
 800cd40:	e000ef34 	.word	0xe000ef34

0800cd44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	607b      	str	r3, [r7, #4]
}
 800cd5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	4a0d      	ldr	r2, [pc, #52]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <vPortEnterCritical+0x58>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d10f      	bne.n	800cd90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd70:	4b0b      	ldr	r3, [pc, #44]	; (800cda0 <vPortEnterCritical+0x5c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <vPortEnterCritical+0x4a>
	}
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	2000000c 	.word	0x2000000c
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <vPortExitCritical+0x24>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	607b      	str	r3, [r7, #4]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdc8:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d105      	bne.n	800cde6 <vPortExitCritical+0x42>
 800cdda:	2300      	movs	r3, #0
 800cddc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	f383 8811 	msr	BASEPRI, r3
}
 800cde4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	2000000c 	.word	0x2000000c
	...

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	; (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe fec2 	bl	800bbb8 <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fddf 	bl	800ba44 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	20000000 	.word	0x20000000
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d914      	bls.n	800cf44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a17      	ldr	r2, [pc, #92]	; (800cf78 <vPortValidateInterruptPriority+0x70>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20a      	bcs.n	800cf44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d90a      	bls.n	800cf6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	603b      	str	r3, [r7, #0]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <vPortValidateInterruptPriority+0x60>
	}
 800cf6a:	bf00      	nop
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	e000e3f0 	.word	0xe000e3f0
 800cf7c:	20000ddc 	.word	0x20000ddc
 800cf80:	e000ed0c 	.word	0xe000ed0c
 800cf84:	20000de0 	.word	0x20000de0

0800cf88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf94:	f7fe fc88 	bl	800b8a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf98:	4b5b      	ldr	r3, [pc, #364]	; (800d108 <pvPortMalloc+0x180>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa0:	f000 f920 	bl	800d1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa4:	4b59      	ldr	r3, [pc, #356]	; (800d10c <pvPortMalloc+0x184>)
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8093 	bne.w	800d0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01d      	beq.n	800cff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f003 0307 	and.w	r3, r3, #7
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d06e      	beq.n	800d0d8 <pvPortMalloc+0x150>
 800cffa:	4b45      	ldr	r3, [pc, #276]	; (800d110 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d869      	bhi.n	800d0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d004:	4b43      	ldr	r3, [pc, #268]	; (800d114 <pvPortMalloc+0x18c>)
 800d006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d008:	4b42      	ldr	r3, [pc, #264]	; (800d114 <pvPortMalloc+0x18c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	e004      	b.n	800d01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d903      	bls.n	800d02c <pvPortMalloc+0xa4>
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f1      	bne.n	800d010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d02c:	4b36      	ldr	r3, [pc, #216]	; (800d108 <pvPortMalloc+0x180>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d032:	429a      	cmp	r2, r3
 800d034:	d050      	beq.n	800d0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2208      	movs	r2, #8
 800d03c:	4413      	add	r3, r2
 800d03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2308      	movs	r3, #8
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	d91f      	bls.n	800d098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <pvPortMalloc+0xf8>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	613b      	str	r3, [r7, #16]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d092:	69b8      	ldr	r0, [r7, #24]
 800d094:	f000 f908 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d098:	4b1d      	ldr	r3, [pc, #116]	; (800d110 <pvPortMalloc+0x188>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a1b      	ldr	r2, [pc, #108]	; (800d110 <pvPortMalloc+0x188>)
 800d0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0a6:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <pvPortMalloc+0x188>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	; (800d118 <pvPortMalloc+0x190>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d203      	bcs.n	800d0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <pvPortMalloc+0x188>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <pvPortMalloc+0x190>)
 800d0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	685a      	ldr	r2, [r3, #4]
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <pvPortMalloc+0x184>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x194>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	4a11      	ldr	r2, [pc, #68]	; (800d11c <pvPortMalloc+0x194>)
 800d0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0d8:	f7fe fbf4 	bl	800b8c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <pvPortMalloc+0x174>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	60fb      	str	r3, [r7, #12]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <pvPortMalloc+0x172>
	return pvReturn;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3728      	adds	r7, #40	; 0x28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	200019a4 	.word	0x200019a4
 800d10c:	200019b8 	.word	0x200019b8
 800d110:	200019a8 	.word	0x200019a8
 800d114:	2000199c 	.word	0x2000199c
 800d118:	200019ac 	.word	0x200019ac
 800d11c:	200019b0 	.word	0x200019b0

0800d120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d04d      	beq.n	800d1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d132:	2308      	movs	r3, #8
 800d134:	425b      	negs	r3, r3
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	4413      	add	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	4b24      	ldr	r3, [pc, #144]	; (800d1d8 <vPortFree+0xb8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <vPortFree+0x44>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	60fb      	str	r3, [r7, #12]
}
 800d160:	bf00      	nop
 800d162:	e7fe      	b.n	800d162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <vPortFree+0x62>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <vPortFree+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d01e      	beq.n	800d1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d11a      	bne.n	800d1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <vPortFree+0xb8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	43db      	mvns	r3, r3
 800d1a2:	401a      	ands	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1a8:	f7fe fb7e 	bl	800b8a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <vPortFree+0xbc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <vPortFree+0xbc>)
 800d1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f000 f874 	bl	800d2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <vPortFree+0xc0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a06      	ldr	r2, [pc, #24]	; (800d1e0 <vPortFree+0xc0>)
 800d1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ca:	f7fe fb7b 	bl	800b8c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ce:	bf00      	nop
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	200019b8 	.word	0x200019b8
 800d1dc:	200019a8 	.word	0x200019a8
 800d1e0:	200019b4 	.word	0x200019b4

0800d1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <prvHeapInit+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00c      	beq.n	800d218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0307 	bic.w	r3, r3, #7
 800d20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <prvHeapInit+0xac>)
 800d214:	4413      	add	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d21c:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <prvHeapInit+0xb0>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d222:	4b1c      	ldr	r3, [pc, #112]	; (800d294 <prvHeapInit+0xb0>)
 800d224:	2200      	movs	r2, #0
 800d226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d230:	2208      	movs	r2, #8
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4a15      	ldr	r2, [pc, #84]	; (800d298 <prvHeapInit+0xb4>)
 800d244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <prvHeapInit+0xb4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <prvHeapInit+0xb4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	1ad2      	subs	r2, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvHeapInit+0xb4>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <prvHeapInit+0xb8>)
 800d272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a09      	ldr	r2, [pc, #36]	; (800d2a0 <prvHeapInit+0xbc>)
 800d27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d27c:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <prvHeapInit+0xc0>)
 800d27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20000de4 	.word	0x20000de4
 800d294:	2000199c 	.word	0x2000199c
 800d298:	200019a4 	.word	0x200019a4
 800d29c:	200019ac 	.word	0x200019ac
 800d2a0:	200019a8 	.word	0x200019a8
 800d2a4:	200019b8 	.word	0x200019b8

0800d2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2b0:	4b28      	ldr	r3, [pc, #160]	; (800d354 <prvInsertBlockIntoFreeList+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	e002      	b.n	800d2bc <prvInsertBlockIntoFreeList+0x14>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d8f7      	bhi.n	800d2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d108      	bne.n	800d2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d118      	bne.n	800d330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d00d      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	441a      	add	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	e008      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvInsertBlockIntoFreeList+0xb0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	e003      	b.n	800d338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d002      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	2000199c 	.word	0x2000199c
 800d358:	200019a4 	.word	0x200019a4

0800d35c <__libc_init_array>:
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	4d0d      	ldr	r5, [pc, #52]	; (800d394 <__libc_init_array+0x38>)
 800d360:	4c0d      	ldr	r4, [pc, #52]	; (800d398 <__libc_init_array+0x3c>)
 800d362:	1b64      	subs	r4, r4, r5
 800d364:	10a4      	asrs	r4, r4, #2
 800d366:	2600      	movs	r6, #0
 800d368:	42a6      	cmp	r6, r4
 800d36a:	d109      	bne.n	800d380 <__libc_init_array+0x24>
 800d36c:	4d0b      	ldr	r5, [pc, #44]	; (800d39c <__libc_init_array+0x40>)
 800d36e:	4c0c      	ldr	r4, [pc, #48]	; (800d3a0 <__libc_init_array+0x44>)
 800d370:	f000 f82e 	bl	800d3d0 <_init>
 800d374:	1b64      	subs	r4, r4, r5
 800d376:	10a4      	asrs	r4, r4, #2
 800d378:	2600      	movs	r6, #0
 800d37a:	42a6      	cmp	r6, r4
 800d37c:	d105      	bne.n	800d38a <__libc_init_array+0x2e>
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	f855 3b04 	ldr.w	r3, [r5], #4
 800d384:	4798      	blx	r3
 800d386:	3601      	adds	r6, #1
 800d388:	e7ee      	b.n	800d368 <__libc_init_array+0xc>
 800d38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d38e:	4798      	blx	r3
 800d390:	3601      	adds	r6, #1
 800d392:	e7f2      	b.n	800d37a <__libc_init_array+0x1e>
 800d394:	0800d980 	.word	0x0800d980
 800d398:	0800d980 	.word	0x0800d980
 800d39c:	0800d980 	.word	0x0800d980
 800d3a0:	0800d984 	.word	0x0800d984

0800d3a4 <memcpy>:
 800d3a4:	440a      	add	r2, r1
 800d3a6:	4291      	cmp	r1, r2
 800d3a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d3ac:	d100      	bne.n	800d3b0 <memcpy+0xc>
 800d3ae:	4770      	bx	lr
 800d3b0:	b510      	push	{r4, lr}
 800d3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3ba:	4291      	cmp	r1, r2
 800d3bc:	d1f9      	bne.n	800d3b2 <memcpy+0xe>
 800d3be:	bd10      	pop	{r4, pc}

0800d3c0 <memset>:
 800d3c0:	4402      	add	r2, r0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d100      	bne.n	800d3ca <memset+0xa>
 800d3c8:	4770      	bx	lr
 800d3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ce:	e7f9      	b.n	800d3c4 <memset+0x4>

0800d3d0 <_init>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	bf00      	nop
 800d3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d6:	bc08      	pop	{r3}
 800d3d8:	469e      	mov	lr, r3
 800d3da:	4770      	bx	lr

0800d3dc <_fini>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	bf00      	nop
 800d3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3e2:	bc08      	pop	{r3}
 800d3e4:	469e      	mov	lr, r3
 800d3e6:	4770      	bx	lr
