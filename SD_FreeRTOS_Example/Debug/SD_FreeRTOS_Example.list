
SD_FreeRTOS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d890  0800d890  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800d890  0800d890  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d890  0800d890  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d890  0800d890  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d894  0800d894  0001d894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e0  20000010  0800d8a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200043f0  0800d8a8  000243f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b31a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005028  00000000  00000000  0004b35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00050388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a28  00000000  00000000  00051fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000633f  00000000  00000000  000539f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000229d7  00000000  00000000  00059d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100e87  00000000  00000000  0007c706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d58d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007508  00000000  00000000  0017d5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2d0 	.word	0x0800d2d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800d2d0 	.word	0x0800d2d0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc7f 	bl	8000ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82a 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8ee 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f8ce 	bl	8000380 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80001e4:	f000 f8ac 	bl	8000340 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80001e8:	f005 fd38 	bl	8005c5c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f009 fc04 	bl	80099f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x48>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x4c>)
 80001f6:	f009 fc80 	bl	8009afa <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x50>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(Start_SD_Task, NULL, &SDTask_attributes);
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x54>)
 8000202:	2100      	movs	r1, #0
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	f009 fc78 	bl	8009afa <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <main+0x5c>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f009 fc38 	bl	8009a84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x44>
 8000216:	bf00      	nop
 8000218:	0800d3ac 	.word	0x0800d3ac
 800021c:	08000445 	.word	0x08000445
 8000220:	200019bc 	.word	0x200019bc
 8000224:	0800d3d0 	.word	0x0800d3d0
 8000228:	08000455 	.word	0x08000455
 800022c:	20001a44 	.word	0x20001a44

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0b8      	sub	sp, #224	; 0xe0
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f00d f83e 	bl	800d2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2288      	movs	r2, #136	; 0x88
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f00d f830 	bl	800d2c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000272:	2360      	movs	r3, #96	; 0x60
 8000274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000284:	2301      	movs	r3, #1
 8000286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 800028a:	2310      	movs	r3, #16
 800028c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000290:	2307      	movs	r3, #7
 8000292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fa82 	bl	80017b0 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002b2:	f000 f93f 	bl	8000534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002d8:	2101      	movs	r1, #1
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fe4e 	bl	8001f7c <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002e6:	f000 f925 	bl	8000534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80002ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80002f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002f4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002fe:	2310      	movs	r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800030e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000312:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f868 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000322:	f000 f907 	bl	8000534 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032a:	f001 f9eb 	bl	8001704 <HAL_PWREx_ControlVoltageScaling>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000334:	f000 f8fe 	bl	8000534 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	37e0      	adds	r7, #224	; 0xe0
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <MX_SDMMC1_SD_Init+0x3c>)
 8000348:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	200019c0 	.word	0x200019c0
 800037c:	40012800 	.word	0x40012800

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6493      	str	r3, [r2, #72]	; 0x48
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2105      	movs	r1, #5
 80003a2:	203b      	movs	r0, #59	; 0x3b
 80003a4:	f000 fcac 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80003a8:	203b      	movs	r0, #59	; 0x3b
 80003aa:	f000 fcc5 	bl	8000d38 <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x84>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x84>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x84>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <MX_GPIO_Init+0x84>)
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_GPIO_Init+0x84>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f000 ff97 	bl	8001364 <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f009 fbe6 	bl	8009c1e <osDelay>
 8000452:	e7fb      	b.n	800044c <StartDefaultTask+0x8>

08000454 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	f6ad 1d84 	subw	sp, sp, #2436	; 0x984
 800045a:	af00      	add	r7, sp, #0
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  SD_CARD sd;
  uint32_t byteswritten, bytesread; //file write/read counts
  uint8_t wtext[] = "Let's see if this runs test"; //file buffer
 8000460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000464:	4a28      	ldr	r2, [pc, #160]	; (8000508 <Start_SD_Task+0xb4>)
 8000466:	461c      	mov	r4, r3
 8000468:	4615      	mov	r5, r2
 800046a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800046c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uint8_t file_path[50] = "/sub_test/stm32.txt";
 8000476:	f107 060c 	add.w	r6, r7, #12
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <Start_SD_Task+0xb8>)
 800047c:	4634      	mov	r4, r6
 800047e:	461d      	mov	r5, r3
 8000480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000484:	682b      	ldr	r3, [r5, #0]
 8000486:	6023      	str	r3, [r4, #0]
 8000488:	f106 0314 	add.w	r3, r6, #20
 800048c:	221e      	movs	r2, #30
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f00c ff15 	bl	800d2c0 <memset>
  for(;;)
  {
	//taskENTER_CRITICAL();
	if(init_sd(&sd) != FR_OK) {
 8000496:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f850 	bl	8000540 <init_sd>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <Start_SD_Task+0x58>
	  Error_Handler();
 80004a6:	f000 f845 	bl	8000534 <Error_Handler>
 80004aa:	e027      	b.n	80004fc <Start_SD_Task+0xa8>
    }
	else { //file system already exists, try to open a file

		bytesread = read_from_file(&sd, file_path, 35);
 80004ac:	f107 010c 	add.w	r1, r7, #12
 80004b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004b4:	2223      	movs	r2, #35	; 0x23
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f882 	bl	80005c0 <read_from_file>
 80004bc:	4603      	mov	r3, r0
 80004be:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c

		memcpy(&sd.write_buffer, wtext, sizeof(wtext));
 80004c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004ca:	f203 541c 	addw	r4, r3, #1308	; 0x51c
 80004ce:	4615      	mov	r5, r2
 80004d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		byteswritten = write_to_file(&sd, file_path, sizeof(wtext));
 80004dc:	f107 010c 	add.w	r1, r7, #12
 80004e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004e4:	221c      	movs	r2, #28
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f8a0 	bl	800062c <write_to_file>
 80004ec:	4603      	mov	r3, r0
 80004ee:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978

		unmount(&sd);
 80004f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f914 	bl	8000724 <unmount>
	}
	//taskEXIT_CRITICAL();
	osDelay(10000);
 80004fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000500:	f009 fb8d 	bl	8009c1e <osDelay>
	if(init_sd(&sd) != FR_OK) {
 8000504:	e7c7      	b.n	8000496 <Start_SD_Task+0x42>
 8000506:	bf00      	nop
 8000508:	0800d2fc 	.word	0x0800d2fc
 800050c:	0800d318 	.word	0x0800d318

08000510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d101      	bne.n	8000526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000522:	f000 faf1 	bl	8000b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40001000 	.word	0x40001000

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <init_sd>:
 */

int8_t
init_sd(SD_CARD *sd //SD Card instance
		)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  	 //check that SD Card is slotted correctly
  	 if(!BSP_SD_IsDetected()) {
 8000548:	f005 fc41 	bl	8005dce <BSP_SD_IsDetected>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <init_sd+0x18>
  		 return -1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000556:	e02b      	b.n	80005b0 <init_sd+0x70>
  	 }

  	 //instantly mount SD card on startup
  	 sd->res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	4917      	ldr	r1, [pc, #92]	; (80005b8 <init_sd+0x78>)
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <init_sd+0x7c>)
 800055e:	f008 f97f 	bl	8008860 <f_mount>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	701a      	strb	r2, [r3, #0]
  	 if(sd->res != FR_OK) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <init_sd+0x38>
  		 return -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000576:	e01b      	b.n	80005b0 <init_sd+0x70>
  	 }

  	 //initialize R/W buffers
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800057e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f00c fe9b 	bl	800d2c0 <memset>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <init_sd+0x68>
  			 memset(sd->write_buffer, 0, sizeof(sd->write_buffer)) == NULL) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8000596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f00c fe8f 	bl	800d2c0 <memset>
 80005a2:	4603      	mov	r3, r0
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <init_sd+0x6e>
  		 return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ac:	e000      	b.n	80005b0 <init_sd+0x70>
  	 }

  	 //return success
  	 return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20002340 	.word	0x20002340
 80005bc:	20003374 	.word	0x20003374

080005c0 <read_from_file>:
int32_t
read_from_file(SD_CARD *sd,			//SD card instance
		  uint8_t file_path[50],//path to the file
		  uint16_t read_amount  //amount of bytes to read
		  )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4613      	mov	r3, r2
 80005cc:	80fb      	strh	r3, [r7, #6]

	UINT bytes_read;

	//open file for reading
	sd->res = f_open(&SDFile, (char*)file_path, FA_READ);
 80005ce:	2201      	movs	r2, #1
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <read_from_file+0x68>)
 80005d4:	f008 f9a8 	bl	8008928 <f_open>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	701a      	strb	r2, [r3, #0]
	if(sd->res != FR_OK) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <read_from_file+0x2e>
		return -1;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ec:	e018      	b.n	8000620 <read_from_file+0x60>
	}

	//prevent out of range access
	if(f_size(&SDFile) < read_amount) {
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <read_from_file+0x68>)
 80005f0:	68da      	ldr	r2, [r3, #12]
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d202      	bcs.n	80005fe <read_from_file+0x3e>
		read_amount = f_size(&SDFile);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <read_from_file+0x68>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	80fb      	strh	r3, [r7, #6]
	}
	//read bytes from file and store them in read buffer
	sd->res = f_read(&SDFile, &sd->read_buffer, read_amount, &bytes_read);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8000604:	88fa      	ldrh	r2, [r7, #6]
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <read_from_file+0x68>)
 800060c:	f008 fbef 	bl	8008dee <f_read>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <read_from_file+0x68>)
 800061a:	f008 ffc2 	bl	80095a2 <f_close>

	return bytes_read;
 800061e:	697b      	ldr	r3, [r7, #20]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20002344 	.word	0x20002344

0800062c <write_to_file>:
int32_t
write_to_file(SD_CARD *sd,		 //SD card instance
		   uint8_t file_path[50],//path to the file
		   uint16_t write_amount //amount of bytes to be written
		   )
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	4613      	mov	r3, r2
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	466b      	mov	r3, sp
 800063c:	461d      	mov	r5, r3
	UINT bytes_written;
	unsigned char w_str[write_amount+1];
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	1c5c      	adds	r4, r3, #1
 8000642:	1e63      	subs	r3, r4, #1
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	4623      	mov	r3, r4
 8000648:	4618      	mov	r0, r3
 800064a:	f04f 0100 	mov.w	r1, #0
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	00cb      	lsls	r3, r1, #3
 8000658:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800065c:	00c2      	lsls	r2, r0, #3
 800065e:	4623      	mov	r3, r4
 8000660:	4618      	mov	r0, r3
 8000662:	f04f 0100 	mov.w	r1, #0
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	00cb      	lsls	r3, r1, #3
 8000670:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000674:	00c2      	lsls	r2, r0, #3
 8000676:	4623      	mov	r3, r4
 8000678:	3307      	adds	r3, #7
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	ebad 0d03 	sub.w	sp, sp, r3
 8000682:	466b      	mov	r3, sp
 8000684:	3300      	adds	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
	//copy buffer to local array (may need to improve this later)
	memcpy(w_str, &sd->write_buffer, write_amount);
 8000688:	69b8      	ldr	r0, [r7, #24]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8000690:	88fa      	ldrh	r2, [r7, #6]
 8000692:	4619      	mov	r1, r3
 8000694:	f00c fe06 	bl	800d2a4 <memcpy>

	//check if file exists
	sd->res = f_stat((char*)file_path, &sd->finfo);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3304      	adds	r3, #4
 800069c:	4619      	mov	r1, r3
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f008 ffae 	bl	8009600 <f_stat>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	701a      	strb	r2, [r3, #0]

	//adhere to different cases
	switch(sd->res) {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <write_to_file+0x8e>
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d00a      	beq.n	80006ce <write_to_file+0xa2>
 80006b8:	e013      	b.n	80006e2 <write_to_file+0xb6>

	case FR_OK:
		//file exists, append to it
		sd->res = f_open(&SDFile, (char*)file_path, FA_OPEN_APPEND | FA_WRITE);
 80006ba:	2232      	movs	r2, #50	; 0x32
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <write_to_file+0xf4>)
 80006c0:	f008 f932 	bl	8008928 <f_open>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	701a      	strb	r2, [r3, #0]
		break;
 80006cc:	e013      	b.n	80006f6 <write_to_file+0xca>
	case FR_NO_FILE:
		//file does not exist, create it
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006ce:	2206      	movs	r2, #6
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <write_to_file+0xf4>)
 80006d4:	f008 f928 	bl	8008928 <f_open>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e009      	b.n	80006f6 <write_to_file+0xca>
	default:
		//default case should overwrite to prevent system failure
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006e2:	2206      	movs	r2, #6
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <write_to_file+0xf4>)
 80006e8:	f008 f91e 	bl	8008928 <f_open>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	701a      	strb	r2, [r3, #0]
		break;
 80006f4:	bf00      	nop
	}

	//write to file
	sd->res = f_write(&SDFile, w_str, (UINT)write_amount, (UINT*)&bytes_written);
 80006f6:	69b9      	ldr	r1, [r7, #24]
 80006f8:	88fa      	ldrh	r2, [r7, #6]
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <write_to_file+0xf4>)
 8000700:	f008 fd03 	bl	800910a <f_write>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <write_to_file+0xf4>)
 800070e:	f008 ff48 	bl	80095a2 <f_close>

	return bytes_written;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	46ad      	mov	sp, r5
}
 8000716:	4618      	mov	r0, r3
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bdb0      	pop	{r4, r5, r7, pc}
 800071e:	bf00      	nop
 8000720:	20002344 	.word	0x20002344

08000724 <unmount>:
 * Unmount SD card
 */
void
unmount(SD_CARD *sd //SD Card instance
		)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	sd->res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <unmount+0x24>)
 8000732:	f008 f895 	bl	8008860 <f_mount>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20003374 	.word	0x20003374

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_MspInit+0x4c>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_MspInit+0x4c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	; 0x60
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_MspInit+0x4c>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_MspInit+0x4c>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	; 0x58
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x4c>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	f06f 0001 	mvn.w	r0, #1
 800078a:	f000 fab9 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a42      	ldr	r2, [pc, #264]	; (80008c4 <HAL_SD_MspInit+0x128>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d17e      	bne.n	80008bc <HAL_SD_MspInit+0x120>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a3b      	ldr	r2, [pc, #236]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a35      	ldr	r2, [pc, #212]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <HAL_SD_MspInit+0x12c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000806:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000818:	230c      	movs	r3, #12
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <HAL_SD_MspInit+0x130>)
 8000824:	f000 fd9e 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000828:	2304      	movs	r3, #4
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000838:	230c      	movs	r3, #12
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4823      	ldr	r0, [pc, #140]	; (80008d0 <HAL_SD_MspInit+0x134>)
 8000844:	f000 fd8e 	bl	8001364 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <HAL_SD_MspInit+0x138>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <HAL_SD_MspInit+0x13c>)
 800084c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000850:	2207      	movs	r2, #7
 8000852:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000856:	2210      	movs	r2, #16
 8000858:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_SD_MspInit+0x138>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000874:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_SD_MspInit+0x138>)
 800087e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000882:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000886:	f000 fa65 	bl	8000d54 <HAL_DMA_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_SD_MspInit+0xf8>
    {
      Error_Handler();
 8000890:	f7ff fe50 	bl	8000534 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_SD_MspInit+0x138>)
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_SD_MspInit+0x138>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <HAL_SD_MspInit+0x138>)
 80008a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_SD_MspInit+0x138>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2105      	movs	r1, #5
 80008b0:	2031      	movs	r0, #49	; 0x31
 80008b2:	f000 fa25 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008b6:	2031      	movs	r0, #49	; 0x31
 80008b8:	f000 fa3e 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40012800 	.word	0x40012800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000c00 	.word	0x48000c00
 80008d4:	200022a4 	.word	0x200022a4
 80008d8:	40020444 	.word	0x40020444

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	2036      	movs	r0, #54	; 0x36
 80008f2:	f000 fa05 	bl	8000d00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f6:	2036      	movs	r0, #54	; 0x36
 80008f8:	f000 fa1e 	bl	8000d38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_InitTick+0x9c>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_InitTick+0x9c>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6593      	str	r3, [r2, #88]	; 0x58
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_InitTick+0x9c>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 0210 	add.w	r2, r7, #16
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fcd2 	bl	80022c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000924:	f001 fca4 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8000928:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_InitTick+0xa0>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_InitTick+0xa4>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <HAL_InitTick+0xa8>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_InitTick+0xa4>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_InitTick+0xa4>)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_InitTick+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_InitTick+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_InitTick+0xa4>)
 800095a:	f004 f979 	bl	8004c50 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d104      	bne.n	800096e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <HAL_InitTick+0xa4>)
 8000966:	f004 f9d5 	bl	8004d14 <HAL_TIM_Base_Start_IT>
 800096a:	4603      	mov	r3, r0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	431bde83 	.word	0x431bde83
 8000980:	200022ec 	.word	0x200022ec
 8000984:	40001000 	.word	0x40001000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <SDMMC1_IRQHandler+0x10>)
 80009ba:	f003 faa9 	bl	8003f10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200019c0 	.word	0x200019c0

080009c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM6_DAC_IRQHandler+0x10>)
 80009ce:	f004 fa11 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200022ec 	.word	0x200022ec

080009dc <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
#ifndef CODE_CORRECTION_SD
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */
#else
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	2b81      	cmp	r3, #129	; 0x81
 80009e6:	d003      	beq.n	80009f0 <DMA2_Channel4_IRQHandler+0x14>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80009ec:	2b82      	cmp	r3, #130	; 0x82
 80009ee:	d105      	bne.n	80009fc <DMA2_Channel4_IRQHandler+0x20>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmarx);
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fbd6 	bl	80011a6 <HAL_DMA_IRQHandler>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
  }
#endif
  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80009fa:	e00c      	b.n	8000a16 <DMA2_Channel4_IRQHandler+0x3a>
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	2b90      	cmp	r3, #144	; 0x90
 8000a02:	d003      	beq.n	8000a0c <DMA2_Channel4_IRQHandler+0x30>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a08:	2ba0      	cmp	r3, #160	; 0xa0
 8000a0a:	d104      	bne.n	8000a16 <DMA2_Channel4_IRQHandler+0x3a>
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <DMA2_Channel4_IRQHandler+0x40>)
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fbc8 	bl	80011a6 <HAL_DMA_IRQHandler>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200019c0 	.word	0x200019c0

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <SystemInit+0x5c>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <SystemInit+0x5c>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <SystemInit+0x60>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <SystemInit+0x60>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <SystemInit+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <SystemInit+0x60>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <SystemInit+0x60>)
 8000a4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <SystemInit+0x60>)
 8000a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <SystemInit+0x60>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <SystemInit+0x60>)
 8000a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SystemInit+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00
 8000a80:	40021000 	.word	0x40021000

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffca 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a8e:	e003      	b.n	8000a98 <LoopCopyDataInit>

08000a90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a96:	3104      	adds	r1, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aa0:	d3f6      	bcc.n	8000a90 <CopyDataInit>
	ldr	r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aa4:	e002      	b.n	8000aac <LoopFillZerobss>

08000aa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aa6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aa8:	f842 3b04 	str.w	r3, [r2], #4

08000aac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <LoopForever+0x16>)
	cmp	r2, r3
 8000aae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ab0:	d3f9      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f00c fbd3 	bl	800d25c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fb8b 	bl	80001d0 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ac0:	0800d898 	.word	0x0800d898
	ldr	r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ac8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000acc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000ad0:	200043f0 	.word	0x200043f0

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f902 	bl	8000cea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fef8 	bl	80008dc <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fe28 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20002338 	.word	0x20002338

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20002338 	.word	0x20002338

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff4c 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff61 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffb1 	bl	8000c84 <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff80 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e098      	b.n	8000e98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <HAL_DMA_Init+0x150>)
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d80f      	bhi.n	8000d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <HAL_DMA_Init+0x154>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_DMA_Init+0x158>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	009a      	lsls	r2, r3, #2
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_DMA_Init+0x15c>)
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d90:	e00e      	b.n	8000db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <HAL_DMA_Init+0x160>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a43      	ldr	r2, [pc, #268]	; (8000eac <HAL_DMA_Init+0x158>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	009a      	lsls	r2, r3, #2
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a42      	ldr	r2, [pc, #264]	; (8000eb8 <HAL_DMA_Init+0x164>)
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e0a:	d039      	beq.n	8000e80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_DMA_Init+0x15c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d11a      	bne.n	8000e4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <HAL_DMA_Init+0x168>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 031c 	and.w	r3, r3, #28
 8000e22:	210f      	movs	r1, #15
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4924      	ldr	r1, [pc, #144]	; (8000ebc <HAL_DMA_Init+0x168>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e30:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_DMA_Init+0x168>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3c:	f003 031c 	and.w	r3, r3, #28
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	491d      	ldr	r1, [pc, #116]	; (8000ebc <HAL_DMA_Init+0x168>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
 8000e4a:	e019      	b.n	8000e80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_DMA_Init+0x16c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	f003 031c 	and.w	r3, r3, #28
 8000e58:	210f      	movs	r1, #15
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4917      	ldr	r1, [pc, #92]	; (8000ec0 <HAL_DMA_Init+0x16c>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_DMA_Init+0x16c>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6859      	ldr	r1, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f003 031c 	and.w	r3, r3, #28
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	4911      	ldr	r1, [pc, #68]	; (8000ec0 <HAL_DMA_Init+0x16c>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40020407 	.word	0x40020407
 8000ea8:	bffdfff8 	.word	0xbffdfff8
 8000eac:	cccccccd 	.word	0xcccccccd
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	bffdfbf8 	.word	0xbffdfbf8
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	400200a8 	.word	0x400200a8
 8000ec0:	400204a8 	.word	0x400204a8

08000ec4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e072      	b.n	8000fbc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_DMA_DeInit+0x104>)
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d80f      	bhi.n	8000f12 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <HAL_DMA_DeInit+0x108>)
 8000efa:	4413      	add	r3, r2
 8000efc:	4a34      	ldr	r2, [pc, #208]	; (8000fd0 <HAL_DMA_DeInit+0x10c>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	009a      	lsls	r2, r3, #2
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a31      	ldr	r2, [pc, #196]	; (8000fd4 <HAL_DMA_DeInit+0x110>)
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f10:	e00e      	b.n	8000f30 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_DMA_DeInit+0x114>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_DMA_DeInit+0x10c>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	009a      	lsls	r2, r3, #2
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <HAL_DMA_DeInit+0x118>)
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f003 021c 	and.w	r2, r3, #28
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	2101      	movs	r1, #1
 8000f46:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <HAL_DMA_DeInit+0x110>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10d      	bne.n	8000f72 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_DMA_DeInit+0x11c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 031c 	and.w	r3, r3, #28
 8000f62:	210f      	movs	r1, #15
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	491d      	ldr	r1, [pc, #116]	; (8000fe0 <HAL_DMA_DeInit+0x11c>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e00c      	b.n	8000f8c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_DMA_DeInit+0x120>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f003 031c 	and.w	r3, r3, #28
 8000f7e:	210f      	movs	r1, #15
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4917      	ldr	r1, [pc, #92]	; (8000fe4 <HAL_DMA_DeInit+0x120>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40020407 	.word	0x40020407
 8000fcc:	bffdfff8 	.word	0xbffdfff8
 8000fd0:	cccccccd 	.word	0xcccccccd
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	bffdfbf8 	.word	0xbffdfbf8
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	400200a8 	.word	0x400200a8
 8000fe4:	400204a8 	.word	0x400204a8

08000fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_DMA_Start_IT+0x20>
 8001004:	2302      	movs	r3, #2
 8001006:	e04b      	b.n	80010a0 <HAL_DMA_Start_IT+0xb8>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d13a      	bne.n	8001092 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 f95f 	bl	8001304 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	2b00      	cmp	r3, #0
 800104c:	d008      	beq.n	8001060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 020e 	orr.w	r2, r2, #14
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00f      	b.n	8001080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0204 	bic.w	r2, r2, #4
 800106e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 020a 	orr.w	r2, r2, #10
 800107e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e005      	b.n	800109e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800109a:	2302      	movs	r3, #2
 800109c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d008      	beq.n	80010d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2204      	movs	r2, #4
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e022      	b.n	8001118 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 020e 	bic.w	r2, r2, #14
 80010e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 021c 	and.w	r2, r3, #28
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d005      	beq.n	8001148 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2204      	movs	r2, #4
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e029      	b.n	800119c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	f003 021c 	and.w	r2, r3, #28
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
    }
  }
  return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 031c 	and.w	r3, r3, #28
 80011c6:	2204      	movs	r2, #4
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d026      	beq.n	8001220 <HAL_DMA_IRQHandler+0x7a>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d021      	beq.n	8001220 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0204 	bic.w	r2, r2, #4
 80011f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f003 021c 	and.w	r2, r3, #28
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2104      	movs	r1, #4
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	2b00      	cmp	r3, #0
 8001214:	d071      	beq.n	80012fa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800121e:	e06c      	b.n	80012fa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f003 031c 	and.w	r3, r3, #28
 8001228:	2202      	movs	r2, #2
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d02e      	beq.n	8001292 <HAL_DMA_IRQHandler+0xec>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d029      	beq.n	8001292 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10b      	bne.n	8001264 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 020a 	bic.w	r2, r2, #10
 800125a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 021c 	and.w	r2, r3, #28
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2102      	movs	r1, #2
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d038      	beq.n	80012fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001290:	e033      	b.n	80012fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 031c 	and.w	r3, r3, #28
 800129a:	2208      	movs	r2, #8
 800129c:	409a      	lsls	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d02a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x156>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d025      	beq.n	80012fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 020e 	bic.w	r2, r2, #14
 80012be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f003 021c 	and.w	r2, r3, #28
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
}
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 021c 	and.w	r2, r3, #28
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d108      	bne.n	8001348 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001346:	e007      	b.n	8001358 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e17f      	b.n	8001674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8171 	beq.w	800166e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d00b      	beq.n	80013ac <HAL_GPIO_Init+0x48>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d007      	beq.n	80013ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a0:	2b11      	cmp	r3, #17
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b12      	cmp	r3, #18
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 0201 	and.w	r2, r3, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b03      	cmp	r3, #3
 8001418:	d118      	bne.n	800144c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x128>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b12      	cmp	r3, #18
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	6939      	ldr	r1, [r7, #16]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80ac 	beq.w	800166e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_GPIO_Init+0x330>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	4a5e      	ldr	r2, [pc, #376]	; (8001694 <HAL_GPIO_Init+0x330>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6613      	str	r3, [r2, #96]	; 0x60
 8001522:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <HAL_GPIO_Init+0x330>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800152e:	4a5a      	ldr	r2, [pc, #360]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x242>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x338>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x23e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x33c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x23a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x340>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x236>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x344>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x232>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_GPIO_Init+0x348>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x22e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_GPIO_Init+0x34c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x22a>
 800158a:	2306      	movs	r3, #6
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 800158e:	2307      	movs	r3, #7
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x244>
 80015a6:	2300      	movs	r3, #0
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b8:	4937      	ldr	r1, [pc, #220]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001614:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x350>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_GPIO_Init+0x350>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f ae78 	bne.w	8001374 <HAL_GPIO_Init+0x10>
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	48001000 	.word	0x48001000
 80016ac:	48001400 	.word	0x48001400
 80016b0:	48001800 	.word	0x48001800
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001712:	d130      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001720:	d038      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172a:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2232      	movs	r2, #50	; 0x32
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001748:	e002      	b.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	d102      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	d110      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e00f      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001782:	d007      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40007000 	.word	0x40007000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e3d4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80e4 	beq.w	80019ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_RCC_OscConfig+0x4a>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f040 808b 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 8087 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fa:	4b93      	ldr	r3, [pc, #588]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3ac      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_RCC_OscConfig+0x7c>
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800182a:	e005      	b.n	8001838 <HAL_RCC_OscConfig+0x88>
 800182c:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001838:	4293      	cmp	r3, r2
 800183a:	d223      	bcs.n	8001884 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd73 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e38d      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b7a      	ldr	r3, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4977      	ldr	r1, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	4972      	ldr	r1, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e025      	b.n	80018d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	496a      	ldr	r1, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	4965      	ldr	r1, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd33 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e34d      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d0:	f000 fc36 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	495a      	ldr	r1, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x29c>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x2a0>)
 80018ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x2a4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fff1 	bl	80008dc <HAL_InitTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d052      	beq.n	80019aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	e331      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d032      	beq.n	8001976 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4c      	ldr	r2, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191c:	f7ff f908 	bl	8000b30 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001924:	f7ff f904 	bl	8000b30 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e31a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	493b      	ldr	r1, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e01a      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001982:	f7ff f8d5 	bl	8000b30 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198a:	f7ff f8d1 	bl	8000b30 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e2e7      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x1da>
 80019a8:	e000      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d074      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x21a>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d064      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d160      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e2c4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x24a>
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e01d      	b.n	8001a36 <HAL_RCC_OscConfig+0x286>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x26e>
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x286>
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x298>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f877 	bl	8000b30 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	e011      	b.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	0800d3f4 	.word	0x0800d3f4
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f86a 	bl	8000b30 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e280      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	4baf      	ldr	r3, [pc, #700]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2a8>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f85a 	bl	8000b30 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff f856 	bl	8000b30 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e26c      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	4ba5      	ldr	r3, [pc, #660]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2d0>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d060      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x310>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d116      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x328>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e249      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4990      	ldr	r1, [pc, #576]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aec:	e040      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d023      	beq.n	8001b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a8b      	ldr	r2, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f815 	bl	8000b30 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f811 	bl	8000b30 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e227      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	497c      	ldr	r1, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e018      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7fe fff1 	bl	8000b30 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7fe ffed 	bl	8000b30 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e203      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8a:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7fe ffcc 	bl	8000b30 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe ffc8 	bl	8000b30 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1de      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bae:	4b5e      	ldr	r3, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ef      	beq.n	8001b9c <HAL_RCC_OscConfig+0x3ec>
 8001bbc:	e01b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7fe ffaf 	bl	8000b30 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7fe ffab 	bl	8000b30 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1c1      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80a6 	beq.w	8001d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c30:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7fe ff72 	bl	8000b30 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe ff6e 	bl	8000b30 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e184      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_RCC_OscConfig+0x57c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4d8>
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_OscConfig+0x522>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d110      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x502>
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb0:	e00f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x522>
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7fe ff29 	bl	8000b30 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe ff25 	bl	8000b30 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e139      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ed      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x532>
 8001d06:	e01a      	b.n	8001d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7fe ff12 	bl	8000b30 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe ff0e 	bl	8000b30 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d906      	bls.n	8001d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e122      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e8      	bne.n	8001d10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a8a      	ldr	r2, [pc, #552]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8108 	beq.w	8001f6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	f040 80d0 	bne.w	8001f04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d64:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d130      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d127      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11f      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da4:	2a07      	cmp	r2, #7
 8001da6:	bf14      	ite	ne
 8001da8:	2201      	movne	r2, #1
 8001daa:	2200      	moveq	r2, #0
 8001dac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d113      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d06e      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d069      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b7      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7fe fe92 	bl	8000b30 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fe8e 	bl	8000b30 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0a4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	4b54      	ldr	r3, [pc, #336]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x7c8>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e50:	0852      	lsrs	r2, r2, #1
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0552      	lsls	r2, r2, #21
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e5c:	0852      	lsrs	r2, r2, #1
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	0652      	lsls	r2, r2, #25
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e68:	0912      	lsrs	r2, r2, #4
 8001e6a:	0452      	lsls	r2, r2, #17
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4941      	ldr	r1, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3e      	ldr	r2, [pc, #248]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e8c:	f7fe fe50 	bl	8000b30 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fe4c 	bl	8000b30 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e062      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb2:	e05a      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e059      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d152      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001edc:	f7fe fe28 	bl	8000b30 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe fe24 	bl	8000b30 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e03a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x734>
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d02d      	beq.n	8001f66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	f023 0303 	bic.w	r3, r3, #3
 8001f2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fdf7 	bl	8000b30 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe fdf3 	bl	8000b30 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e009      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x7c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x796>
 8001f64:	e001      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	f99d808c 	.word	0xf99d808c

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0c8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4961      	ldr	r1, [pc, #388]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d04c      	beq.n	8002066 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d121      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e09e      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e092      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e086      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e07e      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	493f      	ldr	r1, [pc, #252]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002036:	f7fe fd7b 	bl	8000b30 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e00a      	b.n	8002054 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7fe fd77 	bl	8000b30 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e066      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 020c 	and.w	r2, r3, #12
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	429a      	cmp	r2, r3
 8002064:	d1eb      	bne.n	800203e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4924      	ldr	r1, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e036      	b.n	8002122 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4918      	ldr	r1, [pc, #96]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4910      	ldr	r1, [pc, #64]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f2:	f000 f825 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490c      	ldr	r1, [pc, #48]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fbe0 	bl	80008dc <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002120:	7afb      	ldrb	r3, [r7, #11]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	0800d3f4 	.word	0x0800d3f4
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x34>
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d121      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d11e      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800219c:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_RCC_GetSysClockFreq+0x10c>)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d102      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e004      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_RCC_GetSysClockFreq+0x114>)
 80021c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d134      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d003      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0xac>
 80021e4:	e005      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e8:	617b      	str	r3, [r7, #20]
      break;
 80021ea:	e005      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ee:	617b      	str	r3, [r7, #20]
      break;
 80021f0:	e002      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	617b      	str	r3, [r7, #20]
      break;
 80021f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	3301      	adds	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	fb02 f203 	mul.w	r2, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	0e5b      	lsrs	r3, r3, #25
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	3301      	adds	r3, #1
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002238:	69bb      	ldr	r3, [r7, #24]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	; 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	0800d40c 	.word	0x0800d40c
 8002250:	00f42400 	.word	0x00f42400
 8002254:	007a1200 	.word	0x007a1200

08002258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4904      	ldr	r1, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	0800d404 	.word	0x0800d404

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022a0:	f7ff ffda 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0adb      	lsrs	r3, r3, #11
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4904      	ldr	r1, [pc, #16]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	0800d404 	.word	0x0800d404

080022c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	220f      	movs	r2, #15
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_GetClockConfig+0x5c>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_RCC_GetClockConfig+0x60>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7ff f9d0 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
 800234a:	e014      	b.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f9c0 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d10b      	bne.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d919      	bls.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2ba0      	cmp	r3, #160	; 0xa0
 8002388:	d902      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238a:	2302      	movs	r3, #2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e013      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e010      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d902      	bls.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800239c:	2303      	movs	r3, #3
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e00a      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d102      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e004      	b.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d101      	bne.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	2b00      	cmp	r3, #0
 8002406:	d041      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002410:	d02a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002412:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002416:	d824      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800241e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002422:	d81e      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242c:	d010      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800242e:	e018      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002430:	4b86      	ldr	r3, [pc, #536]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a85      	ldr	r2, [pc, #532]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800243c:	e015      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f825 	bl	8003494 <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244e:	e00c      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3320      	adds	r3, #32
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f910 	bl	800367c <RCCEx_PLLSAI2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	74fb      	strb	r3, [r7, #19]
      break;
 8002466:	e000      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002470:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247e:	4973      	ldr	r1, [pc, #460]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d041      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800249c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024a0:	d02a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024a6:	d824      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024b2:	d81e      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d010      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024be:	e018      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024c0:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a61      	ldr	r2, [pc, #388]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024cc:	e015      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 ffdd 	bl	8003494 <RCCEx_PLLSAI1_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024de:	e00c      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3320      	adds	r3, #32
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f8c8 	bl	800367c <RCCEx_PLLSAI2_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024f0:	e003      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	74fb      	strb	r3, [r7, #19]
      break;
 80024f6:	e000      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002500:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250e:	494f      	ldr	r1, [pc, #316]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002516:	e001      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a0 	beq.w	800266a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a40      	ldr	r2, [pc, #256]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3a      	ldr	r2, [pc, #232]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7fe fae0 	bl	8000b30 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe fadc 	bl	8000b30 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d902      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	74fb      	strb	r3, [r7, #19]
        break;
 8002586:	e005      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d15c      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01f      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d019      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e4:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fa9b 	bl	8000b30 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fc:	e00b      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fa97 	bl	8000b30 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d902      	bls.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	74fb      	strb	r3, [r7, #19]
            break;
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ec      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263a:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002642:	e009      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a9d      	ldr	r2, [pc, #628]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002676:	4b98      	ldr	r3, [pc, #608]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 0203 	bic.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	4994      	ldr	r1, [pc, #592]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 020c 	bic.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	498c      	ldr	r1, [pc, #560]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ba:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4983      	ldr	r1, [pc, #524]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026dc:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	497b      	ldr	r1, [pc, #492]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	4972      	ldr	r1, [pc, #456]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002720:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	496a      	ldr	r1, [pc, #424]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	4961      	ldr	r1, [pc, #388]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002764:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	4959      	ldr	r1, [pc, #356]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002786:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002794:	4950      	ldr	r1, [pc, #320]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a8:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	4948      	ldr	r1, [pc, #288]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	493f      	ldr	r1, [pc, #252]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d028      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ec:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	4937      	ldr	r1, [pc, #220]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280a:	d106      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	e011      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800281e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002822:	d10c      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fe32 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d028      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	491f      	ldr	r1, [pc, #124]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002868:	d106      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002874:	60d3      	str	r3, [r2, #12]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fe03 	bl	8003494 <RCCEx_PLLSAI1_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02b      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c6:	d109      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a02      	ldr	r2, [pc, #8]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]
 80028d4:	e014      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fdd1 	bl	8003494 <RCCEx_PLLSAI1_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02f      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291a:	4928      	ldr	r1, [pc, #160]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292a:	d10d      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2102      	movs	r1, #2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fdae 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d014      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	74bb      	strb	r3, [r7, #18]
 8002946:	e011      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002950:	d10c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3320      	adds	r3, #32
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fe8f 	bl	800367c <RCCEx_PLLSAI2_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029d2:	d13e      	bne.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80029d4:	4bbe      	ldr	r3, [pc, #760]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029e6:	d028      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ee:	f200 853e 	bhi.w	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f8:	d005      	beq.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a00:	d00e      	beq.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002a02:	f000 bd34 	b.w	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a06:	4bb2      	ldr	r3, [pc, #712]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	f040 852e 	bne.w	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 8002a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1a:	61fb      	str	r3, [r7, #28]
      break;
 8002a1c:	f000 bd29 	b.w	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a20:	4bab      	ldr	r3, [pc, #684]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 8523 	bne.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002a30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002a34:	61fb      	str	r3, [r7, #28]
      break;
 8002a36:	f000 bd1e 	b.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a3a:	4ba5      	ldr	r3, [pc, #660]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a46:	f040 8518 	bne.w	800347a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 8002a4a:	4ba2      	ldr	r3, [pc, #648]	; (8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002a4c:	61fb      	str	r3, [r7, #28]
      break;
 8002a4e:	f000 bd14 	b.w	800347a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a52:	4b9f      	ldr	r3, [pc, #636]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d840      	bhi.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002a74:	e039      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002a76:	4b96      	ldr	r3, [pc, #600]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002a82:	4b93      	ldr	r3, [pc, #588]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002a8e:	4b90      	ldr	r3, [pc, #576]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	e005      	b.n	8002aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002a9a:	4b8d      	ldr	r3, [pc, #564]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	4a8c      	ldr	r2, [pc, #560]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002aae:	e01f      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
      break;
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ab6:	4b86      	ldr	r3, [pc, #536]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d102      	bne.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002ac4:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002ac6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ac8:	e012      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
      break;
 8002ace:	e00f      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ad0:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002ae0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ae2:	e005      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
      break;
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
      break;
 8002aee:	bf00      	nop
    }

    switch(PeriphClk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af6:	f000 80d2 	beq.w	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b00:	f200 84bd 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0a:	f000 80c8 	beq.w	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b14:	f200 84b3 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	f000 835b 	beq.w	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	f200 84a9 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b32:	f000 847f 	beq.w	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3c:	f200 849f 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b46:	f000 82ce 	beq.w	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b50:	f200 8495 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5a:	f000 80a0 	beq.w	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b64:	f200 848b 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	f000 808f 	beq.w	8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	f200 8481 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	d07e      	beq.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8a:	f200 8478 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b94:	f000 8404 	beq.w	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	f200 846e 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	f000 83b0 	beq.w	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb2:	f200 8464 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbc:	f000 837a 	beq.w	80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	f200 845a 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	f000 8345 	beq.w	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	f200 8452 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d84b      	bhi.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 844b 	beq.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	2b1f      	cmp	r3, #31
 8002bee:	f200 8446 	bhi.w	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002de3 	.word	0x08002de3
 8002bfc:	08002e53 	.word	0x08002e53
 8002c00:	0800347f 	.word	0x0800347f
 8002c04:	08002ee7 	.word	0x08002ee7
 8002c08:	0800347f 	.word	0x0800347f
 8002c0c:	0800347f 	.word	0x0800347f
 8002c10:	0800347f 	.word	0x0800347f
 8002c14:	08002f5f 	.word	0x08002f5f
 8002c18:	0800347f 	.word	0x0800347f
 8002c1c:	0800347f 	.word	0x0800347f
 8002c20:	0800347f 	.word	0x0800347f
 8002c24:	0800347f 	.word	0x0800347f
 8002c28:	0800347f 	.word	0x0800347f
 8002c2c:	0800347f 	.word	0x0800347f
 8002c30:	0800347f 	.word	0x0800347f
 8002c34:	08002fe3 	.word	0x08002fe3
 8002c38:	0800347f 	.word	0x0800347f
 8002c3c:	0800347f 	.word	0x0800347f
 8002c40:	0800347f 	.word	0x0800347f
 8002c44:	0800347f 	.word	0x0800347f
 8002c48:	0800347f 	.word	0x0800347f
 8002c4c:	0800347f 	.word	0x0800347f
 8002c50:	0800347f 	.word	0x0800347f
 8002c54:	0800347f 	.word	0x0800347f
 8002c58:	0800347f 	.word	0x0800347f
 8002c5c:	0800347f 	.word	0x0800347f
 8002c60:	0800347f 	.word	0x0800347f
 8002c64:	0800347f 	.word	0x0800347f
 8002c68:	0800347f 	.word	0x0800347f
 8002c6c:	0800347f 	.word	0x0800347f
 8002c70:	0800347f 	.word	0x0800347f
 8002c74:	08003065 	.word	0x08003065
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	f000 82bd 	beq.w	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002c80:	e3fd      	b.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c88:	f000 fdd6 	bl	8003838 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c8c:	61f8      	str	r0, [r7, #28]
      break;
 8002c8e:	e3f7      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c96:	f000 fdcf 	bl	8003838 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c9a:	61f8      	str	r0, [r7, #28]
      break;
 8002c9c:	e3f0      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cb0:	d018      	beq.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cb8:	f200 808b 	bhi.w	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc2:	d059      	beq.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cca:	d028      	beq.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8002ccc:	e081      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	0003d090 	.word	0x0003d090
 8002cd8:	0800d40c 	.word	0x0800d40c
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002ce4:	4bae      	ldr	r3, [pc, #696]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d172      	bne.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002cf0:	4bab      	ldr	r3, [pc, #684]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002cfc:	4ba8      	ldr	r3, [pc, #672]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	e005      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d08:	4ba5      	ldr	r3, [pc, #660]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	4aa3      	ldr	r2, [pc, #652]	; (8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	61fb      	str	r3, [r7, #28]
          break;
 8002d1c:	e05b      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002d1e:	4ba0      	ldr	r3, [pc, #640]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d2a:	d156      	bne.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002d2c:	4b9c      	ldr	r3, [pc, #624]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d38:	d14f      	bne.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002d3a:	4b99      	ldr	r3, [pc, #612]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d44:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	fb02 f203 	mul.w	r2, r2, r3
 8002d4e:	4b94      	ldr	r3, [pc, #592]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	3301      	adds	r3, #1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0d5b      	lsrs	r3, r3, #21
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]
          break;
 8002d76:	e030      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002d78:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d84:	d12b      	bne.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002d86:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d92:	d124      	bne.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d94:	4b82      	ldr	r3, [pc, #520]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d9e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	fb02 f203 	mul.w	r2, r2, r3
 8002da8:	4b7d      	ldr	r3, [pc, #500]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	3301      	adds	r3, #1
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002dba:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	0d5b      	lsrs	r3, r3, #21
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	61fb      	str	r3, [r7, #28]
          break;
 8002dd0:	e005      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002dd2:	bf00      	nop
 8002dd4:	e354      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dd6:	bf00      	nop
 8002dd8:	e352      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dda:	bf00      	nop
 8002ddc:	e350      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dde:	bf00      	nop
        break;
 8002de0:	e34e      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002de2:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d828      	bhi.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e15 	.word	0x08002e15
 8002e04:	08002e1d 	.word	0x08002e1d
 8002e08:	08002e31 	.word	0x08002e31
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e0c:	f7ff fa46 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8002e10:	61f8      	str	r0, [r7, #28]
          break;
 8002e12:	e01d      	b.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e14:	f7ff f994 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002e18:	61f8      	str	r0, [r7, #28]
          break;
 8002e1a:	e019      	b.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b60      	ldr	r3, [pc, #384]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002e2c:	61fb      	str	r3, [r7, #28]
          break;
 8002e2e:	e00c      	b.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e30:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e42:	61fb      	str	r3, [r7, #28]
          break;
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002e46:	bf00      	nop
 8002e48:	e31a      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e4a:	bf00      	nop
 8002e4c:	e318      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e4e:	bf00      	nop
        break;
 8002e50:	e316      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d83a      	bhi.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002edb 	.word	0x08002edb
 8002e74:	08002edb 	.word	0x08002edb
 8002e78:	08002edb 	.word	0x08002edb
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08002edb 	.word	0x08002edb
 8002e84:	08002edb 	.word	0x08002edb
 8002e88:	08002edb 	.word	0x08002edb
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08002edb 	.word	0x08002edb
 8002e94:	08002edb 	.word	0x08002edb
 8002e98:	08002edb 	.word	0x08002edb
 8002e9c:	08002ec5 	.word	0x08002ec5
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff f9e6 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	61f8      	str	r0, [r7, #28]
          break;
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ea8:	f7ff f94a 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002eac:	61f8      	str	r0, [r7, #28]
          break;
 8002eae:	e019      	b.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002ec0:	61fb      	str	r3, [r7, #28]
          break;
 8002ec2:	e00c      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed6:	61fb      	str	r3, [r7, #28]
          break;
 8002ed8:	e003      	b.n	8002ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8002eda:	bf00      	nop
 8002edc:	e2d0      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ede:	bf00      	nop
 8002ee0:	e2ce      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ee2:	bf00      	nop
        break;
 8002ee4:	e2cc      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d021      	beq.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d829      	bhi.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d011      	beq.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d823      	bhi.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d004      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002f16:	e01c      	b.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f18:	f7ff f9aa 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	61f8      	str	r0, [r7, #28]
          break;
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f20:	f7ff f90e 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002f24:	61f8      	str	r0, [r7, #28]
          break;
 8002f26:	e019      	b.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002f38:	61fb      	str	r3, [r7, #28]
          break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d107      	bne.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4e:	61fb      	str	r3, [r7, #28]
          break;
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002f52:	bf00      	nop
 8002f54:	e294      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f56:	bf00      	nop
 8002f58:	e292      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f5a:	bf00      	nop
        break;
 8002f5c:	e290      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f6e:	d027      	beq.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2bc0      	cmp	r3, #192	; 0xc0
 8002f74:	d82f      	bhi.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d017      	beq.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d829      	bhi.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d004      	beq.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002f8e:	e022      	b.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7ff f96e 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002f94:	61f8      	str	r0, [r7, #28]
          break;
 8002f96:	e023      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f98:	f7ff f8d2 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002f9c:	61f8      	str	r0, [r7, #28]
          break;
 8002f9e:	e01f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	0800d40c 	.word	0x0800d40c
 8002fa8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fac:	4ba9      	ldr	r3, [pc, #676]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb8:	d10f      	bne.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8002fba:	4ba7      	ldr	r3, [pc, #668]	; (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002fbc:	61fb      	str	r3, [r7, #28]
          break;
 8002fbe:	e00c      	b.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fc0:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	61fb      	str	r3, [r7, #28]
          break;
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002fd6:	bf00      	nop
 8002fd8:	e252      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fda:	bf00      	nop
 8002fdc:	e250      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fde:	bf00      	nop
        break;
 8002fe0:	e24e      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002fe2:	4b9c      	ldr	r3, [pc, #624]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d025      	beq.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ffc:	d82c      	bhi.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d013      	beq.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300c:	d824      	bhi.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301a:	d004      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 800301c:	e01c      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 800301e:	f7ff f927 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003022:	61f8      	str	r0, [r7, #28]
          break;
 8003024:	e01d      	b.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003026:	f7ff f88b 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 800302a:	61f8      	str	r0, [r7, #28]
          break;
 800302c:	e019      	b.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800302e:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d10f      	bne.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 800303c:	4b86      	ldr	r3, [pc, #536]	; (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800303e:	61fb      	str	r3, [r7, #28]
          break;
 8003040:	e00c      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003042:	4b84      	ldr	r3, [pc, #528]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	61fb      	str	r3, [r7, #28]
          break;
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8003058:	bf00      	nop
 800305a:	e211      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800305c:	bf00      	nop
 800305e:	e20f      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003060:	bf00      	nop
        break;
 8003062:	e20d      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003076:	d025      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800307e:	d82c      	bhi.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003086:	d013      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d824      	bhi.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d004      	beq.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800309e:	e01c      	b.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80030a0:	f7ff f8e6 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80030a4:	61f8      	str	r0, [r7, #28]
          break;
 80030a6:	e01d      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 80030a8:	f7ff f84a 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80030ac:	61f8      	str	r0, [r7, #28]
          break;
 80030ae:	e019      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d10f      	bne.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80030c0:	61fb      	str	r3, [r7, #28]
          break;
 80030c2:	e00c      	b.n	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d107      	bne.n	80030e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	61fb      	str	r3, [r7, #28]
          break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80030da:	bf00      	nop
 80030dc:	e1d0      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030de:	bf00      	nop
 80030e0:	e1ce      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030e2:	bf00      	nop
        break;
 80030e4:	e1cc      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f8:	d00c      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003100:	d864      	bhi.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003110:	d030      	beq.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8003112:	e05b      	b.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003114:	f7ff f814 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003118:	61f8      	str	r0, [r7, #28]
          break;
 800311a:	e05c      	b.n	80031d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003128:	d152      	bne.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04c      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003140:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	3301      	adds	r3, #1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800315c:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	61fb      	str	r3, [r7, #28]
          break;
 8003172:	e02d      	b.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003180:	d128      	bne.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d022      	beq.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003198:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	fb02 f203 	mul.w	r2, r2, r3
 80031a2:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	3301      	adds	r3, #1
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	0e5b      	lsrs	r3, r3, #25
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	61fb      	str	r3, [r7, #28]
          break;
 80031ca:	e003      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 80031cc:	bf00      	nop
 80031ce:	e157      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031d0:	bf00      	nop
 80031d2:	e155      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031d4:	bf00      	nop
        break;
 80031d6:	e153      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e2:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 80031ea:	f7ff f857 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 80031ee:	61f8      	str	r0, [r7, #28]
        break;
 80031f0:	e146      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 80031f2:	f7fe ffa5 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80031f6:	61f8      	str	r0, [r7, #28]
        break;
 80031f8:	e142      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320c:	d013      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d819      	bhi.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	d004      	beq.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8003224:	e011      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff f823 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800322a:	61f8      	str	r0, [r7, #28]
          break;
 800322c:	e010      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe ff87 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003232:	61f8      	str	r0, [r7, #28]
          break;
 8003234:	e00c      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003242:	d104      	bne.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8003246:	61fb      	str	r3, [r7, #28]
          break;
 8003248:	e001      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 800324a:	bf00      	nop
 800324c:	e118      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800324e:	bf00      	nop
        break;
 8003250:	e116      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800325c:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326e:	d013      	beq.n	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	d819      	bhi.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003284:	d004      	beq.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8003286:	e011      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe fff2 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800328c:	61f8      	str	r0, [r7, #28]
          break;
 800328e:	e010      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003290:	f7fe ff56 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8003294:	61f8      	str	r0, [r7, #28]
          break;
 8003296:	e00c      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003298:	4b7c      	ldr	r3, [pc, #496]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d104      	bne.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 80032a6:	4b7a      	ldr	r3, [pc, #488]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80032a8:	61fb      	str	r3, [r7, #28]
          break;
 80032aa:	e001      	b.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80032ac:	bf00      	nop
 80032ae:	e0e7      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80032b0:	bf00      	nop
        break;
 80032b2:	e0e5      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c6:	d013      	beq.n	80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ce:	d819      	bhi.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d004      	beq.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 80032de:	e011      	b.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe ffc6 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80032e4:	61f8      	str	r0, [r7, #28]
          break;
 80032e6:	e010      	b.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 80032e8:	f7fe ff2a 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80032ec:	61f8      	str	r0, [r7, #28]
          break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032f0:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d104      	bne.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 80032fe:	4b64      	ldr	r3, [pc, #400]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003300:	61fb      	str	r3, [r7, #28]
          break;
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8003304:	bf00      	nop
 8003306:	e0bb      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003308:	bf00      	nop
        break;
 800330a:	e0b9      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800330c:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800331e:	d02c      	beq.n	800337a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003326:	d833      	bhi.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800332e:	d01a      	beq.n	8003366 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003336:	d82b      	bhi.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003344:	d004      	beq.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8003346:	e023      	b.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003348:	f7fe ff92 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800334c:	61f8      	str	r0, [r7, #28]
          break;
 800334e:	e026      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003350:	4b4e      	ldr	r3, [pc, #312]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d11a      	bne.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800335e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003362:	61fb      	str	r3, [r7, #28]
          break;
 8003364:	e016      	b.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d111      	bne.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8003374:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003376:	61fb      	str	r3, [r7, #28]
          break;
 8003378:	e00e      	b.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d109      	bne.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8003388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338c:	61fb      	str	r3, [r7, #28]
          break;
 800338e:	e005      	b.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8003390:	bf00      	nop
 8003392:	e075      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003394:	bf00      	nop
 8003396:	e073      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003398:	bf00      	nop
 800339a:	e071      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800339c:	bf00      	nop
        break;
 800339e:	e06f      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80033a0:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033b2:	d02c      	beq.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ba:	d833      	bhi.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c2:	d01a      	beq.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ca:	d82b      	bhi.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d8:	d004      	beq.n	80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80033da:	e023      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe ff48 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80033e0:	61f8      	str	r0, [r7, #28]
          break;
 80033e2:	e026      	b.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d11a      	bne.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80033f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80033f6:	61fb      	str	r3, [r7, #28]
          break;
 80033f8:	e016      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003406:	d111      	bne.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003408:	4b21      	ldr	r3, [pc, #132]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800340a:	61fb      	str	r3, [r7, #28]
          break;
 800340c:	e00e      	b.n	800342c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d109      	bne.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 800341c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003420:	61fb      	str	r3, [r7, #28]
          break;
 8003422:	e005      	b.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8003424:	bf00      	nop
 8003426:	e02b      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003428:	bf00      	nop
 800342a:	e029      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800342c:	bf00      	nop
 800342e:	e027      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003430:	bf00      	nop
        break;
 8003432:	e025      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d004      	beq.n	8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 800344e:	e00d      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe ff0e 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8003454:	61f8      	str	r0, [r7, #28]
          break;
 8003456:	e009      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d101      	bne.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003468:	61fb      	str	r3, [r7, #28]
          break;
 800346a:	bf00      	nop
        break;
 800346c:	e008      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800347e:	bf00      	nop
    }
  }

  return(frequency);
 8003480:	69fb      	ldr	r3, [r7, #28]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	00f42400 	.word	0x00f42400

08003494 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4b75      	ldr	r3, [pc, #468]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
       ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
       ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d047      	beq.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d018      	beq.n	800351a <RCCEx_PLLSAI1_Config+0x86>
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d825      	bhi.n	8003538 <RCCEx_PLLSAI1_Config+0xa4>
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <RCCEx_PLLSAI1_Config+0x62>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d009      	beq.n	8003508 <RCCEx_PLLSAI1_Config+0x74>
 80034f4:	e020      	b.n	8003538 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11d      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e01a      	b.n	800353e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003508:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d116      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e013      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003536:	e006      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e004      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003546:	bf00      	nop
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	430b      	orrs	r3, r1
 8003564:	4944      	ldr	r1, [pc, #272]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d17d      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fd fad8 	bl	8000b30 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003584:	f7fd fad4 	bl	8000b30 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
        break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ef      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d160      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	0211      	lsls	r1, r2, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	0912      	lsrs	r2, r2, #4
 80035c8:	0452      	lsls	r2, r2, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	492a      	ldr	r1, [pc, #168]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	610b      	str	r3, [r1, #16]
 80035d2:	e027      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d112      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	0211      	lsls	r1, r2, #8
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6912      	ldr	r2, [r2, #16]
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	430a      	orrs	r2, r1
 80035f8:	491f      	ldr	r1, [pc, #124]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
 80035fe:	e011      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	0211      	lsls	r1, r2, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6952      	ldr	r2, [r2, #20]
 8003616:	0852      	lsrs	r2, r2, #1
 8003618:	3a01      	subs	r2, #1
 800361a:	0652      	lsls	r2, r2, #25
 800361c:	430a      	orrs	r2, r1
 800361e:	4916      	ldr	r1, [pc, #88]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd fa7e 	bl	8000b30 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003636:	e009      	b.n	800364c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003638:	f7fd fa7a 	bl	8000b30 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	73fb      	strb	r3, [r7, #15]
          break;
 800364a:	e005      	b.n	8003658 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d018      	beq.n	80036c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d10d      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
       ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
       ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d047      	beq.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e044      	b.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d018      	beq.n	8003702 <RCCEx_PLLSAI2_Config+0x86>
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d825      	bhi.n	8003720 <RCCEx_PLLSAI2_Config+0xa4>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <RCCEx_PLLSAI2_Config+0x62>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d009      	beq.n	80036f0 <RCCEx_PLLSAI2_Config+0x74>
 80036dc:	e020      	b.n	8003720 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11d      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e01a      	b.n	8003726 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e013      	b.n	800372a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800370e:	4b49      	ldr	r3, [pc, #292]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800371e:	e006      	b.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e004      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	430b      	orrs	r3, r1
 800374c:	4939      	ldr	r1, [pc, #228]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d167      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a35      	ldr	r2, [pc, #212]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd f9e4 	bl	8000b30 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800376a:	e009      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800376c:	f7fd f9e0 	bl	8000b30 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	73fb      	strb	r3, [r7, #15]
        break;
 800377e:	e005      	b.n	800378c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ef      	bne.n	800376c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d14a      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003798:	4b26      	ldr	r3, [pc, #152]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	0211      	lsls	r1, r2, #8
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0912      	lsrs	r2, r2, #4
 80037b0:	0452      	lsls	r2, r2, #17
 80037b2:	430a      	orrs	r2, r1
 80037b4:	491f      	ldr	r1, [pc, #124]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	614b      	str	r3, [r1, #20]
 80037ba:	e011      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6912      	ldr	r2, [r2, #16]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0652      	lsls	r2, r2, #25
 80037d8:	430a      	orrs	r2, r1
 80037da:	4916      	ldr	r1, [pc, #88]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd f9a0 	bl	8000b30 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f4:	f7fd f99c 	bl	8000b30 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
          break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d10c      	bne.n	8003870 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003856:	4b6e      	ldr	r3, [pc, #440]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003860:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003868:	d112      	bne.n	8003890 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e00f      	b.n	8003890 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d10b      	bne.n	8003890 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003878:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003882:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800388a:	d101      	bne.n	8003890 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800388e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80b4 	bne.w	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a2:	d003      	beq.n	80038ac <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038aa:	d135      	bne.n	8003918 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038ac:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b8:	f040 80a1 	bne.w	80039fe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80038bc:	4b54      	ldr	r3, [pc, #336]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 809a 	beq.w	80039fe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038ca:	4b51      	ldr	r3, [pc, #324]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	3301      	adds	r3, #1
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80038de:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80038f0:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80038fc:	2311      	movs	r3, #17
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	e001      	b.n	8003906 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003902:	2307      	movs	r3, #7
 8003904:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	fb02 f203 	mul.w	r2, r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003916:	e072      	b.n	80039fe <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d133      	bne.n	8003986 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800391e:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392a:	d169      	bne.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d063      	beq.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	3301      	adds	r3, #1
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003956:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800395e:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800396a:	2311      	movs	r3, #17
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e001      	b.n	8003974 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003970:	2307      	movs	r3, #7
 8003972:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	fb02 f203 	mul.w	r2, r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	e03c      	b.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398c:	d003      	beq.n	8003996 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003994:	d134      	bne.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8003996:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d12d      	bne.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d027      	beq.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80039e2:	2311      	movs	r3, #17
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e001      	b.n	80039ec <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80039e8:	2307      	movs	r3, #7
 80039ea:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	fb02 f203 	mul.w	r2, r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	e000      	b.n	8003a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80039fe:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003a00:	69fb      	ldr	r3, [r7, #28]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	001fff68 	.word	0x001fff68

08003a18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e022      	b.n	8003a70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fc fead 	bl	800079c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f814 	bl	8003a78 <HAL_SD_InitCard>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00a      	b.n	8003a70 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b090      	sub	sp, #64	; 0x40
 8003a7c:	af04      	add	r7, sp, #16
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003a94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a98:	f7fe ff92 	bl	80029c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e08d      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	09db      	lsrs	r3, r3, #7
 8003abc:	4a47      	ldr	r2, [pc, #284]	; (8003bdc <HAL_SD_InitCard+0x164>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	3b02      	subs	r3, #2
 8003ac6:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681d      	ldr	r5, [r3, #0]
 8003acc:	466c      	mov	r4, sp
 8003ace:	f107 0318 	add.w	r3, r7, #24
 8003ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f001 fb87 	bl	80051f4 <SDMMC_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e06d      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b06:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fbbc 	bl	800528a <SDMMC_PowerState_ON>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e057      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b32:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	3302      	adds	r3, #2
 8003b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003b40:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <HAL_SD_InitCard+0x168>)
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fffc 	bl	8000b48 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 ff21 	bl	8004998 <SD_PowerON>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e02e      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fe42 	bl	8004800 <SD_InitCard>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e01b      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 fc03 	bl	80053b0 <SDMMC_CmdBlockLength>
 8003baa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00f      	beq.n	8003bd2 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <HAL_SD_InitCard+0x16c>)
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3730      	adds	r7, #48	; 0x30
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bdb0      	pop	{r4, r5, r7, pc}
 8003bdc:	014f8b59 	.word	0x014f8b59
 8003be0:	00012110 	.word	0x00012110
 8003be4:	004005ff 	.word	0x004005ff

08003be8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0a9      	b.n	8003d64 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 80a2 	bne.w	8003d62 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d907      	bls.n	8003c42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e090      	b.n	8003d64 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2203      	movs	r2, #3
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <HAL_SD_ReadBlocks_DMA+0x184>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2200      	movs	r2, #0
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3380      	adds	r3, #128	; 0x80
 8003c74:	4619      	mov	r1, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	025b      	lsls	r3, r3, #9
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	f7fd f9b3 	bl	8000fe8 <HAL_DMA_Start_IT>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00f      	beq.n	8003ca8 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e05d      	b.n	8003d64 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0208 	orr.w	r2, r2, #8
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	025b      	lsls	r3, r3, #9
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	025b      	lsls	r3, r3, #9
 8003cd0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003cd2:	2390      	movs	r3, #144	; 0x90
 8003cd4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f107 0210 	add.w	r2, r7, #16
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fb33 	bl	8005358 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d90a      	bls.n	8003d0e <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2282      	movs	r2, #130	; 0x82
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 fb97 	bl	8005438 <SDMMC_CmdReadMultiBlock>
 8003d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d0c:	e009      	b.n	8003d22 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2281      	movs	r2, #129	; 0x81
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 fb6a 	bl	80053f4 <SDMMC_CmdReadSingleBlock>
 8003d20:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00a      	b.n	8003d64 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	0800461b 	.word	0x0800461b
 8003d70:	0800468d 	.word	0x0800468d
 8003d74:	004005ff 	.word	0x004005ff

08003d78 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	; 0x30
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d107      	bne.n	8003da0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0ac      	b.n	8003efa <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	f040 80a5 	bne.w	8003ef8 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d907      	bls.n	8003dd2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e093      	b.n	8003efa <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	4a47      	ldr	r2, [pc, #284]	; (8003f04 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	4a46      	ldr	r2, [pc, #280]	; (8003f08 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	2200      	movs	r2, #0
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d002      	beq.n	8003e08 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	025b      	lsls	r3, r3, #9
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d90a      	bls.n	8003e24 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	22a0      	movs	r2, #160	; 0xa0
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 fb50 	bl	80054c0 <SDMMC_CmdWriteMultiBlock>
 8003e20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e22:	e009      	b.n	8003e38 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2290      	movs	r2, #144	; 0x90
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fb23 	bl	800547c <SDMMC_CmdWriteSingleBlock>
 8003e36:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <HAL_SD_WriteBlocks_DMA+0x194>)
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04a      	b.n	8003efa <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3380      	adds	r3, #128	; 0x80
 8003e80:	461a      	mov	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	025b      	lsls	r3, r3, #9
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	f7fd f8ae 	bl	8000fe8 <HAL_DMA_Start_IT>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d012      	beq.n	8003eb8 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_SD_WriteBlocks_DMA+0x194>)
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e020      	b.n	8003efa <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ebc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003ec4:	2390      	movs	r3, #144	; 0x90
 8003ec6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f107 0210 	add.w	r2, r7, #16
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fa3a 	bl	8005358 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 021a 	orr.w	r2, r2, #26
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3730      	adds	r7, #48	; 0x30
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	080045f1 	.word	0x080045f1
 8003f08:	0800468d 	.word	0x0800468d
 8003f0c:	004005ff 	.word	0x004005ff

08003f10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_SD_IRQHandler+0x2e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fde4 	bl	8004b04 <SD_Read_IT>
 8003f3c:	e155      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 808f 	beq.w	800406c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003f66:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f6a:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d039      	beq.n	8003ffa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_SD_IRQHandler+0x8a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fab0 	bl	8005504 <SDMMC_CmdStopTransfer>
 8003fa4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f91f 	bl	80041fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_SD_IRQHandler+0xda>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 fede 	bl	8005dac <HAL_SD_RxCpltCallback>
 8003ff0:	e0fb      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 fed0 	bl	8005d98 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003ff8:	e0f7      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80f2 	beq.w	80041ea <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d011      	beq.n	8004034 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f001 fa75 	bl	8005504 <SDMMC_CmdStopTransfer>
 800401a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8e4 	bl	80041fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 80d5 	bne.w	80041ea <HAL_SD_IRQHandler+0x2da>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 80cf 	bne.w	80041ea <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0208 	bic.w	r2, r2, #8
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f001 fe97 	bl	8005d98 <HAL_SD_TxCpltCallback>
}
 800406a:	e0be      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_SD_IRQHandler+0x17c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fd8e 	bl	8004ba6 <SD_Write_IT>
 800408a:	e0ae      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80a7 	beq.w	80041ea <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	f043 0202 	orr.w	r2, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	f043 0208 	orr.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	f043 0210 	orr.w	r2, r3, #16
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f240 523a 	movw	r2, #1338	; 0x53a
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f9ee 	bl	8005504 <SDMMC_CmdStopTransfer>
 8004128:	4602      	mov	r2, r0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f855 	bl	80041fc <HAL_SD_ErrorCallback>
}
 8004152:	e04a      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d045      	beq.n	80041ea <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_SD_IRQHandler+0x262>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d011      	beq.n	8004196 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_SD_IRQHandler+0x2e4>)
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc ffd0 	bl	8001124 <HAL_DMA_Abort_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d02f      	beq.n	80041ea <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fac8 	bl	8004724 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004194:	e029      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d104      	bne.n	80041aa <HAL_SD_IRQHandler+0x29a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <HAL_SD_IRQHandler+0x2e8>)
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc ffb4 	bl	8001124 <HAL_DMA_Abort_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d013      	beq.n	80041ea <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fae3 	bl	8004792 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041cc:	e00d      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 fdce 	bl	8005d84 <HAL_SD_AbortCallback>
}
 80041e8:	e7ff      	b.n	80041ea <HAL_SD_IRQHandler+0x2da>
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	08004725 	.word	0x08004725
 80041f8:	08004793 	.word	0x08004793

080041fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421e:	0f9b      	lsrs	r3, r3, #30
 8004220:	b2da      	uxtb	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422a:	0e9b      	lsrs	r3, r3, #26
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	b2da      	uxtb	r2, r3
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	b2da      	uxtb	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004266:	b2da      	uxtb	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004270:	0d1b      	lsrs	r3, r3, #20
 8004272:	b29a      	uxth	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	b2da      	uxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428e:	0bdb      	lsrs	r3, r3, #15
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a0:	0b9b      	lsrs	r3, r3, #14
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c4:	0b1b      	lsrs	r3, r3, #12
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d163      	bne.n	80043a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e4:	009a      	lsls	r2, r3, #2
 80042e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80042f0:	0f92      	lsrs	r2, r2, #30
 80042f2:	431a      	orrs	r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fc:	0edb      	lsrs	r3, r3, #27
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	b2da      	uxtb	r2, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430e:	0e1b      	lsrs	r3, r3, #24
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	b2da      	uxtb	r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004320:	0d5b      	lsrs	r3, r3, #21
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	b2da      	uxtb	r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	b2da      	uxtb	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004344:	0bdb      	lsrs	r3, r3, #15
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b2da      	uxtb	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7e1b      	ldrb	r3, [r3, #24]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	3302      	adds	r3, #2
 8004368:	2201      	movs	r2, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004372:	fb02 f203 	mul.w	r2, r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	7a1b      	ldrb	r3, [r3, #8]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004394:	0a52      	lsrs	r2, r2, #9
 8004396:	fb02 f203 	mul.w	r2, r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
 80043a6:	e031      	b.n	800440c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d11d      	bne.n	80043ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	431a      	orrs	r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	3301      	adds	r3, #1
 80043cc:	029a      	lsls	r2, r3, #10
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
 80043ea:	e00f      	b.n	800440c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_SD_GetCardCSD+0x344>)
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e09d      	b.n	8004548 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004410:	0b9b      	lsrs	r3, r3, #14
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	b2da      	uxtb	r2, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004422:	09db      	lsrs	r3, r3, #7
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442a:	b2da      	uxtb	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443a:	b2da      	uxtb	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	0fdb      	lsrs	r3, r3, #31
 8004446:	b2da      	uxtb	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	0f5b      	lsrs	r3, r3, #29
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	b2da      	uxtb	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	b2da      	uxtb	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	0d9b      	lsrs	r3, r3, #22
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	b2da      	uxtb	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	0d5b      	lsrs	r3, r3, #21
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	0bdb      	lsrs	r3, r3, #15
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	0b9b      	lsrs	r3, r3, #14
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	0b1b      	lsrs	r3, r3, #12
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	b2da      	uxtb	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	b2da      	uxtb	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004536:	b2da      	uxtb	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	004005ff 	.word	0x004005ff

08004558 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa76 	bl	8004ab4 <SD_SendStatus>
 80045c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0a5b      	lsrs	r3, r3, #9
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045e6:	693b      	ldr	r3, [r7, #16]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b82      	cmp	r3, #130	; 0x82
 800462e:	d111      	bne.n	8004654 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ff65 	bl	8005504 <SDMMC_CmdStopTransfer>
 800463a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fdd4 	bl	80041fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0208 	bic.w	r2, r2, #8
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f240 523a 	movw	r2, #1338	; 0x53a
 800466c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f001 fb95 	bl	8005dac <HAL_SD_RxCpltCallback>
#endif
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d002      	beq.n	80046b6 <SD_DMAError+0x2a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d12d      	bne.n	8004712 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a19      	ldr	r2, [pc, #100]	; (8004720 <SD_DMAError+0x94>)
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff68 	bl	80045b0 <HAL_SD_GetCardState>
 80046e0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d002      	beq.n	80046ee <SD_DMAError+0x62>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d10a      	bne.n	8004704 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ff06 	bl	8005504 <SDMMC_CmdStopTransfer>
 80046f8:	4602      	mov	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	431a      	orrs	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff fd72 	bl	80041fc <HAL_SD_ErrorCallback>
#endif
}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	004005ff 	.word	0x004005ff

08004724 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f240 523a 	movw	r2, #1338	; 0x53a
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff ff37 	bl	80045b0 <HAL_SD_GetCardState>
 8004742:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d002      	beq.n	800475e <SD_DMATxAbort+0x3a>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10a      	bne.n	8004774 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fece 	bl	8005504 <SDMMC_CmdStopTransfer>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	431a      	orrs	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f001 fb01 	bl	8005d84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004782:	e002      	b.n	800478a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff fd39 	bl	80041fc <HAL_SD_ErrorCallback>
}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff00 	bl	80045b0 <HAL_SD_GetCardState>
 80047b0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b06      	cmp	r3, #6
 80047c4:	d002      	beq.n	80047cc <SD_DMARxAbort+0x3a>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d10a      	bne.n	80047e2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fe97 	bl	8005504 <SDMMC_CmdStopTransfer>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f001 faca 	bl	8005d84 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047f0:	e002      	b.n	80047f8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fd02 	bl	80041fc <HAL_SD_ErrorCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b094      	sub	sp, #80	; 0x50
 8004804:	af04      	add	r7, sp, #16
 8004806:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004808:	2301      	movs	r3, #1
 800480a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd49 	bl	80052a8 <SDMMC_GetPowerState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800481c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004820:	e0b6      	b.n	8004990 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	2b03      	cmp	r3, #3
 8004828:	d02f      	beq.n	800488a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 ff2f 	bl	8005692 <SDMMC_CmdSendCID>
 8004834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <SD_InitCard+0x40>
    {
      return errorstate;
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	e0a7      	b.n	8004990 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fd73 	bl	8005332 <SDMMC_GetResponse>
 800484c:	4602      	mov	r2, r0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2104      	movs	r1, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fd6a 	bl	8005332 <SDMMC_GetResponse>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2108      	movs	r1, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fd61 	bl	8005332 <SDMMC_GetResponse>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	210c      	movs	r1, #12
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fd58 	bl	8005332 <SDMMC_GetResponse>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	2b03      	cmp	r3, #3
 8004890:	d00d      	beq.n	80048ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f107 020e 	add.w	r2, r7, #14
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 ff35 	bl	800570c <SDMMC_CmdSetRelAdd>
 80048a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SD_InitCard+0xae>
    {
      return errorstate;
 80048aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ac:	e070      	b.n	8004990 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d036      	beq.n	8004924 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 feff 	bl	80056ce <SDMMC_CmdSendCSD>
 80048d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	e059      	b.n	8004990 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fd25 	bl	8005332 <SDMMC_GetResponse>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2104      	movs	r1, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fd1c 	bl	8005332 <SDMMC_GetResponse>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2108      	movs	r1, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd13 	bl	8005332 <SDMMC_GetResponse>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	210c      	movs	r1, #12
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fd0a 	bl	8005332 <SDMMC_GetResponse>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2104      	movs	r1, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fd01 	bl	8005332 <SDMMC_GetResponse>
 8004930:	4603      	mov	r3, r0
 8004932:	0d1a      	lsrs	r2, r3, #20
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004938:	f107 0310 	add.w	r3, r7, #16
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fc66 	bl	8004210 <HAL_SD_GetCardCSD>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800494a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800494e:	e01f      	b.n	8004990 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	4608      	mov	r0, r1
 8004962:	f000 fdf1 	bl	8005548 <SDMMC_CmdSelDesel>
 8004966:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SD_InitCard+0x172>
  {
    return errorstate;
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	e00e      	b.n	8004990 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	466c      	mov	r4, sp
 800497a:	f103 0210 	add.w	r2, r3, #16
 800497e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004984:	3304      	adds	r3, #4
 8004986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004988:	4628      	mov	r0, r5
 800498a:	f000 fc33 	bl	80051f4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3740      	adds	r7, #64	; 0x40
 8004994:	46bd      	mov	sp, r7
 8004996:	bdb0      	pop	{r4, r5, r7, pc}

08004998 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fdec 	bl	800558e <SDMMC_CmdGoIdleState>
 80049b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	e072      	b.n	8004aa8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fdff 	bl	80055ca <SDMMC_CmdOperCond>
 80049cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fdd5 	bl	800558e <SDMMC_CmdGoIdleState>
 80049e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	e05b      	b.n	8004aa8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d137      	bne.n	8004a6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fdff 	bl	8005608 <SDMMC_CmdAppCommand>
 8004a0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02d      	beq.n	8004a6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a16:	e047      	b.n	8004aa8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fdf2 	bl	8005608 <SDMMC_CmdAppCommand>
 8004a24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	e03b      	b.n	8004aa8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	491e      	ldr	r1, [pc, #120]	; (8004ab0 <SD_PowerON+0x118>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe08 	bl	800564c <SDMMC_CmdAppOperCommand>
 8004a3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a48:	e02e      	b.n	8004aa8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fc6e 	bl	8005332 <SDMMC_GetResponse>
 8004a56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0fdb      	lsrs	r3, r3, #31
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <SD_PowerON+0xcc>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <SD_PowerON+0xce>
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]

    count++;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d802      	bhi.n	8004a7e <SD_PowerON+0xe6>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0cc      	beq.n	8004a18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d902      	bls.n	8004a8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a8c:	e00c      	b.n	8004aa8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a9e:	e002      	b.n	8004aa6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	c1100000 	.word	0xc1100000

08004ab4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac8:	e018      	b.n	8004afc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fe39 	bl	800574e <SDMMC_CmdSendStatus>
 8004adc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	e009      	b.n	8004afc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc1f 	bl	8005332 <SDMMC_GetResponse>
 8004af4:	4602      	mov	r2, r0
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03f      	beq.n	8004b9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e033      	b.n	8004b8c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fb90 	bl	800524e <SDMMC_ReadFIFO>
 8004b2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	0e1b      	lsrs	r3, r3, #24
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d9c8      	bls.n	8004b24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d043      	beq.n	8004c48 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e037      	b.n	8004c36 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	021a      	lsls	r2, r3, #8
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	061a      	lsls	r2, r3, #24
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f107 0208 	add.w	r2, r7, #8
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb1c 	bl	8005268 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3301      	adds	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	d9c4      	bls.n	8004bc6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e049      	b.n	8004cf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f841 	bl	8004cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 f9f8 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d001      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04f      	b.n	8004dcc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01d      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d018      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIM_Base_Start_IT+0x76>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_TIM_Base_Start_IT+0xd8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d115      	bne.n	8004db6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d015      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da2:	d011      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db4:	e008      	b.n	8004dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e000      	b.n	8004dca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40013400 	.word	0x40013400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	00010007 	.word	0x00010007

08004df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d122      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d11b      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0202 	mvn.w	r2, #2
 8004e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f905 	bl	8005046 <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8f7 	bl	8005032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f908 	bl	800505a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d122      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0204 	mvn.w	r2, #4
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8db 	bl	8005046 <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8cd 	bl	8005032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8de 	bl	800505a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0208 	mvn.w	r2, #8
 8004ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8b1 	bl	8005046 <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8a3 	bl	8005032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8b4 	bl	800505a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0210 	mvn.w	r2, #16
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2208      	movs	r2, #8
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f887 	bl	8005046 <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f879 	bl	8005032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f88a 	bl	800505a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10e      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0201 	mvn.w	r2, #1
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb facc 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f914 	bl	80051cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb2:	d10e      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d107      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f907 	bl	80051e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d10e      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f838 	bl	800506e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b20      	cmp	r3, #32
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0220 	mvn.w	r2, #32
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8c7 	bl	80051b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a40      	ldr	r2, [pc, #256]	; (8005198 <TIM_Base_SetConfig+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3d      	ldr	r2, [pc, #244]	; (800519c <TIM_Base_SetConfig+0x118>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3c      	ldr	r2, [pc, #240]	; (80051a0 <TIM_Base_SetConfig+0x11c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3b      	ldr	r2, [pc, #236]	; (80051a4 <TIM_Base_SetConfig+0x120>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3a      	ldr	r2, [pc, #232]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <TIM_Base_SetConfig+0x114>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01f      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d01b      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2c      	ldr	r2, [pc, #176]	; (800519c <TIM_Base_SetConfig+0x118>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d017      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <TIM_Base_SetConfig+0x11c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <TIM_Base_SetConfig+0x120>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00f      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <TIM_Base_SetConfig+0x128>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <TIM_Base_SetConfig+0x12c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <TIM_Base_SetConfig+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <TIM_Base_SetConfig+0x114>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_Base_SetConfig+0xf8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <TIM_Base_SetConfig+0x124>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <TIM_Base_SetConfig+0x128>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <TIM_Base_SetConfig+0x12c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <TIM_Base_SetConfig+0x130>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d103      	bne.n	8005184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	615a      	str	r2, [r3, #20]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800

080051b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80051f4:	b084      	sub	sp, #16
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	f107 001c 	add.w	r0, r7, #28
 8005202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8005212:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005216:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800521a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800521e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005222:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	b004      	add	sp, #16
 800524c:	4770      	bx	lr

0800524e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2203      	movs	r2, #3
 8005296:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005298:	2002      	movs	r0, #2
 800529a:	f7fb fc55 	bl	8000b48 <HAL_Delay>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0303 	and.w	r3, r3, #3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80052e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80052ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052fe:	f023 030f 	bic.w	r3, r3, #15
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	b2db      	uxtb	r3, r3
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3314      	adds	r3, #20
 8005340:	461a      	mov	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	4413      	add	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800537e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005384:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800538a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0

}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053be:	2310      	movs	r3, #16
 80053c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff74 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	2110      	movs	r1, #16
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9d6 	bl	8005794 <SDMMC_GetCmdResp1>
 80053e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ea:	69fb      	ldr	r3, [r7, #28]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005402:	2311      	movs	r3, #17
 8005404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800540e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff52 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	2111      	movs	r1, #17
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9b4 	bl	8005794 <SDMMC_GetCmdResp1>
 800542c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800542e:	69fb      	ldr	r3, [r7, #28]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005446:	2312      	movs	r3, #18
 8005448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ff30 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	2112      	movs	r1, #18
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f992 	bl	8005794 <SDMMC_GetCmdResp1>
 8005470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005472:	69fb      	ldr	r3, [r7, #28]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800548a:	2318      	movs	r3, #24
 800548c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800548e:	2340      	movs	r3, #64	; 0x40
 8005490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ff0e 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	2118      	movs	r1, #24
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f970 	bl	8005794 <SDMMC_GetCmdResp1>
 80054b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b6:	69fb      	ldr	r3, [r7, #28]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80054ce:	2319      	movs	r3, #25
 80054d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054d2:	2340      	movs	r3, #64	; 0x40
 80054d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	4619      	mov	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff feec 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	2119      	movs	r1, #25
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f94e 	bl	8005794 <SDMMC_GetCmdResp1>
 80054f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054fa:	69fb      	ldr	r3, [r7, #28]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005510:	230c      	movs	r3, #12
 8005512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800551c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005520:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005522:	f107 0308 	add.w	r3, r7, #8
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fecb 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800552e:	4a05      	ldr	r2, [pc, #20]	; (8005544 <SDMMC_CmdStopTransfer+0x40>)
 8005530:	210c      	movs	r1, #12
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f92e 	bl	8005794 <SDMMC_GetCmdResp1>
 8005538:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800553a:	69fb      	ldr	r3, [r7, #28]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	05f5e100 	.word	0x05f5e100

08005548 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005558:	2307      	movs	r3, #7
 800555a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005568:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800556a:	f107 0310 	add.w	r3, r7, #16
 800556e:	4619      	mov	r1, r3
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fea7 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	2107      	movs	r1, #7
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f909 	bl	8005794 <SDMMC_GetCmdResp1>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005586:	4618      	mov	r0, r3
 8005588:	3728      	adds	r7, #40	; 0x28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b088      	sub	sp, #32
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ac:	f107 0308 	add.w	r3, r7, #8
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fe86 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb23 	bl	8005c04 <SDMMC_GetCmdError>
 80055be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c0:	69fb      	ldr	r3, [r7, #28]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b088      	sub	sp, #32
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80055d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80055d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80055d8:	2308      	movs	r3, #8
 80055da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055dc:	2340      	movs	r3, #64	; 0x40
 80055de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fe67 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fab6 	bl	8005b68 <SDMMC_GetCmdResp7>
 80055fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005616:	2337      	movs	r3, #55	; 0x37
 8005618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005626:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005628:	f107 0308 	add.w	r3, r7, #8
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fe48 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	2137      	movs	r1, #55	; 0x37
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8aa 	bl	8005794 <SDMMC_GetCmdResp1>
 8005640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005642:	69fb      	ldr	r3, [r7, #28]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800565c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005660:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005662:	2329      	movs	r3, #41	; 0x29
 8005664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800566e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fe22 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9bd 	bl	8005a00 <SDMMC_GetCmdResp3>
 8005686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005688:	69fb      	ldr	r3, [r7, #28]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b088      	sub	sp, #32
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800569e:	2302      	movs	r3, #2
 80056a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056a2:	23c0      	movs	r3, #192	; 0xc0
 80056a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056b0:	f107 0308 	add.w	r3, r7, #8
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fe04 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f957 	bl	8005970 <SDMMC_GetCmdResp2>
 80056c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056c4:	69fb      	ldr	r3, [r7, #28]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b088      	sub	sp, #32
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80056dc:	2309      	movs	r3, #9
 80056de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056e0:	23c0      	movs	r3, #192	; 0xc0
 80056e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fde5 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f938 	bl	8005970 <SDMMC_GetCmdResp2>
 8005700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800571a:	2303      	movs	r3, #3
 800571c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800572a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fdc6 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	2103      	movs	r1, #3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f99d 	bl	8005a7c <SDMMC_GetCmdResp6>
 8005742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005744:	69fb      	ldr	r3, [r7, #28]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b088      	sub	sp, #32
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800575c:	230d      	movs	r3, #13
 800575e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fda5 	bl	80052c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	210d      	movs	r1, #13
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f807 	bl	8005794 <SDMMC_GetCmdResp1>
 8005786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005788:	69fb      	ldr	r3, [r7, #28]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	460b      	mov	r3, r1
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057a2:	4b70      	ldr	r3, [pc, #448]	; (8005964 <SDMMC_GetCmdResp1+0x1d0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a70      	ldr	r2, [pc, #448]	; (8005968 <SDMMC_GetCmdResp1+0x1d4>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	0a5a      	lsrs	r2, r3, #9
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
 80057b4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	1e5a      	subs	r2, r3, #1
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057c4:	e0c9      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0ef      	beq.n	80057b6 <SDMMC_GetCmdResp1+0x22>
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1ea      	bne.n	80057b6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2204      	movs	r2, #4
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057f2:	2304      	movs	r3, #4
 80057f4:	e0b1      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005808:	2301      	movs	r3, #1
 800580a:	e0a6      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	22c5      	movs	r2, #197	; 0xc5
 8005810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fd80 	bl	8005318 <SDMMC_GetCommandResponse>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	4293      	cmp	r3, r2
 8005820:	d001      	beq.n	8005826 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005822:	2301      	movs	r3, #1
 8005824:	e099      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005826:	2100      	movs	r1, #0
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fd82 	bl	8005332 <SDMMC_GetResponse>
 800582e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4b4e      	ldr	r3, [pc, #312]	; (800596c <SDMMC_GetCmdResp1+0x1d8>)
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800583a:	2300      	movs	r3, #0
 800583c:	e08d      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da02      	bge.n	800584a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005848:	e087      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	e080      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	e079      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005874:	e071      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005884:	e069      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005894:	e061      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80058a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058a4:	e059      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b4:	e051      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c4:	e049      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058d4:	e041      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80058e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e4:	e039      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058f4:	e031      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005904:	e029      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005910:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005914:	e021      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005924:	e019      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005934:	e011      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005940:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005944:	e009      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005950:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005954:	e001      	b.n	800595a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000000 	.word	0x20000000
 8005968:	10624dd3 	.word	0x10624dd3
 800596c:	fdffe008 	.word	0xfdffe008

08005970 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005978:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <SDMMC_GetCmdResp2+0x88>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <SDMMC_GetCmdResp2+0x8c>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0a5b      	lsrs	r3, r3, #9
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005998:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800599c:	e026      	b.n	80059ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ef      	beq.n	800598e <SDMMC_GetCmdResp2+0x1e>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ea      	bne.n	800598e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2204      	movs	r2, #4
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059ca:	2304      	movs	r3, #4
 80059cc:	e00e      	b.n	80059ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e003      	b.n	80059ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	22c5      	movs	r2, #197	; 0xc5
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000000 	.word	0x20000000
 80059fc:	10624dd3 	.word	0x10624dd3

08005a00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a08:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <SDMMC_GetCmdResp3+0x74>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <SDMMC_GetCmdResp3+0x78>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0a5b      	lsrs	r3, r3, #9
 8005a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	60fa      	str	r2, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a2c:	e01b      	b.n	8005a66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0ef      	beq.n	8005a1e <SDMMC_GetCmdResp3+0x1e>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1ea      	bne.n	8005a1e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	e003      	b.n	8005a66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	22c5      	movs	r2, #197	; 0xc5
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000000 	.word	0x20000000
 8005a78:	10624dd3 	.word	0x10624dd3

08005a7c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	460b      	mov	r3, r1
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a8a:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <SDMMC_GetCmdResp6+0xe4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a35      	ldr	r2, [pc, #212]	; (8005b64 <SDMMC_GetCmdResp6+0xe8>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	0a5b      	lsrs	r3, r3, #9
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	1e5a      	subs	r2, r3, #1
 8005aa4:	61fa      	str	r2, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005aae:	e052      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ef      	beq.n	8005aa0 <SDMMC_GetCmdResp6+0x24>
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ea      	bne.n	8005aa0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005adc:	2304      	movs	r3, #4
 8005ade:	e03a      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02f      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fc0e 	bl	8005318 <SDMMC_GetCommandResponse>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	7afb      	ldrb	r3, [r7, #11]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d001      	beq.n	8005b0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e025      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22c5      	movs	r2, #197	; 0xc5
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b10:	2100      	movs	r1, #0
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fc0d 	bl	8005332 <SDMMC_GetResponse>
 8005b18:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e011      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b40:	e009      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b50:	e001      	b.n	8005b56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000000 	.word	0x20000000
 8005b64:	10624dd3 	.word	0x10624dd3

08005b68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b70:	4b22      	ldr	r3, [pc, #136]	; (8005bfc <SDMMC_GetCmdResp7+0x94>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <SDMMC_GetCmdResp7+0x98>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	0a5b      	lsrs	r3, r3, #9
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
 8005b84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1e5a      	subs	r2, r3, #1
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b94:	e02c      	b.n	8005bf0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <SDMMC_GetCmdResp7+0x1e>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ea      	bne.n	8005b86 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	e014      	b.n	8005bf0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e009      	b.n	8005bf0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2240      	movs	r2, #64	; 0x40
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bee:	2300      	movs	r3, #0

}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	10624dd3 	.word	0x10624dd3

08005c04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <SDMMC_GetCmdError+0x50>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <SDMMC_GetCmdError+0x54>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	0a5b      	lsrs	r3, r3, #9
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	60fa      	str	r2, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c30:	e009      	b.n	8005c46 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f1      	beq.n	8005c22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	22c5      	movs	r2, #197	; 0xc5
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000000 	.word	0x20000000
 8005c58:	10624dd3 	.word	0x10624dd3

08005c5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c60:	4904      	ldr	r1, [pc, #16]	; (8005c74 <MX_FATFS_Init+0x18>)
 8005c62:	4805      	ldr	r0, [pc, #20]	; (8005c78 <MX_FATFS_Init+0x1c>)
 8005c64:	f003 fd66 	bl	8009734 <FATFS_LinkDriver>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <MX_FATFS_Init+0x20>)
 8005c6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c70:	bf00      	nop
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20002340 	.word	0x20002340
 8005c78:	0800d43c 	.word	0x0800d43c
 8005c7c:	2000233c 	.word	0x2000233c

08005c80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c84:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005c9a:	f000 f898 	bl	8005dce <BSP_SD_IsDetected>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d001      	beq.n	8005ca8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e005      	b.n	8005cb4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005ca8:	4804      	ldr	r0, [pc, #16]	; (8005cbc <BSP_SD_Init+0x2c>)
 8005caa:	f7fd feb5 	bl	8003a18 <HAL_SD_Init>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	200019c0 	.word	0x200019c0

08005cc0 <BSP_SD_ReadBlocks_DMA>:
}

/* USER CODE BEGIN BeforeReadDMABlocksSection */
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmatx = NULL;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  sd_state = SD_DMAConfigRx(&hsd1);
 8005cd6:	480a      	ldr	r0, [pc, #40]	; (8005d00 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cd8:	f000 f88c 	bl	8005df4 <SD_DMAConfigRx>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	4806      	ldr	r0, [pc, #24]	; (8005d00 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005ce8:	f7fd ff7e 	bl	8003be8 <HAL_SD_ReadBlocks_DMA>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <BSP_SD_ReadBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200019c0 	.word	0x200019c0

08005d04 <BSP_SD_WriteBlocks_DMA>:

/* USER CODE BEGIN BeforeWriteDMABlocksSection */
#endif
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmarx = NULL;
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
  sd_state = SD_DMAConfigTx(&hsd1);
 8005d1a:	480a      	ldr	r0, [pc, #40]	; (8005d44 <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d1c:	f000 f8ae 	bl	8005e7c <SD_DMAConfigTx>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	4806      	ldr	r0, [pc, #24]	; (8005d44 <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d2c:	f7fe f824 	bl	8003d78 <HAL_SD_WriteBlocks_DMA>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <BSP_SD_WriteBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200019c0 	.word	0x200019c0

08005d48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d4c:	4805      	ldr	r0, [pc, #20]	; (8005d64 <BSP_SD_GetCardState+0x1c>)
 8005d4e:	f7fe fc2f 	bl	80045b0 <HAL_SD_GetCardState>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	bf14      	ite	ne
 8005d58:	2301      	movne	r3, #1
 8005d5a:	2300      	moveq	r3, #0
 8005d5c:	b2db      	uxtb	r3, r3
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	200019c0 	.word	0x200019c0

08005d68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4803      	ldr	r0, [pc, #12]	; (8005d80 <BSP_SD_GetCardInfo+0x18>)
 8005d74:	f7fe fbf0 	bl	8004558 <HAL_SD_GetCardInfo>
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200019c0 	.word	0x200019c0

08005d84 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005d8c:	f000 f818 	bl	8005dc0 <BSP_SD_AbortCallback>
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005da0:	f000 fa38 	bl	8006214 <BSP_SD_WriteCpltCallback>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005db4:	f000 fa40 	bl	8006238 <BSP_SD_ReadCpltCallback>
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0

}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005dd8:	f000 f892 	bl	8005f00 <BSP_PlatformIsDetected>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005de2:	2300      	movs	r3, #0
 8005de4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	b2db      	uxtb	r3, r3
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <SD_DMAConfigRx>:
 */
#define SD_DMAx_STREAM DMA2_Channel4
#define SD_DMAx_IRQn DMA2_Channel4_IRQn
//#define SD_DMAx_IRQHandler DMA2_Channel4_IRQHandler
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_rx;
 HAL_StatusTypeDef status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
 /* Configure DMA Rx parameters */
 hdma_rx.Init.Request = DMA_REQUEST_7;
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e02:	2207      	movs	r2, #7
 8005e04:	605a      	str	r2, [r3, #4]
 hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e06:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
 hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
 hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	611a      	str	r2, [r3, #16]
 hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e18:	4b16      	ldr	r3, [pc, #88]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1e:	615a      	str	r2, [r3, #20]
 hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e26:	619a      	str	r2, [r3, #24]
 hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005e2e:	621a      	str	r2, [r3, #32]
 hdma_rx.Instance = SD_DMAx_STREAM;
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e32:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <SD_DMAConfigRx+0x84>)
 8005e34:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8005e3c:	4a0d      	ldr	r2, [pc, #52]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_rx);
 8005e42:	480c      	ldr	r0, [pc, #48]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e44:	f7fb f930 	bl	80010a8 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_rx);
 8005e48:	480a      	ldr	r0, [pc, #40]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e4a:	f7fb f83b 	bl	8000ec4 <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_rx);
 8005e4e:	4809      	ldr	r0, [pc, #36]	; (8005e74 <SD_DMAConfigRx+0x80>)
 8005e50:	f7fa ff80 	bl	8000d54 <HAL_DMA_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2106      	movs	r1, #6
 8005e5c:	203b      	movs	r0, #59	; 0x3b
 8005e5e:	f7fa ff4f 	bl	8000d00 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005e62:	203b      	movs	r0, #59	; 0x3b
 8005e64:	f7fa ff68 	bl	8000d38 <HAL_NVIC_EnableIRQ>
 return (status);
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	2000002c 	.word	0x2000002c
 8005e78:	40020444 	.word	0x40020444

08005e7c <SD_DMAConfigTx>:
 * @brief Configure the DMA to transmit data to the SD card
 * @retval
 * HAL_ERROR or HAL_OK
 */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_tx;
 HAL_StatusTypeDef status;
 /* Configure DMA Tx parameters */
 hdma_tx.Init.Request = DMA_REQUEST_7;
 8005e84:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005e86:	2207      	movs	r2, #7
 8005e88:	605a      	str	r2, [r3, #4]
 hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	609a      	str	r2, [r3, #8]
 hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	60da      	str	r2, [r3, #12]
 hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005e98:	2280      	movs	r2, #128	; 0x80
 8005e9a:	611a      	str	r2, [r3, #16]
 hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e9c:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea2:	615a      	str	r2, [r3, #20]
 hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ea4:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eaa:	619a      	str	r2, [r3, #24]
 hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005eac:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005eae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005eb2:	621a      	str	r2, [r3, #32]
 hdma_tx.Instance = SD_DMAx_STREAM;
 8005eb4:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005eb6:	4a11      	ldr	r2, [pc, #68]	; (8005efc <SD_DMAConfigTx+0x80>)
 8005eb8:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ebe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_tx);
 8005ec6:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ec8:	f7fb f8ee 	bl	80010a8 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_tx);
 8005ecc:	480a      	ldr	r0, [pc, #40]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ece:	f7fa fff9 	bl	8000ec4 <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_tx);
 8005ed2:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <SD_DMAConfigTx+0x7c>)
 8005ed4:	f7fa ff3e 	bl	8000d54 <HAL_DMA_Init>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]

 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	2106      	movs	r1, #6
 8005ee0:	203b      	movs	r0, #59	; 0x3b
 8005ee2:	f7fa ff0d 	bl	8000d00 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005ee6:	203b      	movs	r0, #59	; 0x3b
 8005ee8:	f7fa ff26 	bl	8000d38 <HAL_NVIC_EnableIRQ>
 return (status);
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000074 	.word	0x20000074
 8005efc:	40020444 	.word	0x40020444

08005f00 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005f06:	2301      	movs	r3, #1
 8005f08:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f12:	f7fb fbd1 	bl	80016b8 <HAL_GPIO_ReadPin>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f20:	79fb      	ldrb	r3, [r7, #7]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005f32:	f003 fdcd 	bl	8009ad0 <osKernelGetTickCount>
 8005f36:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005f38:	e006      	b.n	8005f48 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f3a:	f7ff ff05 	bl	8005d48 <BSP_SD_GetCardState>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e009      	b.n	8005f5c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005f48:	f003 fdc2 	bl	8009ad0 <osKernelGetTickCount>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d8f0      	bhi.n	8005f3a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <SD_CheckStatus+0x38>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f74:	f7ff fee8 	bl	8005d48 <BSP_SD_GetCardState>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <SD_CheckStatus+0x38>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <SD_CheckStatus+0x38>)
 8005f8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f8e:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <SD_CheckStatus+0x38>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b2db      	uxtb	r3, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000009 	.word	0x20000009

08005fa0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005faa:	4b1c      	ldr	r3, [pc, #112]	; (800601c <SD_initialize+0x7c>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005fb0:	f003 fd46 	bl	8009a40 <osKernelGetState>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d129      	bne.n	800600e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005fba:	f7ff fe69 	bl	8005c90 <BSP_SD_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ffcc 	bl	8005f64 <SD_CheckStatus>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <SD_initialize+0x7c>)
 8005fd2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <SD_initialize+0x7c>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d017      	beq.n	800600e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <SD_initialize+0x80>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2102      	movs	r1, #2
 8005fea:	200a      	movs	r0, #10
 8005fec:	f003 ff76 	bl	8009edc <osMessageQueueNew>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4a0b      	ldr	r2, [pc, #44]	; (8006020 <SD_initialize+0x80>)
 8005ff4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <SD_initialize+0x80>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <SD_initialize+0x7c>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <SD_initialize+0x7c>)
 800600c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800600e:	4b03      	ldr	r3, [pc, #12]	; (800601c <SD_initialize+0x7c>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	20000009 	.word	0x20000009
 8006020:	200000bc 	.word	0x200000bc

08006024 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ff97 	bl	8005f64 <SD_CheckStatus>
 8006036:	4603      	mov	r3, r0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006054:	f247 5030 	movw	r0, #30000	; 0x7530
 8006058:	f7ff ff67 	bl	8005f2a <SD_CheckStatusWithTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	da01      	bge.n	8006066 <SD_read+0x26>
  {
    return res;
 8006062:	7ffb      	ldrb	r3, [r7, #31]
 8006064:	e02f      	b.n	80060c6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7ff fe28 	bl	8005cc0 <BSP_SD_ReadBlocks_DMA>
 8006070:	4603      	mov	r3, r0
 8006072:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8006074:	7fbb      	ldrb	r3, [r7, #30]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d124      	bne.n	80060c4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <SD_read+0x90>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	f107 0112 	add.w	r1, r7, #18
 8006082:	f247 5330 	movw	r3, #30000	; 0x7530
 8006086:	2200      	movs	r2, #0
 8006088:	f003 fffc 	bl	800a084 <osMessageQueueGet>
 800608c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d117      	bne.n	80060c4 <SD_read+0x84>
 8006094:	8a7b      	ldrh	r3, [r7, #18]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d114      	bne.n	80060c4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800609a:	f003 fd19 	bl	8009ad0 <osKernelGetTickCount>
 800609e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060a0:	e007      	b.n	80060b2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80060a2:	f7ff fe51 	bl	8005d48 <BSP_SD_GetCardState>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <SD_read+0x72>
              {
                res = RES_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80060b0:	e008      	b.n	80060c4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060b2:	f003 fd0d 	bl	8009ad0 <osKernelGetTickCount>
 80060b6:	4602      	mov	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d9ee      	bls.n	80060a2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80060c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200000bc 	.word	0x200000bc

080060d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060e8:	f247 5030 	movw	r0, #30000	; 0x7530
 80060ec:	f7ff ff1d 	bl	8005f2a <SD_CheckStatusWithTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da01      	bge.n	80060fa <SD_write+0x26>
  {
    return res;
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	e02d      	b.n	8006156 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	68b8      	ldr	r0, [r7, #8]
 8006100:	f7ff fe00 	bl	8005d04 <BSP_SD_WriteBlocks_DMA>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d124      	bne.n	8006154 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800610a:	4b15      	ldr	r3, [pc, #84]	; (8006160 <SD_write+0x8c>)
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f107 0112 	add.w	r1, r7, #18
 8006112:	f247 5330 	movw	r3, #30000	; 0x7530
 8006116:	2200      	movs	r2, #0
 8006118:	f003 ffb4 	bl	800a084 <osMessageQueueGet>
 800611c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d117      	bne.n	8006154 <SD_write+0x80>
 8006124:	8a7b      	ldrh	r3, [r7, #18]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d114      	bne.n	8006154 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800612a:	f003 fcd1 	bl	8009ad0 <osKernelGetTickCount>
 800612e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006130:	e007      	b.n	8006142 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006132:	f7ff fe09 	bl	8005d48 <BSP_SD_GetCardState>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <SD_write+0x6e>
          {
            res = RES_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	77fb      	strb	r3, [r7, #31]
            break;
 8006140:	e008      	b.n	8006154 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006142:	f003 fcc5 	bl	8009ad0 <osKernelGetTickCount>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006150:	4293      	cmp	r3, r2
 8006152:	d9ee      	bls.n	8006132 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8006154:	7ffb      	ldrb	r3, [r7, #31]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200000bc 	.word	0x200000bc

08006164 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	603a      	str	r2, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
 8006170:	460b      	mov	r3, r1
 8006172:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800617a:	4b25      	ldr	r3, [pc, #148]	; (8006210 <SD_ioctl+0xac>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <SD_ioctl+0x28>
 8006188:	2303      	movs	r3, #3
 800618a:	e03c      	b.n	8006206 <SD_ioctl+0xa2>

  switch (cmd)
 800618c:	79bb      	ldrb	r3, [r7, #6]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d834      	bhi.n	80061fc <SD_ioctl+0x98>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <SD_ioctl+0x34>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061e3 	.word	0x080061e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061ae:	e028      	b.n	8006202 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fdd7 	bl	8005d68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80061ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061c6:	e01c      	b.n	8006202 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fdcb 	bl	8005d68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061e0:	e00f      	b.n	8006202 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061e2:	f107 030c 	add.w	r3, r7, #12
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fdbe 	bl	8005d68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	0a5a      	lsrs	r2, r3, #9
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061fa:	e002      	b.n	8006202 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006206:	4618      	mov	r0, r3
 8006208:	3730      	adds	r7, #48	; 0x30
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000009 	.word	0x20000009

08006214 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800621a:	2302      	movs	r3, #2
 800621c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <BSP_SD_WriteCpltCallback+0x20>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	1db9      	adds	r1, r7, #6
 8006224:	2300      	movs	r3, #0
 8006226:	2200      	movs	r2, #0
 8006228:	f003 fecc 	bl	8009fc4 <osMessageQueuePut>
#endif
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200000bc 	.word	0x200000bc

08006238 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800623e:	2301      	movs	r3, #1
 8006240:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <BSP_SD_ReadCpltCallback+0x20>)
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	1db9      	adds	r1, r7, #6
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	f003 feba 	bl	8009fc4 <osMessageQueuePut>
#endif
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200000bc 	.word	0x200000bc

0800625c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <disk_status+0x30>)
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	79fa      	ldrb	r2, [r7, #7]
 8006274:	4905      	ldr	r1, [pc, #20]	; (800628c <disk_status+0x30>)
 8006276:	440a      	add	r2, r1
 8006278:	7a12      	ldrb	r2, [r2, #8]
 800627a:	4610      	mov	r0, r2
 800627c:	4798      	blx	r3
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	200000e8 	.word	0x200000e8

08006290 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <disk_initialize+0x48>)
 80062a2:	5cd3      	ldrb	r3, [r2, r3]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d111      	bne.n	80062cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <disk_initialize+0x48>)
 80062ac:	2101      	movs	r1, #1
 80062ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <disk_initialize+0x48>)
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	4906      	ldr	r1, [pc, #24]	; (80062d8 <disk_initialize+0x48>)
 80062c0:	440a      	add	r2, r1
 80062c2:	7a12      	ldrb	r2, [r2, #8]
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200000e8 	.word	0x200000e8

080062dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <disk_read+0x3c>)
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	689c      	ldr	r4, [r3, #8]
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	4a07      	ldr	r2, [pc, #28]	; (8006318 <disk_read+0x3c>)
 80062fc:	4413      	add	r3, r2
 80062fe:	7a18      	ldrb	r0, [r3, #8]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	47a0      	blx	r4
 8006308:	4603      	mov	r3, r0
 800630a:	75fb      	strb	r3, [r7, #23]
  return res;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	200000e8 	.word	0x200000e8

0800631c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <disk_write+0x3c>)
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	68dc      	ldr	r4, [r3, #12]
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	4a07      	ldr	r2, [pc, #28]	; (8006358 <disk_write+0x3c>)
 800633c:	4413      	add	r3, r2
 800633e:	7a18      	ldrb	r0, [r3, #8]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	47a0      	blx	r4
 8006348:	4603      	mov	r3, r0
 800634a:	75fb      	strb	r3, [r7, #23]
  return res;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd90      	pop	{r4, r7, pc}
 8006356:	bf00      	nop
 8006358:	200000e8 	.word	0x200000e8

0800635c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	603a      	str	r2, [r7, #0]
 8006366:	71fb      	strb	r3, [r7, #7]
 8006368:	460b      	mov	r3, r1
 800636a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <disk_ioctl+0x38>)
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	79fa      	ldrb	r2, [r7, #7]
 800637a:	4906      	ldr	r1, [pc, #24]	; (8006394 <disk_ioctl+0x38>)
 800637c:	440a      	add	r2, r1
 800637e:	7a10      	ldrb	r0, [r2, #8]
 8006380:	79b9      	ldrb	r1, [r7, #6]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	4798      	blx	r3
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]
  return res;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200000e8 	.word	0x200000e8

08006398 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3301      	adds	r3, #1
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063a8:	89fb      	ldrh	r3, [r7, #14]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	b21a      	sxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b21b      	sxth	r3, r3
 80063b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063ba:	89fb      	ldrh	r3, [r7, #14]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3303      	adds	r3, #3
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	3202      	adds	r2, #2
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	3201      	adds	r2, #1
 80063ee:	7812      	ldrb	r2, [r2, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	887a      	ldrh	r2, [r7, #2]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	887b      	ldrh	r3, [r7, #2]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	887a      	ldrh	r2, [r7, #2]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	0a1b      	lsrs	r3, r3, #8
 8006482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	1c53      	adds	r3, r2, #1
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	6179      	str	r1, [r7, #20]
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f1      	bne.n	80064b6 <mem_cpy+0x1a>
	}
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	617a      	str	r2, [r7, #20]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f3      	bne.n	80064ee <mem_set+0x10>
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006514:	b480      	push	{r7}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	61fa      	str	r2, [r7, #28]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	61ba      	str	r2, [r7, #24]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	1acb      	subs	r3, r1, r3
 8006540:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3b01      	subs	r3, #1
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <mem_cmp+0x40>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0eb      	beq.n	800652c <mem_cmp+0x18>

	return r;
 8006554:	697b      	ldr	r3, [r7, #20]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3724      	adds	r7, #36	; 0x24
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800656c:	e002      	b.n	8006574 <chk_chr+0x12>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3301      	adds	r3, #1
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <chk_chr+0x26>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	4293      	cmp	r3, r2
 8006586:	d1f2      	bne.n	800656e <chk_chr+0xc>
	return *str;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	781b      	ldrb	r3, [r3, #0]
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <lock_fs+0x22>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 f9bf 	bl	800992e <ff_req_grant>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <lock_fs+0x22>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <lock_fs+0x24>
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00d      	beq.n	80065f2 <unlock_fs+0x2e>
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	d00a      	beq.n	80065f2 <unlock_fs+0x2e>
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	2b0b      	cmp	r3, #11
 80065e0:	d007      	beq.n	80065f2 <unlock_fs+0x2e>
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	d004      	beq.n	80065f2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f003 f9b3 	bl	8009958 <ff_rel_grant>
	}
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e029      	b.n	8006664 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <chk_lock+0xb4>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01d      	beq.n	800665a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <chk_lock+0xb4>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4413      	add	r3, r2
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d116      	bne.n	800665e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <chk_lock+0xb4>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	3304      	adds	r3, #4
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006640:	429a      	cmp	r2, r3
 8006642:	d10c      	bne.n	800665e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006644:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <chk_lock+0xb4>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	4413      	add	r3, r2
 800664c:	3308      	adds	r3, #8
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006654:	429a      	cmp	r2, r3
 8006656:	d102      	bne.n	800665e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006658:	e007      	b.n	800666a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d9d2      	bls.n	8006610 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d109      	bne.n	8006684 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <chk_lock+0x80>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d101      	bne.n	8006680 <chk_lock+0x84>
 800667c:	2300      	movs	r3, #0
 800667e:	e010      	b.n	80066a2 <chk_lock+0xa6>
 8006680:	2312      	movs	r3, #18
 8006682:	e00e      	b.n	80066a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d108      	bne.n	800669c <chk_lock+0xa0>
 800668a:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <chk_lock+0xb4>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	330c      	adds	r3, #12
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d101      	bne.n	80066a0 <chk_lock+0xa4>
 800669c:	2310      	movs	r3, #16
 800669e:	e000      	b.n	80066a2 <chk_lock+0xa6>
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	200000c8 	.word	0x200000c8

080066b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ba:	2300      	movs	r3, #0
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	e002      	b.n	80066c6 <enq_lock+0x12>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d806      	bhi.n	80066da <enq_lock+0x26>
 80066cc:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <enq_lock+0x40>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	4413      	add	r3, r2
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f2      	bne.n	80066c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200000c8 	.word	0x200000c8

080066f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e01f      	b.n	8006748 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006708:	4a41      	ldr	r2, [pc, #260]	; (8006810 <inc_lock+0x118>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	4413      	add	r3, r2
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d113      	bne.n	8006742 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800671a:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <inc_lock+0x118>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	4413      	add	r3, r2
 8006722:	3304      	adds	r3, #4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800672a:	429a      	cmp	r2, r3
 800672c:	d109      	bne.n	8006742 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <inc_lock+0x118>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	4413      	add	r3, r2
 8006736:	3308      	adds	r3, #8
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800673e:	429a      	cmp	r2, r3
 8006740:	d006      	beq.n	8006750 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d9dc      	bls.n	8006708 <inc_lock+0x10>
 800674e:	e000      	b.n	8006752 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006750:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d132      	bne.n	80067be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e002      	b.n	8006764 <inc_lock+0x6c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d806      	bhi.n	8006778 <inc_lock+0x80>
 800676a:	4a29      	ldr	r2, [pc, #164]	; (8006810 <inc_lock+0x118>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	4413      	add	r3, r2
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f2      	bne.n	800675e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d101      	bne.n	8006782 <inc_lock+0x8a>
 800677e:	2300      	movs	r3, #0
 8006780:	e040      	b.n	8006804 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4922      	ldr	r1, [pc, #136]	; (8006810 <inc_lock+0x118>)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	440b      	add	r3, r1
 800678e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	491e      	ldr	r1, [pc, #120]	; (8006810 <inc_lock+0x118>)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	440b      	add	r3, r1
 800679c:	3304      	adds	r3, #4
 800679e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	491a      	ldr	r1, [pc, #104]	; (8006810 <inc_lock+0x118>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	440b      	add	r3, r1
 80067ac:	3308      	adds	r3, #8
 80067ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <inc_lock+0x118>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	4413      	add	r3, r2
 80067b8:	330c      	adds	r3, #12
 80067ba:	2200      	movs	r2, #0
 80067bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <inc_lock+0xe0>
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <inc_lock+0x118>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	4413      	add	r3, r2
 80067cc:	330c      	adds	r3, #12
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <inc_lock+0xe0>
 80067d4:	2300      	movs	r3, #0
 80067d6:	e015      	b.n	8006804 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <inc_lock+0xf8>
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <inc_lock+0x118>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	330c      	adds	r3, #12
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	e001      	b.n	80067f4 <inc_lock+0xfc>
 80067f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067f4:	4906      	ldr	r1, [pc, #24]	; (8006810 <inc_lock+0x118>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	440b      	add	r3, r1
 80067fc:	330c      	adds	r3, #12
 80067fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	200000c8 	.word	0x200000c8

08006814 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d825      	bhi.n	8006874 <dec_lock+0x60>
		n = Files[i].ctr;
 8006828:	4a17      	ldr	r2, [pc, #92]	; (8006888 <dec_lock+0x74>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	4413      	add	r3, r2
 8006830:	330c      	adds	r3, #12
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006836:	89fb      	ldrh	r3, [r7, #14]
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	d101      	bne.n	8006842 <dec_lock+0x2e>
 800683e:	2300      	movs	r3, #0
 8006840:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <dec_lock+0x3a>
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	3b01      	subs	r3, #1
 800684c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800684e:	4a0e      	ldr	r2, [pc, #56]	; (8006888 <dec_lock+0x74>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	4413      	add	r3, r2
 8006856:	330c      	adds	r3, #12
 8006858:	89fa      	ldrh	r2, [r7, #14]
 800685a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800685c:	89fb      	ldrh	r3, [r7, #14]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <dec_lock+0x5a>
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <dec_lock+0x74>)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	737b      	strb	r3, [r7, #13]
 8006872:	e001      	b.n	8006878 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006874:	2302      	movs	r3, #2
 8006876:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006878:	7b7b      	ldrb	r3, [r7, #13]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	200000c8 	.word	0x200000c8

0800688c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e010      	b.n	80068bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800689a:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <clear_lock+0x44>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4413      	add	r3, r2
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d105      	bne.n	80068b6 <clear_lock+0x2a>
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <clear_lock+0x44>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	4413      	add	r3, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d9eb      	bls.n	800689a <clear_lock+0xe>
	}
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	200000c8 	.word	0x200000c8

080068d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d034      	beq.n	8006952 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7858      	ldrb	r0, [r3, #1]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80068f8:	2301      	movs	r3, #1
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	f7ff fd0e 	bl	800631c <disk_write>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006906:	2301      	movs	r3, #1
 8006908:	73fb      	strb	r3, [r7, #15]
 800690a:	e022      	b.n	8006952 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	429a      	cmp	r2, r3
 8006920:	d217      	bcs.n	8006952 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	789b      	ldrb	r3, [r3, #2]
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	e010      	b.n	800694c <sync_window+0x78>
					wsect += fs->fsize;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7858      	ldrb	r0, [r3, #1]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800693e:	2301      	movs	r3, #1
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	f7ff fceb 	bl	800631c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3b01      	subs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d8eb      	bhi.n	800692a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d01b      	beq.n	80069ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ffad 	bl	80068d4 <sync_window>
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d113      	bne.n	80069ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7858      	ldrb	r0, [r3, #1]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800698e:	2301      	movs	r3, #1
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	f7ff fca3 	bl	80062dc <disk_read>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800699c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff ff87 	bl	80068d4 <sync_window>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d159      	bne.n	8006a84 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d149      	bne.n	8006a6c <sync_fs+0xb4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	791b      	ldrb	r3, [r3, #4]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d145      	bne.n	8006a6c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	899b      	ldrh	r3, [r3, #12]
 80069ea:	461a      	mov	r2, r3
 80069ec:	2100      	movs	r1, #0
 80069ee:	f7ff fd76 	bl	80064de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	333c      	adds	r3, #60	; 0x3c
 80069f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fd05 	bl	800640e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	333c      	adds	r3, #60	; 0x3c
 8006a08:	4921      	ldr	r1, [pc, #132]	; (8006a90 <sync_fs+0xd8>)
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fd1a 	bl	8006444 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	333c      	adds	r3, #60	; 0x3c
 8006a14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a18:	491e      	ldr	r1, [pc, #120]	; (8006a94 <sync_fs+0xdc>)
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fd12 	bl	8006444 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	333c      	adds	r3, #60	; 0x3c
 8006a24:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7ff fd08 	bl	8006444 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	333c      	adds	r3, #60	; 0x3c
 8006a38:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7ff fcfe 	bl	8006444 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7858      	ldrb	r0, [r3, #1]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a60:	2301      	movs	r3, #1
 8006a62:	f7ff fc5b 	bl	800631c <disk_write>
			fs->fsi_flag = 0;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc71 	bl	800635c <disk_ioctl>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <sync_fs+0xcc>
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	41615252 	.word	0x41615252
 8006a94:	61417272 	.word	0x61417272

08006a98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3b02      	subs	r3, #2
 8006aa6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	3b02      	subs	r3, #2
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d301      	bcc.n	8006ab8 <clust2sect+0x20>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e008      	b.n	8006aca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	895b      	ldrh	r3, [r3, #10]
 8006abc:	461a      	mov	r2, r3
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac8:	4413      	add	r3, r2
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d904      	bls.n	8006af6 <get_fat+0x20>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <get_fat+0x26>
		val = 1;	/* Internal error */
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e0bb      	b.n	8006c74 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	f000 8083 	beq.w	8006c12 <get_fat+0x13c>
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	f300 80a7 	bgt.w	8006c60 <get_fat+0x18a>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d002      	beq.n	8006b1c <get_fat+0x46>
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d056      	beq.n	8006bc8 <get_fat+0xf2>
 8006b1a:	e0a1      	b.n	8006c60 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	4619      	mov	r1, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6938      	ldr	r0, [r7, #16]
 8006b40:	f7ff ff0c 	bl	800695c <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 808d 	bne.w	8006c66 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	60fa      	str	r2, [r7, #12]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	8992      	ldrh	r2, [r2, #12]
 8006b56:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b5a:	fb02 f201 	mul.w	r2, r2, r1
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	899b      	ldrh	r3, [r3, #12]
 8006b72:	4619      	mov	r1, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7ff feec 	bl	800695c <move_window>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d16f      	bne.n	8006c6a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	899b      	ldrh	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b96:	fb02 f201 	mul.w	r2, r2, r1
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <get_fat+0xe8>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	e002      	b.n	8006bc4 <get_fat+0xee>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc4:	617b      	str	r3, [r7, #20]
			break;
 8006bc6:	e055      	b.n	8006c74 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	899b      	ldrh	r3, [r3, #12]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bdc:	4413      	add	r3, r2
 8006bde:	4619      	mov	r1, r3
 8006be0:	6938      	ldr	r0, [r7, #16]
 8006be2:	f7ff febb 	bl	800695c <move_window>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d140      	bne.n	8006c6e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	8992      	ldrh	r2, [r2, #12]
 8006bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bfe:	fb02 f200 	mul.w	r2, r2, r0
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	440b      	add	r3, r1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fbc6 	bl	8006398 <ld_word>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	617b      	str	r3, [r7, #20]
			break;
 8006c10:	e030      	b.n	8006c74 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	899b      	ldrh	r3, [r3, #12]
 8006c1a:	089b      	lsrs	r3, r3, #2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c26:	4413      	add	r3, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f7ff fe96 	bl	800695c <move_window>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d11d      	bne.n	8006c72 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	8992      	ldrh	r2, [r2, #12]
 8006c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c48:	fb02 f200 	mul.w	r2, r2, r0
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	440b      	add	r3, r1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fbb9 	bl	80063c8 <ld_dword>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c5c:	617b      	str	r3, [r7, #20]
			break;
 8006c5e:	e009      	b.n	8006c74 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c60:	2301      	movs	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	e006      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c66:	bf00      	nop
 8006c68:	e004      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c6a:	bf00      	nop
 8006c6c:	e002      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c6e:	bf00      	nop
 8006c70:	e000      	b.n	8006c74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c72:	bf00      	nop
		}
	}

	return val;
 8006c74:	697b      	ldr	r3, [r7, #20]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c7e:	b590      	push	{r4, r7, lr}
 8006c80:	b089      	sub	sp, #36	; 0x24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f240 8102 	bls.w	8006e9a <put_fat+0x21c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	f080 80fc 	bcs.w	8006e9a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f000 80b6 	beq.w	8006e18 <put_fat+0x19a>
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	f300 80fd 	bgt.w	8006eac <put_fat+0x22e>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d003      	beq.n	8006cbe <put_fat+0x40>
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	f000 8083 	beq.w	8006dc2 <put_fat+0x144>
 8006cbc:	e0f6      	b.n	8006eac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4413      	add	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	899b      	ldrh	r3, [r3, #12]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cdc:	4413      	add	r3, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fe3b 	bl	800695c <move_window>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cea:	7ffb      	ldrb	r3, [r7, #31]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 80d6 	bne.w	8006e9e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	61ba      	str	r2, [r7, #24]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	8992      	ldrh	r2, [r2, #12]
 8006d02:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d06:	fb02 f200 	mul.w	r2, r2, r0
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00d      	beq.n	8006d36 <put_fat+0xb8>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	b25a      	sxtb	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	e001      	b.n	8006d3a <put_fat+0xbc>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	899b      	ldrh	r3, [r3, #12]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d54:	4413      	add	r3, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fdff 	bl	800695c <move_window>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 809c 	bne.w	8006ea2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	899b      	ldrh	r3, [r3, #12]
 8006d74:	461a      	mov	r2, r3
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d7c:	fb02 f200 	mul.w	r2, r2, r0
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	440b      	add	r3, r1
 8006d84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <put_fat+0x11a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	e00e      	b.n	8006db6 <put_fat+0x138>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	f023 030f 	bic.w	r3, r3, #15
 8006da2:	b25a      	sxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b25b      	sxtb	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	70da      	strb	r2, [r3, #3]
			break;
 8006dc0:	e074      	b.n	8006eac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	899b      	ldrh	r3, [r3, #12]
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fdbe 	bl	800695c <move_window>
 8006de0:	4603      	mov	r3, r0
 8006de2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006de4:	7ffb      	ldrb	r3, [r7, #31]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d15d      	bne.n	8006ea6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	8992      	ldrh	r2, [r2, #12]
 8006df8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dfc:	fb02 f200 	mul.w	r2, r2, r0
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	440b      	add	r3, r1
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	b292      	uxth	r2, r2
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff faff 	bl	800640e <st_word>
			fs->wflag = 1;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	70da      	strb	r2, [r3, #3]
			break;
 8006e16:	e049      	b.n	8006eac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	899b      	ldrh	r3, [r3, #12]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fd93 	bl	800695c <move_window>
 8006e36:	4603      	mov	r3, r0
 8006e38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d134      	bne.n	8006eaa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	8992      	ldrh	r2, [r2, #12]
 8006e54:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e58:	fb02 f200 	mul.w	r2, r2, r0
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	440b      	add	r3, r1
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fab1 	bl	80063c8 <ld_dword>
 8006e66:	4603      	mov	r3, r0
 8006e68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e6c:	4323      	orrs	r3, r4
 8006e6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	8992      	ldrh	r2, [r2, #12]
 8006e7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e82:	fb02 f200 	mul.w	r2, r2, r0
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	440b      	add	r3, r1
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fad9 	bl	8006444 <st_dword>
			fs->wflag = 1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	70da      	strb	r2, [r3, #3]
			break;
 8006e98:	e008      	b.n	8006eac <put_fat+0x22e>
		}
	}
 8006e9a:	bf00      	nop
 8006e9c:	e006      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e9e:	bf00      	nop
 8006ea0:	e004      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ea2:	bf00      	nop
 8006ea4:	e002      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <put_fat+0x22e>
			if (res != FR_OK) break;
 8006eaa:	bf00      	nop
	return res;
 8006eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	; 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd90      	pop	{r4, r7, pc}

08006eb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b088      	sub	sp, #32
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d904      	bls.n	8006edc <remove_chain+0x26>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d301      	bcc.n	8006ee0 <remove_chain+0x2a>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e04b      	b.n	8006f78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	69b8      	ldr	r0, [r7, #24]
 8006eee:	f7ff fec6 	bl	8006c7e <put_fat>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ef6:	7ffb      	ldrb	r3, [r7, #31]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <remove_chain+0x4a>
 8006efc:	7ffb      	ldrb	r3, [r7, #31]
 8006efe:	e03b      	b.n	8006f78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fde7 	bl	8006ad6 <get_fat>
 8006f08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d031      	beq.n	8006f74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <remove_chain+0x64>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e02e      	b.n	8006f78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f20:	d101      	bne.n	8006f26 <remove_chain+0x70>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e028      	b.n	8006f78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f26:	2200      	movs	r2, #0
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	69b8      	ldr	r0, [r7, #24]
 8006f2c:	f7ff fea7 	bl	8006c7e <put_fat>
 8006f30:	4603      	mov	r3, r0
 8006f32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <remove_chain+0x88>
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	e01c      	b.n	8006f78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	3b02      	subs	r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d20b      	bcs.n	8006f64 <remove_chain+0xae>
			fs->free_clst++;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	791b      	ldrb	r3, [r3, #4]
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3c6      	bcc.n	8006f00 <remove_chain+0x4a>
 8006f72:	e000      	b.n	8006f76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10d      	bne.n	8006fb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <create_chain+0x2c>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d31b      	bcc.n	8006fe4 <create_chain+0x64>
 8006fac:	2301      	movs	r3, #1
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e018      	b.n	8006fe4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fd8e 	bl	8006ad6 <get_fat>
 8006fba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d801      	bhi.n	8006fc6 <create_chain+0x46>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e070      	b.n	80070a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fcc:	d101      	bne.n	8006fd2 <create_chain+0x52>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	e06a      	b.n	80070a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d201      	bcs.n	8006fe0 <create_chain+0x60>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	e063      	b.n	80070a8 <create_chain+0x128>
		scl = clst;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	3301      	adds	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d307      	bcc.n	8007008 <create_chain+0x88>
				ncl = 2;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	429a      	cmp	r2, r3
 8007002:	d901      	bls.n	8007008 <create_chain+0x88>
 8007004:	2300      	movs	r3, #0
 8007006:	e04f      	b.n	80070a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007008:	69f9      	ldr	r1, [r7, #28]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fd63 	bl	8006ad6 <get_fat>
 8007010:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d003      	beq.n	8007026 <create_chain+0xa6>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d101      	bne.n	800702a <create_chain+0xaa>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	e03e      	b.n	80070a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	429a      	cmp	r2, r3
 8007030:	d1da      	bne.n	8006fe8 <create_chain+0x68>
 8007032:	2300      	movs	r3, #0
 8007034:	e038      	b.n	80070a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007036:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	6938      	ldr	r0, [r7, #16]
 8007040:	f7ff fe1d 	bl	8006c7e <put_fat>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <create_chain+0xe2>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6938      	ldr	r0, [r7, #16]
 800705a:	f7ff fe10 	bl	8006c7e <put_fat>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d116      	bne.n	8007096 <create_chain+0x116>
		fs->last_clst = ncl;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	69da      	ldr	r2, [r3, #28]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	3b02      	subs	r3, #2
 8007078:	429a      	cmp	r2, r3
 800707a:	d804      	bhi.n	8007086 <create_chain+0x106>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	791b      	ldrb	r3, [r3, #4]
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	711a      	strb	r2, [r3, #4]
 8007094:	e007      	b.n	80070a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d102      	bne.n	80070a2 <create_chain+0x122>
 800709c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070a0:	e000      	b.n	80070a4 <create_chain+0x124>
 80070a2:	2301      	movs	r3, #1
 80070a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070a6:	69fb      	ldr	r3, [r7, #28]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	3304      	adds	r3, #4
 80070c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	899b      	ldrh	r3, [r3, #12]
 80070cc:	461a      	mov	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	8952      	ldrh	r2, [r2, #10]
 80070d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	613a      	str	r2, [r7, #16]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <clmt_clust+0x42>
 80070ee:	2300      	movs	r3, #0
 80070f0:	e010      	b.n	8007114 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d307      	bcc.n	800710a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3304      	adds	r3, #4
 8007106:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007108:	e7e9      	b.n	80070de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800710a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	4413      	add	r3, r2
}
 8007114:	4618      	mov	r0, r3
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007136:	d204      	bcs.n	8007142 <dir_sdi+0x22>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007142:	2302      	movs	r3, #2
 8007144:	e071      	b.n	800722a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <dir_sdi+0x46>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d902      	bls.n	8007166 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10c      	bne.n	8007186 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	8912      	ldrh	r2, [r2, #8]
 8007174:	4293      	cmp	r3, r2
 8007176:	d301      	bcc.n	800717c <dir_sdi+0x5c>
 8007178:	2302      	movs	r3, #2
 800717a:	e056      	b.n	800722a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61da      	str	r2, [r3, #28]
 8007184:	e02d      	b.n	80071e2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	895b      	ldrh	r3, [r3, #10]
 800718a:	461a      	mov	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	899b      	ldrh	r3, [r3, #12]
 8007190:	fb03 f302 	mul.w	r3, r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007196:	e019      	b.n	80071cc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fc9a 	bl	8006ad6 <get_fat>
 80071a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071aa:	d101      	bne.n	80071b0 <dir_sdi+0x90>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e03c      	b.n	800722a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d904      	bls.n	80071c0 <dir_sdi+0xa0>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d301      	bcc.n	80071c4 <dir_sdi+0xa4>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e032      	b.n	800722a <dir_sdi+0x10a>
			ofs -= csz;
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d2e1      	bcs.n	8007198 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071d4:	6979      	ldr	r1, [r7, #20]
 80071d6:	6938      	ldr	r0, [r7, #16]
 80071d8:	f7ff fc5e 	bl	8006a98 <clust2sect>
 80071dc:	4602      	mov	r2, r0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <dir_sdi+0xd4>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e01a      	b.n	800722a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	899b      	ldrh	r3, [r3, #12]
 80071fc:	4619      	mov	r1, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	fbb3 f3f1 	udiv	r3, r3, r1
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	899b      	ldrh	r3, [r3, #12]
 8007214:	461a      	mov	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	fbb3 f0f2 	udiv	r0, r3, r2
 800721c:	fb02 f200 	mul.w	r2, r2, r0
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	18ca      	adds	r2, r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	3320      	adds	r3, #32
 8007248:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <dir_next+0x28>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007258:	d301      	bcc.n	800725e <dir_next+0x2c>
 800725a:	2304      	movs	r3, #4
 800725c:	e0bb      	b.n	80073d6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	899b      	ldrh	r3, [r3, #12]
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	fbb3 f1f2 	udiv	r1, r3, r2
 800726a:	fb02 f201 	mul.w	r2, r2, r1
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 809d 	bne.w	80073b0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	8912      	ldrh	r2, [r2, #8]
 8007290:	4293      	cmp	r3, r2
 8007292:	f0c0 808d 	bcc.w	80073b0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	61da      	str	r2, [r3, #28]
 800729c:	2304      	movs	r3, #4
 800729e:	e09a      	b.n	80073d6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	899b      	ldrh	r3, [r3, #12]
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8952      	ldrh	r2, [r2, #10]
 80072b0:	3a01      	subs	r2, #1
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d17b      	bne.n	80073b0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7ff fc08 	bl	8006ad6 <get_fat>
 80072c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d801      	bhi.n	80072d2 <dir_next+0xa0>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e081      	b.n	80073d6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d8:	d101      	bne.n	80072de <dir_next+0xac>
 80072da:	2301      	movs	r3, #1
 80072dc:	e07b      	b.n	80073d6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d359      	bcc.n	800739c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	61da      	str	r2, [r3, #28]
 80072f4:	2304      	movs	r3, #4
 80072f6:	e06e      	b.n	80073d6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7ff fe3d 	bl	8006f80 <create_chain>
 8007306:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <dir_next+0xe0>
 800730e:	2307      	movs	r3, #7
 8007310:	e061      	b.n	80073d6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <dir_next+0xea>
 8007318:	2302      	movs	r3, #2
 800731a:	e05c      	b.n	80073d6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007322:	d101      	bne.n	8007328 <dir_next+0xf6>
 8007324:	2301      	movs	r3, #1
 8007326:	e056      	b.n	80073d6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fad3 	bl	80068d4 <sync_window>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <dir_next+0x106>
 8007334:	2301      	movs	r3, #1
 8007336:	e04e      	b.n	80073d6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	899b      	ldrh	r3, [r3, #12]
 8007342:	461a      	mov	r2, r3
 8007344:	2100      	movs	r1, #0
 8007346:	f7ff f8ca 	bl	80064de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	6979      	ldr	r1, [r7, #20]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff fba1 	bl	8006a98 <clust2sect>
 8007356:	4602      	mov	r2, r0
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
 800735c:	e012      	b.n	8007384 <dir_next+0x152>
						fs->wflag = 1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff fab5 	bl	80068d4 <sync_window>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <dir_next+0x142>
 8007370:	2301      	movs	r3, #1
 8007372:	e030      	b.n	80073d6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	3301      	adds	r3, #1
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	895b      	ldrh	r3, [r3, #10]
 8007388:	461a      	mov	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	4293      	cmp	r3, r2
 800738e:	d3e6      	bcc.n	800735e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fb77 	bl	8006a98 <clust2sect>
 80073aa:	4602      	mov	r2, r0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	899b      	ldrh	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073c8:	fb02 f200 	mul.w	r2, r2, r0
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	18ca      	adds	r2, r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073ee:	2100      	movs	r1, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fe95 	bl	8007120 <dir_sdi>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d12b      	bne.n	8007458 <dir_alloc+0x7a>
		n = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff faa6 	bl	800695c <move_window>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d11d      	bne.n	8007456 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2be5      	cmp	r3, #229	; 0xe5
 8007422:	d004      	beq.n	800742e <dir_alloc+0x50>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3301      	adds	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d102      	bne.n	8007442 <dir_alloc+0x64>
 800743c:	e00c      	b.n	8007458 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007442:	2101      	movs	r1, #1
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff fef4 	bl	8007232 <dir_next>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0d7      	beq.n	8007404 <dir_alloc+0x26>
 8007454:	e000      	b.n	8007458 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007456:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b04      	cmp	r3, #4
 800745c:	d101      	bne.n	8007462 <dir_alloc+0x84>
 800745e:	2307      	movs	r3, #7
 8007460:	75fb      	strb	r3, [r7, #23]
	return res;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	331a      	adds	r3, #26
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe ff8c 	bl	8006398 <ld_word>
 8007480:	4603      	mov	r3, r0
 8007482:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d109      	bne.n	80074a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe ff81 	bl	8006398 <ld_word>
 8007496:	4603      	mov	r3, r0
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074a0:	68fb      	ldr	r3, [r7, #12]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	331a      	adds	r3, #26
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	b292      	uxth	r2, r2
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ffa4 	bl	800640e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d109      	bne.n	80074e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f103 0214 	add.w	r2, r3, #20
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7fe ff96 	bl	800640e <st_word>
	}
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	331a      	adds	r3, #26
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe ff4c 	bl	8006398 <ld_word>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <cmp_lfn+0x1e>
 8007506:	2300      	movs	r3, #0
 8007508:	e059      	b.n	80075be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	4613      	mov	r3, r2
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007520:	2301      	movs	r3, #1
 8007522:	81fb      	strh	r3, [r7, #14]
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	e033      	b.n	8007592 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800752a:	4a27      	ldr	r2, [pc, #156]	; (80075c8 <cmp_lfn+0xdc>)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4413      	add	r3, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe ff2d 	bl	8006398 <ld_word>
 800753e:	4603      	mov	r3, r0
 8007540:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2bfe      	cmp	r3, #254	; 0xfe
 800754c:	d812      	bhi.n	8007574 <cmp_lfn+0x88>
 800754e:	89bb      	ldrh	r3, [r7, #12]
 8007550:	4618      	mov	r0, r3
 8007552:	f002 f93b 	bl	80097cc <ff_wtoupper>
 8007556:	4603      	mov	r3, r0
 8007558:	461c      	mov	r4, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	617a      	str	r2, [r7, #20]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f002 f92f 	bl	80097cc <ff_wtoupper>
 800756e:	4603      	mov	r3, r0
 8007570:	429c      	cmp	r4, r3
 8007572:	d001      	beq.n	8007578 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007574:	2300      	movs	r3, #0
 8007576:	e022      	b.n	80075be <cmp_lfn+0xd2>
			}
			wc = uc;
 8007578:	89bb      	ldrh	r3, [r7, #12]
 800757a:	81fb      	strh	r3, [r7, #14]
 800757c:	e006      	b.n	800758c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800757e:	89bb      	ldrh	r3, [r7, #12]
 8007580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007584:	4293      	cmp	r3, r2
 8007586:	d001      	beq.n	800758c <cmp_lfn+0xa0>
 8007588:	2300      	movs	r3, #0
 800758a:	e018      	b.n	80075be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3301      	adds	r3, #1
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d9c8      	bls.n	800752a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <cmp_lfn+0xd0>
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <cmp_lfn+0xd0>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <cmp_lfn+0xd0>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e000      	b.n	80075be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075bc:	2301      	movs	r3, #1
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800d4d0 	.word	0x0800d4d0

080075cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	460b      	mov	r3, r1
 80075dc:	71fb      	strb	r3, [r7, #7]
 80075de:	4613      	mov	r3, r2
 80075e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	330d      	adds	r3, #13
 80075e6:	79ba      	ldrb	r2, [r7, #6]
 80075e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	330b      	adds	r3, #11
 80075ee:	220f      	movs	r2, #15
 80075f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	330c      	adds	r3, #12
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	331a      	adds	r3, #26
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe ff04 	bl	800640e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	4613      	mov	r3, r2
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	82fb      	strh	r3, [r7, #22]
 800761a:	2300      	movs	r3, #0
 800761c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800761e:	8afb      	ldrh	r3, [r7, #22]
 8007620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <put_lfn+0x6c>
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007638:	4a17      	ldr	r2, [pc, #92]	; (8007698 <put_lfn+0xcc>)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	4413      	add	r3, r2
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4413      	add	r3, r2
 8007646:	8afa      	ldrh	r2, [r7, #22]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fedf 	bl	800640e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007650:	8afb      	ldrh	r3, [r7, #22]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <put_lfn+0x90>
 8007656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800765a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	3301      	adds	r3, #1
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d9da      	bls.n	800761e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007668:	8afb      	ldrh	r3, [r7, #22]
 800766a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800766e:	4293      	cmp	r3, r2
 8007670:	d006      	beq.n	8007680 <put_lfn+0xb4>
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d103      	bne.n	8007688 <put_lfn+0xbc>
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007686:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	79fa      	ldrb	r2, [r7, #7]
 800768c:	701a      	strb	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	0800d4d0 	.word	0x0800d4d0

0800769c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08c      	sub	sp, #48	; 0x30
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076aa:	220b      	movs	r2, #11
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7fe fef4 	bl	800649c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	d92b      	bls.n	8007712 <gen_numname+0x76>
		sr = seq;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076be:	e022      	b.n	8007706 <gen_numname+0x6a>
			wc = *lfn++;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	1c9a      	adds	r2, r3, #2
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076ca:	2300      	movs	r3, #0
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ce:	e017      	b.n	8007700 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	005a      	lsls	r2, r3, #1
 80076d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	4413      	add	r3, r2
 80076dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <gen_numname+0x5e>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076f4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	3301      	adds	r3, #1
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d9e4      	bls.n	80076d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1d8      	bne.n	80076c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007712:	2307      	movs	r3, #7
 8007714:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	b2db      	uxtb	r3, r3
 8007720:	3330      	adds	r3, #48	; 0x30
 8007722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800772a:	2b39      	cmp	r3, #57	; 0x39
 800772c:	d904      	bls.n	8007738 <gen_numname+0x9c>
 800772e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007732:	3307      	adds	r3, #7
 8007734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	1e5a      	subs	r2, r3, #1
 800773c:	62ba      	str	r2, [r7, #40]	; 0x28
 800773e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007742:	4413      	add	r3, r2
 8007744:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007748:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1de      	bne.n	8007716 <gen_numname+0x7a>
	ns[i] = '~';
 8007758:	f107 0214 	add.w	r2, r7, #20
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	4413      	add	r3, r2
 8007760:	227e      	movs	r2, #126	; 0x7e
 8007762:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
 8007768:	e002      	b.n	8007770 <gen_numname+0xd4>
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	3301      	adds	r3, #1
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	429a      	cmp	r2, r3
 8007776:	d205      	bcs.n	8007784 <gen_numname+0xe8>
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b20      	cmp	r3, #32
 8007782:	d1f2      	bne.n	800776a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2b07      	cmp	r3, #7
 8007788:	d808      	bhi.n	800779c <gen_numname+0x100>
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007790:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007794:	4413      	add	r3, r2
 8007796:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800779a:	e000      	b.n	800779e <gen_numname+0x102>
 800779c:	2120      	movs	r1, #32
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	627a      	str	r2, [r7, #36]	; 0x24
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	460a      	mov	r2, r1
 80077aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2b07      	cmp	r3, #7
 80077b0:	d9e8      	bls.n	8007784 <gen_numname+0xe8>
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	3730      	adds	r7, #48	; 0x30
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077c8:	230b      	movs	r3, #11
 80077ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	0852      	lsrs	r2, r2, #1
 80077d2:	01db      	lsls	r3, r3, #7
 80077d4:	4313      	orrs	r3, r2
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	6079      	str	r1, [r7, #4]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	4413      	add	r3, r2
 80077e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1ed      	bne.n	80077cc <sum_sfn+0x10>
	return sum;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fc86 	bl	8007120 <dir_sdi>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <dir_find+0x24>
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	e0a9      	b.n	8007976 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007822:	23ff      	movs	r3, #255	; 0xff
 8007824:	753b      	strb	r3, [r7, #20]
 8007826:	7d3b      	ldrb	r3, [r7, #20]
 8007828:	757b      	strb	r3, [r7, #21]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007830:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	4619      	mov	r1, r3
 8007838:	6938      	ldr	r0, [r7, #16]
 800783a:	f7ff f88f 	bl	800695c <move_window>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 8090 	bne.w	800796a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007852:	7dbb      	ldrb	r3, [r7, #22]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <dir_find+0x60>
 8007858:	2304      	movs	r3, #4
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	e08a      	b.n	8007974 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	330b      	adds	r3, #11
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7bfa      	ldrb	r2, [r7, #15]
 8007870:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007872:	7dbb      	ldrb	r3, [r7, #22]
 8007874:	2be5      	cmp	r3, #229	; 0xe5
 8007876:	d007      	beq.n	8007888 <dir_find+0x8a>
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <dir_find+0x98>
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b0f      	cmp	r3, #15
 8007886:	d006      	beq.n	8007896 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007888:	23ff      	movs	r3, #255	; 0xff
 800788a:	757b      	strb	r3, [r7, #21]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
 8007894:	e05e      	b.n	8007954 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b0f      	cmp	r3, #15
 800789a:	d136      	bne.n	800790a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d154      	bne.n	8007954 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078aa:	7dbb      	ldrb	r3, [r7, #22]
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078bc:	7dbb      	ldrb	r3, [r7, #22]
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	75bb      	strb	r3, [r7, #22]
 80078c4:	7dbb      	ldrb	r3, [r7, #22]
 80078c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695a      	ldr	r2, [r3, #20]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078d0:	7dba      	ldrb	r2, [r7, #22]
 80078d2:	7d7b      	ldrb	r3, [r7, #21]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d115      	bne.n	8007904 <dir_find+0x106>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	330d      	adds	r3, #13
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	7d3a      	ldrb	r2, [r7, #20]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d10e      	bne.n	8007904 <dir_find+0x106>
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f7ff fdfb 	bl	80074ec <cmp_lfn>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <dir_find+0x106>
 80078fc:	7d7b      	ldrb	r3, [r7, #21]
 80078fe:	3b01      	subs	r3, #1
 8007900:	b2db      	uxtb	r3, r3
 8007902:	e000      	b.n	8007906 <dir_find+0x108>
 8007904:	23ff      	movs	r3, #255	; 0xff
 8007906:	757b      	strb	r3, [r7, #21]
 8007908:	e024      	b.n	8007954 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800790a:	7d7b      	ldrb	r3, [r7, #21]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <dir_find+0x126>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff ff51 	bl	80077bc <sum_sfn>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	7d3b      	ldrb	r3, [r7, #20]
 8007920:	4293      	cmp	r3, r2
 8007922:	d024      	beq.n	800796e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <dir_find+0x14a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a18      	ldr	r0, [r3, #32]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3324      	adds	r3, #36	; 0x24
 800793a:	220b      	movs	r2, #11
 800793c:	4619      	mov	r1, r3
 800793e:	f7fe fde9 	bl	8006514 <mem_cmp>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d014      	beq.n	8007972 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007948:	23ff      	movs	r3, #255	; 0xff
 800794a:	757b      	strb	r3, [r7, #21]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007954:	2100      	movs	r1, #0
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fc6b 	bl	8007232 <dir_next>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	2b00      	cmp	r3, #0
 8007964:	f43f af65 	beq.w	8007832 <dir_find+0x34>
 8007968:	e004      	b.n	8007974 <dir_find+0x176>
		if (res != FR_OK) break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007972:	bf00      	nop

	return res;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	; 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007994:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <dir_register+0x20>
 800799c:	2306      	movs	r3, #6
 800799e:	e0e0      	b.n	8007b62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80079a0:	2300      	movs	r3, #0
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
 80079a4:	e002      	b.n	80079ac <dir_register+0x2c>
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	3301      	adds	r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f4      	bne.n	80079a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	220c      	movs	r2, #12
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fd67 	bl	800649c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d032      	beq.n	8007a3e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2240      	movs	r2, #64	; 0x40
 80079dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079e0:	2301      	movs	r3, #1
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e4:	e016      	b.n	8007a14 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	f107 010c 	add.w	r1, r7, #12
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f7ff fe51 	bl	800769c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff feff 	bl	80077fe <dir_find>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	3301      	adds	r3, #1
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	2b63      	cmp	r3, #99	; 0x63
 8007a18:	d9e5      	bls.n	80079e6 <dir_register+0x66>
 8007a1a:	e000      	b.n	8007a1e <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a1c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	2b64      	cmp	r3, #100	; 0x64
 8007a22:	d101      	bne.n	8007a28 <dir_register+0xa8>
 8007a24:	2307      	movs	r3, #7
 8007a26:	e09c      	b.n	8007b62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d002      	beq.n	8007a36 <dir_register+0xb6>
 8007a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a34:	e095      	b.n	8007b62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a36:	7dfa      	ldrb	r2, [r7, #23]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <dir_register+0xd8>
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	4a47      	ldr	r2, [pc, #284]	; (8007b6c <dir_register+0x1ec>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	089b      	lsrs	r3, r3, #2
 8007a54:	3301      	adds	r3, #1
 8007a56:	e000      	b.n	8007a5a <dir_register+0xda>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a5c:	6a39      	ldr	r1, [r7, #32]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fcbd 	bl	80073de <dir_alloc>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d148      	bne.n	8007b04 <dir_register+0x184>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	623b      	str	r3, [r7, #32]
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d042      	beq.n	8007b04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	015b      	lsls	r3, r3, #5
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fb48 	bl	8007120 <dir_sdi>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d132      	bne.n	8007b04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3324      	adds	r3, #36	; 0x24
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fe8a 	bl	80077bc <sum_sfn>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	69f8      	ldr	r0, [r7, #28]
 8007ab4:	f7fe ff52 	bl	800695c <move_window>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d11d      	bne.n	8007b02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	6918      	ldr	r0, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a19      	ldr	r1, [r3, #32]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7efb      	ldrb	r3, [r7, #27]
 8007ad4:	f7ff fd7a 	bl	80075cc <put_lfn>
				fs->wflag = 1;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2201      	movs	r2, #1
 8007adc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fba6 	bl	8007232 <dir_next>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d107      	bne.n	8007b04 <dir_register+0x184>
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	623b      	str	r3, [r7, #32]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1d5      	bne.n	8007aac <dir_register+0x12c>
 8007b00:	e000      	b.n	8007b04 <dir_register+0x184>
				if (res != FR_OK) break;
 8007b02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d128      	bne.n	8007b5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	4619      	mov	r1, r3
 8007b12:	69f8      	ldr	r0, [r7, #28]
 8007b14:	f7fe ff22 	bl	800695c <move_window>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d11b      	bne.n	8007b5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fcd5 	bl	80064de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a18      	ldr	r0, [r3, #32]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3324      	adds	r3, #36	; 0x24
 8007b3c:	220b      	movs	r2, #11
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7fe fcac 	bl	800649c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	f002 0218 	and.w	r2, r2, #24
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3730      	adds	r7, #48	; 0x30
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	4ec4ec4f 	.word	0x4ec4ec4f

08007b70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80c9 	beq.w	8007d22 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b98:	d032      	beq.n	8007c00 <get_fileinfo+0x90>
			i = j = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007ba2:	e01b      	b.n	8007bdc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007ba4:	89fb      	ldrh	r3, [r7, #14]
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fdd3 	bl	8009754 <ff_convert>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <get_fileinfo+0x4e>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61fb      	str	r3, [r7, #28]
 8007bbc:	e01a      	b.n	8007bf4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8007bc2:	d902      	bls.n	8007bca <get_fileinfo+0x5a>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e014      	b.n	8007bf4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	61fa      	str	r2, [r7, #28]
 8007bd0:	89fa      	ldrh	r2, [r7, #14]
 8007bd2:	b2d1      	uxtb	r1, r2
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	460a      	mov	r2, r1
 8007bda:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	1c59      	adds	r1, r3, #1
 8007be4:	61b9      	str	r1, [r7, #24]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	81fb      	strh	r3, [r7, #14]
 8007bee:	89fb      	ldrh	r3, [r7, #14]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1d7      	bne.n	8007ba4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3316      	adds	r3, #22
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3316      	adds	r3, #22
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007c14:	e04c      	b.n	8007cb0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	61f9      	str	r1, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d100      	bne.n	8007c2e <get_fileinfo+0xbe>
 8007c2c:	e040      	b.n	8007cb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	d101      	bne.n	8007c38 <get_fileinfo+0xc8>
 8007c34:	23e5      	movs	r3, #229	; 0xe5
 8007c36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b09      	cmp	r3, #9
 8007c3c:	d10f      	bne.n	8007c5e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007c3e:	89bb      	ldrh	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <get_fileinfo+0xe0>
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	4413      	add	r3, r2
 8007c4a:	3316      	adds	r3, #22
 8007c4c:	222e      	movs	r2, #46	; 0x2e
 8007c4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	61ba      	str	r2, [r7, #24]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	222e      	movs	r2, #46	; 0x2e
 8007c5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	4413      	add	r3, r2
 8007c64:	3309      	adds	r3, #9
 8007c66:	7dfa      	ldrb	r2, [r7, #23]
 8007c68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007c6a:	89bb      	ldrh	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d11c      	bne.n	8007caa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d913      	bls.n	8007c9e <get_fileinfo+0x12e>
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b5a      	cmp	r3, #90	; 0x5a
 8007c7a:	d810      	bhi.n	8007c9e <get_fileinfo+0x12e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	330c      	adds	r3, #12
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d901      	bls.n	8007c90 <get_fileinfo+0x120>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	e000      	b.n	8007c92 <get_fileinfo+0x122>
 8007c90:	2308      	movs	r3, #8
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	3320      	adds	r3, #32
 8007c9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3316      	adds	r3, #22
 8007ca6:	7dfa      	ldrb	r2, [r7, #23]
 8007ca8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	3301      	adds	r3, #1
 8007cae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2b0a      	cmp	r3, #10
 8007cb4:	d9af      	bls.n	8007c16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007cb6:	89bb      	ldrh	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3316      	adds	r3, #22
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <get_fileinfo+0x168>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	4413      	add	r3, r2
 8007cde:	3309      	adds	r3, #9
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	7ada      	ldrb	r2, [r3, #11]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	331c      	adds	r3, #28
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fb67 	bl	80063c8 <ld_dword>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	3316      	adds	r3, #22
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fb5e 	bl	80063c8 <ld_dword>
 8007d0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	80da      	strh	r2, [r3, #6]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	0c1b      	lsrs	r3, r3, #16
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	809a      	strh	r2, [r3, #4]
 8007d20:	e000      	b.n	8007d24 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007d22:	bf00      	nop
}
 8007d24:	3720      	adds	r7, #32
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	61ba      	str	r2, [r7, #24]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d5c:	2b1f      	cmp	r3, #31
 8007d5e:	d940      	bls.n	8007de2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d62:	2b2f      	cmp	r3, #47	; 0x2f
 8007d64:	d006      	beq.n	8007d74 <create_name+0x48>
 8007d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d68:	2b5c      	cmp	r3, #92	; 0x5c
 8007d6a:	d110      	bne.n	8007d8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d6c:	e002      	b.n	8007d74 <create_name+0x48>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	3301      	adds	r3, #1
 8007d72:	61bb      	str	r3, [r7, #24]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	4413      	add	r3, r2
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8007d7e:	d0f6      	beq.n	8007d6e <create_name+0x42>
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	4413      	add	r3, r2
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b5c      	cmp	r3, #92	; 0x5c
 8007d8a:	d0f0      	beq.n	8007d6e <create_name+0x42>
			break;
 8007d8c:	e02a      	b.n	8007de4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2bfe      	cmp	r3, #254	; 0xfe
 8007d92:	d901      	bls.n	8007d98 <create_name+0x6c>
 8007d94:	2306      	movs	r3, #6
 8007d96:	e177      	b.n	8008088 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007da0:	2101      	movs	r1, #1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fcd6 	bl	8009754 <ff_convert>
 8007da8:	4603      	mov	r3, r0
 8007daa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <create_name+0x8a>
 8007db2:	2306      	movs	r3, #6
 8007db4:	e168      	b.n	8008088 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db8:	2b7f      	cmp	r3, #127	; 0x7f
 8007dba:	d809      	bhi.n	8007dd0 <create_name+0xa4>
 8007dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	48b3      	ldr	r0, [pc, #716]	; (8008090 <create_name+0x364>)
 8007dc2:	f7fe fbce 	bl	8006562 <chk_chr>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <create_name+0xa4>
 8007dcc:	2306      	movs	r3, #6
 8007dce:	e15b      	b.n	8008088 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	617a      	str	r2, [r7, #20]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007dde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007de0:	e7b4      	b.n	8007d4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007de2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	441a      	add	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df0:	2b1f      	cmp	r3, #31
 8007df2:	d801      	bhi.n	8007df8 <create_name+0xcc>
 8007df4:	2304      	movs	r3, #4
 8007df6:	e000      	b.n	8007dfa <create_name+0xce>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007dfe:	e011      	b.n	8007e24 <create_name+0xf8>
		w = lfn[di - 1];
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e06:	3b01      	subs	r3, #1
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d002      	beq.n	8007e1e <create_name+0xf2>
 8007e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e1c:	d106      	bne.n	8007e2c <create_name+0x100>
		di--;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1ea      	bne.n	8007e00 <create_name+0xd4>
 8007e2a:	e000      	b.n	8007e2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007e2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <create_name+0x118>
 8007e40:	2306      	movs	r3, #6
 8007e42:	e121      	b.n	8008088 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3324      	adds	r3, #36	; 0x24
 8007e48:	220b      	movs	r2, #11
 8007e4a:	2120      	movs	r1, #32
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fb46 	bl	80064de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007e52:	2300      	movs	r3, #0
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	e002      	b.n	8007e5e <create_name+0x132>
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d0f5      	beq.n	8007e58 <create_name+0x12c>
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	2b2e      	cmp	r3, #46	; 0x2e
 8007e78:	d0ee      	beq.n	8007e58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <create_name+0x168>
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e84:	f043 0303 	orr.w	r3, r3, #3
 8007e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007e8c:	e002      	b.n	8007e94 <create_name+0x168>
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <create_name+0x182>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8007eac:	d1ef      	bne.n	8007e8e <create_name+0x162>

	i = b = 0; ni = 8;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	623b      	str	r3, [r7, #32]
 8007eb8:	2308      	movs	r3, #8
 8007eba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	61ba      	str	r2, [r7, #24]
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8090 	beq.w	8007ff4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d006      	beq.n	8007ee8 <create_name+0x1bc>
 8007eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007edc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ede:	d10a      	bne.n	8007ef6 <create_name+0x1ca>
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d006      	beq.n	8007ef6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eec:	f043 0303 	orr.w	r3, r3, #3
 8007ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ef4:	e07d      	b.n	8007ff2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ef6:	6a3a      	ldr	r2, [r7, #32]
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d203      	bcs.n	8007f06 <create_name+0x1da>
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d123      	bne.n	8007f4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b0b      	cmp	r3, #11
 8007f0a:	d106      	bne.n	8007f1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f10:	f043 0303 	orr.w	r3, r3, #3
 8007f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f18:	e06f      	b.n	8007ffa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d005      	beq.n	8007f2e <create_name+0x202>
 8007f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f26:	f043 0303 	orr.w	r3, r3, #3
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d860      	bhi.n	8007ff8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	230b      	movs	r3, #11
 8007f40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007f42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f4c:	e051      	b.n	8007ff2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f50:	2b7f      	cmp	r3, #127	; 0x7f
 8007f52:	d914      	bls.n	8007f7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007f54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f001 fbfb 	bl	8009754 <ff_convert>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <create_name+0x246>
 8007f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f6a:	3b80      	subs	r3, #128	; 0x80
 8007f6c:	4a49      	ldr	r2, [pc, #292]	; (8008094 <create_name+0x368>)
 8007f6e:	5cd3      	ldrb	r3, [r2, r3]
 8007f70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f76:	f043 0302 	orr.w	r3, r3, #2
 8007f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <create_name+0x268>
 8007f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f86:	4619      	mov	r1, r3
 8007f88:	4843      	ldr	r0, [pc, #268]	; (8008098 <create_name+0x36c>)
 8007f8a:	f7fe faea 	bl	8006562 <chk_chr>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f94:	235f      	movs	r3, #95	; 0x5f
 8007f96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f9c:	f043 0303 	orr.w	r3, r3, #3
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fa4:	e01b      	b.n	8007fde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007fa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d909      	bls.n	8007fc0 <create_name+0x294>
 8007fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fae:	2b5a      	cmp	r3, #90	; 0x5a
 8007fb0:	d806      	bhi.n	8007fc0 <create_name+0x294>
					b |= 2;
 8007fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fb6:	f043 0302 	orr.w	r3, r3, #2
 8007fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fbe:	e00e      	b.n	8007fde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc2:	2b60      	cmp	r3, #96	; 0x60
 8007fc4:	d90b      	bls.n	8007fde <create_name+0x2b2>
 8007fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc8:	2b7a      	cmp	r3, #122	; 0x7a
 8007fca:	d808      	bhi.n	8007fde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fda:	3b20      	subs	r3, #32
 8007fdc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	623a      	str	r2, [r7, #32]
 8007fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fe6:	b2d1      	uxtb	r1, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	4413      	add	r3, r2
 8007fec:	460a      	mov	r2, r1
 8007fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007ff2:	e763      	b.n	8007ebc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007ff4:	bf00      	nop
 8007ff6:	e000      	b.n	8007ffa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007ff8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008000:	2be5      	cmp	r3, #229	; 0xe5
 8008002:	d103      	bne.n	800800c <create_name+0x2e0>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2205      	movs	r2, #5
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2b08      	cmp	r3, #8
 8008010:	d104      	bne.n	800801c <create_name+0x2f0>
 8008012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800801c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b0c      	cmp	r3, #12
 8008026:	d005      	beq.n	8008034 <create_name+0x308>
 8008028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	2b03      	cmp	r3, #3
 8008032:	d105      	bne.n	8008040 <create_name+0x314>
 8008034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008038:	f043 0302 	orr.w	r3, r3, #2
 800803c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d117      	bne.n	800807c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800804c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d105      	bne.n	8008064 <create_name+0x338>
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805c:	f043 0310 	orr.w	r3, r3, #16
 8008060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b04      	cmp	r3, #4
 800806e:	d105      	bne.n	800807c <create_name+0x350>
 8008070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008074:	f043 0308 	orr.w	r3, r3, #8
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008086:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008088:	4618      	mov	r0, r3
 800808a:	3728      	adds	r7, #40	; 0x28
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	0800d34c 	.word	0x0800d34c
 8008094:	0800d450 	.word	0x0800d450
 8008098:	0800d358 	.word	0x0800d358

0800809c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080b0:	e002      	b.n	80080b8 <follow_path+0x1c>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	3301      	adds	r3, #1
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b2f      	cmp	r3, #47	; 0x2f
 80080be:	d0f8      	beq.n	80080b2 <follow_path+0x16>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b5c      	cmp	r3, #92	; 0x5c
 80080c6:	d0f4      	beq.n	80080b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b1f      	cmp	r3, #31
 80080d4:	d80a      	bhi.n	80080ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2280      	movs	r2, #128	; 0x80
 80080da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080de:	2100      	movs	r1, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff f81d 	bl	8007120 <dir_sdi>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]
 80080ea:	e048      	b.n	800817e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080ec:	463b      	mov	r3, r7
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fe1b 	bl	8007d2c <create_name>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d139      	bne.n	8008174 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fb7c 	bl	80077fe <dir_find>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008110:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d12c      	bne.n	8008178 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d127      	bne.n	8008178 <follow_path+0xdc>
 8008128:	2305      	movs	r3, #5
 800812a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800812c:	e024      	b.n	8008178 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d121      	bne.n	800817c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	799b      	ldrb	r3, [r3, #6]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008144:	2305      	movs	r3, #5
 8008146:	75fb      	strb	r3, [r7, #23]
 8008148:	e019      	b.n	800817e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	8992      	ldrh	r2, [r2, #12]
 8008158:	fbb3 f0f2 	udiv	r0, r3, r2
 800815c:	fb02 f200 	mul.w	r2, r2, r0
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	440b      	add	r3, r1
 8008164:	4619      	mov	r1, r3
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f7ff f980 	bl	800746c <ld_clust>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008172:	e7bb      	b.n	80080ec <follow_path+0x50>
			if (res != FR_OK) break;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <follow_path+0xe2>
				break;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800817c:	bf00      	nop
			}
		}
	}

	return res;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008194:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d031      	beq.n	8008202 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e002      	b.n	80081ac <get_ldnumber+0x24>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	3301      	adds	r3, #1
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b1f      	cmp	r3, #31
 80081b2:	d903      	bls.n	80081bc <get_ldnumber+0x34>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b3a      	cmp	r3, #58	; 0x3a
 80081ba:	d1f4      	bne.n	80081a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b3a      	cmp	r3, #58	; 0x3a
 80081c2:	d11c      	bne.n	80081fe <get_ldnumber+0x76>
			tp = *path;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	60fa      	str	r2, [r7, #12]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b09      	cmp	r3, #9
 80081da:	d80e      	bhi.n	80081fa <get_ldnumber+0x72>
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d10a      	bne.n	80081fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <get_ldnumber+0x72>
					vol = (int)i;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	3301      	adds	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	e002      	b.n	8008204 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008202:	693b      	ldr	r3, [r7, #16]
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	70da      	strb	r2, [r3, #3]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008226:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fe fb96 	bl	800695c <move_window>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <check_fs+0x2a>
 8008236:	2304      	movs	r3, #4
 8008238:	e038      	b.n	80082ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	333c      	adds	r3, #60	; 0x3c
 800823e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe f8a8 	bl	8006398 <ld_word>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008250:	429a      	cmp	r2, r3
 8008252:	d001      	beq.n	8008258 <check_fs+0x48>
 8008254:	2303      	movs	r3, #3
 8008256:	e029      	b.n	80082ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825e:	2be9      	cmp	r3, #233	; 0xe9
 8008260:	d009      	beq.n	8008276 <check_fs+0x66>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2beb      	cmp	r3, #235	; 0xeb
 800826a:	d11e      	bne.n	80082aa <check_fs+0x9a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008272:	2b90      	cmp	r3, #144	; 0x90
 8008274:	d119      	bne.n	80082aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	333c      	adds	r3, #60	; 0x3c
 800827a:	3336      	adds	r3, #54	; 0x36
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe f8a3 	bl	80063c8 <ld_dword>
 8008282:	4603      	mov	r3, r0
 8008284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <check_fs+0xa4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <check_fs+0x82>
 800828e:	2300      	movs	r3, #0
 8008290:	e00c      	b.n	80082ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	333c      	adds	r3, #60	; 0x3c
 8008296:	3352      	adds	r3, #82	; 0x52
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe f895 	bl	80063c8 <ld_dword>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <check_fs+0xa8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d101      	bne.n	80082aa <check_fs+0x9a>
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082aa:	2302      	movs	r3, #2
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	00544146 	.word	0x00544146
 80082b8:	33544146 	.word	0x33544146

080082bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b096      	sub	sp, #88	; 0x58
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff ff59 	bl	8008188 <get_ldnumber>
 80082d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da01      	bge.n	80082e2 <find_volume+0x26>
 80082de:	230b      	movs	r3, #11
 80082e0:	e26c      	b.n	80087bc <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082e2:	4aa4      	ldr	r2, [pc, #656]	; (8008574 <find_volume+0x2b8>)
 80082e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <find_volume+0x3a>
 80082f2:	230c      	movs	r3, #12
 80082f4:	e262      	b.n	80087bc <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80082f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082f8:	f7fe f94e 	bl	8006598 <lock_fs>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <find_volume+0x4a>
 8008302:	230f      	movs	r3, #15
 8008304:	e25a      	b.n	80087bc <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800830a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01a      	beq.n	8008352 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd ff9b 	bl	800625c <disk_status>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800832c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10c      	bne.n	8008352 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <find_volume+0x92>
 800833e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800834a:	230a      	movs	r3, #10
 800834c:	e236      	b.n	80087bc <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800834e:	2300      	movs	r3, #0
 8008350:	e234      	b.n	80087bc <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835a:	b2da      	uxtb	r2, r3
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	4618      	mov	r0, r3
 8008366:	f7fd ff93 	bl	8006290 <disk_initialize>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800837c:	2303      	movs	r3, #3
 800837e:	e21d      	b.n	80087bc <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <find_volume+0xda>
 8008386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008392:	230a      	movs	r3, #10
 8008394:	e212      	b.n	80087bc <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	7858      	ldrb	r0, [r3, #1]
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	330c      	adds	r3, #12
 800839e:	461a      	mov	r2, r3
 80083a0:	2102      	movs	r1, #2
 80083a2:	f7fd ffdb 	bl	800635c <disk_ioctl>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <find_volume+0xf4>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e205      	b.n	80087bc <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	899b      	ldrh	r3, [r3, #12]
 80083b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b8:	d80d      	bhi.n	80083d6 <find_volume+0x11a>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	899b      	ldrh	r3, [r3, #12]
 80083be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c2:	d308      	bcc.n	80083d6 <find_volume+0x11a>
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	899b      	ldrh	r3, [r3, #12]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	899b      	ldrh	r3, [r3, #12]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	4013      	ands	r3, r2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <find_volume+0x11e>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e1f0      	b.n	80087bc <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083e2:	f7ff ff15 	bl	8008210 <check_fs>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d14b      	bne.n	800848c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083f4:	2300      	movs	r3, #0
 80083f6:	643b      	str	r3, [r7, #64]	; 0x40
 80083f8:	e01f      	b.n	800843a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008408:	4413      	add	r3, r2
 800840a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	3304      	adds	r3, #4
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d006      	beq.n	8008424 <find_volume+0x168>
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	3308      	adds	r3, #8
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd ffd4 	bl	80063c8 <ld_dword>
 8008420:	4602      	mov	r2, r0
 8008422:	e000      	b.n	8008426 <find_volume+0x16a>
 8008424:	2200      	movs	r2, #0
 8008426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800842e:	440b      	add	r3, r1
 8008430:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	3301      	adds	r3, #1
 8008438:	643b      	str	r3, [r7, #64]	; 0x40
 800843a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843c:	2b03      	cmp	r3, #3
 800843e:	d9dc      	bls.n	80083fa <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008440:	2300      	movs	r3, #0
 8008442:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <find_volume+0x194>
 800844a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844c:	3b01      	subs	r3, #1
 800844e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008458:	4413      	add	r3, r2
 800845a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800845e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <find_volume+0x1b6>
 8008466:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008468:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800846a:	f7ff fed1 	bl	8008210 <check_fs>
 800846e:	4603      	mov	r3, r0
 8008470:	e000      	b.n	8008474 <find_volume+0x1b8>
 8008472:	2303      	movs	r3, #3
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800847c:	2b01      	cmp	r3, #1
 800847e:	d905      	bls.n	800848c <find_volume+0x1d0>
 8008480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008482:	3301      	adds	r3, #1
 8008484:	643b      	str	r3, [r7, #64]	; 0x40
 8008486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008488:	2b03      	cmp	r3, #3
 800848a:	d9e1      	bls.n	8008450 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800848c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008490:	2b04      	cmp	r3, #4
 8008492:	d101      	bne.n	8008498 <find_volume+0x1dc>
 8008494:	2301      	movs	r3, #1
 8008496:	e191      	b.n	80087bc <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800849c:	2b01      	cmp	r3, #1
 800849e:	d901      	bls.n	80084a4 <find_volume+0x1e8>
 80084a0:	230d      	movs	r3, #13
 80084a2:	e18b      	b.n	80087bc <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	333c      	adds	r3, #60	; 0x3c
 80084a8:	330b      	adds	r3, #11
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd ff74 	bl	8006398 <ld_word>
 80084b0:	4603      	mov	r3, r0
 80084b2:	461a      	mov	r2, r3
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	899b      	ldrh	r3, [r3, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d001      	beq.n	80084c0 <find_volume+0x204>
 80084bc:	230d      	movs	r3, #13
 80084be:	e17d      	b.n	80087bc <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	333c      	adds	r3, #60	; 0x3c
 80084c4:	3316      	adds	r3, #22
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd ff66 	bl	8006398 <ld_word>
 80084cc:	4603      	mov	r3, r0
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <find_volume+0x228>
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	333c      	adds	r3, #60	; 0x3c
 80084da:	3324      	adds	r3, #36	; 0x24
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fd ff73 	bl	80063c8 <ld_dword>
 80084e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	789b      	ldrb	r3, [r3, #2]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d005      	beq.n	8008508 <find_volume+0x24c>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	789b      	ldrb	r3, [r3, #2]
 8008500:	2b02      	cmp	r3, #2
 8008502:	d001      	beq.n	8008508 <find_volume+0x24c>
 8008504:	230d      	movs	r3, #13
 8008506:	e159      	b.n	80087bc <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	789b      	ldrb	r3, [r3, #2]
 800850c:	461a      	mov	r2, r3
 800850e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800851c:	b29a      	uxth	r2, r3
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	895b      	ldrh	r3, [r3, #10]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <find_volume+0x280>
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	895b      	ldrh	r3, [r3, #10]
 800852e:	461a      	mov	r2, r3
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	895b      	ldrh	r3, [r3, #10]
 8008534:	3b01      	subs	r3, #1
 8008536:	4013      	ands	r3, r2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <find_volume+0x284>
 800853c:	230d      	movs	r3, #13
 800853e:	e13d      	b.n	80087bc <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	333c      	adds	r3, #60	; 0x3c
 8008544:	3311      	adds	r3, #17
 8008546:	4618      	mov	r0, r3
 8008548:	f7fd ff26 	bl	8006398 <ld_word>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	891b      	ldrh	r3, [r3, #8]
 8008558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800855a:	8992      	ldrh	r2, [r2, #12]
 800855c:	0952      	lsrs	r2, r2, #5
 800855e:	b292      	uxth	r2, r2
 8008560:	fbb3 f1f2 	udiv	r1, r3, r2
 8008564:	fb02 f201 	mul.w	r2, r2, r1
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <find_volume+0x2bc>
 8008570:	230d      	movs	r3, #13
 8008572:	e123      	b.n	80087bc <find_volume+0x500>
 8008574:	200000c0 	.word	0x200000c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	333c      	adds	r3, #60	; 0x3c
 800857c:	3313      	adds	r3, #19
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd ff0a 	bl	8006398 <ld_word>
 8008584:	4603      	mov	r3, r0
 8008586:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <find_volume+0x2e0>
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	333c      	adds	r3, #60	; 0x3c
 8008592:	3320      	adds	r3, #32
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd ff17 	bl	80063c8 <ld_dword>
 800859a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	333c      	adds	r3, #60	; 0x3c
 80085a0:	330e      	adds	r3, #14
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fd fef8 	bl	8006398 <ld_word>
 80085a8:	4603      	mov	r3, r0
 80085aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <find_volume+0x2fa>
 80085b2:	230d      	movs	r3, #13
 80085b4:	e102      	b.n	80087bc <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ba:	4413      	add	r3, r2
 80085bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085be:	8911      	ldrh	r1, [r2, #8]
 80085c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c2:	8992      	ldrh	r2, [r2, #12]
 80085c4:	0952      	lsrs	r2, r2, #5
 80085c6:	b292      	uxth	r2, r2
 80085c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80085cc:	b292      	uxth	r2, r2
 80085ce:	4413      	add	r3, r2
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d201      	bcs.n	80085de <find_volume+0x322>
 80085da:	230d      	movs	r3, #13
 80085dc:	e0ee      	b.n	80087bc <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085e6:	8952      	ldrh	r2, [r2, #10]
 80085e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <find_volume+0x33c>
 80085f4:	230d      	movs	r3, #13
 80085f6:	e0e1      	b.n	80087bc <find_volume+0x500>
		fmt = FS_FAT32;
 80085f8:	2303      	movs	r3, #3
 80085fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008604:	4293      	cmp	r3, r2
 8008606:	d802      	bhi.n	800860e <find_volume+0x352>
 8008608:	2302      	movs	r3, #2
 800860a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008614:	4293      	cmp	r3, r2
 8008616:	d802      	bhi.n	800861e <find_volume+0x362>
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	1c9a      	adds	r2, r3, #2
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800862a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800862c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800862e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008630:	441a      	add	r2, r3
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8008636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	441a      	add	r2, r3
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8008640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008644:	2b03      	cmp	r3, #3
 8008646:	d11e      	bne.n	8008686 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	333c      	adds	r3, #60	; 0x3c
 800864c:	332a      	adds	r3, #42	; 0x2a
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fea2 	bl	8006398 <ld_word>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <find_volume+0x3a2>
 800865a:	230d      	movs	r3, #13
 800865c:	e0ae      	b.n	80087bc <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	891b      	ldrh	r3, [r3, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <find_volume+0x3ae>
 8008666:	230d      	movs	r3, #13
 8008668:	e0a8      	b.n	80087bc <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	333c      	adds	r3, #60	; 0x3c
 800866e:	332c      	adds	r3, #44	; 0x2c
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd fea9 	bl	80063c8 <ld_dword>
 8008676:	4602      	mov	r2, r0
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	647b      	str	r3, [r7, #68]	; 0x44
 8008684:	e01f      	b.n	80086c6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	891b      	ldrh	r3, [r3, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <find_volume+0x3d6>
 800868e:	230d      	movs	r3, #13
 8008690:	e094      	b.n	80087bc <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008698:	441a      	add	r2, r3
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800869e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d103      	bne.n	80086ae <find_volume+0x3f2>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	e00a      	b.n	80086c4 <find_volume+0x408>
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	6a1a      	ldr	r2, [r3, #32]
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	085a      	lsrs	r2, r3, #1
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	899b      	ldrh	r3, [r3, #12]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d2:	440b      	add	r3, r1
 80086d4:	3b01      	subs	r3, #1
 80086d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086d8:	8989      	ldrh	r1, [r1, #12]
 80086da:	fbb3 f3f1 	udiv	r3, r3, r1
 80086de:	429a      	cmp	r2, r3
 80086e0:	d201      	bcs.n	80086e6 <find_volume+0x42a>
 80086e2:	230d      	movs	r3, #13
 80086e4:	e06a      	b.n	80087bc <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ec:	61da      	str	r2, [r3, #28]
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	69da      	ldr	r2, [r3, #28]
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	2280      	movs	r2, #128	; 0x80
 80086fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008700:	2b03      	cmp	r3, #3
 8008702:	d149      	bne.n	8008798 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	333c      	adds	r3, #60	; 0x3c
 8008708:	3330      	adds	r3, #48	; 0x30
 800870a:	4618      	mov	r0, r3
 800870c:	f7fd fe44 	bl	8006398 <ld_word>
 8008710:	4603      	mov	r3, r0
 8008712:	2b01      	cmp	r3, #1
 8008714:	d140      	bne.n	8008798 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008718:	3301      	adds	r3, #1
 800871a:	4619      	mov	r1, r3
 800871c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800871e:	f7fe f91d 	bl	800695c <move_window>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d137      	bne.n	8008798 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	2200      	movs	r2, #0
 800872c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	333c      	adds	r3, #60	; 0x3c
 8008732:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008736:	4618      	mov	r0, r3
 8008738:	f7fd fe2e 	bl	8006398 <ld_word>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008744:	429a      	cmp	r2, r3
 8008746:	d127      	bne.n	8008798 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	333c      	adds	r3, #60	; 0x3c
 800874c:	4618      	mov	r0, r3
 800874e:	f7fd fe3b 	bl	80063c8 <ld_dword>
 8008752:	4603      	mov	r3, r0
 8008754:	4a1b      	ldr	r2, [pc, #108]	; (80087c4 <find_volume+0x508>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d11e      	bne.n	8008798 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	333c      	adds	r3, #60	; 0x3c
 800875e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008762:	4618      	mov	r0, r3
 8008764:	f7fd fe30 	bl	80063c8 <ld_dword>
 8008768:	4603      	mov	r3, r0
 800876a:	4a17      	ldr	r2, [pc, #92]	; (80087c8 <find_volume+0x50c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d113      	bne.n	8008798 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	333c      	adds	r3, #60	; 0x3c
 8008774:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd fe25 	bl	80063c8 <ld_dword>
 800877e:	4602      	mov	r2, r0
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	333c      	adds	r3, #60	; 0x3c
 8008788:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800878c:	4618      	mov	r0, r3
 800878e:	f7fd fe1b 	bl	80063c8 <ld_dword>
 8008792:	4602      	mov	r2, r0
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800879e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <find_volume+0x510>)
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	4b08      	ldr	r3, [pc, #32]	; (80087cc <find_volume+0x510>)
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	4b07      	ldr	r3, [pc, #28]	; (80087cc <find_volume+0x510>)
 80087ae:	881a      	ldrh	r2, [r3, #0]
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80087b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087b6:	f7fe f869 	bl	800688c <clear_lock>
#endif
	return FR_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3758      	adds	r7, #88	; 0x58
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	41615252 	.word	0x41615252
 80087c8:	61417272 	.word	0x61417272
 80087cc:	200000c4 	.word	0x200000c4

080087d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087da:	2309      	movs	r3, #9
 80087dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02e      	beq.n	8008842 <validate+0x72>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d02a      	beq.n	8008842 <validate+0x72>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d025      	beq.n	8008842 <validate+0x72>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	889a      	ldrh	r2, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	88db      	ldrh	r3, [r3, #6]
 8008800:	429a      	cmp	r2, r3
 8008802:	d11e      	bne.n	8008842 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fec5 	bl	8006598 <lock_fs>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d014      	beq.n	800883e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	4618      	mov	r0, r3
 800881c:	f7fd fd1e 	bl	800625c <disk_status>
 8008820:	4603      	mov	r3, r0
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <validate+0x60>
				res = FR_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
 800882e:	e008      	b.n	8008842 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd fec4 	bl	80065c4 <unlock_fs>
 800883c:	e001      	b.n	8008842 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800883e:	230f      	movs	r3, #15
 8008840:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <validate+0x7e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	e000      	b.n	8008850 <validate+0x80>
 800884e:	2300      	movs	r3, #0
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	6013      	str	r3, [r2, #0]
	return res;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008872:	f107 0310 	add.w	r3, r7, #16
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fc86 	bl	8008188 <get_ldnumber>
 800887c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2b00      	cmp	r3, #0
 8008882:	da01      	bge.n	8008888 <f_mount+0x28>
 8008884:	230b      	movs	r3, #11
 8008886:	e048      	b.n	800891a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008888:	4a26      	ldr	r2, [pc, #152]	; (8008924 <f_mount+0xc4>)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008890:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00f      	beq.n	80088b8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008898:	69b8      	ldr	r0, [r7, #24]
 800889a:	f7fd fff7 	bl	800688c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f837 	bl	8009916 <ff_del_syncobj>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <f_mount+0x52>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e033      	b.n	800891a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3314      	adds	r3, #20
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f001 f806 	bl	80098e0 <ff_cre_syncobj>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <f_mount+0x7e>
 80088da:	2302      	movs	r3, #2
 80088dc:	e01d      	b.n	800891a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4910      	ldr	r1, [pc, #64]	; (8008924 <f_mount+0xc4>)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <f_mount+0x94>
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d001      	beq.n	80088f8 <f_mount+0x98>
 80088f4:	2300      	movs	r3, #0
 80088f6:	e010      	b.n	800891a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80088f8:	f107 010c 	add.w	r1, r7, #12
 80088fc:	f107 0308 	add.w	r3, r7, #8
 8008900:	2200      	movs	r2, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fcda 	bl	80082bc <find_volume>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	7dfa      	ldrb	r2, [r7, #23]
 8008910:	4611      	mov	r1, r2
 8008912:	4618      	mov	r0, r3
 8008914:	f7fd fe56 	bl	80065c4 <unlock_fs>
 8008918:	7dfb      	ldrb	r3, [r7, #23]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200000c0 	.word	0x200000c0

08008928 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800892e:	af00      	add	r7, sp, #0
 8008930:	f107 030c 	add.w	r3, r7, #12
 8008934:	6018      	str	r0, [r3, #0]
 8008936:	f107 0308 	add.w	r3, r7, #8
 800893a:	6019      	str	r1, [r3, #0]
 800893c:	1dfb      	adds	r3, r7, #7
 800893e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <f_open+0x26>
 800894a:	2309      	movs	r3, #9
 800894c:	e24a      	b.n	8008de4 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800894e:	1dfb      	adds	r3, r7, #7
 8008950:	1dfa      	adds	r2, r7, #7
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008958:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800895a:	1dfb      	adds	r3, r7, #7
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8008962:	f107 0308 	add.w	r3, r7, #8
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fca8 	bl	80082bc <find_volume>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8008972:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 8221 	bne.w	8008dbe <f_open+0x496>
		dj.obj.fs = fs;
 800897c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008980:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8008984:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008988:	f107 0214 	add.w	r2, r7, #20
 800898c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff fb7e 	bl	800809c <follow_path>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80089a6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d11b      	bne.n	80089e6 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80089ae:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da03      	bge.n	80089c0 <f_open+0x98>
				res = FR_INVALID_NAME;
 80089b8:	2306      	movs	r3, #6
 80089ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80089be:	e012      	b.n	80089e6 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089c0:	1dfb      	adds	r3, r7, #7
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f023 0301 	bic.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bf14      	ite	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	2300      	moveq	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	461a      	mov	r2, r3
 80089d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fd fe0e 	bl	80065fc <chk_lock>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089e6:	1dfb      	adds	r3, r7, #7
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	f003 031c 	and.w	r3, r3, #28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 809b 	beq.w	8008b2a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80089f4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d019      	beq.n	8008a30 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80089fc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d10e      	bne.n	8008a22 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a04:	f7fd fe56 	bl	80066b4 <enq_lock>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d006      	beq.n	8008a1c <f_open+0xf4>
 8008a0e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe ffb4 	bl	8007980 <dir_register>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	e000      	b.n	8008a1e <f_open+0xf6>
 8008a1c:	2312      	movs	r3, #18
 8008a1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a22:	1dfb      	adds	r3, r7, #7
 8008a24:	1dfa      	adds	r2, r7, #7
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	e012      	b.n	8008a56 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a30:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008a34:	f003 0311 	and.w	r3, r3, #17
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <f_open+0x11c>
					res = FR_DENIED;
 8008a3c:	2307      	movs	r3, #7
 8008a3e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008a42:	e008      	b.n	8008a56 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a44:	1dfb      	adds	r3, r7, #7
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <f_open+0x12e>
 8008a50:	2308      	movs	r3, #8
 8008a52:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a56:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f040 8082 	bne.w	8008b64 <f_open+0x23c>
 8008a60:	1dfb      	adds	r3, r7, #7
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d07b      	beq.n	8008b64 <f_open+0x23c>
				dw = GET_FATTIME();
 8008a6c:	f7fd f908 	bl	8005c80 <get_fattime>
 8008a70:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008a78:	330e      	adds	r3, #14
 8008a7a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd fce0 	bl	8006444 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a84:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008a88:	3316      	adds	r3, #22
 8008a8a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fd fcd8 	bl	8006444 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008a98:	330b      	adds	r3, #11
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008aa2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fcdf 	bl	800746c <ld_clust>
 8008aae:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008ab2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ab6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8008aba:	2200      	movs	r2, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fcf4 	bl	80074aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ac2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008ac6:	331c      	adds	r3, #28
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fd fcba 	bl	8006444 <st_dword>
					fs->wflag = 1;
 8008ad0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ad8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d041      	beq.n	8008b64 <f_open+0x23c>
						dw = fs->winsect;
 8008ae0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008aea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe f9de 	bl	8006eb6 <remove_chain>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8008b00:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d12d      	bne.n	8008b64 <f_open+0x23c>
							res = move_window(fs, dw);
 8008b08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008b0c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd ff23 	bl	800695c <move_window>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008b1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008b20:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008b24:	3a01      	subs	r2, #1
 8008b26:	619a      	str	r2, [r3, #24]
 8008b28:	e01c      	b.n	8008b64 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008b2a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d118      	bne.n	8008b64 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b32:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008b36:	f003 0310 	and.w	r3, r3, #16
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <f_open+0x21e>
					res = FR_NO_FILE;
 8008b3e:	2304      	movs	r3, #4
 8008b40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008b44:	e00e      	b.n	8008b64 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b46:	1dfb      	adds	r3, r7, #7
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <f_open+0x23c>
 8008b52:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <f_open+0x23c>
						res = FR_DENIED;
 8008b5e:	2307      	movs	r3, #7
 8008b60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b64:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d136      	bne.n	8008bda <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b6c:	1dfb      	adds	r3, r7, #7
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008b78:	1dfb      	adds	r3, r7, #7
 8008b7a:	1dfa      	adds	r2, r7, #7
 8008b7c:	7812      	ldrb	r2, [r2, #0]
 8008b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b82:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8a:	f107 030c 	add.w	r3, r7, #12
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008b92:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b9e:	1dfb      	adds	r3, r7, #7
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bf14      	ite	ne
 8008baa:	2301      	movne	r3, #1
 8008bac:	2300      	moveq	r3, #0
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd fd9d 	bl	80066f8 <inc_lock>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	f107 030c 	add.w	r3, r7, #12
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <f_open+0x2b2>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008bda:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 80ed 	bne.w	8008dbe <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008be4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008be8:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fc3c 	bl	800746c <ld_clust>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	f107 030c 	add.w	r3, r7, #12
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008bfe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008c02:	331c      	adds	r3, #28
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fd fbdf 	bl	80063c8 <ld_dword>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f107 030c 	add.w	r3, r7, #12
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c14:	f107 030c 	add.w	r3, r7, #12
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c1e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c2e:	88da      	ldrh	r2, [r3, #6]
 8008c30:	f107 030c 	add.w	r3, r7, #12
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	1dfa      	adds	r2, r7, #7
 8008c40:	7812      	ldrb	r2, [r2, #0]
 8008c42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c44:	f107 030c 	add.w	r3, r7, #12
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c58:	f107 030c 	add.w	r3, r7, #12
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3330      	adds	r3, #48	; 0x30
 8008c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c6e:	2100      	movs	r1, #0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd fc34 	bl	80064de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c76:	1dfb      	adds	r3, r7, #7
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 809d 	beq.w	8008dbe <f_open+0x496>
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8096 	beq.w	8008dbe <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	f107 030c 	add.w	r3, r7, #12
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008ca2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008ca6:	895b      	ldrh	r3, [r3, #10]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008cae:	899b      	ldrh	r3, [r3, #12]
 8008cb0:	fb03 f302 	mul.w	r3, r3, r2
 8008cb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008cd0:	e01f      	b.n	8008d12 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8008cd2:	f107 030c 	add.w	r3, r7, #12
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd fefa 	bl	8006ad6 <get_fat>
 8008ce2:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008ce6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d802      	bhi.n	8008cf4 <f_open+0x3cc>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008cf4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cfc:	d102      	bne.n	8008d04 <f_open+0x3dc>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d04:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008d08:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008d12:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d105      	bne.n	8008d26 <f_open+0x3fe>
 8008d1a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008d1e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d8d5      	bhi.n	8008cd2 <f_open+0x3aa>
				}
				fp->clust = clst;
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008d30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d32:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d141      	bne.n	8008dbe <f_open+0x496>
 8008d3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d3e:	899b      	ldrh	r3, [r3, #12]
 8008d40:	461a      	mov	r2, r3
 8008d42:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d4a:	fb02 f201 	mul.w	r2, r2, r1
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d034      	beq.n	8008dbe <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d58:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd fe9b 	bl	8006a98 <clust2sect>
 8008d62:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008d66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <f_open+0x44e>
						res = FR_INT_ERR;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008d74:	e023      	b.n	8008dbe <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d7a:	899b      	ldrh	r3, [r3, #12]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008d82:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d8a:	441a      	add	r2, r3
 8008d8c:	f107 030c 	add.w	r3, r7, #12
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008d94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008d98:	7858      	ldrb	r0, [r3, #1]
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	2301      	movs	r3, #1
 8008dae:	f7fd fa95 	bl	80062dc <disk_read>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <f_open+0x496>
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008dbe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <f_open+0x4a8>
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008dd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008dd4:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fd fbf2 	bl	80065c4 <unlock_fs>
 8008de0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b08e      	sub	sp, #56	; 0x38
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f107 0214 	add.w	r2, r7, #20
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff fcde 	bl	80087d0 <validate>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <f_read+0x44>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	7d5b      	ldrb	r3, [r3, #21]
 8008e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <f_read+0x58>
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fd fbc2 	bl	80065c4 <unlock_fs>
 8008e40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e44:	e15d      	b.n	8009102 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7d1b      	ldrb	r3, [r3, #20]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <f_read+0x72>
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2107      	movs	r1, #7
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fd fbb4 	bl	80065c4 <unlock_fs>
 8008e5c:	2307      	movs	r3, #7
 8008e5e:	e150      	b.n	8009102 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	f240 813c 	bls.w	80090ee <f_read+0x300>
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008e7a:	e138      	b.n	80090ee <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	8992      	ldrh	r2, [r2, #12]
 8008e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e88:	fb02 f201 	mul.w	r2, r2, r1
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 80f3 	bne.w	800907a <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	8992      	ldrh	r2, [r2, #12]
 8008e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	8952      	ldrh	r2, [r2, #10]
 8008ea4:	3a01      	subs	r2, #1
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d139      	bne.n	8008f24 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ebe:	e013      	b.n	8008ee8 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fe f8ee 	bl	80070b0 <clmt_clust>
 8008ed4:	6338      	str	r0, [r7, #48]	; 0x30
 8008ed6:	e007      	b.n	8008ee8 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7fd fdf8 	bl	8006ad6 <get_fat>
 8008ee6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d809      	bhi.n	8008f02 <f_read+0x114>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	755a      	strb	r2, [r3, #21]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2102      	movs	r1, #2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fd fb63 	bl	80065c4 <unlock_fs>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e0ff      	b.n	8009102 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f08:	d109      	bne.n	8008f1e <f_read+0x130>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	755a      	strb	r2, [r3, #21]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2101      	movs	r1, #1
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd fb55 	bl	80065c4 <unlock_fs>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0f1      	b.n	8009102 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f22:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fd fdb3 	bl	8006a98 <clust2sect>
 8008f32:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <f_read+0x160>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	755a      	strb	r2, [r3, #21]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd fb3d 	bl	80065c4 <unlock_fs>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e0d9      	b.n	8009102 <f_read+0x314>
			sect += csect;
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	899b      	ldrh	r3, [r3, #12]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d046      	beq.n	8008ff8 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	4413      	add	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	8952      	ldrh	r2, [r2, #10]
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d905      	bls.n	8008f84 <f_read+0x196>
					cc = fs->csize - csect;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	895b      	ldrh	r3, [r3, #10]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	7858      	ldrb	r0, [r3, #1]
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f8e:	f7fd f9a5 	bl	80062dc <disk_read>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <f_read+0x1be>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	755a      	strb	r2, [r3, #21]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd fb0e 	bl	80065c4 <unlock_fs>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0aa      	b.n	8009102 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	7d1b      	ldrb	r3, [r3, #20]
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da18      	bge.n	8008fe8 <f_read+0x1fa>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a1a      	ldr	r2, [r3, #32]
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d911      	bls.n	8008fe8 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6a1a      	ldr	r2, [r3, #32]
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	8992      	ldrh	r2, [r2, #12]
 8008fd0:	fb02 f303 	mul.w	r3, r2, r3
 8008fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd6:	18d0      	adds	r0, r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	899b      	ldrh	r3, [r3, #12]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7fd fa5a 	bl	800649c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	899b      	ldrh	r3, [r3, #12]
 8008fec:	461a      	mov	r2, r3
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	fb02 f303 	mul.w	r3, r2, r3
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008ff6:	e066      	b.n	80090c6 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d038      	beq.n	8009074 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	7d1b      	ldrb	r3, [r3, #20]
 8009006:	b25b      	sxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	da1d      	bge.n	8009048 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	7858      	ldrb	r0, [r3, #1]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1a      	ldr	r2, [r3, #32]
 800901a:	2301      	movs	r3, #1
 800901c:	f7fd f97e 	bl	800631c <disk_write>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <f_read+0x24c>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	755a      	strb	r2, [r3, #21]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2101      	movs	r1, #1
 8009030:	4618      	mov	r0, r3
 8009032:	f7fd fac7 	bl	80065c4 <unlock_fs>
 8009036:	2301      	movs	r3, #1
 8009038:	e063      	b.n	8009102 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7d1b      	ldrb	r3, [r3, #20]
 800903e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009042:	b2da      	uxtb	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	7858      	ldrb	r0, [r3, #1]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009052:	2301      	movs	r3, #1
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	f7fd f941 	bl	80062dc <disk_read>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d009      	beq.n	8009074 <f_read+0x286>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	755a      	strb	r2, [r3, #21]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2101      	movs	r1, #1
 800906a:	4618      	mov	r0, r3
 800906c:	f7fd faaa 	bl	80065c4 <unlock_fs>
 8009070:	2301      	movs	r3, #1
 8009072:	e046      	b.n	8009102 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	899b      	ldrh	r3, [r3, #12]
 800907e:	4618      	mov	r0, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	8992      	ldrh	r2, [r2, #12]
 8009088:	fbb3 f1f2 	udiv	r1, r3, r2
 800908c:	fb02 f201 	mul.w	r2, r2, r1
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	1ac3      	subs	r3, r0, r3
 8009094:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d901      	bls.n	80090a2 <f_read+0x2b4>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	8992      	ldrh	r2, [r2, #12]
 80090b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80090b4:	fb02 f200 	mul.w	r2, r2, r0
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	440b      	add	r3, r1
 80090bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090be:	4619      	mov	r1, r3
 80090c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c2:	f7fd f9eb 	bl	800649c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80090c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	4413      	add	r3, r2
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	619a      	str	r2, [r3, #24]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	441a      	add	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f aec3 	bne.w	8008e7c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fd fa62 	bl	80065c4 <unlock_fs>
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3738      	adds	r7, #56	; 0x38
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08c      	sub	sp, #48	; 0x30
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f107 0210 	add.w	r2, r7, #16
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fb50 	bl	80087d0 <validate>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800913a:	2b00      	cmp	r3, #0
 800913c:	d107      	bne.n	800914e <f_write+0x44>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	7d5b      	ldrb	r3, [r3, #21]
 8009142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <f_write+0x58>
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fa34 	bl	80065c4 <unlock_fs>
 800915c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009160:	e192      	b.n	8009488 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	7d1b      	ldrb	r3, [r3, #20]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <f_write+0x72>
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2107      	movs	r1, #7
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fa26 	bl	80065c4 <unlock_fs>
 8009178:	2307      	movs	r3, #7
 800917a:	e185      	b.n	8009488 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	429a      	cmp	r2, r3
 800918a:	f080 816a 	bcs.w	8009462 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	43db      	mvns	r3, r3
 8009194:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009196:	e164      	b.n	8009462 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	8992      	ldrh	r2, [r2, #12]
 80091a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80091a4:	fb02 f201 	mul.w	r2, r2, r1
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 810f 	bne.w	80093ce <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	8992      	ldrh	r2, [r2, #12]
 80091b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	8952      	ldrh	r2, [r2, #10]
 80091c0:	3a01      	subs	r2, #1
 80091c2:	4013      	ands	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d14d      	bne.n	8009268 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11a      	bne.n	8009216 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd fecb 	bl	8006f80 <create_chain>
 80091ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80091ec:	e013      	b.n	8009216 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d007      	beq.n	8009206 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	4619      	mov	r1, r3
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7fd ff57 	bl	80070b0 <clmt_clust>
 8009202:	62b8      	str	r0, [r7, #40]	; 0x28
 8009204:	e007      	b.n	8009216 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fd feb6 	bl	8006f80 <create_chain>
 8009214:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 8127 	beq.w	800946c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	2b01      	cmp	r3, #1
 8009222:	d109      	bne.n	8009238 <f_write+0x12e>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2202      	movs	r2, #2
 8009228:	755a      	strb	r2, [r3, #21]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2102      	movs	r1, #2
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd f9c8 	bl	80065c4 <unlock_fs>
 8009234:	2302      	movs	r3, #2
 8009236:	e127      	b.n	8009488 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923e:	d109      	bne.n	8009254 <f_write+0x14a>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2201      	movs	r2, #1
 8009244:	755a      	strb	r2, [r3, #21]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2101      	movs	r1, #1
 800924a:	4618      	mov	r0, r3
 800924c:	f7fd f9ba 	bl	80065c4 <unlock_fs>
 8009250:	2301      	movs	r3, #1
 8009252:	e119      	b.n	8009488 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009258:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d102      	bne.n	8009268 <f_write+0x15e>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009266:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	7d1b      	ldrb	r3, [r3, #20]
 800926c:	b25b      	sxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	da1d      	bge.n	80092ae <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	7858      	ldrb	r0, [r3, #1]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a1a      	ldr	r2, [r3, #32]
 8009280:	2301      	movs	r3, #1
 8009282:	f7fd f84b 	bl	800631c <disk_write>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <f_write+0x196>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	755a      	strb	r2, [r3, #21]
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f7fd f994 	bl	80065c4 <unlock_fs>
 800929c:	2301      	movs	r3, #1
 800929e:	e0f3      	b.n	8009488 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	7d1b      	ldrb	r3, [r3, #20]
 80092a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f7fd fbee 	bl	8006a98 <clust2sect>
 80092bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <f_write+0x1ce>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2202      	movs	r2, #2
 80092c8:	755a      	strb	r2, [r3, #21]
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2102      	movs	r1, #2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd f978 	bl	80065c4 <unlock_fs>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e0d7      	b.n	8009488 <f_write+0x37e>
			sect += csect;
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	4413      	add	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	899b      	ldrh	r3, [r3, #12]
 80092e4:	461a      	mov	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d048      	beq.n	8009386 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	4413      	add	r3, r2
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	8952      	ldrh	r2, [r2, #10]
 80092fe:	4293      	cmp	r3, r2
 8009300:	d905      	bls.n	800930e <f_write+0x204>
					cc = fs->csize - csect;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	895b      	ldrh	r3, [r3, #10]
 8009306:	461a      	mov	r2, r3
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	7858      	ldrb	r0, [r3, #1]
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	69f9      	ldr	r1, [r7, #28]
 8009318:	f7fd f800 	bl	800631c <disk_write>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <f_write+0x22c>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	755a      	strb	r2, [r3, #21]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2101      	movs	r1, #1
 800932c:	4618      	mov	r0, r3
 800932e:	f7fd f949 	bl	80065c4 <unlock_fs>
 8009332:	2301      	movs	r3, #1
 8009334:	e0a8      	b.n	8009488 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6a1a      	ldr	r2, [r3, #32]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	6a3a      	ldr	r2, [r7, #32]
 8009340:	429a      	cmp	r2, r3
 8009342:	d918      	bls.n	8009376 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1a      	ldr	r2, [r3, #32]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	8992      	ldrh	r2, [r2, #12]
 8009356:	fb02 f303 	mul.w	r3, r2, r3
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	18d1      	adds	r1, r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	899b      	ldrh	r3, [r3, #12]
 8009362:	461a      	mov	r2, r3
 8009364:	f7fd f89a 	bl	800649c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	7d1b      	ldrb	r3, [r3, #20]
 800936c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009370:	b2da      	uxtb	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	899b      	ldrh	r3, [r3, #12]
 800937a:	461a      	mov	r2, r3
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	fb02 f303 	mul.w	r3, r2, r3
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009384:	e050      	b.n	8009428 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	429a      	cmp	r2, r3
 800938e:	d01b      	beq.n	80093c8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009398:	429a      	cmp	r2, r3
 800939a:	d215      	bcs.n	80093c8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	7858      	ldrb	r0, [r3, #1]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093a6:	2301      	movs	r3, #1
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	f7fc ff97 	bl	80062dc <disk_read>
 80093ae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2201      	movs	r2, #1
 80093b8:	755a      	strb	r2, [r3, #21]
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2101      	movs	r1, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd f900 	bl	80065c4 <unlock_fs>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e05f      	b.n	8009488 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	899b      	ldrh	r3, [r3, #12]
 80093d2:	4618      	mov	r0, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	8992      	ldrh	r2, [r2, #12]
 80093dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80093e0:	fb02 f201 	mul.w	r2, r2, r1
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	1ac3      	subs	r3, r0, r3
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80093ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d901      	bls.n	80093f6 <f_write+0x2ec>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	8992      	ldrh	r2, [r2, #12]
 8009404:	fbb3 f0f2 	udiv	r0, r3, r2
 8009408:	fb02 f200 	mul.w	r2, r2, r0
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	440b      	add	r3, r1
 8009410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009412:	69f9      	ldr	r1, [r7, #28]
 8009414:	4618      	mov	r0, r3
 8009416:	f7fd f841 	bl	800649c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009422:	b2da      	uxtb	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	4413      	add	r3, r2
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699a      	ldr	r2, [r3, #24]
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	441a      	add	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	619a      	str	r2, [r3, #24]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	429a      	cmp	r2, r3
 8009446:	bf38      	it	cc
 8009448:	461a      	movcc	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	60da      	str	r2, [r3, #12]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	441a      	add	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f ae97 	bne.w	8009198 <f_write+0x8e>
 800946a:	e000      	b.n	800946e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800946c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	7d1b      	ldrb	r3, [r3, #20]
 8009472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009476:	b2da      	uxtb	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f7fd f89f 	bl	80065c4 <unlock_fs>
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3730      	adds	r7, #48	; 0x30
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f107 0208 	add.w	r2, r7, #8
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff f995 	bl	80087d0 <validate>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d16d      	bne.n	800958c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7d1b      	ldrb	r3, [r3, #20]
 80094b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d067      	beq.n	800958c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7d1b      	ldrb	r3, [r3, #20]
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da1a      	bge.n	80094fc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	7858      	ldrb	r0, [r3, #1]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1a      	ldr	r2, [r3, #32]
 80094d4:	2301      	movs	r3, #1
 80094d6:	f7fc ff21 	bl	800631c <disk_write>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <f_sync+0x5e>
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2101      	movs	r1, #1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fd f86d 	bl	80065c4 <unlock_fs>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e055      	b.n	800959a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7d1b      	ldrb	r3, [r3, #20]
 80094f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80094fc:	f7fc fbc0 	bl	8005c80 <get_fattime>
 8009500:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fd fa26 	bl	800695c <move_window>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d138      	bne.n	800958c <f_sync+0xfc>
					dir = fp->dir_ptr;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	330b      	adds	r3, #11
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	330b      	adds	r3, #11
 800952a:	f042 0220 	orr.w	r2, r2, #32
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	461a      	mov	r2, r3
 800953c:	68f9      	ldr	r1, [r7, #12]
 800953e:	f7fd ffb4 	bl	80074aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f103 021c 	add.w	r2, r3, #28
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7fc ff78 	bl	8006444 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3316      	adds	r3, #22
 8009558:	6939      	ldr	r1, [r7, #16]
 800955a:	4618      	mov	r0, r3
 800955c:	f7fc ff72 	bl	8006444 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3312      	adds	r3, #18
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fc ff51 	bl	800640e <st_word>
					fs->wflag = 1;
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2201      	movs	r2, #1
 8009570:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd fa1f 	bl	80069b8 <sync_fs>
 800957a:	4603      	mov	r3, r0
 800957c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7d1b      	ldrb	r3, [r3, #20]
 8009582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	7dfa      	ldrb	r2, [r7, #23]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7fd f816 	bl	80065c4 <unlock_fs>
 8009598:	7dfb      	ldrb	r3, [r7, #23]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ff70 	bl	8009490 <f_sync>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11d      	bne.n	80095f6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f107 0208 	add.w	r2, r7, #8
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff f904 	bl	80087d0 <validate>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d111      	bne.n	80095f6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd f91c 	bl	8006814 <dec_lock>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fc ffe7 	bl	80065c4 <unlock_fs>
#endif
		}
	}
	return res;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8009606:	af00      	add	r7, sp, #0
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	6018      	str	r0, [r3, #0]
 800960c:	463b      	mov	r3, r7
 800960e:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009610:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8009614:	1d3b      	adds	r3, r7, #4
 8009616:	2200      	movs	r2, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fe4f 	bl	80082bc <find_volume>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8009624:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8009628:	2b00      	cmp	r3, #0
 800962a:	d127      	bne.n	800967c <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 800962c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fd2b 	bl	800809c <follow_path>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 800964c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8009650:	2b00      	cmp	r3, #0
 8009652:	d113      	bne.n	800967c <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009654:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8009658:	b25b      	sxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	da03      	bge.n	8009666 <f_stat+0x66>
				res = FR_INVALID_NAME;
 800965e:	2306      	movs	r3, #6
 8009660:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8009664:	e00a      	b.n	800967c <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009666:	463b      	mov	r3, r7
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <f_stat+0x7c>
 800966e:	463b      	mov	r3, r7
 8009670:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009674:	6819      	ldr	r1, [r3, #0]
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe fa7a 	bl	8007b70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800967c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009680:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f7fc ff9c 	bl	80065c4 <unlock_fs>
 800968c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8009690:	4618      	mov	r0, r3
 8009692:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096b2:	4b1f      	ldr	r3, [pc, #124]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096b4:	7a5b      	ldrb	r3, [r3, #9]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d131      	bne.n	8009720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096bc:	4b1c      	ldr	r3, [pc, #112]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096be:	7a5b      	ldrb	r3, [r3, #9]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	461a      	mov	r2, r3
 80096c4:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096c6:	2100      	movs	r1, #0
 80096c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80096ca:	4b19      	ldr	r3, [pc, #100]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096cc:	7a5b      	ldrb	r3, [r3, #9]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4a17      	ldr	r2, [pc, #92]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80096da:	4b15      	ldr	r3, [pc, #84]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096dc:	7a5b      	ldrb	r3, [r3, #9]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	4b13      	ldr	r3, [pc, #76]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096e4:	4413      	add	r3, r2
 80096e6:	79fa      	ldrb	r2, [r7, #7]
 80096e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096ea:	4b11      	ldr	r3, [pc, #68]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096ec:	7a5b      	ldrb	r3, [r3, #9]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	b2d1      	uxtb	r1, r2
 80096f4:	4a0e      	ldr	r2, [pc, #56]	; (8009730 <FATFS_LinkDriverEx+0x94>)
 80096f6:	7251      	strb	r1, [r2, #9]
 80096f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096fa:	7dbb      	ldrb	r3, [r7, #22]
 80096fc:	3330      	adds	r3, #48	; 0x30
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	3301      	adds	r3, #1
 8009708:	223a      	movs	r2, #58	; 0x3a
 800970a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	3302      	adds	r3, #2
 8009710:	222f      	movs	r2, #47	; 0x2f
 8009712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	3303      	adds	r3, #3
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009720:	7dfb      	ldrb	r3, [r7, #23]
}
 8009722:	4618      	mov	r0, r3
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	200000e8 	.word	0x200000e8

08009734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800973e:	2200      	movs	r2, #0
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff ffaa 	bl	800969c <FATFS_LinkDriverEx>
 8009748:	4603      	mov	r3, r0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009760:	88fb      	ldrh	r3, [r7, #6]
 8009762:	2b7f      	cmp	r3, #127	; 0x7f
 8009764:	d802      	bhi.n	800976c <ff_convert+0x18>
		c = chr;
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	81fb      	strh	r3, [r7, #14]
 800976a:	e025      	b.n	80097b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00b      	beq.n	800978a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	2bff      	cmp	r3, #255	; 0xff
 8009776:	d805      	bhi.n	8009784 <ff_convert+0x30>
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	3b80      	subs	r3, #128	; 0x80
 800977c:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <ff_convert+0x74>)
 800977e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009782:	e000      	b.n	8009786 <ff_convert+0x32>
 8009784:	2300      	movs	r3, #0
 8009786:	81fb      	strh	r3, [r7, #14]
 8009788:	e016      	b.n	80097b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800978a:	2300      	movs	r3, #0
 800978c:	81fb      	strh	r3, [r7, #14]
 800978e:	e009      	b.n	80097a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009790:	89fb      	ldrh	r3, [r7, #14]
 8009792:	4a0d      	ldr	r2, [pc, #52]	; (80097c8 <ff_convert+0x74>)
 8009794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009798:	88fa      	ldrh	r2, [r7, #6]
 800979a:	429a      	cmp	r2, r3
 800979c:	d006      	beq.n	80097ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800979e:	89fb      	ldrh	r3, [r7, #14]
 80097a0:	3301      	adds	r3, #1
 80097a2:	81fb      	strh	r3, [r7, #14]
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	2b7f      	cmp	r3, #127	; 0x7f
 80097a8:	d9f2      	bls.n	8009790 <ff_convert+0x3c>
 80097aa:	e000      	b.n	80097ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80097ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	3380      	adds	r3, #128	; 0x80
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80097b8:	89fb      	ldrh	r3, [r7, #14]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	0800d4e0 	.word	0x0800d4e0

080097cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80097d6:	88fb      	ldrh	r3, [r7, #6]
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	d201      	bcs.n	80097e2 <ff_wtoupper+0x16>
 80097de:	4b3e      	ldr	r3, [pc, #248]	; (80098d8 <ff_wtoupper+0x10c>)
 80097e0:	e000      	b.n	80097e4 <ff_wtoupper+0x18>
 80097e2:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <ff_wtoupper+0x110>)
 80097e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	1c9a      	adds	r2, r3, #2
 80097ea:	617a      	str	r2, [r7, #20]
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80097f0:	8a7b      	ldrh	r3, [r7, #18]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d068      	beq.n	80098c8 <ff_wtoupper+0xfc>
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	8a7b      	ldrh	r3, [r7, #18]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d364      	bcc.n	80098c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	1c9a      	adds	r2, r3, #2
 8009802:	617a      	str	r2, [r7, #20]
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	823b      	strh	r3, [r7, #16]
 8009808:	8a3b      	ldrh	r3, [r7, #16]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	81fb      	strh	r3, [r7, #14]
 800980e:	8a3b      	ldrh	r3, [r7, #16]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	8a79      	ldrh	r1, [r7, #18]
 8009818:	8a3b      	ldrh	r3, [r7, #16]
 800981a:	440b      	add	r3, r1
 800981c:	429a      	cmp	r2, r3
 800981e:	da49      	bge.n	80098b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009820:	89fb      	ldrh	r3, [r7, #14]
 8009822:	2b08      	cmp	r3, #8
 8009824:	d84f      	bhi.n	80098c6 <ff_wtoupper+0xfa>
 8009826:	a201      	add	r2, pc, #4	; (adr r2, 800982c <ff_wtoupper+0x60>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009851 	.word	0x08009851
 8009830:	08009863 	.word	0x08009863
 8009834:	08009879 	.word	0x08009879
 8009838:	08009881 	.word	0x08009881
 800983c:	08009889 	.word	0x08009889
 8009840:	08009891 	.word	0x08009891
 8009844:	08009899 	.word	0x08009899
 8009848:	080098a1 	.word	0x080098a1
 800984c:	080098a9 	.word	0x080098a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009850:	88fa      	ldrh	r2, [r7, #6]
 8009852:	8a7b      	ldrh	r3, [r7, #18]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	80fb      	strh	r3, [r7, #6]
 8009860:	e027      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009862:	88fa      	ldrh	r2, [r7, #6]
 8009864:	8a7b      	ldrh	r3, [r7, #18]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	b29b      	uxth	r3, r3
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	80fb      	strh	r3, [r7, #6]
 8009876:	e01c      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	3b10      	subs	r3, #16
 800987c:	80fb      	strh	r3, [r7, #6]
 800987e:	e018      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009880:	88fb      	ldrh	r3, [r7, #6]
 8009882:	3b20      	subs	r3, #32
 8009884:	80fb      	strh	r3, [r7, #6]
 8009886:	e014      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	3b30      	subs	r3, #48	; 0x30
 800988c:	80fb      	strh	r3, [r7, #6]
 800988e:	e010      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	3b1a      	subs	r3, #26
 8009894:	80fb      	strh	r3, [r7, #6]
 8009896:	e00c      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	3308      	adds	r3, #8
 800989c:	80fb      	strh	r3, [r7, #6]
 800989e:	e008      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	3b50      	subs	r3, #80	; 0x50
 80098a4:	80fb      	strh	r3, [r7, #6]
 80098a6:	e004      	b.n	80098b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80098a8:	88fb      	ldrh	r3, [r7, #6]
 80098aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80098ae:	80fb      	strh	r3, [r7, #6]
 80098b0:	bf00      	nop
			}
			break;
 80098b2:	e008      	b.n	80098c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80098b4:	89fb      	ldrh	r3, [r7, #14]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d195      	bne.n	80097e6 <ff_wtoupper+0x1a>
 80098ba:	8a3b      	ldrh	r3, [r7, #16]
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80098c4:	e78f      	b.n	80097e6 <ff_wtoupper+0x1a>
			break;
 80098c6:	bf00      	nop
	}

	return chr;
 80098c8:	88fb      	ldrh	r3, [r7, #6]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	0800d5e0 	.word	0x0800d5e0
 80098dc:	0800d7d4 	.word	0x0800d7d4

080098e0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80098ec:	2200      	movs	r2, #0
 80098ee:	2101      	movs	r1, #1
 80098f0:	2001      	movs	r0, #1
 80098f2:	f000 f9af 	bl	8009c54 <osSemaphoreNew>
 80098f6:	4602      	mov	r2, r0
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	bf14      	ite	ne
 8009904:	2301      	movne	r3, #1
 8009906:	2300      	moveq	r3, #0
 8009908:	b2db      	uxtb	r3, r3
 800990a:	60fb      	str	r3, [r7, #12]

    return ret;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fab8 	bl	8009e94 <osSemaphoreDelete>
#endif
    return 1;
 8009924:	2301      	movs	r3, #1
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800993a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa12 	bl	8009d68 <osSemaphoreAcquire>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800994e:	68fb      	ldr	r3, [r7, #12]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fa53 	bl	8009e0c <osSemaphoreRelease>
#endif
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <__NVIC_SetPriority>:
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800997c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009980:	2b00      	cmp	r3, #0
 8009982:	db0a      	blt.n	800999a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	b2da      	uxtb	r2, r3
 8009988:	490c      	ldr	r1, [pc, #48]	; (80099bc <__NVIC_SetPriority+0x4c>)
 800998a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800998e:	0112      	lsls	r2, r2, #4
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	440b      	add	r3, r1
 8009994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009998:	e00a      	b.n	80099b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	b2da      	uxtb	r2, r3
 800999e:	4908      	ldr	r1, [pc, #32]	; (80099c0 <__NVIC_SetPriority+0x50>)
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	3b04      	subs	r3, #4
 80099a8:	0112      	lsls	r2, r2, #4
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	440b      	add	r3, r1
 80099ae:	761a      	strb	r2, [r3, #24]
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	e000e100 	.word	0xe000e100
 80099c0:	e000ed00 	.word	0xe000ed00

080099c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80099c8:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <SysTick_Handler+0x1c>)
 80099ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80099cc:	f002 fade 	bl	800bf8c <xTaskGetSchedulerState>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d001      	beq.n	80099da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80099d6:	f003 f9c7 	bl	800cd68 <xPortSysTickHandler>
  }
}
 80099da:	bf00      	nop
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000e010 	.word	0xe000e010

080099e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80099e8:	2100      	movs	r1, #0
 80099ea:	f06f 0004 	mvn.w	r0, #4
 80099ee:	f7ff ffbf 	bl	8009970 <__NVIC_SetPriority>
#endif
}
 80099f2:	bf00      	nop
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	603b      	str	r3, [r7, #0]
  return(result);
 8009a04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a0a:	f06f 0305 	mvn.w	r3, #5
 8009a0e:	607b      	str	r3, [r7, #4]
 8009a10:	e00c      	b.n	8009a2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a12:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <osKernelInitialize+0x44>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <osKernelInitialize+0x44>)
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	607b      	str	r3, [r7, #4]
 8009a24:	e002      	b.n	8009a2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a2c:	687b      	ldr	r3, [r7, #4]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	200000f4 	.word	0x200000f4

08009a40 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009a46:	f002 faa1 	bl	800bf8c <xTaskGetSchedulerState>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <osKernelGetState+0x1a>
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d105      	bne.n	8009a60 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009a54:	2302      	movs	r3, #2
 8009a56:	607b      	str	r3, [r7, #4]
      break;
 8009a58:	e00c      	b.n	8009a74 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	607b      	str	r3, [r7, #4]
      break;
 8009a5e:	e009      	b.n	8009a74 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <osKernelGetState+0x40>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d102      	bne.n	8009a6e <osKernelGetState+0x2e>
        state = osKernelReady;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009a6c:	e001      	b.n	8009a72 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
      break;
 8009a72:	bf00      	nop
  }

  return (state);
 8009a74:	687b      	ldr	r3, [r7, #4]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	200000f4 	.word	0x200000f4

08009a84 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a8a:	f3ef 8305 	mrs	r3, IPSR
 8009a8e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a96:	f06f 0305 	mvn.w	r3, #5
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	e010      	b.n	8009ac0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <osKernelStart+0x48>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d109      	bne.n	8009aba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009aa6:	f7ff ff9d 	bl	80099e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009aaa:	4b08      	ldr	r3, [pc, #32]	; (8009acc <osKernelStart+0x48>)
 8009aac:	2202      	movs	r2, #2
 8009aae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ab0:	f001 fe12 	bl	800b6d8 <vTaskStartScheduler>
      stat = osOK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	607b      	str	r3, [r7, #4]
 8009ab8:	e002      	b.n	8009ac0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009abe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ac0:	687b      	ldr	r3, [r7, #4]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200000f4 	.word	0x200000f4

08009ad0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad6:	f3ef 8305 	mrs	r3, IPSR
 8009ada:	603b      	str	r3, [r7, #0]
  return(result);
 8009adc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009ae2:	f001 ff1b 	bl	800b91c <xTaskGetTickCountFromISR>
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	e002      	b.n	8009af0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009aea:	f001 ff07 	bl	800b8fc <xTaskGetTickCount>
 8009aee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009af0:	687b      	ldr	r3, [r7, #4]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b08e      	sub	sp, #56	; 0x38
 8009afe:	af04      	add	r7, sp, #16
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b0a:	f3ef 8305 	mrs	r3, IPSR
 8009b0e:	617b      	str	r3, [r7, #20]
  return(result);
 8009b10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d17e      	bne.n	8009c14 <osThreadNew+0x11a>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d07b      	beq.n	8009c14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b20:	2318      	movs	r3, #24
 8009b22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d045      	beq.n	8009bc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <osThreadNew+0x48>
        name = attr->name;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <osThreadNew+0x6e>
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	2b38      	cmp	r3, #56	; 0x38
 8009b5a:	d805      	bhi.n	8009b68 <osThreadNew+0x6e>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <osThreadNew+0x72>
        return (NULL);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e054      	b.n	8009c16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	089b      	lsrs	r3, r3, #2
 8009b7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00e      	beq.n	8009ba2 <osThreadNew+0xa8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2b5b      	cmp	r3, #91	; 0x5b
 8009b8a:	d90a      	bls.n	8009ba2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d006      	beq.n	8009ba2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <osThreadNew+0xa8>
        mem = 1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
 8009ba0:	e010      	b.n	8009bc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10c      	bne.n	8009bc4 <osThreadNew+0xca>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d108      	bne.n	8009bc4 <osThreadNew+0xca>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <osThreadNew+0xca>
          mem = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	e001      	b.n	8009bc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d110      	bne.n	8009bec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bd2:	9202      	str	r2, [sp, #8]
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	6a3a      	ldr	r2, [r7, #32]
 8009bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 fba3 	bl	800b32c <xTaskCreateStatic>
 8009be6:	4603      	mov	r3, r0
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	e013      	b.n	8009c14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d110      	bne.n	8009c14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	f107 0310 	add.w	r3, r7, #16
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f001 fbee 	bl	800b3e6 <xTaskCreate>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d001      	beq.n	8009c14 <osThreadNew+0x11a>
            hTask = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c14:	693b      	ldr	r3, [r7, #16]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3728      	adds	r7, #40	; 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c26:	f3ef 8305 	mrs	r3, IPSR
 8009c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <osDelay+0x1c>
    stat = osErrorISR;
 8009c32:	f06f 0305 	mvn.w	r3, #5
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e007      	b.n	8009c4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 fd13 	bl	800b670 <vTaskDelay>
    }
  }

  return (stat);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08a      	sub	sp, #40	; 0x28
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c64:	f3ef 8305 	mrs	r3, IPSR
 8009c68:	613b      	str	r3, [r7, #16]
  return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d175      	bne.n	8009d5c <osSemaphoreNew+0x108>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d072      	beq.n	8009d5c <osSemaphoreNew+0x108>
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d86e      	bhi.n	8009d5c <osSemaphoreNew+0x108>
    mem = -1;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d015      	beq.n	8009cb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <osSemaphoreNew+0x4c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	2b4f      	cmp	r3, #79	; 0x4f
 8009c98:	d902      	bls.n	8009ca0 <osSemaphoreNew+0x4c>
        mem = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e00c      	b.n	8009cba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <osSemaphoreNew+0x66>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <osSemaphoreNew+0x66>
          mem = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e001      	b.n	8009cba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cc0:	d04c      	beq.n	8009d5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d128      	bne.n	8009d1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10a      	bne.n	8009ce4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	9200      	str	r2, [sp, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f000 fb80 	bl	800a3e0 <xQueueGenericCreateStatic>
 8009ce0:	61f8      	str	r0, [r7, #28]
 8009ce2:	e005      	b.n	8009cf0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f000 fbf1 	bl	800a4d0 <xQueueGenericCreate>
 8009cee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d022      	beq.n	8009d3c <osSemaphoreNew+0xe8>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01f      	beq.n	8009d3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	69f8      	ldr	r0, [r7, #28]
 8009d04:	f000 fcac 	bl	800a660 <xQueueGenericSend>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d016      	beq.n	8009d3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009d0e:	69f8      	ldr	r0, [r7, #28]
 8009d10:	f001 f938 	bl	800af84 <vQueueDelete>
            hSemaphore = NULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e010      	b.n	8009d3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d108      	bne.n	8009d32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	461a      	mov	r2, r3
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 fc2e 	bl	800a58a <xQueueCreateCountingSemaphoreStatic>
 8009d2e:	61f8      	str	r0, [r7, #28]
 8009d30:	e004      	b.n	8009d3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d32:	68b9      	ldr	r1, [r7, #8]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 fc5f 	bl	800a5f8 <xQueueCreateCountingSemaphore>
 8009d3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00c      	beq.n	8009d5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	e001      	b.n	8009d54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d54:	6979      	ldr	r1, [r7, #20]
 8009d56:	69f8      	ldr	r0, [r7, #28]
 8009d58:	f001 fa60 	bl	800b21c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009d80:	f06f 0303 	mvn.w	r3, #3
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	e039      	b.n	8009dfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d88:	f3ef 8305 	mrs	r3, IPSR
 8009d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d022      	beq.n	8009dda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009d9a:	f06f 0303 	mvn.w	r3, #3
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	e02c      	b.n	8009dfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009da6:	f107 0308 	add.w	r3, r7, #8
 8009daa:	461a      	mov	r2, r3
 8009dac:	2100      	movs	r1, #0
 8009dae:	6938      	ldr	r0, [r7, #16]
 8009db0:	f001 f868 	bl	800ae84 <xQueueReceiveFromISR>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d003      	beq.n	8009dc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e01c      	b.n	8009dfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d019      	beq.n	8009dfc <osSemaphoreAcquire+0x94>
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <osSemaphoreAcquire+0xa0>)
 8009dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	e010      	b.n	8009dfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6938      	ldr	r0, [r7, #16]
 8009dde:	f000 ff45 	bl	800ac6c <xQueueSemaphoreTake>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d009      	beq.n	8009dfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009dee:	f06f 0301 	mvn.w	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e002      	b.n	8009dfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009df6:	f06f 0302 	mvn.w	r3, #2
 8009dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009dfc:	697b      	ldr	r3, [r7, #20]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009e22:	f06f 0303 	mvn.w	r3, #3
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e02c      	b.n	8009e84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e2a:	f3ef 8305 	mrs	r3, IPSR
 8009e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d01a      	beq.n	8009e6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6938      	ldr	r0, [r7, #16]
 8009e42:	f000 fda6 	bl	800a992 <xQueueGiveFromISR>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d003      	beq.n	8009e54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009e4c:	f06f 0302 	mvn.w	r3, #2
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	e017      	b.n	8009e84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d014      	beq.n	8009e84 <osSemaphoreRelease+0x78>
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <osSemaphoreRelease+0x84>)
 8009e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	e00b      	b.n	8009e84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2100      	movs	r1, #0
 8009e72:	6938      	ldr	r0, [r7, #16]
 8009e74:	f000 fbf4 	bl	800a660 <xQueueGenericSend>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d002      	beq.n	8009e84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009e7e:	f06f 0302 	mvn.w	r3, #2
 8009e82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009e84:	697b      	ldr	r3, [r7, #20]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea0:	f3ef 8305 	mrs	r3, IPSR
 8009ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009eac:	f06f 0305 	mvn.w	r3, #5
 8009eb0:	617b      	str	r3, [r7, #20]
 8009eb2:	e00e      	b.n	8009ed2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009eba:	f06f 0303 	mvn.w	r3, #3
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e007      	b.n	8009ed2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009ec2:	6938      	ldr	r0, [r7, #16]
 8009ec4:	f001 f9d4 	bl	800b270 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009ecc:	6938      	ldr	r0, [r7, #16]
 8009ece:	f001 f859 	bl	800af84 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009ed2:	697b      	ldr	r3, [r7, #20]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	; 0x28
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eec:	f3ef 8305 	mrs	r3, IPSR
 8009ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ef2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d15f      	bne.n	8009fb8 <osMessageQueueNew+0xdc>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d05c      	beq.n	8009fb8 <osMessageQueueNew+0xdc>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d059      	beq.n	8009fb8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d029      	beq.n	8009f64 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d012      	beq.n	8009f3e <osMessageQueueNew+0x62>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b4f      	cmp	r3, #79	; 0x4f
 8009f1e:	d90e      	bls.n	8009f3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	fb01 f303 	mul.w	r3, r1, r3
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d302      	bcc.n	8009f3e <osMessageQueueNew+0x62>
        mem = 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	61bb      	str	r3, [r7, #24]
 8009f3c:	e014      	b.n	8009f68 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d110      	bne.n	8009f68 <osMessageQueueNew+0x8c>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10c      	bne.n	8009f68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d108      	bne.n	8009f68 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <osMessageQueueNew+0x8c>
          mem = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e001      	b.n	8009f68 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d10b      	bne.n	8009f86 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	2100      	movs	r1, #0
 8009f78:	9100      	str	r1, [sp, #0]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fa2f 	bl	800a3e0 <xQueueGenericCreateStatic>
 8009f82:	61f8      	str	r0, [r7, #28]
 8009f84:	e008      	b.n	8009f98 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d105      	bne.n	8009f98 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 fa9d 	bl	800a4d0 <xQueueGenericCreate>
 8009f96:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00c      	beq.n	8009fb8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <osMessageQueueNew+0xd0>
        name = attr->name;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e001      	b.n	8009fb0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009fac:	2300      	movs	r3, #0
 8009fae:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009fb0:	6979      	ldr	r1, [r7, #20]
 8009fb2:	69f8      	ldr	r0, [r7, #28]
 8009fb4:	f001 f932 	bl	800b21c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009fb8:	69fb      	ldr	r3, [r7, #28]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fdc:	f3ef 8305 	mrs	r3, IPSR
 8009fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d028      	beq.n	800a03a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d005      	beq.n	8009ffa <osMessageQueuePut+0x36>
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <osMessageQueuePut+0x36>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009ffa:	f06f 0303 	mvn.w	r3, #3
 8009ffe:	61fb      	str	r3, [r7, #28]
 800a000:	e038      	b.n	800a074 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a002:	2300      	movs	r3, #0
 800a004:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a006:	f107 0210 	add.w	r2, r7, #16
 800a00a:	2300      	movs	r3, #0
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	69b8      	ldr	r0, [r7, #24]
 800a010:	f000 fc24 	bl	800a85c <xQueueGenericSendFromISR>
 800a014:	4603      	mov	r3, r0
 800a016:	2b01      	cmp	r3, #1
 800a018:	d003      	beq.n	800a022 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a01a:	f06f 0302 	mvn.w	r3, #2
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	e028      	b.n	800a074 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d025      	beq.n	800a074 <osMessageQueuePut+0xb0>
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <osMessageQueuePut+0xbc>)
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	e01c      	b.n	800a074 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <osMessageQueuePut+0x82>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a046:	f06f 0303 	mvn.w	r3, #3
 800a04a:	61fb      	str	r3, [r7, #28]
 800a04c:	e012      	b.n	800a074 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a04e:	2300      	movs	r3, #0
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	69b8      	ldr	r0, [r7, #24]
 800a056:	f000 fb03 	bl	800a660 <xQueueGenericSend>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d009      	beq.n	800a074 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a066:	f06f 0301 	mvn.w	r3, #1
 800a06a:	61fb      	str	r3, [r7, #28]
 800a06c:	e002      	b.n	800a074 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a06e:	f06f 0302 	mvn.w	r3, #2
 800a072:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a09a:	f3ef 8305 	mrs	r3, IPSR
 800a09e:	617b      	str	r3, [r7, #20]
  return(result);
 800a0a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d028      	beq.n	800a0f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d005      	beq.n	800a0b8 <osMessageQueueGet+0x34>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <osMessageQueueGet+0x34>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d003      	beq.n	800a0c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a0b8:	f06f 0303 	mvn.w	r3, #3
 800a0bc:	61fb      	str	r3, [r7, #28]
 800a0be:	e037      	b.n	800a130 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a0c4:	f107 0310 	add.w	r3, r7, #16
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	69b8      	ldr	r0, [r7, #24]
 800a0ce:	f000 fed9 	bl	800ae84 <xQueueReceiveFromISR>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d003      	beq.n	800a0e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a0d8:	f06f 0302 	mvn.w	r3, #2
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	e027      	b.n	800a130 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d024      	beq.n	800a130 <osMessageQueueGet+0xac>
 800a0e6:	4b15      	ldr	r3, [pc, #84]	; (800a13c <osMessageQueueGet+0xb8>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	e01b      	b.n	800a130 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <osMessageQueueGet+0x80>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a104:	f06f 0303 	mvn.w	r3, #3
 800a108:	61fb      	str	r3, [r7, #28]
 800a10a:	e011      	b.n	800a130 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	69b8      	ldr	r0, [r7, #24]
 800a112:	f000 fccb 	bl	800aaac <xQueueReceive>
 800a116:	4603      	mov	r3, r0
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d009      	beq.n	800a130 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a122:	f06f 0301 	mvn.w	r3, #1
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e002      	b.n	800a130 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a12a:	f06f 0302 	mvn.w	r3, #2
 800a12e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a130:	69fb      	ldr	r3, [r7, #28]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3720      	adds	r7, #32
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4a07      	ldr	r2, [pc, #28]	; (800a16c <vApplicationGetIdleTaskMemory+0x2c>)
 800a150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4a06      	ldr	r2, [pc, #24]	; (800a170 <vApplicationGetIdleTaskMemory+0x30>)
 800a156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2280      	movs	r2, #128	; 0x80
 800a15c:	601a      	str	r2, [r3, #0]
}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	200000f8 	.word	0x200000f8
 800a170:	20000154 	.word	0x20000154

0800a174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4a07      	ldr	r2, [pc, #28]	; (800a1a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a06      	ldr	r2, [pc, #24]	; (800a1a4 <vApplicationGetTimerTaskMemory+0x30>)
 800a18a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20000354 	.word	0x20000354
 800a1a4:	200003b0 	.word	0x200003b0

0800a1a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f103 0208 	add.w	r2, r3, #8
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f103 0208 	add.w	r2, r3, #8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 0208 	add.w	r2, r3, #8
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a24a:	b480      	push	{r7}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a260:	d103      	bne.n	800a26a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e00c      	b.n	800a284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3308      	adds	r3, #8
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e002      	b.n	800a278 <vListInsert+0x2e>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	429a      	cmp	r2, r3
 800a282:	d2f6      	bcs.n	800a272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	601a      	str	r2, [r3, #0]
}
 800a2b0:	bf00      	nop
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	6892      	ldr	r2, [r2, #8]
 800a2d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	6852      	ldr	r2, [r2, #4]
 800a2dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d103      	bne.n	800a2f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	1e5a      	subs	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a33a:	f002 fc83 	bl	800cc44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a34a:	fb01 f303 	mul.w	r3, r1, r3
 800a34e:	441a      	add	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36a:	3b01      	subs	r3, #1
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	441a      	add	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	22ff      	movs	r2, #255	; 0xff
 800a37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	22ff      	movs	r2, #255	; 0xff
 800a386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d114      	bne.n	800a3ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01a      	beq.n	800a3ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3310      	adds	r3, #16
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 fc37 	bl	800bc10 <xTaskRemoveFromEventList>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d012      	beq.n	800a3ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <xQueueGenericReset+0xcc>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	e009      	b.n	800a3ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3310      	adds	r3, #16
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fef2 	bl	800a1a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3324      	adds	r3, #36	; 0x24
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff feed 	bl	800a1a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3ce:	f002 fc69 	bl	800cca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3d2:	2301      	movs	r3, #1
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	; 0x38
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <xQueueGenericCreateStatic+0x52>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <xQueueGenericCreateStatic+0x56>
 800a432:	2301      	movs	r3, #1
 800a434:	e000      	b.n	800a438 <xQueueGenericCreateStatic+0x58>
 800a436:	2300      	movs	r3, #0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	623b      	str	r3, [r7, #32]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <xQueueGenericCreateStatic+0x7e>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <xQueueGenericCreateStatic+0x82>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueGenericCreateStatic+0x84>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	61fb      	str	r3, [r7, #28]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a47e:	2350      	movs	r3, #80	; 0x50
 800a480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b50      	cmp	r3, #80	; 0x50
 800a486:	d00a      	beq.n	800a49e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	61bb      	str	r3, [r7, #24]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a49e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00d      	beq.n	800a4c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f83f 	bl	800a544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3730      	adds	r7, #48	; 0x30
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	613b      	str	r3, [r7, #16]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	fb02 f303 	mul.w	r3, r2, r3
 800a502:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	3350      	adds	r3, #80	; 0x50
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 fcbd 	bl	800ce88 <pvPortMalloc>
 800a50e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d011      	beq.n	800a53a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	3350      	adds	r3, #80	; 0x50
 800a51e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a528:	79fa      	ldrb	r2, [r7, #7]
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	4613      	mov	r3, r2
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	68b9      	ldr	r1, [r7, #8]
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 f805 	bl	800a544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a53a:	69bb      	ldr	r3, [r7, #24]
	}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3720      	adds	r7, #32
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d103      	bne.n	800a560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	e002      	b.n	800a566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a572:	2101      	movs	r1, #1
 800a574:	69b8      	ldr	r0, [r7, #24]
 800a576:	f7ff fecb 	bl	800a310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	78fa      	ldrb	r2, [r7, #3]
 800a57e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b08a      	sub	sp, #40	; 0x28
 800a58e:	af02      	add	r7, sp, #8
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	61bb      	str	r3, [r7, #24]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d90a      	bls.n	800a5d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	617b      	str	r3, [r7, #20]
}
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff ff00 	bl	800a3e0 <xQueueGenericCreateStatic>
 800a5e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
	}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	613b      	str	r3, [r7, #16]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d90a      	bls.n	800a63c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a63c:	2202      	movs	r2, #2
 800a63e:	2100      	movs	r1, #0
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff ff45 	bl	800a4d0 <xQueueGenericCreate>
 800a646:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a654:	697b      	ldr	r3, [r7, #20]
	}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a66e:	2300      	movs	r3, #0
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueGenericSend+0x32>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <xQueueGenericSend+0x40>
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <xQueueGenericSend+0x44>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e000      	b.n	800a6a6 <xQueueGenericSend+0x46>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xQueueGenericSend+0x60>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d103      	bne.n	800a6ce <xQueueGenericSend+0x6e>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d101      	bne.n	800a6d2 <xQueueGenericSend+0x72>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <xQueueGenericSend+0x74>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericSend+0x8e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6ee:	f001 fc4d 	bl	800bf8c <xTaskGetSchedulerState>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <xQueueGenericSend+0x9e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <xQueueGenericSend+0xa2>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <xQueueGenericSend+0xa4>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0xbe>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	61fb      	str	r3, [r7, #28]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a71e:	f002 fa91 	bl	800cc44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d302      	bcc.n	800a734 <xQueueGenericSend+0xd4>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d129      	bne.n	800a788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	68b9      	ldr	r1, [r7, #8]
 800a738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a73a:	f000 fc5e 	bl	800affa <prvCopyDataToQueue>
 800a73e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d010      	beq.n	800a76a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	3324      	adds	r3, #36	; 0x24
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 fa5f 	bl	800bc10 <xTaskRemoveFromEventList>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d013      	beq.n	800a780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a758:	4b3f      	ldr	r3, [pc, #252]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	e00a      	b.n	800a780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d007      	beq.n	800a780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a770:	4b39      	ldr	r3, [pc, #228]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a780:	f002 fa90 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800a784:	2301      	movs	r3, #1
 800a786:	e063      	b.n	800a850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a78e:	f002 fa89 	bl	800cca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a792:	2300      	movs	r3, #0
 800a794:	e05c      	b.n	800a850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a79c:	f107 0314 	add.w	r3, r7, #20
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 fa99 	bl	800bcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7aa:	f002 fa7b 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ae:	f000 fff9 	bl	800b7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7b2:	f002 fa47 	bl	800cc44 <vPortEnterCritical>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c2:	d103      	bne.n	800a7cc <xQueueGenericSend+0x16c>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7d2:	b25b      	sxtb	r3, r3
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d8:	d103      	bne.n	800a7e2 <xQueueGenericSend+0x182>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7e2:	f002 fa5f 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7e6:	1d3a      	adds	r2, r7, #4
 800a7e8:	f107 0314 	add.w	r3, r7, #20
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 fa88 	bl	800bd04 <xTaskCheckForTimeOut>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d124      	bne.n	800a844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7fc:	f000 fcf5 	bl	800b1ea <prvIsQueueFull>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	3310      	adds	r3, #16
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 f9ae 	bl	800bb70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a816:	f000 fc80 	bl	800b11a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a81a:	f000 ffd1 	bl	800b7c0 <xTaskResumeAll>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	f47f af7c 	bne.w	800a71e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	e772      	b.n	800a71e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83a:	f000 fc6e 	bl	800b11a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a83e:	f000 ffbf 	bl	800b7c0 <xTaskResumeAll>
 800a842:	e76c      	b.n	800a71e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a846:	f000 fc68 	bl	800b11a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a84a:	f000 ffb9 	bl	800b7c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a84e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a850:	4618      	mov	r0, r3
 800a852:	3738      	adds	r7, #56	; 0x38
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b090      	sub	sp, #64	; 0x40
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <xQueueGenericSendFromISR+0x3c>
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <xQueueGenericSendFromISR+0x40>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <xQueueGenericSendFromISR+0x42>
 800a89c:	2300      	movs	r3, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSendFromISR+0x6a>
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSendFromISR+0x6e>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSendFromISR+0x70>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8e6:	f002 fa8f 	bl	800ce08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	61fa      	str	r2, [r7, #28]
 800a900:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90e:	429a      	cmp	r2, r3
 800a910:	d302      	bcc.n	800a918 <xQueueGenericSendFromISR+0xbc>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d12f      	bne.n	800a978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a92e:	f000 fb64 	bl	800affa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a93a:	d112      	bne.n	800a962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	d016      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	3324      	adds	r3, #36	; 0x24
 800a948:	4618      	mov	r0, r3
 800a94a:	f001 f961 	bl	800bc10 <xTaskRemoveFromEventList>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00e      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	e007      	b.n	800a972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a966:	3301      	adds	r3, #1
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	b25a      	sxtb	r2, r3
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a972:	2301      	movs	r3, #1
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a976:	e001      	b.n	800a97c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3740      	adds	r7, #64	; 0x40
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b08e      	sub	sp, #56	; 0x38
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	623b      	str	r3, [r7, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	61fb      	str	r3, [r7, #28]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d103      	bne.n	800a9ea <xQueueGiveFromISR+0x58>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <xQueueGiveFromISR+0x5c>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e000      	b.n	800a9f0 <xQueueGiveFromISR+0x5e>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	61bb      	str	r3, [r7, #24]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa0a:	f002 f9fd 	bl	800ce08 <vPortValidateInterruptPriority>
	__asm volatile
 800aa0e:	f3ef 8211 	mrs	r2, BASEPRI
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	617a      	str	r2, [r7, #20]
 800aa24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d22b      	bcs.n	800aa92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa54:	d112      	bne.n	800aa7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d016      	beq.n	800aa8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa60:	3324      	adds	r3, #36	; 0x24
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 f8d4 	bl	800bc10 <xTaskRemoveFromEventList>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	e007      	b.n	800aa8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa80:	3301      	adds	r3, #1
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	b25a      	sxtb	r2, r3
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa90:	e001      	b.n	800aa96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f383 8811 	msr	BASEPRI, r3
}
 800aaa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3738      	adds	r7, #56	; 0x38
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08c      	sub	sp, #48	; 0x30
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <xQueueReceive+0x30>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	623b      	str	r3, [r7, #32]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <xQueueReceive+0x3e>
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xQueueReceive+0x42>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xQueueReceive+0x44>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueReceive+0x5e>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	61fb      	str	r3, [r7, #28]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab0a:	f001 fa3f 	bl	800bf8c <xTaskGetSchedulerState>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <xQueueReceive+0x6e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <xQueueReceive+0x72>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <xQueueReceive+0x74>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10a      	bne.n	800ab3a <xQueueReceive+0x8e>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3a:	f002 f883 	bl	800cc44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01f      	beq.n	800ab8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4e:	f000 fabe 	bl	800b0ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	1e5a      	subs	r2, r3, #1
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00f      	beq.n	800ab82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	3310      	adds	r3, #16
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f852 	bl	800bc10 <xTaskRemoveFromEventList>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab72:	4b3d      	ldr	r3, [pc, #244]	; (800ac68 <xQueueReceive+0x1bc>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab82:	f002 f88f 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e069      	b.n	800ac5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab90:	f002 f888 	bl	800cca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e062      	b.n	800ac5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 f898 	bl	800bcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abac:	f002 f87a 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abb0:	f000 fdf8 	bl	800b7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abb4:	f002 f846 	bl	800cc44 <vPortEnterCritical>
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc4:	d103      	bne.n	800abce <xQueueReceive+0x122>
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abda:	d103      	bne.n	800abe4 <xQueueReceive+0x138>
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe4:	f002 f85e 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abe8:	1d3a      	adds	r2, r7, #4
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 f887 	bl	800bd04 <xTaskCheckForTimeOut>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d123      	bne.n	800ac44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f000 fade 	bl	800b1be <prvIsQueueEmpty>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d017      	beq.n	800ac38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	3324      	adds	r3, #36	; 0x24
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 ffad 	bl	800bb70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac18:	f000 fa7f 	bl	800b11a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac1c:	f000 fdd0 	bl	800b7c0 <xTaskResumeAll>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d189      	bne.n	800ab3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <xQueueReceive+0x1bc>)
 800ac28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	e780      	b.n	800ab3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3a:	f000 fa6e 	bl	800b11a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac3e:	f000 fdbf 	bl	800b7c0 <xTaskResumeAll>
 800ac42:	e77a      	b.n	800ab3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac46:	f000 fa68 	bl	800b11a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac4a:	f000 fdb9 	bl	800b7c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac50:	f000 fab5 	bl	800b1be <prvIsQueueEmpty>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f43f af6f 	beq.w	800ab3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3730      	adds	r7, #48	; 0x30
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08e      	sub	sp, #56	; 0x38
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	623b      	str	r3, [r7, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	61fb      	str	r3, [r7, #28]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acbc:	f001 f966 	bl	800bf8c <xTaskGetSchedulerState>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <xQueueSemaphoreTake+0x60>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <xQueueSemaphoreTake+0x64>
 800accc:	2301      	movs	r3, #1
 800acce:	e000      	b.n	800acd2 <xQueueSemaphoreTake+0x66>
 800acd0:	2300      	movs	r3, #0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	61bb      	str	r3, [r7, #24]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acec:	f001 ffaa 	bl	800cc44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d024      	beq.n	800ad46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	1e5a      	subs	r2, r3, #1
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d104      	bne.n	800ad16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad0c:	f001 fab4 	bl	800c278 <pvTaskIncrementMutexHeldCount>
 800ad10:	4602      	mov	r2, r0
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00f      	beq.n	800ad3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	3310      	adds	r3, #16
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 ff74 	bl	800bc10 <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad2e:	4b54      	ldr	r3, [pc, #336]	; (800ae80 <xQueueSemaphoreTake+0x214>)
 800ad30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad3e:	f001 ffb1 	bl	800cca4 <vPortExitCritical>
				return pdPASS;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e097      	b.n	800ae76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d111      	bne.n	800ad70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	617b      	str	r3, [r7, #20]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad68:	f001 ff9c 	bl	800cca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e082      	b.n	800ae76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad76:	f107 030c 	add.w	r3, r7, #12
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ffac 	bl	800bcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad84:	f001 ff8e 	bl	800cca4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad88:	f000 fd0c 	bl	800b7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad8c:	f001 ff5a 	bl	800cc44 <vPortEnterCritical>
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad96:	b25b      	sxtb	r3, r3
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad9c:	d103      	bne.n	800ada6 <xQueueSemaphoreTake+0x13a>
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adac:	b25b      	sxtb	r3, r3
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adb2:	d103      	bne.n	800adbc <xQueueSemaphoreTake+0x150>
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adbc:	f001 ff72 	bl	800cca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adc0:	463a      	mov	r2, r7
 800adc2:	f107 030c 	add.w	r3, r7, #12
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 ff9b 	bl	800bd04 <xTaskCheckForTimeOut>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d132      	bne.n	800ae3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800add6:	f000 f9f2 	bl	800b1be <prvIsQueueEmpty>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d026      	beq.n	800ae2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ade8:	f001 ff2c 	bl	800cc44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 f8e9 	bl	800bfc8 <xTaskPriorityInherit>
 800adf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800adf8:	f001 ff54 	bl	800cca4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	3324      	adds	r3, #36	; 0x24
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 feb3 	bl	800bb70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae0c:	f000 f985 	bl	800b11a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae10:	f000 fcd6 	bl	800b7c0 <xTaskResumeAll>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f47f af68 	bne.w	800acec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae1c:	4b18      	ldr	r3, [pc, #96]	; (800ae80 <xQueueSemaphoreTake+0x214>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	e75e      	b.n	800acec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae30:	f000 f973 	bl	800b11a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae34:	f000 fcc4 	bl	800b7c0 <xTaskResumeAll>
 800ae38:	e758      	b.n	800acec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3c:	f000 f96d 	bl	800b11a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae40:	f000 fcbe 	bl	800b7c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae46:	f000 f9ba 	bl	800b1be <prvIsQueueEmpty>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f43f af4d 	beq.w	800acec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00d      	beq.n	800ae74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae58:	f001 fef4 	bl	800cc44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5e:	f000 f8b4 	bl	800afca <prvGetDisinheritPriorityAfterTimeout>
 800ae62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 f982 	bl	800c174 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae70:	f001 ff18 	bl	800cca4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3738      	adds	r7, #56	; 0x38
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	; 0x38
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	623b      	str	r3, [r7, #32]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d103      	bne.n	800aebe <xQueueReceiveFromISR+0x3a>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <xQueueReceiveFromISR+0x3e>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <xQueueReceiveFromISR+0x40>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61fb      	str	r3, [r7, #28]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aede:	f001 ff93 	bl	800ce08 <vPortValidateInterruptPriority>
	__asm volatile
 800aee2:	f3ef 8211 	mrs	r2, BASEPRI
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	61ba      	str	r2, [r7, #24]
 800aef8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aefa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	2b00      	cmp	r3, #0
 800af08:	d02f      	beq.n	800af6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af18:	f000 f8d9 	bl	800b0ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	1e5a      	subs	r2, r3, #1
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af2c:	d112      	bne.n	800af54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d016      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	3310      	adds	r3, #16
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fe68 	bl	800bc10 <xTaskRemoveFromEventList>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00e      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e007      	b.n	800af64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af58:	3301      	adds	r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	b25a      	sxtb	r2, r3
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af64:	2301      	movs	r3, #1
 800af66:	637b      	str	r3, [r7, #52]	; 0x34
 800af68:	e001      	b.n	800af6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f383 8811 	msr	BASEPRI, r3
}
 800af78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3738      	adds	r7, #56	; 0x38
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <vQueueDelete+0x28>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60bb      	str	r3, [r7, #8]
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f95f 	bl	800b270 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f002 f82f 	bl	800d020 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afca:	b480      	push	{r7}
 800afcc:	b085      	sub	sp, #20
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d006      	beq.n	800afe8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e001      	b.n	800afec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afec:	68fb      	ldr	r3, [r7, #12]
	}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10d      	bne.n	800b034 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d14d      	bne.n	800b0bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f837 	bl	800c098 <xTaskPriorityDisinherit>
 800b02a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	609a      	str	r2, [r3, #8]
 800b032:	e043      	b.n	800b0bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d119      	bne.n	800b06e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6858      	ldr	r0, [r3, #4]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	461a      	mov	r2, r3
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	f002 f92d 	bl	800d2a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b052:	441a      	add	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	429a      	cmp	r2, r3
 800b062:	d32b      	bcc.n	800b0bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	605a      	str	r2, [r3, #4]
 800b06c:	e026      	b.n	800b0bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68d8      	ldr	r0, [r3, #12]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	461a      	mov	r2, r3
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	f002 f913 	bl	800d2a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	425b      	negs	r3, r3
 800b088:	441a      	add	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	429a      	cmp	r2, r3
 800b098:	d207      	bcs.n	800b0aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	425b      	negs	r3, r3
 800b0a4:	441a      	add	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d105      	bne.n	800b0bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0c4:	697b      	ldr	r3, [r7, #20]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d018      	beq.n	800b112 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e8:	441a      	add	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d303      	bcc.n	800b102 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68d9      	ldr	r1, [r3, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	461a      	mov	r2, r3
 800b10c:	6838      	ldr	r0, [r7, #0]
 800b10e:	f002 f8c9 	bl	800d2a4 <memcpy>
	}
}
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b122:	f001 fd8f 	bl	800cc44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b12c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b12e:	e011      	b.n	800b154 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	d012      	beq.n	800b15e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3324      	adds	r3, #36	; 0x24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fd67 	bl	800bc10 <xTaskRemoveFromEventList>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d001      	beq.n	800b14c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b148:	f000 fe3e 	bl	800bdc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	3b01      	subs	r3, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dce9      	bgt.n	800b130 <prvUnlockQueue+0x16>
 800b15c:	e000      	b.n	800b160 <prvUnlockQueue+0x46>
					break;
 800b15e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	22ff      	movs	r2, #255	; 0xff
 800b164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b168:	f001 fd9c 	bl	800cca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b16c:	f001 fd6a 	bl	800cc44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b176:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b178:	e011      	b.n	800b19e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d012      	beq.n	800b1a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3310      	adds	r3, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fd42 	bl	800bc10 <xTaskRemoveFromEventList>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b192:	f000 fe19 	bl	800bdc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b196:	7bbb      	ldrb	r3, [r7, #14]
 800b198:	3b01      	subs	r3, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b19e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	dce9      	bgt.n	800b17a <prvUnlockQueue+0x60>
 800b1a6:	e000      	b.n	800b1aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	22ff      	movs	r2, #255	; 0xff
 800b1ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1b2:	f001 fd77 	bl	800cca4 <vPortExitCritical>
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1c6:	f001 fd3d 	bl	800cc44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d102      	bne.n	800b1d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e001      	b.n	800b1dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1dc:	f001 fd62 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1f2:	f001 fd27 	bl	800cc44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d102      	bne.n	800b208 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b202:	2301      	movs	r3, #1
 800b204:	60fb      	str	r3, [r7, #12]
 800b206:	e001      	b.n	800b20c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b20c:	f001 fd4a 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800b210:	68fb      	ldr	r3, [r7, #12]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e014      	b.n	800b256 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b22c:	4a0f      	ldr	r2, [pc, #60]	; (800b26c <vQueueAddToRegistry+0x50>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10b      	bne.n	800b250 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b238:	490c      	ldr	r1, [pc, #48]	; (800b26c <vQueueAddToRegistry+0x50>)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b242:	4a0a      	ldr	r2, [pc, #40]	; (800b26c <vQueueAddToRegistry+0x50>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	4413      	add	r3, r2
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b24e:	e006      	b.n	800b25e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b07      	cmp	r3, #7
 800b25a:	d9e7      	bls.n	800b22c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b25c:	bf00      	nop
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	200043b0 	.word	0x200043b0

0800b270 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	e016      	b.n	800b2ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b27e:	4a10      	ldr	r2, [pc, #64]	; (800b2c0 <vQueueUnregisterQueue+0x50>)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	4413      	add	r3, r2
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10b      	bne.n	800b2a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b28e:	4a0c      	ldr	r2, [pc, #48]	; (800b2c0 <vQueueUnregisterQueue+0x50>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2100      	movs	r1, #0
 800b294:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b298:	4a09      	ldr	r2, [pc, #36]	; (800b2c0 <vQueueUnregisterQueue+0x50>)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	00db      	lsls	r3, r3, #3
 800b29e:	4413      	add	r3, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	605a      	str	r2, [r3, #4]
				break;
 800b2a4:	e006      	b.n	800b2b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b07      	cmp	r3, #7
 800b2b0:	d9e5      	bls.n	800b27e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	200043b0 	.word	0x200043b0

0800b2c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2d4:	f001 fcb6 	bl	800cc44 <vPortEnterCritical>
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2de:	b25b      	sxtb	r3, r3
 800b2e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2e4:	d103      	bne.n	800b2ee <vQueueWaitForMessageRestricted+0x2a>
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2f4:	b25b      	sxtb	r3, r3
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2fa:	d103      	bne.n	800b304 <vQueueWaitForMessageRestricted+0x40>
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b304:	f001 fcce 	bl	800cca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	3324      	adds	r3, #36	; 0x24
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fc4d 	bl	800bbb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b31e:	6978      	ldr	r0, [r7, #20]
 800b320:	f7ff fefb 	bl	800b11a <prvUnlockQueue>
	}
 800b324:	bf00      	nop
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08e      	sub	sp, #56	; 0x38
 800b330:	af04      	add	r7, sp, #16
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	623b      	str	r3, [r7, #32]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <xTaskCreateStatic+0x46>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	61fb      	str	r3, [r7, #28]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b372:	235c      	movs	r3, #92	; 0x5c
 800b374:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	2b5c      	cmp	r3, #92	; 0x5c
 800b37a:	d00a      	beq.n	800b392 <xTaskCreateStatic+0x66>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	61bb      	str	r3, [r7, #24]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b392:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01e      	beq.n	800b3d8 <xTaskCreateStatic+0xac>
 800b39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01b      	beq.n	800b3d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	9302      	str	r3, [sp, #8]
 800b3ba:	f107 0314 	add.w	r3, r7, #20
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	68b9      	ldr	r1, [r7, #8]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 f850 	bl	800b470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3d2:	f000 f8dd 	bl	800b590 <prvAddNewTaskToReadyList>
 800b3d6:	e001      	b.n	800b3dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3dc:	697b      	ldr	r3, [r7, #20]
	}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3728      	adds	r7, #40	; 0x28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b08c      	sub	sp, #48	; 0x30
 800b3ea:	af04      	add	r7, sp, #16
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	603b      	str	r3, [r7, #0]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 fd44 	bl	800ce88 <pvPortMalloc>
 800b400:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00e      	beq.n	800b426 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b408:	205c      	movs	r0, #92	; 0x5c
 800b40a:	f001 fd3d 	bl	800ce88 <pvPortMalloc>
 800b40e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	631a      	str	r2, [r3, #48]	; 0x30
 800b41c:	e005      	b.n	800b42a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b41e:	6978      	ldr	r0, [r7, #20]
 800b420:	f001 fdfe 	bl	800d020 <vPortFree>
 800b424:	e001      	b.n	800b42a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d017      	beq.n	800b460 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	9302      	str	r3, [sp, #8]
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68b9      	ldr	r1, [r7, #8]
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f80e 	bl	800b470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b454:	69f8      	ldr	r0, [r7, #28]
 800b456:	f000 f89b 	bl	800b590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b45a:	2301      	movs	r3, #1
 800b45c:	61bb      	str	r3, [r7, #24]
 800b45e:	e002      	b.n	800b466 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b464:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b466:	69bb      	ldr	r3, [r7, #24]
	}
 800b468:	4618      	mov	r0, r3
 800b46a:	3720      	adds	r7, #32
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	461a      	mov	r2, r3
 800b488:	21a5      	movs	r1, #165	; 0xa5
 800b48a:	f001 ff19 	bl	800d2c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b498:	3b01      	subs	r3, #1
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f023 0307 	bic.w	r3, r3, #7
 800b4a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00a      	beq.n	800b4c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	617b      	str	r3, [r7, #20]
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01f      	beq.n	800b50e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	e012      	b.n	800b4fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	7819      	ldrb	r1, [r3, #0]
 800b4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	3334      	adds	r3, #52	; 0x34
 800b4e4:	460a      	mov	r2, r1
 800b4e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d006      	beq.n	800b502 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b0f      	cmp	r3, #15
 800b4fe:	d9e9      	bls.n	800b4d4 <prvInitialiseNewTask+0x64>
 800b500:	e000      	b.n	800b504 <prvInitialiseNewTask+0x94>
			{
				break;
 800b502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b50c:	e003      	b.n	800b516 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	2b37      	cmp	r3, #55	; 0x37
 800b51a:	d901      	bls.n	800b520 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b51c:	2337      	movs	r3, #55	; 0x37
 800b51e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b524:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b52a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	2200      	movs	r2, #0
 800b530:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	3304      	adds	r3, #4
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fe56 	bl	800a1e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	3318      	adds	r3, #24
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fe51 	bl	800a1e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	68f9      	ldr	r1, [r7, #12]
 800b56e:	69b8      	ldr	r0, [r7, #24]
 800b570:	f001 fa38 	bl	800c9e4 <pxPortInitialiseStack>
 800b574:	4602      	mov	r2, r0
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b598:	f001 fb54 	bl	800cc44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b59c:	4b2d      	ldr	r3, [pc, #180]	; (800b654 <prvAddNewTaskToReadyList+0xc4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	4a2c      	ldr	r2, [pc, #176]	; (800b654 <prvAddNewTaskToReadyList+0xc4>)
 800b5a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5a6:	4b2c      	ldr	r3, [pc, #176]	; (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5ae:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5b4:	4b27      	ldr	r3, [pc, #156]	; (800b654 <prvAddNewTaskToReadyList+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d110      	bne.n	800b5de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5bc:	f000 fc28 	bl	800be10 <prvInitialiseTaskLists>
 800b5c0:	e00d      	b.n	800b5de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5c2:	4b26      	ldr	r3, [pc, #152]	; (800b65c <prvAddNewTaskToReadyList+0xcc>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d109      	bne.n	800b5de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5ca:	4b23      	ldr	r3, [pc, #140]	; (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d802      	bhi.n	800b5de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5d8:	4a1f      	ldr	r2, [pc, #124]	; (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5de:	4b20      	ldr	r3, [pc, #128]	; (800b660 <prvAddNewTaskToReadyList+0xd0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a1e      	ldr	r2, [pc, #120]	; (800b660 <prvAddNewTaskToReadyList+0xd0>)
 800b5e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5e8:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <prvAddNewTaskToReadyList+0xd0>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <prvAddNewTaskToReadyList+0xd4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <prvAddNewTaskToReadyList+0x74>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	4a18      	ldr	r2, [pc, #96]	; (800b664 <prvAddNewTaskToReadyList+0xd4>)
 800b602:	6013      	str	r3, [r2, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4613      	mov	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4a15      	ldr	r2, [pc, #84]	; (800b668 <prvAddNewTaskToReadyList+0xd8>)
 800b612:	441a      	add	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	4619      	mov	r1, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	f7fe fdf1 	bl	800a202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b620:	f001 fb40 	bl	800cca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b624:	4b0d      	ldr	r3, [pc, #52]	; (800b65c <prvAddNewTaskToReadyList+0xcc>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b636:	429a      	cmp	r2, r3
 800b638:	d207      	bcs.n	800b64a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b63a:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <prvAddNewTaskToReadyList+0xdc>)
 800b63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000c84 	.word	0x20000c84
 800b658:	200007b0 	.word	0x200007b0
 800b65c:	20000c90 	.word	0x20000c90
 800b660:	20000ca0 	.word	0x20000ca0
 800b664:	20000c8c 	.word	0x20000c8c
 800b668:	200007b4 	.word	0x200007b4
 800b66c:	e000ed04 	.word	0xe000ed04

0800b670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d017      	beq.n	800b6b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <vTaskDelay+0x60>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <vTaskDelay+0x30>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60bb      	str	r3, [r7, #8]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6a0:	f000 f880 	bl	800b7a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fdfa 	bl	800c2a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6ac:	f000 f888 	bl	800b7c0 <xTaskResumeAll>
 800b6b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d107      	bne.n	800b6c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6b8:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <vTaskDelay+0x64>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c8:	bf00      	nop
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20000cac 	.word	0x20000cac
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6e6:	463a      	mov	r2, r7
 800b6e8:	1d39      	adds	r1, r7, #4
 800b6ea:	f107 0308 	add.w	r3, r7, #8
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fd26 	bl	800a140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	9202      	str	r2, [sp, #8]
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	460a      	mov	r2, r1
 800b706:	4921      	ldr	r1, [pc, #132]	; (800b78c <vTaskStartScheduler+0xb4>)
 800b708:	4821      	ldr	r0, [pc, #132]	; (800b790 <vTaskStartScheduler+0xb8>)
 800b70a:	f7ff fe0f 	bl	800b32c <xTaskCreateStatic>
 800b70e:	4603      	mov	r3, r0
 800b710:	4a20      	ldr	r2, [pc, #128]	; (800b794 <vTaskStartScheduler+0xbc>)
 800b712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b714:	4b1f      	ldr	r3, [pc, #124]	; (800b794 <vTaskStartScheduler+0xbc>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b71c:	2301      	movs	r3, #1
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	e001      	b.n	800b726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b722:	2300      	movs	r3, #0
 800b724:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d102      	bne.n	800b732 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b72c:	f000 fe0c 	bl	800c348 <xTimerCreateTimerTask>
 800b730:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d116      	bne.n	800b766 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	613b      	str	r3, [r7, #16]
}
 800b74a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b74c:	4b12      	ldr	r3, [pc, #72]	; (800b798 <vTaskStartScheduler+0xc0>)
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b752:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b754:	4b11      	ldr	r3, [pc, #68]	; (800b79c <vTaskStartScheduler+0xc4>)
 800b756:	2201      	movs	r2, #1
 800b758:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b75a:	4b11      	ldr	r3, [pc, #68]	; (800b7a0 <vTaskStartScheduler+0xc8>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b760:	f001 f9ce 	bl	800cb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b764:	e00e      	b.n	800b784 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b76c:	d10a      	bne.n	800b784 <vTaskStartScheduler+0xac>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <vTaskStartScheduler+0xaa>
}
 800b784:	bf00      	nop
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	0800d394 	.word	0x0800d394
 800b790:	0800bde1 	.word	0x0800bde1
 800b794:	20000ca8 	.word	0x20000ca8
 800b798:	20000ca4 	.word	0x20000ca4
 800b79c:	20000c90 	.word	0x20000c90
 800b7a0:	20000c88 	.word	0x20000c88

0800b7a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7a8:	4b04      	ldr	r3, [pc, #16]	; (800b7bc <vTaskSuspendAll+0x18>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	4a03      	ldr	r2, [pc, #12]	; (800b7bc <vTaskSuspendAll+0x18>)
 800b7b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7b2:	bf00      	nop
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20000cac 	.word	0x20000cac

0800b7c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7ce:	4b42      	ldr	r3, [pc, #264]	; (800b8d8 <xTaskResumeAll+0x118>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <xTaskResumeAll+0x2c>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	603b      	str	r3, [r7, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7ec:	f001 fa2a 	bl	800cc44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7f0:	4b39      	ldr	r3, [pc, #228]	; (800b8d8 <xTaskResumeAll+0x118>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	4a38      	ldr	r2, [pc, #224]	; (800b8d8 <xTaskResumeAll+0x118>)
 800b7f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7fa:	4b37      	ldr	r3, [pc, #220]	; (800b8d8 <xTaskResumeAll+0x118>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d162      	bne.n	800b8c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b802:	4b36      	ldr	r3, [pc, #216]	; (800b8dc <xTaskResumeAll+0x11c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d05e      	beq.n	800b8c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b80a:	e02f      	b.n	800b86c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80c:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <xTaskResumeAll+0x120>)
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3318      	adds	r3, #24
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fd4f 	bl	800a2bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fd4a 	bl	800a2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <xTaskResumeAll+0x124>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	429a      	cmp	r2, r3
 800b832:	d903      	bls.n	800b83c <xTaskResumeAll+0x7c>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	4a2a      	ldr	r2, [pc, #168]	; (800b8e4 <xTaskResumeAll+0x124>)
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4a27      	ldr	r2, [pc, #156]	; (800b8e8 <xTaskResumeAll+0x128>)
 800b84a:	441a      	add	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3304      	adds	r3, #4
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fe fcd5 	bl	800a202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	4b23      	ldr	r3, [pc, #140]	; (800b8ec <xTaskResumeAll+0x12c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	429a      	cmp	r2, r3
 800b864:	d302      	bcc.n	800b86c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b866:	4b22      	ldr	r3, [pc, #136]	; (800b8f0 <xTaskResumeAll+0x130>)
 800b868:	2201      	movs	r2, #1
 800b86a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b86c:	4b1c      	ldr	r3, [pc, #112]	; (800b8e0 <xTaskResumeAll+0x120>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1cb      	bne.n	800b80c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b87a:	f000 fb67 	bl	800bf4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b87e:	4b1d      	ldr	r3, [pc, #116]	; (800b8f4 <xTaskResumeAll+0x134>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d010      	beq.n	800b8ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b88a:	f000 f859 	bl	800b940 <xTaskIncrementTick>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b894:	4b16      	ldr	r3, [pc, #88]	; (800b8f0 <xTaskResumeAll+0x130>)
 800b896:	2201      	movs	r2, #1
 800b898:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1f1      	bne.n	800b88a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b8a6:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <xTaskResumeAll+0x134>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8ac:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <xTaskResumeAll+0x130>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8b8:	4b0f      	ldr	r3, [pc, #60]	; (800b8f8 <xTaskResumeAll+0x138>)
 800b8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8c8:	f001 f9ec 	bl	800cca4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000cac 	.word	0x20000cac
 800b8dc:	20000c84 	.word	0x20000c84
 800b8e0:	20000c44 	.word	0x20000c44
 800b8e4:	20000c8c 	.word	0x20000c8c
 800b8e8:	200007b4 	.word	0x200007b4
 800b8ec:	200007b0 	.word	0x200007b0
 800b8f0:	20000c98 	.word	0x20000c98
 800b8f4:	20000c94 	.word	0x20000c94
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <xTaskGetTickCount+0x1c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b908:	687b      	ldr	r3, [r7, #4]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20000c88 	.word	0x20000c88

0800b91c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b922:	f001 fa71 	bl	800ce08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b926:	2300      	movs	r3, #0
 800b928:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b92a:	4b04      	ldr	r3, [pc, #16]	; (800b93c <xTaskGetTickCountFromISR+0x20>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b930:	683b      	ldr	r3, [r7, #0]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20000c88 	.word	0x20000c88

0800b940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b94a:	4b4f      	ldr	r3, [pc, #316]	; (800ba88 <xTaskIncrementTick+0x148>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f040 808f 	bne.w	800ba72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b954:	4b4d      	ldr	r3, [pc, #308]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b95c:	4a4b      	ldr	r2, [pc, #300]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d120      	bne.n	800b9aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b968:	4b49      	ldr	r3, [pc, #292]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <xTaskIncrementTick+0x48>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	603b      	str	r3, [r7, #0]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xTaskIncrementTick+0x46>
 800b988:	4b41      	ldr	r3, [pc, #260]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	4b41      	ldr	r3, [pc, #260]	; (800ba94 <xTaskIncrementTick+0x154>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a3f      	ldr	r2, [pc, #252]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	4a3f      	ldr	r2, [pc, #252]	; (800ba94 <xTaskIncrementTick+0x154>)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	4b3e      	ldr	r3, [pc, #248]	; (800ba98 <xTaskIncrementTick+0x158>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	4a3d      	ldr	r2, [pc, #244]	; (800ba98 <xTaskIncrementTick+0x158>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	f000 fad1 	bl	800bf4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9aa:	4b3c      	ldr	r3, [pc, #240]	; (800ba9c <xTaskIncrementTick+0x15c>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d349      	bcc.n	800ba48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b4:	4b36      	ldr	r3, [pc, #216]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d104      	bne.n	800b9c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9be:	4b37      	ldr	r3, [pc, #220]	; (800ba9c <xTaskIncrementTick+0x15c>)
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9c4:	601a      	str	r2, [r3, #0]
					break;
 800b9c6:	e03f      	b.n	800ba48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c8:	4b31      	ldr	r3, [pc, #196]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d203      	bcs.n	800b9e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9e0:	4a2e      	ldr	r2, [pc, #184]	; (800ba9c <xTaskIncrementTick+0x15c>)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9e6:	e02f      	b.n	800ba48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fc65 	bl	800a2bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3318      	adds	r3, #24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe fc5c 	bl	800a2bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba08:	4b25      	ldr	r3, [pc, #148]	; (800baa0 <xTaskIncrementTick+0x160>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d903      	bls.n	800ba18 <xTaskIncrementTick+0xd8>
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba14:	4a22      	ldr	r2, [pc, #136]	; (800baa0 <xTaskIncrementTick+0x160>)
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4a1f      	ldr	r2, [pc, #124]	; (800baa4 <xTaskIncrementTick+0x164>)
 800ba26:	441a      	add	r2, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f7fe fbe7 	bl	800a202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba38:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <xTaskIncrementTick+0x168>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d3b8      	bcc.n	800b9b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba42:	2301      	movs	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba46:	e7b5      	b.n	800b9b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba48:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <xTaskIncrementTick+0x168>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	4915      	ldr	r1, [pc, #84]	; (800baa4 <xTaskIncrementTick+0x164>)
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d901      	bls.n	800ba64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba64:	4b11      	ldr	r3, [pc, #68]	; (800baac <xTaskIncrementTick+0x16c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d007      	beq.n	800ba7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	617b      	str	r3, [r7, #20]
 800ba70:	e004      	b.n	800ba7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba72:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <xTaskIncrementTick+0x170>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3301      	adds	r3, #1
 800ba78:	4a0d      	ldr	r2, [pc, #52]	; (800bab0 <xTaskIncrementTick+0x170>)
 800ba7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba7c:	697b      	ldr	r3, [r7, #20]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3718      	adds	r7, #24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000cac 	.word	0x20000cac
 800ba8c:	20000c88 	.word	0x20000c88
 800ba90:	20000c3c 	.word	0x20000c3c
 800ba94:	20000c40 	.word	0x20000c40
 800ba98:	20000c9c 	.word	0x20000c9c
 800ba9c:	20000ca4 	.word	0x20000ca4
 800baa0:	20000c8c 	.word	0x20000c8c
 800baa4:	200007b4 	.word	0x200007b4
 800baa8:	200007b0 	.word	0x200007b0
 800baac:	20000c98 	.word	0x20000c98
 800bab0:	20000c94 	.word	0x20000c94

0800bab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baba:	4b28      	ldr	r3, [pc, #160]	; (800bb5c <vTaskSwitchContext+0xa8>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bac2:	4b27      	ldr	r3, [pc, #156]	; (800bb60 <vTaskSwitchContext+0xac>)
 800bac4:	2201      	movs	r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bac8:	e041      	b.n	800bb4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800baca:	4b25      	ldr	r3, [pc, #148]	; (800bb60 <vTaskSwitchContext+0xac>)
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad0:	4b24      	ldr	r3, [pc, #144]	; (800bb64 <vTaskSwitchContext+0xb0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	e010      	b.n	800bafa <vTaskSwitchContext+0x46>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	607b      	str	r3, [r7, #4]
}
 800baf0:	bf00      	nop
 800baf2:	e7fe      	b.n	800baf2 <vTaskSwitchContext+0x3e>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	491b      	ldr	r1, [pc, #108]	; (800bb68 <vTaskSwitchContext+0xb4>)
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	440b      	add	r3, r1
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0e4      	beq.n	800bad8 <vTaskSwitchContext+0x24>
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	4613      	mov	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4a13      	ldr	r2, [pc, #76]	; (800bb68 <vTaskSwitchContext+0xb4>)
 800bb1a:	4413      	add	r3, r2
 800bb1c:	60bb      	str	r3, [r7, #8]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	605a      	str	r2, [r3, #4]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	3308      	adds	r3, #8
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d104      	bne.n	800bb3e <vTaskSwitchContext+0x8a>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	605a      	str	r2, [r3, #4]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	4a09      	ldr	r2, [pc, #36]	; (800bb6c <vTaskSwitchContext+0xb8>)
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	4a06      	ldr	r2, [pc, #24]	; (800bb64 <vTaskSwitchContext+0xb0>)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6013      	str	r3, [r2, #0]
}
 800bb4e:	bf00      	nop
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	20000cac 	.word	0x20000cac
 800bb60:	20000c98 	.word	0x20000c98
 800bb64:	20000c8c 	.word	0x20000c8c
 800bb68:	200007b4 	.word	0x200007b4
 800bb6c:	200007b0 	.word	0x200007b0

0800bb70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb96:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <vTaskPlaceOnEventList+0x44>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3318      	adds	r3, #24
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7fe fb53 	bl	800a24a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bba4:	2101      	movs	r1, #1
 800bba6:	6838      	ldr	r0, [r7, #0]
 800bba8:	f000 fb7a 	bl	800c2a0 <prvAddCurrentTaskToDelayedList>
}
 800bbac:	bf00      	nop
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	200007b0 	.word	0x200007b0

0800bbb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	617b      	str	r3, [r7, #20]
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <vTaskPlaceOnEventListRestricted+0x54>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3318      	adds	r3, #24
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7fe fb0a 	bl	800a202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	68b8      	ldr	r0, [r7, #8]
 800bbfe:	f000 fb4f 	bl	800c2a0 <prvAddCurrentTaskToDelayedList>
	}
 800bc02:	bf00      	nop
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200007b0 	.word	0x200007b0

0800bc10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60fb      	str	r3, [r7, #12]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	3318      	adds	r3, #24
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fb3b 	bl	800a2bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc46:	4b1e      	ldr	r3, [pc, #120]	; (800bcc0 <xTaskRemoveFromEventList+0xb0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d11d      	bne.n	800bc8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fb32 	bl	800a2bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5c:	4b19      	ldr	r3, [pc, #100]	; (800bcc4 <xTaskRemoveFromEventList+0xb4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d903      	bls.n	800bc6c <xTaskRemoveFromEventList+0x5c>
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	4a16      	ldr	r2, [pc, #88]	; (800bcc4 <xTaskRemoveFromEventList+0xb4>)
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4a13      	ldr	r2, [pc, #76]	; (800bcc8 <xTaskRemoveFromEventList+0xb8>)
 800bc7a:	441a      	add	r2, r3
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4619      	mov	r1, r3
 800bc82:	4610      	mov	r0, r2
 800bc84:	f7fe fabd 	bl	800a202 <vListInsertEnd>
 800bc88:	e005      	b.n	800bc96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3318      	adds	r3, #24
 800bc8e:	4619      	mov	r1, r3
 800bc90:	480e      	ldr	r0, [pc, #56]	; (800bccc <xTaskRemoveFromEventList+0xbc>)
 800bc92:	f7fe fab6 	bl	800a202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	; (800bcd0 <xTaskRemoveFromEventList+0xc0>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d905      	bls.n	800bcb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <xTaskRemoveFromEventList+0xc4>)
 800bcaa:	2201      	movs	r2, #1
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	e001      	b.n	800bcb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcb4:	697b      	ldr	r3, [r7, #20]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000cac 	.word	0x20000cac
 800bcc4:	20000c8c 	.word	0x20000c8c
 800bcc8:	200007b4 	.word	0x200007b4
 800bccc:	20000c44 	.word	0x20000c44
 800bcd0:	200007b0 	.word	0x200007b0
 800bcd4:	20000c98 	.word	0x20000c98

0800bcd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bce0:	4b06      	ldr	r3, [pc, #24]	; (800bcfc <vTaskInternalSetTimeOutState+0x24>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <vTaskInternalSetTimeOutState+0x28>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	605a      	str	r2, [r3, #4]
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000c9c 	.word	0x20000c9c
 800bd00:	20000c88 	.word	0x20000c88

0800bd04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10a      	bne.n	800bd2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	613b      	str	r3, [r7, #16]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	60fb      	str	r3, [r7, #12]
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd46:	f000 ff7d 	bl	800cc44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd4a:	4b1d      	ldr	r3, [pc, #116]	; (800bdc0 <xTaskCheckForTimeOut+0xbc>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd62:	d102      	bne.n	800bd6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd64:	2300      	movs	r3, #0
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e023      	b.n	800bdb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <xTaskCheckForTimeOut+0xc0>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d007      	beq.n	800bd86 <xTaskCheckForTimeOut+0x82>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d302      	bcc.n	800bd86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	e015      	b.n	800bdb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d20b      	bcs.n	800bda8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	1ad2      	subs	r2, r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ff9b 	bl	800bcd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bda2:	2300      	movs	r3, #0
 800bda4:	61fb      	str	r3, [r7, #28]
 800bda6:	e004      	b.n	800bdb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdb2:	f000 ff77 	bl	800cca4 <vPortExitCritical>

	return xReturn;
 800bdb6:	69fb      	ldr	r3, [r7, #28]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3720      	adds	r7, #32
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20000c88 	.word	0x20000c88
 800bdc4:	20000c9c 	.word	0x20000c9c

0800bdc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdcc:	4b03      	ldr	r3, [pc, #12]	; (800bddc <vTaskMissedYield+0x14>)
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
}
 800bdd2:	bf00      	nop
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20000c98 	.word	0x20000c98

0800bde0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bde8:	f000 f852 	bl	800be90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <prvIdleTask+0x28>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d9f9      	bls.n	800bde8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <prvIdleTask+0x2c>)
 800bdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be04:	e7f0      	b.n	800bde8 <prvIdleTask+0x8>
 800be06:	bf00      	nop
 800be08:	200007b4 	.word	0x200007b4
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be16:	2300      	movs	r3, #0
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	e00c      	b.n	800be36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4a12      	ldr	r2, [pc, #72]	; (800be70 <prvInitialiseTaskLists+0x60>)
 800be28:	4413      	add	r3, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe f9bc 	bl	800a1a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3301      	adds	r3, #1
 800be34:	607b      	str	r3, [r7, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b37      	cmp	r3, #55	; 0x37
 800be3a:	d9ef      	bls.n	800be1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be3c:	480d      	ldr	r0, [pc, #52]	; (800be74 <prvInitialiseTaskLists+0x64>)
 800be3e:	f7fe f9b3 	bl	800a1a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be42:	480d      	ldr	r0, [pc, #52]	; (800be78 <prvInitialiseTaskLists+0x68>)
 800be44:	f7fe f9b0 	bl	800a1a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be48:	480c      	ldr	r0, [pc, #48]	; (800be7c <prvInitialiseTaskLists+0x6c>)
 800be4a:	f7fe f9ad 	bl	800a1a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be4e:	480c      	ldr	r0, [pc, #48]	; (800be80 <prvInitialiseTaskLists+0x70>)
 800be50:	f7fe f9aa 	bl	800a1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be54:	480b      	ldr	r0, [pc, #44]	; (800be84 <prvInitialiseTaskLists+0x74>)
 800be56:	f7fe f9a7 	bl	800a1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <prvInitialiseTaskLists+0x78>)
 800be5c:	4a05      	ldr	r2, [pc, #20]	; (800be74 <prvInitialiseTaskLists+0x64>)
 800be5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be60:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <prvInitialiseTaskLists+0x7c>)
 800be62:	4a05      	ldr	r2, [pc, #20]	; (800be78 <prvInitialiseTaskLists+0x68>)
 800be64:	601a      	str	r2, [r3, #0]
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200007b4 	.word	0x200007b4
 800be74:	20000c14 	.word	0x20000c14
 800be78:	20000c28 	.word	0x20000c28
 800be7c:	20000c44 	.word	0x20000c44
 800be80:	20000c58 	.word	0x20000c58
 800be84:	20000c70 	.word	0x20000c70
 800be88:	20000c3c 	.word	0x20000c3c
 800be8c:	20000c40 	.word	0x20000c40

0800be90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be96:	e019      	b.n	800becc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be98:	f000 fed4 	bl	800cc44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9c:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <prvCheckTasksWaitingTermination+0x50>)
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fe fa07 	bl	800a2bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800beae:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <prvCheckTasksWaitingTermination+0x54>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <prvCheckTasksWaitingTermination+0x54>)
 800beb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800beb8:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <prvCheckTasksWaitingTermination+0x58>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	4a0a      	ldr	r2, [pc, #40]	; (800bee8 <prvCheckTasksWaitingTermination+0x58>)
 800bec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bec2:	f000 feef 	bl	800cca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f810 	bl	800beec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800becc:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <prvCheckTasksWaitingTermination+0x58>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e1      	bne.n	800be98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20000c58 	.word	0x20000c58
 800bee4:	20000c84 	.word	0x20000c84
 800bee8:	20000c6c 	.word	0x20000c6c

0800beec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800befa:	2b00      	cmp	r3, #0
 800befc:	d108      	bne.n	800bf10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 f88c 	bl	800d020 <vPortFree>
				vPortFree( pxTCB );
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f001 f889 	bl	800d020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf0e:	e018      	b.n	800bf42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d103      	bne.n	800bf22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 f880 	bl	800d020 <vPortFree>
	}
 800bf20:	e00f      	b.n	800bf42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d00a      	beq.n	800bf42 <prvDeleteTCB+0x56>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	60fb      	str	r3, [r7, #12]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <prvDeleteTCB+0x54>
	}
 800bf42:	bf00      	nop
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf52:	4b0c      	ldr	r3, [pc, #48]	; (800bf84 <prvResetNextTaskUnblockTime+0x38>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d104      	bne.n	800bf66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf5c:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <prvResetNextTaskUnblockTime+0x3c>)
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf64:	e008      	b.n	800bf78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf66:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <prvResetNextTaskUnblockTime+0x38>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	4a04      	ldr	r2, [pc, #16]	; (800bf88 <prvResetNextTaskUnblockTime+0x3c>)
 800bf76:	6013      	str	r3, [r2, #0]
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	20000c3c 	.word	0x20000c3c
 800bf88:	20000ca4 	.word	0x20000ca4

0800bf8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf92:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <xTaskGetSchedulerState+0x34>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	e008      	b.n	800bfb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa0:	4b08      	ldr	r3, [pc, #32]	; (800bfc4 <xTaskGetSchedulerState+0x38>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	607b      	str	r3, [r7, #4]
 800bfac:	e001      	b.n	800bfb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfb2:	687b      	ldr	r3, [r7, #4]
	}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	20000c90 	.word	0x20000c90
 800bfc4:	20000cac 	.word	0x20000cac

0800bfc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d051      	beq.n	800c082 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe2:	4b2a      	ldr	r3, [pc, #168]	; (800c08c <xTaskPriorityInherit+0xc4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d241      	bcs.n	800c070 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	db06      	blt.n	800c002 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff4:	4b25      	ldr	r3, [pc, #148]	; (800c08c <xTaskPriorityInherit+0xc4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	6959      	ldr	r1, [r3, #20]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4a1f      	ldr	r2, [pc, #124]	; (800c090 <xTaskPriorityInherit+0xc8>)
 800c014:	4413      	add	r3, r2
 800c016:	4299      	cmp	r1, r3
 800c018:	d122      	bne.n	800c060 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe f94c 	bl	800a2bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c024:	4b19      	ldr	r3, [pc, #100]	; (800c08c <xTaskPriorityInherit+0xc4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c032:	4b18      	ldr	r3, [pc, #96]	; (800c094 <xTaskPriorityInherit+0xcc>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d903      	bls.n	800c042 <xTaskPriorityInherit+0x7a>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	4a15      	ldr	r2, [pc, #84]	; (800c094 <xTaskPriorityInherit+0xcc>)
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	4613      	mov	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4a10      	ldr	r2, [pc, #64]	; (800c090 <xTaskPriorityInherit+0xc8>)
 800c050:	441a      	add	r2, r3
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	3304      	adds	r3, #4
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f7fe f8d2 	bl	800a202 <vListInsertEnd>
 800c05e:	e004      	b.n	800c06a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <xTaskPriorityInherit+0xc4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	e008      	b.n	800c082 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c074:	4b05      	ldr	r3, [pc, #20]	; (800c08c <xTaskPriorityInherit+0xc4>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d201      	bcs.n	800c082 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c07e:	2301      	movs	r3, #1
 800c080:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c082:	68fb      	ldr	r3, [r7, #12]
	}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	200007b0 	.word	0x200007b0
 800c090:	200007b4 	.word	0x200007b4
 800c094:	20000c8c 	.word	0x20000c8c

0800c098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d056      	beq.n	800c15c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0ae:	4b2e      	ldr	r3, [pc, #184]	; (800c168 <xTaskPriorityDisinherit+0xd0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d00a      	beq.n	800c0ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	60fb      	str	r3, [r7, #12]
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10a      	bne.n	800c0ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	60bb      	str	r3, [r7, #8]
}
 800c0e8:	bf00      	nop
 800c0ea:	e7fe      	b.n	800c0ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f0:	1e5a      	subs	r2, r3, #1
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d02c      	beq.n	800c15c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c106:	2b00      	cmp	r3, #0
 800c108:	d128      	bne.n	800c15c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3304      	adds	r3, #4
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe f8d4 	bl	800a2bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12c:	4b0f      	ldr	r3, [pc, #60]	; (800c16c <xTaskPriorityDisinherit+0xd4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d903      	bls.n	800c13c <xTaskPriorityDisinherit+0xa4>
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	4a0c      	ldr	r2, [pc, #48]	; (800c16c <xTaskPriorityDisinherit+0xd4>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4a09      	ldr	r2, [pc, #36]	; (800c170 <xTaskPriorityDisinherit+0xd8>)
 800c14a:	441a      	add	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	3304      	adds	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	4610      	mov	r0, r2
 800c154:	f7fe f855 	bl	800a202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c158:	2301      	movs	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c15c:	697b      	ldr	r3, [r7, #20]
	}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200007b0 	.word	0x200007b0
 800c16c:	20000c8c 	.word	0x20000c8c
 800c170:	200007b4 	.word	0x200007b4

0800c174 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c182:	2301      	movs	r3, #1
 800c184:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d06a      	beq.n	800c262 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	60fb      	str	r3, [r7, #12]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d902      	bls.n	800c1ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e002      	b.n	800c1c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	69fa      	ldr	r2, [r7, #28]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d04b      	beq.n	800c262 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d146      	bne.n	800c262 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1d4:	4b25      	ldr	r3, [pc, #148]	; (800c26c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	69ba      	ldr	r2, [r7, #24]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d10a      	bne.n	800c1f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60bb      	str	r3, [r7, #8]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	db04      	blt.n	800c212 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	6959      	ldr	r1, [r3, #20]
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4a13      	ldr	r2, [pc, #76]	; (800c270 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c222:	4413      	add	r3, r2
 800c224:	4299      	cmp	r1, r3
 800c226:	d11c      	bne.n	800c262 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe f845 	bl	800a2bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d903      	bls.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c242:	4a0c      	ldr	r2, [pc, #48]	; (800c274 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24a:	4613      	mov	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4a07      	ldr	r2, [pc, #28]	; (800c270 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c254:	441a      	add	r2, r3
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	3304      	adds	r3, #4
 800c25a:	4619      	mov	r1, r3
 800c25c:	4610      	mov	r0, r2
 800c25e:	f7fd ffd0 	bl	800a202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c262:	bf00      	nop
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	200007b0 	.word	0x200007b0
 800c270:	200007b4 	.word	0x200007b4
 800c274:	20000c8c 	.word	0x20000c8c

0800c278 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c278:	b480      	push	{r7}
 800c27a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c27c:	4b07      	ldr	r3, [pc, #28]	; (800c29c <pvTaskIncrementMutexHeldCount+0x24>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d004      	beq.n	800c28e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c284:	4b05      	ldr	r3, [pc, #20]	; (800c29c <pvTaskIncrementMutexHeldCount+0x24>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c28a:	3201      	adds	r2, #1
 800c28c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c28e:	4b03      	ldr	r3, [pc, #12]	; (800c29c <pvTaskIncrementMutexHeldCount+0x24>)
 800c290:	681b      	ldr	r3, [r3, #0]
	}
 800c292:	4618      	mov	r0, r3
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	200007b0 	.word	0x200007b0

0800c2a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2aa:	4b21      	ldr	r3, [pc, #132]	; (800c330 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b0:	4b20      	ldr	r3, [pc, #128]	; (800c334 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe f800 	bl	800a2bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c2:	d10a      	bne.n	800c2da <prvAddCurrentTaskToDelayedList+0x3a>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d007      	beq.n	800c2da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ca:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4819      	ldr	r0, [pc, #100]	; (800c338 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2d4:	f7fd ff95 	bl	800a202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2d8:	e026      	b.n	800c328 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4413      	add	r3, r2
 800c2e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2e2:	4b14      	ldr	r3, [pc, #80]	; (800c334 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d209      	bcs.n	800c306 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f2:	4b12      	ldr	r3, [pc, #72]	; (800c33c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fd ffa3 	bl	800a24a <vListInsert>
}
 800c304:	e010      	b.n	800c328 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c306:	4b0e      	ldr	r3, [pc, #56]	; (800c340 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <prvAddCurrentTaskToDelayedList+0x94>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3304      	adds	r3, #4
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	f7fd ff99 	bl	800a24a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c318:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d202      	bcs.n	800c328 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c322:	4a08      	ldr	r2, [pc, #32]	; (800c344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	6013      	str	r3, [r2, #0]
}
 800c328:	bf00      	nop
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20000c88 	.word	0x20000c88
 800c334:	200007b0 	.word	0x200007b0
 800c338:	20000c70 	.word	0x20000c70
 800c33c:	20000c40 	.word	0x20000c40
 800c340:	20000c3c 	.word	0x20000c3c
 800c344:	20000ca4 	.word	0x20000ca4

0800c348 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08a      	sub	sp, #40	; 0x28
 800c34c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c34e:	2300      	movs	r3, #0
 800c350:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c352:	f000 fb07 	bl	800c964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c356:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <xTimerCreateTimerTask+0x80>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d021      	beq.n	800c3a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c366:	1d3a      	adds	r2, r7, #4
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	f107 030c 	add.w	r3, r7, #12
 800c370:	4618      	mov	r0, r3
 800c372:	f7fd feff 	bl	800a174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	2302      	movs	r3, #2
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	460a      	mov	r2, r1
 800c388:	4910      	ldr	r1, [pc, #64]	; (800c3cc <xTimerCreateTimerTask+0x84>)
 800c38a:	4811      	ldr	r0, [pc, #68]	; (800c3d0 <xTimerCreateTimerTask+0x88>)
 800c38c:	f7fe ffce 	bl	800b32c <xTaskCreateStatic>
 800c390:	4603      	mov	r3, r0
 800c392:	4a10      	ldr	r2, [pc, #64]	; (800c3d4 <xTimerCreateTimerTask+0x8c>)
 800c394:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c396:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <xTimerCreateTimerTask+0x8c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10a      	bne.n	800c3be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	613b      	str	r3, [r7, #16]
}
 800c3ba:	bf00      	nop
 800c3bc:	e7fe      	b.n	800c3bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3be:	697b      	ldr	r3, [r7, #20]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	20000ce0 	.word	0x20000ce0
 800c3cc:	0800d39c 	.word	0x0800d39c
 800c3d0:	0800c50d 	.word	0x0800c50d
 800c3d4:	20000ce4 	.word	0x20000ce4

0800c3d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08a      	sub	sp, #40	; 0x28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	623b      	str	r3, [r7, #32]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c406:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <xTimerGenericCommand+0x98>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d02a      	beq.n	800c464 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b05      	cmp	r3, #5
 800c41e:	dc18      	bgt.n	800c452 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c420:	f7ff fdb4 	bl	800bf8c <xTaskGetSchedulerState>
 800c424:	4603      	mov	r3, r0
 800c426:	2b02      	cmp	r3, #2
 800c428:	d109      	bne.n	800c43e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c42a:	4b11      	ldr	r3, [pc, #68]	; (800c470 <xTimerGenericCommand+0x98>)
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	f107 0110 	add.w	r1, r7, #16
 800c432:	2300      	movs	r3, #0
 800c434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c436:	f7fe f913 	bl	800a660 <xQueueGenericSend>
 800c43a:	6278      	str	r0, [r7, #36]	; 0x24
 800c43c:	e012      	b.n	800c464 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <xTimerGenericCommand+0x98>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f107 0110 	add.w	r1, r7, #16
 800c446:	2300      	movs	r3, #0
 800c448:	2200      	movs	r2, #0
 800c44a:	f7fe f909 	bl	800a660 <xQueueGenericSend>
 800c44e:	6278      	str	r0, [r7, #36]	; 0x24
 800c450:	e008      	b.n	800c464 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c452:	4b07      	ldr	r3, [pc, #28]	; (800c470 <xTimerGenericCommand+0x98>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f107 0110 	add.w	r1, r7, #16
 800c45a:	2300      	movs	r3, #0
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	f7fe f9fd 	bl	800a85c <xQueueGenericSendFromISR>
 800c462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c466:	4618      	mov	r0, r3
 800c468:	3728      	adds	r7, #40	; 0x28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20000ce0 	.word	0x20000ce0

0800c474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af02      	add	r7, sp, #8
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47e:	4b22      	ldr	r3, [pc, #136]	; (800c508 <prvProcessExpiredTimer+0x94>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fd ff15 	bl	800a2bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d022      	beq.n	800c4e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	699a      	ldr	r2, [r3, #24]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	18d1      	adds	r1, r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	6978      	ldr	r0, [r7, #20]
 800c4ae:	f000 f8d1 	bl	800c654 <prvInsertTimerInActiveList>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01f      	beq.n	800c4f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6978      	ldr	r0, [r7, #20]
 800c4c4:	f7ff ff88 	bl	800c3d8 <xTimerGenericCommand>
 800c4c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d113      	bne.n	800c4f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	6978      	ldr	r0, [r7, #20]
 800c4fe:	4798      	blx	r3
}
 800c500:	bf00      	nop
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000cd8 	.word	0x20000cd8

0800c50c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c514:	f107 0308 	add.w	r3, r7, #8
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f857 	bl	800c5cc <prvGetNextExpireTime>
 800c51e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	4619      	mov	r1, r3
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f803 	bl	800c530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c52a:	f000 f8d5 	bl	800c6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c52e:	e7f1      	b.n	800c514 <prvTimerTask+0x8>

0800c530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c53a:	f7ff f933 	bl	800b7a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c53e:	f107 0308 	add.w	r3, r7, #8
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f866 	bl	800c614 <prvSampleTimeNow>
 800c548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d130      	bne.n	800c5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d806      	bhi.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c55e:	f7ff f92f 	bl	800b7c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff ff85 	bl	800c474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c56a:	e024      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d008      	beq.n	800c584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c572:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <prvProcessTimerOrBlockTask+0x90>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <prvProcessTimerOrBlockTask+0x50>
 800c57c:	2301      	movs	r3, #1
 800c57e:	e000      	b.n	800c582 <prvProcessTimerOrBlockTask+0x52>
 800c580:	2300      	movs	r3, #0
 800c582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c584:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <prvProcessTimerOrBlockTask+0x94>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	f7fe fe97 	bl	800b2c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c596:	f7ff f913 	bl	800b7c0 <xTaskResumeAll>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10a      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a0:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <prvProcessTimerOrBlockTask+0x98>)
 800c5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	f3bf 8f6f 	isb	sy
}
 800c5b0:	e001      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b2:	f7ff f905 	bl	800b7c0 <xTaskResumeAll>
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000cdc 	.word	0x20000cdc
 800c5c4:	20000ce0 	.word	0x20000ce0
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <prvGetNextExpireTime+0x44>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <prvGetNextExpireTime+0x16>
 800c5de:	2201      	movs	r2, #1
 800c5e0:	e000      	b.n	800c5e4 <prvGetNextExpireTime+0x18>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d105      	bne.n	800c5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f0:	4b07      	ldr	r3, [pc, #28]	; (800c610 <prvGetNextExpireTime+0x44>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	e001      	b.n	800c600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c600:	68fb      	ldr	r3, [r7, #12]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20000cd8 	.word	0x20000cd8

0800c614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c61c:	f7ff f96e 	bl	800b8fc <xTaskGetTickCount>
 800c620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c622:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <prvSampleTimeNow+0x3c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d205      	bcs.n	800c638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c62c:	f000 f936 	bl	800c89c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	e002      	b.n	800c63e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c63e:	4a04      	ldr	r2, [pc, #16]	; (800c650 <prvSampleTimeNow+0x3c>)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c644:	68fb      	ldr	r3, [r7, #12]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20000ce8 	.word	0x20000ce8

0800c654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d812      	bhi.n	800c6a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	d302      	bcc.n	800c68e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c688:	2301      	movs	r3, #1
 800c68a:	617b      	str	r3, [r7, #20]
 800c68c:	e01b      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c68e:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <prvInsertTimerInActiveList+0x7c>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3304      	adds	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f7fd fdd6 	bl	800a24a <vListInsert>
 800c69e:	e012      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d206      	bcs.n	800c6b6 <prvInsertTimerInActiveList+0x62>
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d302      	bcc.n	800c6b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	e007      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6b6:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <prvInsertTimerInActiveList+0x80>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	f7fd fdc2 	bl	800a24a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20000cdc 	.word	0x20000cdc
 800c6d4:	20000cd8 	.word	0x20000cd8

0800c6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	; 0x38
 800c6dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6de:	e0ca      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da18      	bge.n	800c718 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	61fb      	str	r3, [r7, #28]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70e:	6850      	ldr	r0, [r2, #4]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6892      	ldr	r2, [r2, #8]
 800c714:	4611      	mov	r1, r2
 800c716:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f2c0 80aa 	blt.w	800c874 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	3304      	adds	r3, #4
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fdc3 	bl	800a2bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c736:	463b      	mov	r3, r7
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff ff6b 	bl	800c614 <prvSampleTimeNow>
 800c73e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b09      	cmp	r3, #9
 800c744:	f200 8097 	bhi.w	800c876 <prvProcessReceivedCommands+0x19e>
 800c748:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <prvProcessReceivedCommands+0x78>)
 800c74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74e:	bf00      	nop
 800c750:	0800c779 	.word	0x0800c779
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c779 	.word	0x0800c779
 800c75c:	0800c7ed 	.word	0x0800c7ed
 800c760:	0800c801 	.word	0x0800c801
 800c764:	0800c84b 	.word	0x0800c84b
 800c768:	0800c779 	.word	0x0800c779
 800c76c:	0800c779 	.word	0x0800c779
 800c770:	0800c7ed 	.word	0x0800c7ed
 800c774:	0800c801 	.word	0x0800c801
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	18d1      	adds	r1, r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c798:	f7ff ff5c 	bl	800c654 <prvInsertTimerInActiveList>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d069      	beq.n	800c876 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d05e      	beq.n	800c876 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	441a      	add	r2, r3
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f7ff fe05 	bl	800c3d8 <xTimerGenericCommand>
 800c7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d14f      	bne.n	800c876 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	61bb      	str	r3, [r7, #24]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f2:	f023 0301 	bic.w	r3, r3, #1
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7fe:	e03a      	b.n	800c876 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c806:	f043 0301 	orr.w	r3, r3, #1
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	617b      	str	r3, [r7, #20]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	18d1      	adds	r1, r2, r3
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c844:	f7ff ff06 	bl	800c654 <prvInsertTimerInActiveList>
					break;
 800c848:	e015      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d103      	bne.n	800c860 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85a:	f000 fbe1 	bl	800d020 <vPortFree>
 800c85e:	e00a      	b.n	800c876 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c872:	e000      	b.n	800c876 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c876:	4b08      	ldr	r3, [pc, #32]	; (800c898 <prvProcessReceivedCommands+0x1c0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	1d39      	adds	r1, r7, #4
 800c87c:	2200      	movs	r2, #0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe f914 	bl	800aaac <xQueueReceive>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	f47f af2a 	bne.w	800c6e0 <prvProcessReceivedCommands+0x8>
	}
}
 800c88c:	bf00      	nop
 800c88e:	bf00      	nop
 800c890:	3730      	adds	r7, #48	; 0x30
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20000ce0 	.word	0x20000ce0

0800c89c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8a2:	e048      	b.n	800c936 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a4:	4b2d      	ldr	r3, [pc, #180]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8ae:	4b2b      	ldr	r3, [pc, #172]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fd fcfd 	bl	800a2bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d02e      	beq.n	800c936 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	4413      	add	r3, r2
 800c8e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d90e      	bls.n	800c908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8f6:	4b19      	ldr	r3, [pc, #100]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7fd fca2 	bl	800a24a <vListInsert>
 800c906:	e016      	b.n	800c936 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c908:	2300      	movs	r3, #0
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	2300      	movs	r3, #0
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	2100      	movs	r1, #0
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7ff fd60 	bl	800c3d8 <xTimerGenericCommand>
 800c918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10a      	bne.n	800c936 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	603b      	str	r3, [r7, #0]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1b1      	bne.n	800c8a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c940:	4b06      	ldr	r3, [pc, #24]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c946:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvSwitchTimerLists+0xc4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a04      	ldr	r2, [pc, #16]	; (800c95c <prvSwitchTimerLists+0xc0>)
 800c94c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSwitchTimerLists+0xc4>)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	6013      	str	r3, [r2, #0]
}
 800c954:	bf00      	nop
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	20000cd8 	.word	0x20000cd8
 800c960:	20000cdc 	.word	0x20000cdc

0800c964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c96a:	f000 f96b 	bl	800cc44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c96e:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d120      	bne.n	800c9b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c976:	4814      	ldr	r0, [pc, #80]	; (800c9c8 <prvCheckForValidListAndQueue+0x64>)
 800c978:	f7fd fc16 	bl	800a1a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c97c:	4813      	ldr	r0, [pc, #76]	; (800c9cc <prvCheckForValidListAndQueue+0x68>)
 800c97e:	f7fd fc13 	bl	800a1a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c982:	4b13      	ldr	r3, [pc, #76]	; (800c9d0 <prvCheckForValidListAndQueue+0x6c>)
 800c984:	4a10      	ldr	r2, [pc, #64]	; (800c9c8 <prvCheckForValidListAndQueue+0x64>)
 800c986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c988:	4b12      	ldr	r3, [pc, #72]	; (800c9d4 <prvCheckForValidListAndQueue+0x70>)
 800c98a:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <prvCheckForValidListAndQueue+0x68>)
 800c98c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c98e:	2300      	movs	r3, #0
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	4b11      	ldr	r3, [pc, #68]	; (800c9d8 <prvCheckForValidListAndQueue+0x74>)
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <prvCheckForValidListAndQueue+0x78>)
 800c996:	2110      	movs	r1, #16
 800c998:	200a      	movs	r0, #10
 800c99a:	f7fd fd21 	bl	800a3e0 <xQueueGenericCreateStatic>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4a08      	ldr	r2, [pc, #32]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9a4:	4b07      	ldr	r3, [pc, #28]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d005      	beq.n	800c9b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9ac:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <prvCheckForValidListAndQueue+0x60>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	490b      	ldr	r1, [pc, #44]	; (800c9e0 <prvCheckForValidListAndQueue+0x7c>)
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe fc32 	bl	800b21c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9b8:	f000 f974 	bl	800cca4 <vPortExitCritical>
}
 800c9bc:	bf00      	nop
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000ce0 	.word	0x20000ce0
 800c9c8:	20000cb0 	.word	0x20000cb0
 800c9cc:	20000cc4 	.word	0x20000cc4
 800c9d0:	20000cd8 	.word	0x20000cd8
 800c9d4:	20000cdc 	.word	0x20000cdc
 800c9d8:	20000d8c 	.word	0x20000d8c
 800c9dc:	20000cec 	.word	0x20000cec
 800c9e0:	0800d3a4 	.word	0x0800d3a4

0800c9e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3b04      	subs	r3, #4
 800c9f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3b04      	subs	r3, #4
 800ca02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f023 0201 	bic.w	r2, r3, #1
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3b04      	subs	r3, #4
 800ca12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca14:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <pxPortInitialiseStack+0x64>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3b14      	subs	r3, #20
 800ca1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3b04      	subs	r3, #4
 800ca2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f06f 0202 	mvn.w	r2, #2
 800ca32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3b20      	subs	r3, #32
 800ca38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	0800ca4d 	.word	0x0800ca4d

0800ca4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca56:	4b12      	ldr	r3, [pc, #72]	; (800caa0 <prvTaskExitError+0x54>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca5e:	d00a      	beq.n	800ca76 <prvTaskExitError+0x2a>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	60fb      	str	r3, [r7, #12]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <prvTaskExitError+0x28>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	60bb      	str	r3, [r7, #8]
}
 800ca88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca8a:	bf00      	nop
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0fc      	beq.n	800ca8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	2000000c 	.word	0x2000000c
	...

0800cab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <pxCurrentTCBConst2>)
 800cab2:	6819      	ldr	r1, [r3, #0]
 800cab4:	6808      	ldr	r0, [r1, #0]
 800cab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caba:	f380 8809 	msr	PSP, r0
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f04f 0000 	mov.w	r0, #0
 800cac6:	f380 8811 	msr	BASEPRI, r0
 800caca:	4770      	bx	lr
 800cacc:	f3af 8000 	nop.w

0800cad0 <pxCurrentTCBConst2>:
 800cad0:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop

0800cad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cad8:	4808      	ldr	r0, [pc, #32]	; (800cafc <prvPortStartFirstTask+0x24>)
 800cada:	6800      	ldr	r0, [r0, #0]
 800cadc:	6800      	ldr	r0, [r0, #0]
 800cade:	f380 8808 	msr	MSP, r0
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	f380 8814 	msr	CONTROL, r0
 800caea:	b662      	cpsie	i
 800caec:	b661      	cpsie	f
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	df00      	svc	0
 800caf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cafa:	bf00      	nop
 800cafc:	e000ed08 	.word	0xe000ed08

0800cb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb06:	4b46      	ldr	r3, [pc, #280]	; (800cc20 <xPortStartScheduler+0x120>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a46      	ldr	r2, [pc, #280]	; (800cc24 <xPortStartScheduler+0x124>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d10a      	bne.n	800cb26 <xPortStartScheduler+0x26>
	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	613b      	str	r3, [r7, #16]
}
 800cb22:	bf00      	nop
 800cb24:	e7fe      	b.n	800cb24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb26:	4b3e      	ldr	r3, [pc, #248]	; (800cc20 <xPortStartScheduler+0x120>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a3f      	ldr	r2, [pc, #252]	; (800cc28 <xPortStartScheduler+0x128>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d10a      	bne.n	800cb46 <xPortStartScheduler+0x46>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60fb      	str	r3, [r7, #12]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb46:	4b39      	ldr	r3, [pc, #228]	; (800cc2c <xPortStartScheduler+0x12c>)
 800cb48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	22ff      	movs	r2, #255	; 0xff
 800cb56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <xPortStartScheduler+0x130>)
 800cb6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb6e:	4b31      	ldr	r3, [pc, #196]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb70:	2207      	movs	r2, #7
 800cb72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb74:	e009      	b.n	800cb8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb76:	4b2f      	ldr	r3, [pc, #188]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	4a2d      	ldr	r2, [pc, #180]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb8a:	78fb      	ldrb	r3, [r7, #3]
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb92:	2b80      	cmp	r3, #128	; 0x80
 800cb94:	d0ef      	beq.n	800cb76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb96:	4b27      	ldr	r3, [pc, #156]	; (800cc34 <xPortStartScheduler+0x134>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f1c3 0307 	rsb	r3, r3, #7
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d00a      	beq.n	800cbb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	60bb      	str	r3, [r7, #8]
}
 800cbb4:	bf00      	nop
 800cbb6:	e7fe      	b.n	800cbb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbb8:	4b1e      	ldr	r3, [pc, #120]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	4a1d      	ldr	r2, [pc, #116]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbc2:	4b1c      	ldr	r3, [pc, #112]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbca:	4a1a      	ldr	r2, [pc, #104]	; (800cc34 <xPortStartScheduler+0x134>)
 800cbcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbd6:	4b18      	ldr	r3, [pc, #96]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a17      	ldr	r2, [pc, #92]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbe2:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a14      	ldr	r2, [pc, #80]	; (800cc38 <xPortStartScheduler+0x138>)
 800cbe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cbec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbee:	f000 f8dd 	bl	800cdac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <xPortStartScheduler+0x13c>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbf8:	f000 f8fc 	bl	800cdf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbfc:	4b10      	ldr	r3, [pc, #64]	; (800cc40 <xPortStartScheduler+0x140>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a0f      	ldr	r2, [pc, #60]	; (800cc40 <xPortStartScheduler+0x140>)
 800cc02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc08:	f7ff ff66 	bl	800cad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc0c:	f7fe ff52 	bl	800bab4 <vTaskSwitchContext>
	prvTaskExitError();
 800cc10:	f7ff ff1c 	bl	800ca4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	e000ed00 	.word	0xe000ed00
 800cc24:	410fc271 	.word	0x410fc271
 800cc28:	410fc270 	.word	0x410fc270
 800cc2c:	e000e400 	.word	0xe000e400
 800cc30:	20000ddc 	.word	0x20000ddc
 800cc34:	20000de0 	.word	0x20000de0
 800cc38:	e000ed20 	.word	0xe000ed20
 800cc3c:	2000000c 	.word	0x2000000c
 800cc40:	e000ef34 	.word	0xe000ef34

0800cc44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	607b      	str	r3, [r7, #4]
}
 800cc5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	4a0d      	ldr	r2, [pc, #52]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc68:	4b0c      	ldr	r3, [pc, #48]	; (800cc9c <vPortEnterCritical+0x58>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d10f      	bne.n	800cc90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc70:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <vPortEnterCritical+0x5c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	603b      	str	r3, [r7, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <vPortEnterCritical+0x4a>
	}
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	2000000c 	.word	0x2000000c
 800cca0:	e000ed04 	.word	0xe000ed04

0800cca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccaa:	4b12      	ldr	r3, [pc, #72]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <vPortExitCritical+0x24>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	607b      	str	r3, [r7, #4]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	4a09      	ldr	r2, [pc, #36]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccd2:	4b08      	ldr	r3, [pc, #32]	; (800ccf4 <vPortExitCritical+0x50>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <vPortExitCritical+0x42>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	f383 8811 	msr	BASEPRI, r3
}
 800cce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	2000000c 	.word	0x2000000c
	...

0800cd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd00:	f3ef 8009 	mrs	r0, PSP
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <pxCurrentTCBConst>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	f01e 0f10 	tst.w	lr, #16
 800cd10:	bf08      	it	eq
 800cd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	6010      	str	r0, [r2, #0]
 800cd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd24:	f380 8811 	msr	BASEPRI, r0
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f7fe fec0 	bl	800bab4 <vTaskSwitchContext>
 800cd34:	f04f 0000 	mov.w	r0, #0
 800cd38:	f380 8811 	msr	BASEPRI, r0
 800cd3c:	bc09      	pop	{r0, r3}
 800cd3e:	6819      	ldr	r1, [r3, #0]
 800cd40:	6808      	ldr	r0, [r1, #0]
 800cd42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd46:	f01e 0f10 	tst.w	lr, #16
 800cd4a:	bf08      	it	eq
 800cd4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd50:	f380 8809 	msr	PSP, r0
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w

0800cd60 <pxCurrentTCBConst>:
 800cd60:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop

0800cd68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607b      	str	r3, [r7, #4]
}
 800cd80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd82:	f7fe fddd 	bl	800b940 <xTaskIncrementTick>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd8c:	4b06      	ldr	r3, [pc, #24]	; (800cda8 <xPortSysTickHandler+0x40>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	2300      	movs	r3, #0
 800cd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	f383 8811 	msr	BASEPRI, r3
}
 800cd9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdb0:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <vPortSetupTimerInterrupt+0x34>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdb6:	4b0b      	ldr	r3, [pc, #44]	; (800cde4 <vPortSetupTimerInterrupt+0x38>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <vPortSetupTimerInterrupt+0x3c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a0a      	ldr	r2, [pc, #40]	; (800cdec <vPortSetupTimerInterrupt+0x40>)
 800cdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc6:	099b      	lsrs	r3, r3, #6
 800cdc8:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <vPortSetupTimerInterrupt+0x44>)
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdce:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <vPortSetupTimerInterrupt+0x34>)
 800cdd0:	2207      	movs	r2, #7
 800cdd2:	601a      	str	r2, [r3, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	e000e010 	.word	0xe000e010
 800cde4:	e000e018 	.word	0xe000e018
 800cde8:	20000000 	.word	0x20000000
 800cdec:	10624dd3 	.word	0x10624dd3
 800cdf0:	e000e014 	.word	0xe000e014

0800cdf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cdf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce04 <vPortEnableVFP+0x10>
 800cdf8:	6801      	ldr	r1, [r0, #0]
 800cdfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdfe:	6001      	str	r1, [r0, #0]
 800ce00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce02:	bf00      	nop
 800ce04:	e000ed88 	.word	0xe000ed88

0800ce08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce0e:	f3ef 8305 	mrs	r3, IPSR
 800ce12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b0f      	cmp	r3, #15
 800ce18:	d914      	bls.n	800ce44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce1a:	4a17      	ldr	r2, [pc, #92]	; (800ce78 <vPortValidateInterruptPriority+0x70>)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	4413      	add	r3, r2
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce24:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <vPortValidateInterruptPriority+0x74>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	7afa      	ldrb	r2, [r7, #11]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d20a      	bcs.n	800ce44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	607b      	str	r3, [r7, #4]
}
 800ce40:	bf00      	nop
 800ce42:	e7fe      	b.n	800ce42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce44:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <vPortValidateInterruptPriority+0x78>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <vPortValidateInterruptPriority+0x7c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d90a      	bls.n	800ce6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	603b      	str	r3, [r7, #0]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <vPortValidateInterruptPriority+0x60>
	}
 800ce6a:	bf00      	nop
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	e000e3f0 	.word	0xe000e3f0
 800ce7c:	20000ddc 	.word	0x20000ddc
 800ce80:	e000ed0c 	.word	0xe000ed0c
 800ce84:	20000de0 	.word	0x20000de0

0800ce88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08a      	sub	sp, #40	; 0x28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce94:	f7fe fc86 	bl	800b7a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce98:	4b5b      	ldr	r3, [pc, #364]	; (800d008 <pvPortMalloc+0x180>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cea0:	f000 f920 	bl	800d0e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cea4:	4b59      	ldr	r3, [pc, #356]	; (800d00c <pvPortMalloc+0x184>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f040 8093 	bne.w	800cfd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d01d      	beq.n	800cef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ceb8:	2208      	movs	r2, #8
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4413      	add	r3, r2
 800cebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f003 0307 	and.w	r3, r3, #7
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d014      	beq.n	800cef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f023 0307 	bic.w	r3, r3, #7
 800ced0:	3308      	adds	r3, #8
 800ced2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00a      	beq.n	800cef4 <pvPortMalloc+0x6c>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	617b      	str	r3, [r7, #20]
}
 800cef0:	bf00      	nop
 800cef2:	e7fe      	b.n	800cef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d06e      	beq.n	800cfd8 <pvPortMalloc+0x150>
 800cefa:	4b45      	ldr	r3, [pc, #276]	; (800d010 <pvPortMalloc+0x188>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d869      	bhi.n	800cfd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf04:	4b43      	ldr	r3, [pc, #268]	; (800d014 <pvPortMalloc+0x18c>)
 800cf06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf08:	4b42      	ldr	r3, [pc, #264]	; (800d014 <pvPortMalloc+0x18c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf0e:	e004      	b.n	800cf1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d903      	bls.n	800cf2c <pvPortMalloc+0xa4>
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1f1      	bne.n	800cf10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf2c:	4b36      	ldr	r3, [pc, #216]	; (800d008 <pvPortMalloc+0x180>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d050      	beq.n	800cfd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	4413      	add	r3, r2
 800cf3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	1ad2      	subs	r2, r2, r3
 800cf50:	2308      	movs	r3, #8
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d91f      	bls.n	800cf98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f003 0307 	and.w	r3, r3, #7
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <pvPortMalloc+0xf8>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	613b      	str	r3, [r7, #16]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	1ad2      	subs	r2, r2, r3
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf92:	69b8      	ldr	r0, [r7, #24]
 800cf94:	f000 f908 	bl	800d1a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf98:	4b1d      	ldr	r3, [pc, #116]	; (800d010 <pvPortMalloc+0x188>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a1b      	ldr	r2, [pc, #108]	; (800d010 <pvPortMalloc+0x188>)
 800cfa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfa6:	4b1a      	ldr	r3, [pc, #104]	; (800d010 <pvPortMalloc+0x188>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b1b      	ldr	r3, [pc, #108]	; (800d018 <pvPortMalloc+0x190>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d203      	bcs.n	800cfba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfb2:	4b17      	ldr	r3, [pc, #92]	; (800d010 <pvPortMalloc+0x188>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a18      	ldr	r2, [pc, #96]	; (800d018 <pvPortMalloc+0x190>)
 800cfb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	4b13      	ldr	r3, [pc, #76]	; (800d00c <pvPortMalloc+0x184>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <pvPortMalloc+0x194>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	4a11      	ldr	r2, [pc, #68]	; (800d01c <pvPortMalloc+0x194>)
 800cfd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfd8:	f7fe fbf2 	bl	800b7c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <pvPortMalloc+0x174>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	60fb      	str	r3, [r7, #12]
}
 800cff8:	bf00      	nop
 800cffa:	e7fe      	b.n	800cffa <pvPortMalloc+0x172>
	return pvReturn;
 800cffc:	69fb      	ldr	r3, [r7, #28]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3728      	adds	r7, #40	; 0x28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	200019a4 	.word	0x200019a4
 800d00c:	200019b8 	.word	0x200019b8
 800d010:	200019a8 	.word	0x200019a8
 800d014:	2000199c 	.word	0x2000199c
 800d018:	200019ac 	.word	0x200019ac
 800d01c:	200019b0 	.word	0x200019b0

0800d020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d04d      	beq.n	800d0ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d032:	2308      	movs	r3, #8
 800d034:	425b      	negs	r3, r3
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	4413      	add	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	685a      	ldr	r2, [r3, #4]
 800d044:	4b24      	ldr	r3, [pc, #144]	; (800d0d8 <vPortFree+0xb8>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4013      	ands	r3, r2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10a      	bne.n	800d064 <vPortFree+0x44>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	60fb      	str	r3, [r7, #12]
}
 800d060:	bf00      	nop
 800d062:	e7fe      	b.n	800d062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <vPortFree+0x62>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	60bb      	str	r3, [r7, #8]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <vPortFree+0xb8>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01e      	beq.n	800d0ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d11a      	bne.n	800d0ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	4b0e      	ldr	r3, [pc, #56]	; (800d0d8 <vPortFree+0xb8>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	401a      	ands	r2, r3
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0a8:	f7fe fb7c 	bl	800b7a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <vPortFree+0xbc>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	4a09      	ldr	r2, [pc, #36]	; (800d0dc <vPortFree+0xbc>)
 800d0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0ba:	6938      	ldr	r0, [r7, #16]
 800d0bc:	f000 f874 	bl	800d1a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <vPortFree+0xc0>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	4a06      	ldr	r2, [pc, #24]	; (800d0e0 <vPortFree+0xc0>)
 800d0c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d0ca:	f7fe fb79 	bl	800b7c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0ce:	bf00      	nop
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	200019b8 	.word	0x200019b8
 800d0dc:	200019a8 	.word	0x200019a8
 800d0e0:	200019b4 	.word	0x200019b4

0800d0e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d0ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0f0:	4b27      	ldr	r3, [pc, #156]	; (800d190 <prvHeapInit+0xac>)
 800d0f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f003 0307 	and.w	r3, r3, #7
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00c      	beq.n	800d118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3307      	adds	r3, #7
 800d102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f023 0307 	bic.w	r3, r3, #7
 800d10a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	4a1f      	ldr	r2, [pc, #124]	; (800d190 <prvHeapInit+0xac>)
 800d114:	4413      	add	r3, r2
 800d116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d11c:	4a1d      	ldr	r2, [pc, #116]	; (800d194 <prvHeapInit+0xb0>)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d122:	4b1c      	ldr	r3, [pc, #112]	; (800d194 <prvHeapInit+0xb0>)
 800d124:	2200      	movs	r2, #0
 800d126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	4413      	add	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d130:	2208      	movs	r2, #8
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	1a9b      	subs	r3, r3, r2
 800d136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f023 0307 	bic.w	r3, r3, #7
 800d13e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	4a15      	ldr	r2, [pc, #84]	; (800d198 <prvHeapInit+0xb4>)
 800d144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d146:	4b14      	ldr	r3, [pc, #80]	; (800d198 <prvHeapInit+0xb4>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2200      	movs	r2, #0
 800d14c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <prvHeapInit+0xb4>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2200      	movs	r2, #0
 800d154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d164:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <prvHeapInit+0xb4>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4a0a      	ldr	r2, [pc, #40]	; (800d19c <prvHeapInit+0xb8>)
 800d172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <prvHeapInit+0xbc>)
 800d17a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <prvHeapInit+0xc0>)
 800d17e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d182:	601a      	str	r2, [r3, #0]
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	20000de4 	.word	0x20000de4
 800d194:	2000199c 	.word	0x2000199c
 800d198:	200019a4 	.word	0x200019a4
 800d19c:	200019ac 	.word	0x200019ac
 800d1a0:	200019a8 	.word	0x200019a8
 800d1a4:	200019b8 	.word	0x200019b8

0800d1a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1b0:	4b28      	ldr	r3, [pc, #160]	; (800d254 <prvInsertBlockIntoFreeList+0xac>)
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	e002      	b.n	800d1bc <prvInsertBlockIntoFreeList+0x14>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d8f7      	bhi.n	800d1b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	68ba      	ldr	r2, [r7, #8]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d108      	bne.n	800d1ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	441a      	add	r2, r3
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	441a      	add	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d118      	bne.n	800d230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b15      	ldr	r3, [pc, #84]	; (800d258 <prvInsertBlockIntoFreeList+0xb0>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	d00d      	beq.n	800d226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	441a      	add	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	e008      	b.n	800d238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d226:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <prvInsertBlockIntoFreeList+0xb0>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	e003      	b.n	800d238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d002      	beq.n	800d246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d246:	bf00      	nop
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	2000199c 	.word	0x2000199c
 800d258:	200019a4 	.word	0x200019a4

0800d25c <__libc_init_array>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4d0d      	ldr	r5, [pc, #52]	; (800d294 <__libc_init_array+0x38>)
 800d260:	4c0d      	ldr	r4, [pc, #52]	; (800d298 <__libc_init_array+0x3c>)
 800d262:	1b64      	subs	r4, r4, r5
 800d264:	10a4      	asrs	r4, r4, #2
 800d266:	2600      	movs	r6, #0
 800d268:	42a6      	cmp	r6, r4
 800d26a:	d109      	bne.n	800d280 <__libc_init_array+0x24>
 800d26c:	4d0b      	ldr	r5, [pc, #44]	; (800d29c <__libc_init_array+0x40>)
 800d26e:	4c0c      	ldr	r4, [pc, #48]	; (800d2a0 <__libc_init_array+0x44>)
 800d270:	f000 f82e 	bl	800d2d0 <_init>
 800d274:	1b64      	subs	r4, r4, r5
 800d276:	10a4      	asrs	r4, r4, #2
 800d278:	2600      	movs	r6, #0
 800d27a:	42a6      	cmp	r6, r4
 800d27c:	d105      	bne.n	800d28a <__libc_init_array+0x2e>
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	f855 3b04 	ldr.w	r3, [r5], #4
 800d284:	4798      	blx	r3
 800d286:	3601      	adds	r6, #1
 800d288:	e7ee      	b.n	800d268 <__libc_init_array+0xc>
 800d28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d28e:	4798      	blx	r3
 800d290:	3601      	adds	r6, #1
 800d292:	e7f2      	b.n	800d27a <__libc_init_array+0x1e>
 800d294:	0800d890 	.word	0x0800d890
 800d298:	0800d890 	.word	0x0800d890
 800d29c:	0800d890 	.word	0x0800d890
 800d2a0:	0800d894 	.word	0x0800d894

0800d2a4 <memcpy>:
 800d2a4:	440a      	add	r2, r1
 800d2a6:	4291      	cmp	r1, r2
 800d2a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d2ac:	d100      	bne.n	800d2b0 <memcpy+0xc>
 800d2ae:	4770      	bx	lr
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	d1f9      	bne.n	800d2b2 <memcpy+0xe>
 800d2be:	bd10      	pop	{r4, pc}

0800d2c0 <memset>:
 800d2c0:	4402      	add	r2, r0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d100      	bne.n	800d2ca <memset+0xa>
 800d2c8:	4770      	bx	lr
 800d2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ce:	e7f9      	b.n	800d2c4 <memset+0x4>

0800d2d0 <_init>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	bf00      	nop
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr

0800d2dc <_fini>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	bf00      	nop
 800d2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e2:	bc08      	pop	{r3}
 800d2e4:	469e      	mov	lr, r3
 800d2e6:	4770      	bx	lr
