
SD_FreeRTOS_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800d218  0800d218  0001d218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b8  0800d7b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7b8  0800d7b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7b8  0800d7b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7bc  0800d7bc  0001d7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003de0  20000010  0800d7d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20003df0  0800d7d0  00023df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b35b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005028  00000000  00000000  0004b39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  000503c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a38  00000000  00000000  00052018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006339  00000000  00000000  00053a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ab9  00000000  00000000  00059d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100edd  00000000  00000000  0007c842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017d71f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007544  00000000  00000000  0017d774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d200 	.word	0x0800d200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800d200 	.word	0x0800d200

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc7b 	bl	8000ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82a 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8ee 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f8ce 	bl	8000380 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80001e4:	f000 f8ac 	bl	8000340 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80001e8:	f005 fd34 	bl	8005c54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f009 fba2 	bl	8009934 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <main+0x48>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x4c>)
 80001f6:	f009 fc1e 	bl	8009a36 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <main+0x50>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(Start_SD_Task, NULL, &SDTask_attributes);
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x54>)
 8000202:	2100      	movs	r1, #0
 8000204:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x58>)
 8000206:	f009 fc16 	bl	8009a36 <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <main+0x5c>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f009 fbd6 	bl	80099c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x44>
 8000216:	bf00      	nop
 8000218:	0800d2d4 	.word	0x0800d2d4
 800021c:	08000445 	.word	0x08000445
 8000220:	200019bc 	.word	0x200019bc
 8000224:	0800d2f8 	.word	0x0800d2f8
 8000228:	08000455 	.word	0x08000455
 800022c:	20001a44 	.word	0x20001a44

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b0b8      	sub	sp, #224	; 0xe0
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800023a:	2244      	movs	r2, #68	; 0x44
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f00c ffd6 	bl	800d1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2288      	movs	r2, #136	; 0x88
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f00c ffc8 	bl	800d1f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000272:	2360      	movs	r3, #96	; 0x60
 8000274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000284:	2301      	movs	r3, #1
 8000286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 800028a:	2310      	movs	r3, #16
 800028c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000290:	2307      	movs	r3, #7
 8000292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fa7e 	bl	80017a8 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002b2:	f000 f93b 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002d8:	2101      	movs	r1, #1
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fe4a 	bl	8001f74 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002e6:	f000 f921 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80002ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80002f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80002f4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002fe:	2310      	movs	r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000302:	2307      	movs	r3, #7
 8000304:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000306:	2304      	movs	r3, #4
 8000308:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800030e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000312:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f864 	bl	80023e4 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000322:	f000 f903 	bl	800052c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000326:	f44f 7000 	mov.w	r0, #512	; 0x200
 800032a:	f001 f9e7 	bl	80016fc <HAL_PWREx_ControlVoltageScaling>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000334:	f000 f8fa 	bl	800052c <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	37e0      	adds	r7, #224	; 0xe0
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <MX_SDMMC1_SD_Init+0x3c>)
 8000348:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <MX_SDMMC1_SD_Init+0x38>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	200019c0 	.word	0x200019c0
 800037c:	40012800 	.word	0x40012800

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	6493      	str	r3, [r2, #72]	; 0x48
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2105      	movs	r1, #5
 80003a2:	203b      	movs	r0, #59	; 0x3b
 80003a4:	f000 fca8 	bl	8000cf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80003a8:	203b      	movs	r0, #59	; 0x3b
 80003aa:	f000 fcc1 	bl	8000d30 <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a1a      	ldr	r2, [pc, #104]	; (8000440 <MX_GPIO_Init+0x84>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x84>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x84>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x84>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x84>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <MX_GPIO_Init+0x84>)
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_GPIO_Init+0x84>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f000 ff93 	bl	800135c <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f009 fb84 	bl	8009b5a <osDelay>
 8000452:	e7fb      	b.n	800044c <StartDefaultTask+0x8>

08000454 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	f6ad 1d7c 	subw	sp, sp, #2428	; 0x97c
 800045a:	af00      	add	r7, sp, #0
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  SD_CARD sd;
  uint32_t byteswritten, bytesread; //file write/read counts
  uint8_t wtext[] = "Yet another test"; //file buffer
 8000460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000464:	4a26      	ldr	r2, [pc, #152]	; (8000500 <Start_SD_Task+0xac>)
 8000466:	461c      	mov	r4, r3
 8000468:	4615      	mov	r5, r2
 800046a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800046c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046e:	682b      	ldr	r3, [r5, #0]
 8000470:	7023      	strb	r3, [r4, #0]
  uint8_t file_path[50] = "/sub_test/stm32.txt";
 8000472:	f107 060c 	add.w	r6, r7, #12
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <Start_SD_Task+0xb0>)
 8000478:	4634      	mov	r4, r6
 800047a:	461d      	mov	r5, r3
 800047c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000480:	682b      	ldr	r3, [r5, #0]
 8000482:	6023      	str	r3, [r4, #0]
 8000484:	f106 0314 	add.w	r3, r6, #20
 8000488:	221e      	movs	r2, #30
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f00c feaf 	bl	800d1f0 <memset>
  for(;;)
  {
	//taskENTER_CRITICAL();
	if(init_sd(&sd) != FR_OK) {
 8000492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f84e 	bl	8000538 <init_sd>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d002      	beq.n	80004a8 <Start_SD_Task+0x54>
	  Error_Handler();
 80004a2:	f000 f843 	bl	800052c <Error_Handler>
 80004a6:	e7f4      	b.n	8000492 <Start_SD_Task+0x3e>
    }
	else { //file system already exists, try to open a file

	bytesread = read_from_file(&sd, file_path, 35);
 80004a8:	f107 010c 	add.w	r1, r7, #12
 80004ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004b0:	2223      	movs	r2, #35	; 0x23
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f880 	bl	80005b8 <read_from_file>
 80004b8:	4603      	mov	r3, r0
 80004ba:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974

	memcpy(&sd.write_buffer, wtext, sizeof(wtext));
 80004be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80004c6:	f203 541c 	addw	r4, r3, #1308	; 0x51c
 80004ca:	4615      	mov	r5, r2
 80004cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d0:	682b      	ldr	r3, [r5, #0]
 80004d2:	7023      	strb	r3, [r4, #0]
	byteswritten = write_to_file(&sd, file_path, sizeof(wtext));
 80004d4:	f107 010c 	add.w	r1, r7, #12
 80004d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004dc:	2211      	movs	r2, #17
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f8a0 	bl	8000624 <write_to_file>
 80004e4:	4603      	mov	r3, r0
 80004e6:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970

	unmount(&sd);
 80004ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f914 	bl	800071c <unmount>
	//taskEXIT_CRITICAL();

    osDelay(10000);
 80004f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80004f8:	f009 fb2f 	bl	8009b5a <osDelay>
	if(init_sd(&sd) != FR_OK) {
 80004fc:	e7c9      	b.n	8000492 <Start_SD_Task+0x3e>
 80004fe:	bf00      	nop
 8000500:	0800d22c 	.word	0x0800d22c
 8000504:	0800d240 	.word	0x0800d240

08000508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d101      	bne.n	800051e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051a:	f000 faf1 	bl	8000b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40001000 	.word	0x40001000

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <init_sd>:
 */

int8_t
init_sd(SD_CARD *sd //SD Card instance
		)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  	 //check that SD Card is slotted correctly
  	 if(!BSP_SD_IsDetected()) {
 8000540:	f005 fc41 	bl	8005dc6 <BSP_SD_IsDetected>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d102      	bne.n	8000550 <init_sd+0x18>
  		 return -1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054e:	e02b      	b.n	80005a8 <init_sd+0x70>
  	 }

  	 //instantly mount SD card on startup
  	 sd->res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	4917      	ldr	r1, [pc, #92]	; (80005b0 <init_sd+0x78>)
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <init_sd+0x7c>)
 8000556:	f008 f97f 	bl	8008858 <f_mount>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	701a      	strb	r2, [r3, #0]
  	 if(sd->res != FR_OK) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <init_sd+0x38>
  		 return -1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800056e:	e01b      	b.n	80005a8 <init_sd+0x70>
  	 }

  	 //initialize R/W buffers
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f00c fe37 	bl	800d1f0 <memset>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <init_sd+0x68>
  			 memset(sd->write_buffer, 0, sizeof(sd->write_buffer)) == NULL) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 800058e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00c fe2b 	bl	800d1f0 <memset>
 800059a:	4603      	mov	r3, r0
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <init_sd+0x6e>
  		 return -1;
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a4:	e000      	b.n	80005a8 <init_sd+0x70>
  	 }

  	 //return success
  	 return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20001d40 	.word	0x20001d40
 80005b4:	20002d74 	.word	0x20002d74

080005b8 <read_from_file>:
int32_t
read_from_file(SD_CARD *sd,			//SD card instance
		  uint8_t file_path[50],//path to the file
		  uint16_t read_amount  //amount of bytes to read
		  )
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	80fb      	strh	r3, [r7, #6]

	UINT bytes_read;

	//open file for reading
	sd->res = f_open(&SDFile, (char*)file_path, FA_READ);
 80005c6:	2201      	movs	r2, #1
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <read_from_file+0x68>)
 80005cc:	f008 f9a8 	bl	8008920 <f_open>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	701a      	strb	r2, [r3, #0]
	if(sd->res != FR_OK) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <read_from_file+0x2e>
		return -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e4:	e018      	b.n	8000618 <read_from_file+0x60>
	}

	//prevent out of range access
	if(f_size(&SDFile) < read_amount) {
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <read_from_file+0x68>)
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d202      	bcs.n	80005f6 <read_from_file+0x3e>
		read_amount = f_size(&SDFile);
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <read_from_file+0x68>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	80fb      	strh	r3, [r7, #6]
	}
	//read bytes from file and store them in read buffer
	sd->res = f_read(&SDFile, &sd->read_buffer, read_amount, &bytes_read);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 80005fc:	88fa      	ldrh	r2, [r7, #6]
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <read_from_file+0x68>)
 8000604:	f008 fb74 	bl	8008cf0 <f_read>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <read_from_file+0x68>)
 8000612:	f008 ff47 	bl	80094a4 <f_close>

	return bytes_read;
 8000616:	697b      	ldr	r3, [r7, #20]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20001d44 	.word	0x20001d44

08000624 <write_to_file>:
int32_t
write_to_file(SD_CARD *sd,		 //SD card instance
		   uint8_t file_path[50],//path to the file
		   uint16_t write_amount //amount of bytes to be written
		   )
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	466b      	mov	r3, sp
 8000634:	461d      	mov	r5, r3
	UINT bytes_written;
	unsigned char w_str[write_amount+1];
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	1c5c      	adds	r4, r3, #1
 800063a:	1e63      	subs	r3, r4, #1
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	4623      	mov	r3, r4
 8000640:	4618      	mov	r0, r3
 8000642:	f04f 0100 	mov.w	r1, #0
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	00cb      	lsls	r3, r1, #3
 8000650:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000654:	00c2      	lsls	r2, r0, #3
 8000656:	4623      	mov	r3, r4
 8000658:	4618      	mov	r0, r3
 800065a:	f04f 0100 	mov.w	r1, #0
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	00cb      	lsls	r3, r1, #3
 8000668:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800066c:	00c2      	lsls	r2, r0, #3
 800066e:	4623      	mov	r3, r4
 8000670:	3307      	adds	r3, #7
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	ebad 0d03 	sub.w	sp, sp, r3
 800067a:	466b      	mov	r3, sp
 800067c:	3300      	adds	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
	//copy buffer to local array (may need to improve this later)
	memcpy(w_str, &sd->write_buffer, write_amount);
 8000680:	69b8      	ldr	r0, [r7, #24]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	4619      	mov	r1, r3
 800068c:	f00c fda2 	bl	800d1d4 <memcpy>

	//check if file exists
	sd->res = f_stat((char*)file_path, &sd->finfo);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3304      	adds	r3, #4
 8000694:	4619      	mov	r1, r3
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f008 ff33 	bl	8009502 <f_stat>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	701a      	strb	r2, [r3, #0]

	//adhere to different cases
	switch(sd->res) {
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <write_to_file+0x8e>
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d00a      	beq.n	80006c6 <write_to_file+0xa2>
 80006b0:	e013      	b.n	80006da <write_to_file+0xb6>

	case FR_OK:
		//file exists, append to it
		sd->res = f_open(&SDFile, (char*)file_path, FA_OPEN_APPEND | FA_WRITE);
 80006b2:	2232      	movs	r2, #50	; 0x32
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	4818      	ldr	r0, [pc, #96]	; (8000718 <write_to_file+0xf4>)
 80006b8:	f008 f932 	bl	8008920 <f_open>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	701a      	strb	r2, [r3, #0]
		break;
 80006c4:	e013      	b.n	80006ee <write_to_file+0xca>
	case FR_NO_FILE:
		//file does not exist, create it
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006c6:	2206      	movs	r2, #6
 80006c8:	68b9      	ldr	r1, [r7, #8]
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <write_to_file+0xf4>)
 80006cc:	f008 f928 	bl	8008920 <f_open>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	701a      	strb	r2, [r3, #0]
		break;
 80006d8:	e009      	b.n	80006ee <write_to_file+0xca>
	default:
		//default case should overwrite to prevent system failure
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 80006da:	2206      	movs	r2, #6
 80006dc:	68b9      	ldr	r1, [r7, #8]
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <write_to_file+0xf4>)
 80006e0:	f008 f91e 	bl	8008920 <f_open>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	701a      	strb	r2, [r3, #0]
		break;
 80006ec:	bf00      	nop
	}

	//write to file
	sd->res = f_write(&SDFile, w_str, (UINT)write_amount, (UINT*)&bytes_written);
 80006ee:	69b9      	ldr	r1, [r7, #24]
 80006f0:	88fa      	ldrh	r2, [r7, #6]
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <write_to_file+0xf4>)
 80006f8:	f008 fc88 	bl	800900c <f_write>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <write_to_file+0xf4>)
 8000706:	f008 fecd 	bl	80094a4 <f_close>

	return bytes_written;
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	46ad      	mov	sp, r5
}
 800070e:	4618      	mov	r0, r3
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bdb0      	pop	{r4, r5, r7, pc}
 8000716:	bf00      	nop
 8000718:	20001d44 	.word	0x20001d44

0800071c <unmount>:
 * Unmount SD card
 */
void
unmount(SD_CARD *sd //SD Card instance
		)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	sd->res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <unmount+0x24>)
 800072a:	f008 f895 	bl	8008858 <f_mount>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20002d74 	.word	0x20002d74

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_MspInit+0x4c>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6613      	str	r3, [r2, #96]	; 0x60
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x4c>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_MspInit+0x4c>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6593      	str	r3, [r2, #88]	; 0x58
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 fab9 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a42      	ldr	r2, [pc, #264]	; (80008bc <HAL_SD_MspInit+0x128>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d17d      	bne.n	80008b2 <HAL_SD_MspInit+0x11e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	4a41      	ldr	r2, [pc, #260]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <HAL_SD_MspInit+0x12c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80007fe:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000810:	230c      	movs	r3, #12
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	482a      	ldr	r0, [pc, #168]	; (80008c4 <HAL_SD_MspInit+0x130>)
 800081c:	f000 fd9e 	bl	800135c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000820:	2304      	movs	r3, #4
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000830:	230c      	movs	r3, #12
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4823      	ldr	r0, [pc, #140]	; (80008c8 <HAL_SD_MspInit+0x134>)
 800083c:	f000 fd8e 	bl	800135c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <HAL_SD_MspInit+0x13c>)
 8000844:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000848:	2207      	movs	r2, #7
 800084a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <HAL_SD_MspInit+0x138>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_SD_MspInit+0x138>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <HAL_SD_MspInit+0x138>)
 800087c:	f000 fa66 	bl	8000d4c <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_SD_MspInit+0xf6>
    {
      Error_Handler();
 8000886:	f7ff fe51 	bl	800052c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_SD_MspInit+0x138>)
 800088e:	641a      	str	r2, [r3, #64]	; 0x40
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_SD_MspInit+0x138>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <HAL_SD_MspInit+0x138>)
 800089a:	63da      	str	r2, [r3, #60]	; 0x3c
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_SD_MspInit+0x138>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2031      	movs	r0, #49	; 0x31
 80008a8:	f000 fa26 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ac:	2031      	movs	r0, #49	; 0x31
 80008ae:	f000 fa3f 	bl	8000d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40012800 	.word	0x40012800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48000c00 	.word	0x48000c00
 80008cc:	20001ca4 	.word	0x20001ca4
 80008d0:	40020444 	.word	0x40020444

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	2036      	movs	r0, #54	; 0x36
 80008ea:	f000 fa05 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008ee:	2036      	movs	r0, #54	; 0x36
 80008f0:	f000 fa1e 	bl	8000d30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_InitTick+0x9c>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <HAL_InitTick+0x9c>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_InitTick+0x9c>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	f003 0310 	and.w	r3, r3, #16
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090c:	f107 0210 	add.w	r2, r7, #16
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fcd2 	bl	80022c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091c:	f001 fca4 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8000920:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_InitTick+0xa0>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	0c9b      	lsrs	r3, r3, #18
 800092c:	3b01      	subs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_InitTick+0xa4>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <HAL_InitTick+0xa8>)
 8000934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_InitTick+0xa4>)
 8000938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_InitTick+0xa4>)
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_InitTick+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_InitTick+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_InitTick+0xa4>)
 8000952:	f004 f979 	bl	8004c48 <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d104      	bne.n	8000966 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_InitTick+0xa4>)
 800095e:	f004 f9d5 	bl	8004d0c <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	431bde83 	.word	0x431bde83
 8000978:	20001cec 	.word	0x20001cec
 800097c:	40001000 	.word	0x40001000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <SDMMC1_IRQHandler+0x10>)
 80009b2:	f003 faa9 	bl	8003f08 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200019c0 	.word	0x200019c0

080009c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM6_DAC_IRQHandler+0x10>)
 80009c6:	f004 fa11 	bl	8004dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20001cec 	.word	0x20001cec

080009d4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
#ifndef CODE_CORRECTION_SD
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */
#else
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	2b81      	cmp	r3, #129	; 0x81
 80009de:	d003      	beq.n	80009e8 <DMA2_Channel4_IRQHandler+0x14>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80009e4:	2b82      	cmp	r3, #130	; 0x82
 80009e6:	d105      	bne.n	80009f4 <DMA2_Channel4_IRQHandler+0x20>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmarx);
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fbd6 	bl	800119e <HAL_DMA_IRQHandler>
  {
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
  }
#endif
  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80009f2:	e00c      	b.n	8000a0e <DMA2_Channel4_IRQHandler+0x3a>
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	2b90      	cmp	r3, #144	; 0x90
 80009fa:	d003      	beq.n	8000a04 <DMA2_Channel4_IRQHandler+0x30>
		  (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a00:	2ba0      	cmp	r3, #160	; 0xa0
 8000a02:	d104      	bne.n	8000a0e <DMA2_Channel4_IRQHandler+0x3a>
	  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <DMA2_Channel4_IRQHandler+0x40>)
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fbc8 	bl	800119e <HAL_DMA_IRQHandler>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200019c0 	.word	0x200019c0

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <SystemInit+0x5c>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <SystemInit+0x5c>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <SystemInit+0x60>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <SystemInit+0x60>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <SystemInit+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <SystemInit+0x60>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <SystemInit+0x60>)
 8000a44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SystemInit+0x60>)
 8000a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SystemInit+0x60>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SystemInit+0x60>)
 8000a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SystemInit+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	40021000 	.word	0x40021000

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffca 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
	ldr	r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8000aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f00c fb6f 	bl	800d18c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fb8f 	bl	80001d0 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ab8:	0800d7c0 	.word	0x0800d7c0
	ldr	r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ac0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000ac4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000ac8:	20003df0 	.word	0x20003df0

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>

08000ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f902 	bl	8000ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fef8 	bl	80008d4 <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af0:	f7ff fe28 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20001d38 	.word	0x20001d38

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20001d38 	.word	0x20001d38

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff4c 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0a:	f7ff ff61 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	6978      	ldr	r0, [r7, #20]
 8000d16:	f7ff ffb1 	bl	8000c7c <NVIC_EncodePriority>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff80 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff54 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e098      	b.n	8000e90 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <HAL_DMA_Init+0x150>)
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d80f      	bhi.n	8000d8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <HAL_DMA_Init+0x154>)
 8000d72:	4413      	add	r3, r2
 8000d74:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <HAL_DMA_Init+0x158>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_DMA_Init+0x15c>)
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
 8000d88:	e00e      	b.n	8000da8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <HAL_DMA_Init+0x160>)
 8000d92:	4413      	add	r3, r2
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <HAL_DMA_Init+0x158>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	009a      	lsls	r2, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <HAL_DMA_Init+0x164>)
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2202      	movs	r2, #2
 8000dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e02:	d039      	beq.n	8000e78 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_DMA_Init+0x15c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d11a      	bne.n	8000e44 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <HAL_DMA_Init+0x168>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f003 031c 	and.w	r3, r3, #28
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4924      	ldr	r1, [pc, #144]	; (8000eb4 <HAL_DMA_Init+0x168>)
 8000e24:	4013      	ands	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_DMA_Init+0x168>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6859      	ldr	r1, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f003 031c 	and.w	r3, r3, #28
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <HAL_DMA_Init+0x168>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
 8000e42:	e019      	b.n	8000e78 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_DMA_Init+0x16c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f003 031c 	and.w	r3, r3, #28
 8000e50:	210f      	movs	r1, #15
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	4917      	ldr	r1, [pc, #92]	; (8000eb8 <HAL_DMA_Init+0x16c>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_DMA_Init+0x16c>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6859      	ldr	r1, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f003 031c 	and.w	r3, r3, #28
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <HAL_DMA_Init+0x16c>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40020407 	.word	0x40020407
 8000ea0:	bffdfff8 	.word	0xbffdfff8
 8000ea4:	cccccccd 	.word	0xcccccccd
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	bffdfbf8 	.word	0xbffdfbf8
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	400200a8 	.word	0x400200a8
 8000eb8:	400204a8 	.word	0x400204a8

08000ebc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e072      	b.n	8000fb4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_DMA_DeInit+0x104>)
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d80f      	bhi.n	8000f0a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_DMA_DeInit+0x108>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a34      	ldr	r2, [pc, #208]	; (8000fc8 <HAL_DMA_DeInit+0x10c>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	009a      	lsls	r2, r3, #2
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <HAL_DMA_DeInit+0x110>)
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
 8000f08:	e00e      	b.n	8000f28 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_DMA_DeInit+0x114>)
 8000f12:	4413      	add	r3, r2
 8000f14:	4a2c      	ldr	r2, [pc, #176]	; (8000fc8 <HAL_DMA_DeInit+0x10c>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a2b      	ldr	r2, [pc, #172]	; (8000fd4 <HAL_DMA_DeInit+0x118>)
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	f003 021c 	and.w	r2, r3, #28
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_DMA_DeInit+0x110>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10d      	bne.n	8000f6a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_DMA_DeInit+0x11c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 031c 	and.w	r3, r3, #28
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	491d      	ldr	r1, [pc, #116]	; (8000fd8 <HAL_DMA_DeInit+0x11c>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
 8000f68:	e00c      	b.n	8000f84 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_DMA_DeInit+0x120>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f003 031c 	and.w	r3, r3, #28
 8000f76:	210f      	movs	r1, #15
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4917      	ldr	r1, [pc, #92]	; (8000fdc <HAL_DMA_DeInit+0x120>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40020407 	.word	0x40020407
 8000fc4:	bffdfff8 	.word	0xbffdfff8
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	bffdfbf8 	.word	0xbffdfbf8
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	400200a8 	.word	0x400200a8
 8000fdc:	400204a8 	.word	0x400204a8

08000fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d101      	bne.n	8001000 <HAL_DMA_Start_IT+0x20>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e04b      	b.n	8001098 <HAL_DMA_Start_IT+0xb8>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d13a      	bne.n	800108a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f95f 	bl	80012fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 020e 	orr.w	r2, r2, #14
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e00f      	b.n	8001078 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 020a 	orr.w	r2, r2, #10
 8001076:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e005      	b.n	8001096 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001092:	2302      	movs	r3, #2
 8001094:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001096:	7dfb      	ldrb	r3, [r7, #23]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2204      	movs	r2, #4
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e022      	b.n	8001110 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 020e 	bic.w	r2, r2, #14
 80010d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 021c 	and.w	r2, r3, #28
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d005      	beq.n	8001140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e029      	b.n	8001194 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f003 021c 	and.w	r2, r3, #28
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
    }
  }
  return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f003 031c 	and.w	r3, r3, #28
 80011be:	2204      	movs	r2, #4
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d026      	beq.n	8001218 <HAL_DMA_IRQHandler+0x7a>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0204 	bic.w	r2, r2, #4
 80011f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f003 021c 	and.w	r2, r3, #28
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2104      	movs	r1, #4
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	2b00      	cmp	r3, #0
 800120c:	d071      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001216:	e06c      	b.n	80012f2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	f003 031c 	and.w	r3, r3, #28
 8001220:	2202      	movs	r2, #2
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d02e      	beq.n	800128a <HAL_DMA_IRQHandler+0xec>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d029      	beq.n	800128a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10b      	bne.n	800125c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 020a 	bic.w	r2, r2, #10
 8001252:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	f003 021c 	and.w	r2, r3, #28
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	2102      	movs	r1, #2
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d038      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001288:	e033      	b.n	80012f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 031c 	and.w	r3, r3, #28
 8001292:	2208      	movs	r2, #8
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d02a      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x156>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d025      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 020e 	bic.w	r2, r2, #14
 80012b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	f003 021c 	and.w	r2, r3, #28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
}
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 021c 	and.w	r2, r3, #28
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f202 	lsl.w	r2, r1, r2
 800131c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b10      	cmp	r3, #16
 800132c:	d108      	bne.n	8001340 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800133e:	e007      	b.n	8001350 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e17f      	b.n	800166c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8171 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00b      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	2b11      	cmp	r3, #17
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b03      	cmp	r3, #3
 8001410:	d118      	bne.n	8001444 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x128>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80ac 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_GPIO_Init+0x330>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_GPIO_Init+0x330>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	; 0x60
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_GPIO_Init+0x330>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_GPIO_Init+0x334>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x242>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x338>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x33c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_GPIO_Init+0x340>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x344>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x348>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x22a>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159e:	2300      	movs	r3, #0
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b0:	4937      	ldr	r1, [pc, #220]	; (8001690 <HAL_GPIO_Init+0x334>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e2:	4a32      	ldr	r2, [pc, #200]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x350>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_GPIO_Init+0x350>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae78 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	48000400 	.word	0x48000400
 8001698:	48000800 	.word	0x48000800
 800169c:	48000c00 	.word	0x48000c00
 80016a0:	48001000 	.word	0x48001000
 80016a4:	48001400 	.word	0x48001400
 80016a8:	48001800 	.word	0x48001800
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	d130      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001718:	d038      	beq.n	800178c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2232      	movs	r2, #50	; 0x32
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001740:	e002      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3b01      	subs	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d102      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f2      	bne.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d110      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e00f      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177a:	d007      	beq.n	800178c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40007000 	.word	0x40007000
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e3d4      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4ba1      	ldr	r3, [pc, #644]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c4:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80e4 	beq.w	80019a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4a>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	f040 808b 	bne.w	8001900 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	f040 8087 	bne.w	8001900 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f2:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x62>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e3ac      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <HAL_RCC_OscConfig+0x7c>
 800181a:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001822:	e005      	b.n	8001830 <HAL_RCC_OscConfig+0x88>
 8001824:	4b86      	ldr	r3, [pc, #536]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001830:	4293      	cmp	r3, r2
 8001832:	d223      	bcs.n	800187c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fd73 	bl	8002324 <RCC_SetFlashLatencyFromMSIRange>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e38d      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001848:	4b7d      	ldr	r3, [pc, #500]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a7c      	ldr	r2, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4977      	ldr	r1, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4972      	ldr	r1, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
 800187a:	e025      	b.n	80018c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187c:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	496a      	ldr	r1, [pc, #424]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189a:	4b69      	ldr	r3, [pc, #420]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	4965      	ldr	r1, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fd33 	bl	8002324 <RCC_SetFlashLatencyFromMSIRange>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e34d      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c8:	f000 fc36 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	495a      	ldr	r1, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x29c>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x2a0>)
 80018e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018e8:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fff1 	bl	80008d4 <HAL_InitTick>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d052      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	e331      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d032      	beq.n	800196e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001914:	f7ff f908 	bl	8000b28 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191c:	f7ff f904 	bl	8000b28 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e31a      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a40      	ldr	r2, [pc, #256]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	493b      	ldr	r1, [pc, #236]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4936      	ldr	r1, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e01a      	b.n	80019a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a33      	ldr	r2, [pc, #204]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197a:	f7ff f8d5 	bl	8000b28 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001982:	f7ff f8d1 	bl	8000b28 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e2e7      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x1da>
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d074      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x21a>
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d10e      	bne.n	80019da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d064      	beq.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d160      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e2c4      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x24a>
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e01d      	b.n	8001a2e <HAL_RCC_OscConfig+0x286>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x26e>
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x286>
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_RCC_OscConfig+0x298>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff f877 	bl	8000b28 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3c:	e011      	b.n	8001a62 <HAL_RCC_OscConfig+0x2ba>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	0800d31c 	.word	0x0800d31c
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f86a 	bl	8000b28 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e280      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a62:	4baf      	ldr	r3, [pc, #700]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2a8>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f85a 	bl	8000b28 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f856 	bl	8000b28 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e26c      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8a:	4ba5      	ldr	r3, [pc, #660]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2d0>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d060      	beq.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x310>
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d116      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab8:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x328>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e249      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	4990      	ldr	r1, [pc, #576]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae4:	e040      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d023      	beq.n	8001b36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aee:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8b      	ldr	r2, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f815 	bl	8000b28 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f811 	bl	8000b28 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e227      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b14:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	497c      	ldr	r1, [pc, #496]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e018      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a79      	ldr	r2, [pc, #484]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe fff1 	bl	8000b28 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7fe ffed 	bl	8000b28 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e203      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5c:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03c      	beq.n	8001bee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01c      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	4a67      	ldr	r2, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7fe ffcc 	bl	8000b28 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b94:	f7fe ffc8 	bl	8000b28 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1de      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba6:	4b5e      	ldr	r3, [pc, #376]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ef      	beq.n	8001b94 <HAL_RCC_OscConfig+0x3ec>
 8001bb4:	e01b      	b.n	8001bee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb6:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7fe ffaf 	bl	8000b28 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7fe ffab 	bl	8000b28 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1c1      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be0:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ef      	bne.n	8001bce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80a6 	beq.w	8001d48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c00:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10d      	bne.n	8001c28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a43      	ldr	r2, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c24:	2301      	movs	r3, #1
 8001c26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c28:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_RCC_OscConfig+0x57c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d118      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x57c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0x57c>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c40:	f7fe ff72 	bl	8000b28 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe ff6e 	bl	8000b28 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e184      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_RCC_OscConfig+0x57c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4d8>
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c7e:	e024      	b.n	8001cca <HAL_RCC_OscConfig+0x522>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d110      	bne.n	8001caa <HAL_RCC_OscConfig+0x502>
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca8:	e00f      	b.n	8001cca <HAL_RCC_OscConfig+0x522>
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff29 	bl	8000b28 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe ff25 	bl	8000b28 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e139      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ed      	beq.n	8001cda <HAL_RCC_OscConfig+0x532>
 8001cfe:	e01a      	b.n	8001d36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe ff12 	bl	8000b28 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe ff0e 	bl	8000b28 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d906      	bls.n	8001d28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e122      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d28:	4b90      	ldr	r3, [pc, #576]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e8      	bne.n	8001d08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b8b      	ldr	r3, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	4a8a      	ldr	r2, [pc, #552]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8108 	beq.w	8001f62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	f040 80d0 	bne.w	8001efc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d5c:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d130      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d127      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d11f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9c:	2a07      	cmp	r2, #7
 8001d9e:	bf14      	ite	ne
 8001da0:	2201      	movne	r2, #1
 8001da2:	2200      	moveq	r2, #0
 8001da4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d06e      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d069      	beq.n	8001eac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b7      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001df4:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e00:	f7fe fe92 	bl	8000b28 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fe8e 	bl	8000b28 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0a4      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e26:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <HAL_RCC_OscConfig+0x7c8>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e36:	3a01      	subs	r2, #1
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e48:	0852      	lsrs	r2, r2, #1
 8001e4a:	3a01      	subs	r2, #1
 8001e4c:	0552      	lsls	r2, r2, #21
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e54:	0852      	lsrs	r2, r2, #1
 8001e56:	3a01      	subs	r2, #1
 8001e58:	0652      	lsls	r2, r2, #25
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e60:	0912      	lsrs	r2, r2, #4
 8001e62:	0452      	lsls	r2, r2, #17
 8001e64:	430a      	orrs	r2, r1
 8001e66:	4941      	ldr	r1, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a3b      	ldr	r2, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e84:	f7fe fe50 	bl	8000b28 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe fe4c 	bl	8000b28 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e062      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eaa:	e05a      	b.n	8001f62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e059      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d152      	bne.n	8001f62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed4:	f7fe fe28 	bl	8000b28 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fe24 	bl	8000b28 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e03a      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x734>
 8001efa:	e032      	b.n	8001f62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d02d      	beq.n	8001f5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f20:	f023 0303 	bic.w	r3, r3, #3
 8001f24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7fe fdf7 	bl	8000b28 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fdf3 	bl	8000b28 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x796>
 8001f5c:	e001      	b.n	8001f62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	f99d808c 	.word	0xf99d808c

08001f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0c8      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4961      	ldr	r1, [pc, #388]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b0      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d04c      	beq.n	800205e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d121      	bne.n	800201c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e09e      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d115      	bne.n	800201c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e092      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e086      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e07e      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201c:	4b42      	ldr	r3, [pc, #264]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 0203 	bic.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	493f      	ldr	r1, [pc, #252]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202e:	f7fe fd7b 	bl	8000b28 <HAL_GetTick>
 8002032:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002034:	e00a      	b.n	800204c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	f7fe fd77 	bl	8000b28 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e066      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 020c 	and.w	r2, r3, #12
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	429a      	cmp	r2, r3
 800205c:	d1eb      	bne.n	8002036 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	492c      	ldr	r1, [pc, #176]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4924      	ldr	r1, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e036      	b.n	800211a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4918      	ldr	r1, [pc, #96]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4910      	ldr	r1, [pc, #64]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ea:	f000 f825 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490c      	ldr	r1, [pc, #48]	; (800212c <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fbe0 	bl	80008d4 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	72fb      	strb	r3, [r7, #11]

  return status;
 8002118:	7afb      	ldrb	r3, [r7, #11]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	0800d31c 	.word	0x0800d31c
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x34>
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d121      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d11e      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e005      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_GetSysClockFreq+0x110>)
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	e004      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_RCC_GetSysClockFreq+0x114>)
 80021be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d134      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0xa6>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d003      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0xac>
 80021dc:	e005      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e0:	617b      	str	r3, [r7, #20]
      break;
 80021e2:	e005      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_GetSysClockFreq+0x114>)
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	e002      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	617b      	str	r3, [r7, #20]
      break;
 80021ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	3301      	adds	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	fb02 f203 	mul.w	r2, r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0e5b      	lsrs	r3, r3, #25
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	3301      	adds	r3, #1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002230:	69bb      	ldr	r3, [r7, #24]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	0800d334 	.word	0x0800d334
 8002248:	00f42400 	.word	0x00f42400
 800224c:	007a1200 	.word	0x007a1200

08002250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_GetHCLKFreq+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800226c:	f7ff fff0 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	0800d32c 	.word	0x0800d32c

08002294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002298:	f7ff ffda 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0adb      	lsrs	r3, r3, #11
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	0800d32c 	.word	0x0800d32c

080022c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	220f      	movs	r2, #15
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCC_GetClockConfig+0x60>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800233c:	f7ff f9d0 	bl	80016e0 <HAL_PWREx_GetVoltageRange>
 8002340:	6178      	str	r0, [r7, #20]
 8002342:	e014      	b.n	800236e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	6593      	str	r3, [r2, #88]	; 0x58
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800235c:	f7ff f9c0 	bl	80016e0 <HAL_PWREx_GetVoltageRange>
 8002360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d10b      	bne.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d919      	bls.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2ba0      	cmp	r3, #160	; 0xa0
 8002380:	d902      	bls.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002382:	2302      	movs	r3, #2
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e013      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002388:	2301      	movs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	e010      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d902      	bls.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002394:	2303      	movs	r3, #3
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	e00a      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d102      	bne.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e004      	b.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d101      	bne.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	4909      	ldr	r1, [pc, #36]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40022000 	.word	0x40022000

080023e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f0:	2300      	movs	r3, #0
 80023f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d041      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002404:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002408:	d02a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800240a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800240e:	d824      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002416:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800241a:	d81e      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002424:	d010      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002426:	e018      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002428:	4b86      	ldr	r3, [pc, #536]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a85      	ldr	r2, [pc, #532]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002434:	e015      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f825 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002446:	e00c      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3320      	adds	r3, #32
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f001 f910 	bl	8003674 <RCCEx_PLLSAI2_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	74fb      	strb	r3, [r7, #19]
      break;
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002476:	4973      	ldr	r1, [pc, #460]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247e:	e001      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d041      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002498:	d02a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800249a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800249e:	d824      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024aa:	d81e      	bhi.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d010      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024b6:	e018      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b8:	4b62      	ldr	r3, [pc, #392]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a61      	ldr	r2, [pc, #388]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c4:	e015      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 ffdd 	bl	800348c <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d6:	e00c      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3320      	adds	r3, #32
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 f8c8 	bl	8003674 <RCCEx_PLLSAI2_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e8:	e003      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	74fb      	strb	r3, [r7, #19]
      break;
 80024ee:	e000      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10b      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002506:	494f      	ldr	r1, [pc, #316]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800250e:	e001      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a0 	beq.w	8002662 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a40      	ldr	r2, [pc, #256]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002554:	2301      	movs	r3, #1
 8002556:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002558:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3a      	ldr	r2, [pc, #232]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002564:	f7fe fae0 	bl	8000b28 <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800256a:	e009      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7fe fadc 	bl	8000b28 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	74fb      	strb	r3, [r7, #19]
        break;
 800257e:	e005      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d15c      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01f      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d019      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fa9b 	bl	8000b28 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f4:	e00b      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fa97 	bl	8000b28 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d902      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	74fb      	strb	r3, [r7, #19]
            break;
 800260c:	e006      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ec      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002632:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800263a:	e009      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
 8002640:	e006      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002650:	7c7b      	ldrb	r3, [r7, #17]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b9e      	ldr	r3, [pc, #632]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a9d      	ldr	r2, [pc, #628]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266e:	4b98      	ldr	r3, [pc, #608]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f023 0203 	bic.w	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	4994      	ldr	r1, [pc, #592]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002690:	4b8f      	ldr	r3, [pc, #572]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 020c 	bic.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	498c      	ldr	r1, [pc, #560]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026b2:	4b87      	ldr	r3, [pc, #540]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4983      	ldr	r1, [pc, #524]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d4:	4b7e      	ldr	r3, [pc, #504]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	497b      	ldr	r1, [pc, #492]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002704:	4972      	ldr	r1, [pc, #456]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002718:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	496a      	ldr	r1, [pc, #424]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	4961      	ldr	r1, [pc, #388]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800275c:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	4959      	ldr	r1, [pc, #356]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277e:	4b54      	ldr	r3, [pc, #336]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278c:	4950      	ldr	r1, [pc, #320]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	4948      	ldr	r1, [pc, #288]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027c2:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	493f      	ldr	r1, [pc, #252]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d028      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f2:	4937      	ldr	r1, [pc, #220]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002802:	d106      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280e:	60d3      	str	r3, [r2, #12]
 8002810:	e011      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800281a:	d10c      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fe32 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	491f      	ldr	r1, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002860:	d106      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4a1a      	ldr	r2, [pc, #104]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286c:	60d3      	str	r3, [r2, #12]
 800286e:	e011      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002878:	d10c      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3304      	adds	r3, #4
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fe03 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02b      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028be:	d109      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a02      	ldr	r2, [pc, #8]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
 80028cc:	e014      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fdd1 	bl	800348c <RCCEx_PLLSAI1_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02f      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002922:	d10d      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	2102      	movs	r1, #2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fdae 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d014      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	74bb      	strb	r3, [r7, #18]
 800293e:	e011      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002948:	d10c      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3320      	adds	r3, #32
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fe8f 	bl	8003674 <RCCEx_PLLSAI2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297e:	490d      	ldr	r1, [pc, #52]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a2:	4904      	ldr	r1, [pc, #16]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ca:	d13e      	bne.n	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80029cc:	4bbe      	ldr	r3, [pc, #760]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029de:	d028      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029e6:	f200 853e 	bhi.w	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d005      	beq.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f8:	d00e      	beq.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80029fa:	f000 bd34 	b.w	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029fe:	4bb2      	ldr	r3, [pc, #712]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f040 852e 	bne.w	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 8002a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a12:	61fb      	str	r3, [r7, #28]
      break;
 8002a14:	f000 bd29 	b.w	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a18:	4bab      	ldr	r3, [pc, #684]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	f040 8523 	bne.w	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002a28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002a2c:	61fb      	str	r3, [r7, #28]
      break;
 8002a2e:	f000 bd1e 	b.w	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a32:	4ba5      	ldr	r3, [pc, #660]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3e:	f040 8518 	bne.w	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 8002a42:	4ba2      	ldr	r3, [pc, #648]	; (8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002a44:	61fb      	str	r3, [r7, #28]
      break;
 8002a46:	f000 bd14 	b.w	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4a:	4b9f      	ldr	r3, [pc, #636]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d036      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d840      	bhi.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d003      	beq.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d020      	beq.n	8002aae <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002a6c:	e039      	b.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002a6e:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002a7a:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002a86:	4b90      	ldr	r3, [pc, #576]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	e005      	b.n	8002a9e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002a92:	4b8d      	ldr	r3, [pc, #564]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	4a8c      	ldr	r2, [pc, #560]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002aa6:	e01f      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
      break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002aae:	4b86      	ldr	r3, [pc, #536]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8002abc:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002abe:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ac0:	e012      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
      break;
 8002ac6:	e00f      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ac8:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad4:	d102      	bne.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002ad6:	4b80      	ldr	r3, [pc, #512]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002ad8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002ada:	e005      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
      break;
 8002ae0:	e002      	b.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
      break;
 8002ae6:	bf00      	nop
    }

    switch(PeriphClk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aee:	f000 80d2 	beq.w	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af8:	f200 84bd 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b02:	f000 80c8 	beq.w	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0c:	f200 84b3 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	f000 835b 	beq.w	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	f200 84a9 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2a:	f000 847f 	beq.w	800342c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b34:	f200 849f 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3e:	f000 82ce 	beq.w	80030de <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b48:	f200 8495 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	f000 80a0 	beq.w	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	f200 848b 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b66:	f000 808f 	beq.w	8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b70:	f200 8481 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7a:	d07e      	beq.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	f200 8478 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	f000 8404 	beq.w	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b96:	f200 846e 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba0:	f000 83b0 	beq.w	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002baa:	f200 8464 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	f000 837a 	beq.w	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbe:	f200 845a 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	f000 8345 	beq.w	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	f200 8452 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d84b      	bhi.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 844b 	beq.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	2b1f      	cmp	r3, #31
 8002be6:	f200 8446 	bhi.w	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002ddb 	.word	0x08002ddb
 8002bf4:	08002e4b 	.word	0x08002e4b
 8002bf8:	08003477 	.word	0x08003477
 8002bfc:	08002edf 	.word	0x08002edf
 8002c00:	08003477 	.word	0x08003477
 8002c04:	08003477 	.word	0x08003477
 8002c08:	08003477 	.word	0x08003477
 8002c0c:	08002f57 	.word	0x08002f57
 8002c10:	08003477 	.word	0x08003477
 8002c14:	08003477 	.word	0x08003477
 8002c18:	08003477 	.word	0x08003477
 8002c1c:	08003477 	.word	0x08003477
 8002c20:	08003477 	.word	0x08003477
 8002c24:	08003477 	.word	0x08003477
 8002c28:	08003477 	.word	0x08003477
 8002c2c:	08002fdb 	.word	0x08002fdb
 8002c30:	08003477 	.word	0x08003477
 8002c34:	08003477 	.word	0x08003477
 8002c38:	08003477 	.word	0x08003477
 8002c3c:	08003477 	.word	0x08003477
 8002c40:	08003477 	.word	0x08003477
 8002c44:	08003477 	.word	0x08003477
 8002c48:	08003477 	.word	0x08003477
 8002c4c:	08003477 	.word	0x08003477
 8002c50:	08003477 	.word	0x08003477
 8002c54:	08003477 	.word	0x08003477
 8002c58:	08003477 	.word	0x08003477
 8002c5c:	08003477 	.word	0x08003477
 8002c60:	08003477 	.word	0x08003477
 8002c64:	08003477 	.word	0x08003477
 8002c68:	08003477 	.word	0x08003477
 8002c6c:	0800305d 	.word	0x0800305d
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	f000 82bd 	beq.w	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002c78:	e3fd      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c7a:	69b9      	ldr	r1, [r7, #24]
 8002c7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c80:	f000 fdd6 	bl	8003830 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c84:	61f8      	str	r0, [r7, #28]
      break;
 8002c86:	e3f7      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002c88:	69b9      	ldr	r1, [r7, #24]
 8002c8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c8e:	f000 fdcf 	bl	8003830 <RCCEx_GetSAIxPeriphCLKFreq>
 8002c92:	61f8      	str	r0, [r7, #28]
      break;
 8002c94:	e3f0      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002ca8:	d018      	beq.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cb0:	f200 808b 	bhi.w	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cba:	d059      	beq.n	8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc2:	d028      	beq.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8002cc4:	e081      	b.n	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0003d090 	.word	0x0003d090
 8002cd0:	0800d334 	.word	0x0800d334
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002cdc:	4bae      	ldr	r3, [pc, #696]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d172      	bne.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002ce8:	4bab      	ldr	r3, [pc, #684]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002cf4:	4ba8      	ldr	r3, [pc, #672]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	e005      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d00:	4ba5      	ldr	r3, [pc, #660]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	4aa3      	ldr	r2, [pc, #652]	; (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	61fb      	str	r3, [r7, #28]
          break;
 8002d14:	e05b      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002d16:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d22:	d156      	bne.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002d24:	4b9c      	ldr	r3, [pc, #624]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d30:	d14f      	bne.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002d32:	4b99      	ldr	r3, [pc, #612]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fb02 f203 	mul.w	r2, r2, r3
 8002d46:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	3301      	adds	r3, #1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002d58:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0d5b      	lsrs	r3, r3, #21
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	61fb      	str	r3, [r7, #28]
          break;
 8002d6e:	e030      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002d70:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7c:	d12b      	bne.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002d7e:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8a:	d124      	bne.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d8c:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d96:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	fb02 f203 	mul.w	r2, r2, r3
 8002da0:	4b7d      	ldr	r3, [pc, #500]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	3301      	adds	r3, #1
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002db2:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	0d5b      	lsrs	r3, r3, #21
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
          break;
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8002dca:	bf00      	nop
 8002dcc:	e354      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dce:	bf00      	nop
 8002dd0:	e352      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dd2:	bf00      	nop
 8002dd4:	e350      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dd6:	bf00      	nop
        break;
 8002dd8:	e34e      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002dda:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d828      	bhi.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002dec:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df2:	bf00      	nop
 8002df4:	08002e05 	.word	0x08002e05
 8002df8:	08002e0d 	.word	0x08002e0d
 8002dfc:	08002e15 	.word	0x08002e15
 8002e00:	08002e29 	.word	0x08002e29
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7ff fa46 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 8002e08:	61f8      	str	r0, [r7, #28]
          break;
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e0c:	f7ff f994 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002e10:	61f8      	str	r0, [r7, #28]
          break;
 8002e12:	e019      	b.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e14:	4b60      	ldr	r3, [pc, #384]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e20:	d10f      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002e22:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002e24:	61fb      	str	r3, [r7, #28]
          break;
 8002e26:	e00c      	b.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e28:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d107      	bne.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	61fb      	str	r3, [r7, #28]
          break;
 8002e3c:	e003      	b.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002e3e:	bf00      	nop
 8002e40:	e31a      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e42:	bf00      	nop
 8002e44:	e318      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e46:	bf00      	nop
        break;
 8002e48:	e316      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002e4a:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d83a      	bhi.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002ed3 	.word	0x08002ed3
 8002e6c:	08002ed3 	.word	0x08002ed3
 8002e70:	08002ed3 	.word	0x08002ed3
 8002e74:	08002ea1 	.word	0x08002ea1
 8002e78:	08002ed3 	.word	0x08002ed3
 8002e7c:	08002ed3 	.word	0x08002ed3
 8002e80:	08002ed3 	.word	0x08002ed3
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ed3 	.word	0x08002ed3
 8002e8c:	08002ed3 	.word	0x08002ed3
 8002e90:	08002ed3 	.word	0x08002ed3
 8002e94:	08002ebd 	.word	0x08002ebd
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e98:	f7ff f9e6 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	61f8      	str	r0, [r7, #28]
          break;
 8002e9e:	e01d      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ea0:	f7ff f94a 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002ea4:	61f8      	str	r0, [r7, #28]
          break;
 8002ea6:	e019      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002eb8:	61fb      	str	r3, [r7, #28]
          break;
 8002eba:	e00c      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d107      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ece:	61fb      	str	r3, [r7, #28]
          break;
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8002ed2:	bf00      	nop
 8002ed4:	e2d0      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ed6:	bf00      	nop
 8002ed8:	e2ce      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002eda:	bf00      	nop
        break;
 8002edc:	e2cc      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d021      	beq.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b30      	cmp	r3, #48	; 0x30
 8002ef4:	d829      	bhi.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d011      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d823      	bhi.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d004      	beq.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f10:	f7ff f9aa 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002f14:	61f8      	str	r0, [r7, #28]
          break;
 8002f16:	e01d      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f18:	f7ff f90e 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002f1c:	61f8      	str	r0, [r7, #28]
          break;
 8002f1e:	e019      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2c:	d10f      	bne.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002f30:	61fb      	str	r3, [r7, #28]
          break;
 8002f32:	e00c      	b.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d107      	bne.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f46:	61fb      	str	r3, [r7, #28]
          break;
 8002f48:	e003      	b.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002f4a:	bf00      	nop
 8002f4c:	e294      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f4e:	bf00      	nop
 8002f50:	e292      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f52:	bf00      	nop
        break;
 8002f54:	e290      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2bc0      	cmp	r3, #192	; 0xc0
 8002f66:	d027      	beq.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f6c:	d82f      	bhi.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d017      	beq.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d829      	bhi.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d004      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002f86:	e022      	b.n	8002fce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f88:	f7ff f96e 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002f8c:	61f8      	str	r0, [r7, #28]
          break;
 8002f8e:	e023      	b.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f90:	f7ff f8d2 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002f94:	61f8      	str	r0, [r7, #28]
          break;
 8002f96:	e01f      	b.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	0800d334 	.word	0x0800d334
 8002fa0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fa4:	4ba9      	ldr	r3, [pc, #676]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8002fb2:	4ba7      	ldr	r3, [pc, #668]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002fb4:	61fb      	str	r3, [r7, #28]
          break;
 8002fb6:	e00c      	b.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fb8:	4ba4      	ldr	r3, [pc, #656]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fca:	61fb      	str	r3, [r7, #28]
          break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002fce:	bf00      	nop
 8002fd0:	e252      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fd2:	bf00      	nop
 8002fd4:	e250      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fd6:	bf00      	nop
        break;
 8002fd8:	e24e      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002fda:	4b9c      	ldr	r3, [pc, #624]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fec:	d025      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff4:	d82c      	bhi.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffc:	d013      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d824      	bhi.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d004      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8003014:	e01c      	b.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003016:	f7ff f927 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 800301a:	61f8      	str	r0, [r7, #28]
          break;
 800301c:	e01d      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 800301e:	f7ff f88b 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003022:	61f8      	str	r0, [r7, #28]
          break;
 8003024:	e019      	b.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003026:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d10f      	bne.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8003034:	4b86      	ldr	r3, [pc, #536]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8003036:	61fb      	str	r3, [r7, #28]
          break;
 8003038:	e00c      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800303a:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d107      	bne.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8003048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304c:	61fb      	str	r3, [r7, #28]
          break;
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8003050:	bf00      	nop
 8003052:	e211      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003054:	bf00      	nop
 8003056:	e20f      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003058:	bf00      	nop
        break;
 800305a:	e20d      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800305c:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800306e:	d025      	beq.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003076:	d82c      	bhi.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d013      	beq.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003086:	d824      	bhi.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d004      	beq.n	80030a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 8003096:	e01c      	b.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff f8e6 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 800309c:	61f8      	str	r0, [r7, #28]
          break;
 800309e:	e01d      	b.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 80030a0:	f7ff f84a 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80030a4:	61f8      	str	r0, [r7, #28]
          break;
 80030a6:	e019      	b.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b4:	d10f      	bne.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80030b8:	61fb      	str	r3, [r7, #28]
          break;
 80030ba:	e00c      	b.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030bc:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d107      	bne.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
          break;
 80030d0:	e003      	b.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 80030d2:	bf00      	nop
 80030d4:	e1d0      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030d6:	bf00      	nop
 80030d8:	e1ce      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80030da:	bf00      	nop
        break;
 80030dc:	e1cc      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f0:	d00c      	beq.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f8:	d864      	bhi.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d030      	beq.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800310a:	e05b      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 800310c:	f7ff f814 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8003110:	61f8      	str	r0, [r7, #28]
          break;
 8003112:	e05c      	b.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003120:	d152      	bne.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04c      	beq.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003138:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	fb02 f203 	mul.w	r2, r2, r3
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	3301      	adds	r3, #1
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	0e5b      	lsrs	r3, r3, #25
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	61fb      	str	r3, [r7, #28]
          break;
 800316a:	e02d      	b.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800316c:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003178:	d128      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d022      	beq.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003190:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	fb02 f203 	mul.w	r2, r2, r3
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	3301      	adds	r3, #1
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	0e5b      	lsrs	r3, r3, #25
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	61fb      	str	r3, [r7, #28]
          break;
 80031c2:	e003      	b.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 80031c4:	bf00      	nop
 80031c6:	e157      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031c8:	bf00      	nop
 80031ca:	e155      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80031cc:	bf00      	nop
        break;
 80031ce:	e153      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031da:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 80031e2:	f7ff f857 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 80031e6:	61f8      	str	r0, [r7, #28]
        break;
 80031e8:	e146      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 80031ea:	f7fe ffa5 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80031ee:	61f8      	str	r0, [r7, #28]
        break;
 80031f0:	e142      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d013      	beq.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320c:	d819      	bhi.n	8003242 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800321c:	e011      	b.n	8003242 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800321e:	f7ff f823 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8003222:	61f8      	str	r0, [r7, #28]
          break;
 8003224:	e010      	b.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe ff87 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800322a:	61f8      	str	r0, [r7, #28]
          break;
 800322c:	e00c      	b.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d104      	bne.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 800323e:	61fb      	str	r3, [r7, #28]
          break;
 8003240:	e001      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8003242:	bf00      	nop
 8003244:	e118      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003246:	bf00      	nop
        break;
 8003248:	e116      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003254:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003266:	d013      	beq.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326e:	d819      	bhi.n	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327c:	d004      	beq.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe fff2 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8003284:	61f8      	str	r0, [r7, #28]
          break;
 8003286:	e010      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003288:	f7fe ff56 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 800328c:	61f8      	str	r0, [r7, #28]
          break;
 800328e:	e00c      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003290:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d104      	bne.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800329e:	4b7a      	ldr	r3, [pc, #488]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80032a0:	61fb      	str	r3, [r7, #28]
          break;
 80032a2:	e001      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80032a4:	bf00      	nop
 80032a6:	e0e7      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80032a8:	bf00      	nop
        break;
 80032aa:	e0e5      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032be:	d013      	beq.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c6:	d819      	bhi.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d004      	beq.n	80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 80032d6:	e011      	b.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7fe ffc6 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80032dc:	61f8      	str	r0, [r7, #28]
          break;
 80032de:	e010      	b.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 80032e0:	f7fe ff2a 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80032e4:	61f8      	str	r0, [r7, #28]
          break;
 80032e6:	e00c      	b.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d104      	bne.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80032f8:	61fb      	str	r3, [r7, #28]
          break;
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 80032fc:	bf00      	nop
 80032fe:	e0bb      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003300:	bf00      	nop
        break;
 8003302:	e0b9      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003304:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003316:	d02c      	beq.n	8003372 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800331e:	d833      	bhi.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003326:	d01a      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800332e:	d82b      	bhi.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333c:	d004      	beq.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 800333e:	e023      	b.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003340:	f7fe ff92 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8003344:	61f8      	str	r0, [r7, #28]
          break;
 8003346:	e026      	b.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d11a      	bne.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8003356:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800335a:	61fb      	str	r3, [r7, #28]
          break;
 800335c:	e016      	b.n	800338c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800335e:	4b49      	ldr	r3, [pc, #292]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d111      	bne.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 800336c:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800336e:	61fb      	str	r3, [r7, #28]
          break;
 8003370:	e00e      	b.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003372:	4b44      	ldr	r3, [pc, #272]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d109      	bne.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8003380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003384:	61fb      	str	r3, [r7, #28]
          break;
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8003388:	bf00      	nop
 800338a:	e075      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800338c:	bf00      	nop
 800338e:	e073      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003390:	bf00      	nop
 8003392:	e071      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003394:	bf00      	nop
        break;
 8003396:	e06f      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033aa:	d02c      	beq.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033b2:	d833      	bhi.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ba:	d01a      	beq.n	80033f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c2:	d82b      	bhi.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80033d2:	e023      	b.n	800341c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7fe ff48 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80033d8:	61f8      	str	r0, [r7, #28]
          break;
 80033da:	e026      	b.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d11a      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80033ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80033ee:	61fb      	str	r3, [r7, #28]
          break;
 80033f0:	e016      	b.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d111      	bne.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003402:	61fb      	str	r3, [r7, #28]
          break;
 8003404:	e00e      	b.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d109      	bne.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	61fb      	str	r3, [r7, #28]
          break;
 800341a:	e005      	b.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 800341c:	bf00      	nop
 800341e:	e02b      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003420:	bf00      	nop
 8003422:	e029      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003424:	bf00      	nop
 8003426:	e027      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003428:	bf00      	nop
        break;
 800342a:	e025      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d004      	beq.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8003446:	e00d      	b.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003448:	f7fe ff0e 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 800344c:	61f8      	str	r0, [r7, #28]
          break;
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8003460:	61fb      	str	r3, [r7, #28]
          break;
 8003462:	bf00      	nop
        break;
 8003464:	e008      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003466:	bf00      	nop
 8003468:	e006      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800346a:	bf00      	nop
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003476:	bf00      	nop
    }
  }

  return(frequency);
 8003478:	69fb      	ldr	r3, [r7, #28]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	00f42400 	.word	0x00f42400

0800348c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800349a:	4b75      	ldr	r3, [pc, #468]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0203 	and.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d10d      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034be:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
       ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d047      	beq.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e044      	b.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d018      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0x86>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d825      	bhi.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <RCCEx_PLLSAI1_Config+0x62>
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d009      	beq.n	8003500 <RCCEx_PLLSAI1_Config+0x74>
 80034ec:	e020      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ee:	4b60      	ldr	r3, [pc, #384]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11d      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e01a      	b.n	8003536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003510:	e013      	b.n	800353a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003512:	4b57      	ldr	r3, [pc, #348]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351e:	4b54      	ldr	r3, [pc, #336]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352e:	e006      	b.n	800353e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e004      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003546:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	430b      	orrs	r3, r1
 800355c:	4944      	ldr	r1, [pc, #272]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d17d      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003568:	4b41      	ldr	r3, [pc, #260]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a40      	ldr	r2, [pc, #256]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fd fad8 	bl	8000b28 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800357c:	f7fd fad4 	bl	8000b28 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
        break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003590:	4b37      	ldr	r3, [pc, #220]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ef      	bne.n	800357c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d160      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	0912      	lsrs	r2, r2, #4
 80035c0:	0452      	lsls	r2, r2, #17
 80035c2:	430a      	orrs	r2, r1
 80035c4:	492a      	ldr	r1, [pc, #168]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	610b      	str	r3, [r1, #16]
 80035ca:	e027      	b.n	800361c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d112      	bne.n	80035f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	0211      	lsls	r1, r2, #8
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6912      	ldr	r2, [r2, #16]
 80035e8:	0852      	lsrs	r2, r2, #1
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0552      	lsls	r2, r2, #21
 80035ee:	430a      	orrs	r2, r1
 80035f0:	491f      	ldr	r1, [pc, #124]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]
 80035f6:	e011      	b.n	800361c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	0211      	lsls	r1, r2, #8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6952      	ldr	r2, [r2, #20]
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	3a01      	subs	r2, #1
 8003612:	0652      	lsls	r2, r2, #25
 8003614:	430a      	orrs	r2, r1
 8003616:	4916      	ldr	r1, [pc, #88]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd fa7e 	bl	8000b28 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800362e:	e009      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003630:	f7fd fa7a 	bl	8000b28 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	73fb      	strb	r3, [r7, #15]
          break;
 8003642:	e005      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ef      	beq.n	8003630 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003664:	7bfb      	ldrb	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003682:	4b6a      	ldr	r3, [pc, #424]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800368e:	4b67      	ldr	r3, [pc, #412]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d10d      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
       ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
       ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d047      	beq.n	800374a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e044      	b.n	800374a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI2_Config+0x86>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI2_Config+0xa4>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI2_Config+0x62>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI2_Config+0x74>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b50      	ldr	r3, [pc, #320]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b4c      	ldr	r3, [pc, #304]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372e:	4b3f      	ldr	r3, [pc, #252]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	430b      	orrs	r3, r1
 8003744:	4939      	ldr	r1, [pc, #228]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d167      	bne.n	8003820 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a35      	ldr	r2, [pc, #212]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd f9e4 	bl	8000b28 <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003764:	f7fd f9e0 	bl	8000b28 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
        break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ef      	bne.n	8003764 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d14a      	bne.n	8003820 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003790:	4b26      	ldr	r3, [pc, #152]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0912      	lsrs	r2, r2, #4
 80037a8:	0452      	lsls	r2, r2, #17
 80037aa:	430a      	orrs	r2, r1
 80037ac:	491f      	ldr	r1, [pc, #124]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	614b      	str	r3, [r1, #20]
 80037b2:	e011      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6912      	ldr	r2, [r2, #16]
 80037ca:	0852      	lsrs	r2, r2, #1
 80037cc:	3a01      	subs	r2, #1
 80037ce:	0652      	lsls	r2, r2, #25
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4916      	ldr	r1, [pc, #88]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd f9a0 	bl	8000b28 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ec:	f7fd f99c 	bl	8000b28 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
          break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	4313      	orrs	r3, r2
 800381e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384c:	d10c      	bne.n	8003868 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800384e:	4b6e      	ldr	r3, [pc, #440]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003858:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003860:	d112      	bne.n	8003888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003862:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e00f      	b.n	8003888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d10b      	bne.n	8003888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003870:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800387a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003882:	d101      	bne.n	8003888 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003884:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003886:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 80b4 	bne.w	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800389a:	d003      	beq.n	80038a4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a2:	d135      	bne.n	8003910 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038a4:	4b58      	ldr	r3, [pc, #352]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b0:	f040 80a1 	bne.w	80039f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80038b4:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 809a 	beq.w	80039f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038c2:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	3301      	adds	r3, #1
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80038f4:	2311      	movs	r3, #17
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e001      	b.n	80038fe <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80038fa:	2307      	movs	r3, #7
 80038fc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	fb02 f203 	mul.w	r2, r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800390e:	e072      	b.n	80039f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d133      	bne.n	800397e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003916:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003922:	d169      	bne.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003924:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d063      	beq.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	3301      	adds	r3, #1
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8003962:	2311      	movs	r3, #17
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e001      	b.n	800396c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003968:	2307      	movs	r3, #7
 800396a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	fb02 f203 	mul.w	r2, r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e03c      	b.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003984:	d003      	beq.n	800398e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398c:	d134      	bne.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399a:	d12d      	bne.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d027      	beq.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	3301      	adds	r3, #1
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80039da:	2311      	movs	r3, #17
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e001      	b.n	80039e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80039e0:	2307      	movs	r3, #7
 80039e2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	fb02 f203 	mul.w	r2, r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e000      	b.n	80039f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80039f6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80039f8:	69fb      	ldr	r3, [r7, #28]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	001fff68 	.word	0x001fff68

08003a10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e022      	b.n	8003a68 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fc fead 	bl	8000794 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f814 	bl	8003a70 <HAL_SD_InitCard>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00a      	b.n	8003a68 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b090      	sub	sp, #64	; 0x40
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8003a8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a90:	f7fe ff92 	bl	80029b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e08d      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	09db      	lsrs	r3, r3, #7
 8003ab4:	4a47      	ldr	r2, [pc, #284]	; (8003bd4 <HAL_SD_InitCard+0x164>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	3b02      	subs	r3, #2
 8003abe:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681d      	ldr	r5, [r3, #0]
 8003ac4:	466c      	mov	r4, sp
 8003ac6:	f107 0318 	add.w	r3, r7, #24
 8003aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f001 fb87 	bl	80051ec <SDMMC_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e06d      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afe:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fbbc 	bl	8005282 <SDMMC_PowerState_ON>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003b10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e057      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_SD_InitCard+0x168>)
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fffc 	bl	8000b40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 ff21 	bl	8004990 <SD_PowerON>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02e      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fe42 	bl	80047f8 <SD_InitCard>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e01b      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fc03 	bl	80053a8 <SDMMC_CmdBlockLength>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00f      	beq.n	8003bca <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_SD_InitCard+0x16c>)
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd4:	014f8b59 	.word	0x014f8b59
 8003bd8:	00012110 	.word	0x00012110
 8003bdc:	004005ff 	.word	0x004005ff

08003be0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0a9      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 80a2 	bne.w	8003d5a <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	441a      	add	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d907      	bls.n	8003c3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e090      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	4a45      	ldr	r2, [pc, #276]	; (8003d64 <HAL_SD_ReadBlocks_DMA+0x184>)
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a44      	ldr	r2, [pc, #272]	; (8003d68 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2200      	movs	r2, #0
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3380      	adds	r3, #128	; 0x80
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	025b      	lsls	r3, r3, #9
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	f7fd f9b3 	bl	8000fe0 <HAL_DMA_Start_IT>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00f      	beq.n	8003ca0 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e05d      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d002      	beq.n	8003cbe <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	025b      	lsls	r3, r3, #9
 8003cc8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003cca:	2390      	movs	r3, #144	; 0x90
 8003ccc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f107 0210 	add.w	r2, r7, #16
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fb33 	bl	8005350 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d90a      	bls.n	8003d06 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2282      	movs	r2, #130	; 0x82
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fb97 	bl	8005430 <SDMMC_CmdReadMultiBlock>
 8003d02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003d04:	e009      	b.n	8003d1a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2281      	movs	r2, #129	; 0x81
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fb6a 	bl	80053ec <SDMMC_CmdReadSingleBlock>
 8003d18:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00a      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3730      	adds	r7, #48	; 0x30
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08004613 	.word	0x08004613
 8003d68:	08004685 	.word	0x08004685
 8003d6c:	004005ff 	.word	0x004005ff

08003d70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08c      	sub	sp, #48	; 0x30
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ac      	b.n	8003ef2 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 80a5 	bne.w	8003ef0 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d907      	bls.n	8003dca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e093      	b.n	8003ef2 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d002      	beq.n	8003e00 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d90a      	bls.n	8003e1c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	22a0      	movs	r2, #160	; 0xa0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 fb50 	bl	80054b8 <SDMMC_CmdWriteMultiBlock>
 8003e18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e1a:	e009      	b.n	8003e30 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2290      	movs	r2, #144	; 0x90
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fb23 	bl	8005474 <SDMMC_CmdWriteSingleBlock>
 8003e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d012      	beq.n	8003e5c <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e04a      	b.n	8003ef2 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3380      	adds	r3, #128	; 0x80
 8003e78:	461a      	mov	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	025b      	lsls	r3, r3, #9
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	f7fd f8ae 	bl	8000fe0 <HAL_DMA_Start_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e020      	b.n	8003ef2 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eb4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003ebc:	2390      	movs	r3, #144	; 0x90
 8003ebe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f107 0210 	add.w	r2, r7, #16
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fa3a 	bl	8005350 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 021a 	orr.w	r2, r2, #26
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	080045e9 	.word	0x080045e9
 8003f00:	08004685 	.word	0x08004685
 8003f04:	004005ff 	.word	0x004005ff

08003f08 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_SD_IRQHandler+0x2e>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fde4 	bl	8004afc <SD_Read_IT>
 8003f34:	e155      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 808f 	beq.w	8004064 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003f5e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f62:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d039      	beq.n	8003ff2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_SD_IRQHandler+0x8a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d011      	beq.n	8003fb6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fab0 	bl	80054fc <SDMMC_CmdStopTransfer>
 8003f9c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f91f 	bl	80041f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_SD_IRQHandler+0xda>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f001 fede 	bl	8005da4 <HAL_SD_RxCpltCallback>
 8003fe8:	e0fb      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f001 fed0 	bl	8005d90 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003ff0:	e0f7      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80f2 	beq.w	80041e2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fa75 	bl	80054fc <SDMMC_CmdStopTransfer>
 8004012:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8e4 	bl	80041f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 80d5 	bne.w	80041e2 <HAL_SD_IRQHandler+0x2da>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 80cf 	bne.w	80041e2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0208 	bic.w	r2, r2, #8
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 fe97 	bl	8005d90 <HAL_SD_TxCpltCallback>
}
 8004062:	e0be      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_SD_IRQHandler+0x17c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fd8e 	bl	8004b9e <SD_Write_IT>
 8004082:	e0ae      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80a7 	beq.w	80041e2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	f043 0208 	orr.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f043 0210 	orr.w	r2, r3, #16
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f240 523a 	movw	r2, #1338	; 0x53a
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f9ee 	bl	80054fc <SDMMC_CmdStopTransfer>
 8004120:	4602      	mov	r2, r0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f855 	bl	80041f4 <HAL_SD_ErrorCallback>
}
 800414a:	e04a      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d045      	beq.n	80041e2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <HAL_SD_IRQHandler+0x262>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_SD_IRQHandler+0x2e4>)
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc ffd0 	bl	800111c <HAL_DMA_Abort_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02f      	beq.n	80041e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fac8 	bl	800471c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800418c:	e029      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_SD_IRQHandler+0x29a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <HAL_SD_IRQHandler+0x2e8>)
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc ffb4 	bl	800111c <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fae3 	bl	800478a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041c4:	e00d      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 fdce 	bl	8005d7c <HAL_SD_AbortCallback>
}
 80041e0:	e7ff      	b.n	80041e2 <HAL_SD_IRQHandler+0x2da>
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	0800471d 	.word	0x0800471d
 80041f0:	0800478b 	.word	0x0800478b

080041f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004216:	0f9b      	lsrs	r3, r3, #30
 8004218:	b2da      	uxtb	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004222:	0e9b      	lsrs	r3, r3, #26
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	b2da      	uxtb	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	0e1b      	lsrs	r3, r3, #24
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	b2da      	uxtb	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b2da      	uxtb	r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004268:	0d1b      	lsrs	r3, r3, #20
 800426a:	b29a      	uxth	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	b2da      	uxtb	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004286:	0bdb      	lsrs	r3, r3, #15
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	b2da      	uxtb	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004298:	0b9b      	lsrs	r3, r3, #14
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042aa:	0b5b      	lsrs	r3, r3, #13
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042bc:	0b1b      	lsrs	r3, r3, #12
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d163      	bne.n	80043a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042dc:	009a      	lsls	r2, r3, #2
 80042de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80042e8:	0f92      	lsrs	r2, r2, #30
 80042ea:	431a      	orrs	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f4:	0edb      	lsrs	r3, r3, #27
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	0e1b      	lsrs	r3, r3, #24
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b2da      	uxtb	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004318:	0d5b      	lsrs	r3, r3, #21
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	b2da      	uxtb	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432a:	0c9b      	lsrs	r3, r3, #18
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	b2da      	uxtb	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433c:	0bdb      	lsrs	r3, r3, #15
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	b2da      	uxtb	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7e1b      	ldrb	r3, [r3, #24]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	3302      	adds	r3, #2
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800436a:	fb02 f203 	mul.w	r2, r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	7a1b      	ldrb	r3, [r3, #8]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800438c:	0a52      	lsrs	r2, r2, #9
 800438e:	fb02 f203 	mul.w	r2, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439c:	661a      	str	r2, [r3, #96]	; 0x60
 800439e:	e031      	b.n	8004404 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d11d      	bne.n	80043e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	3301      	adds	r3, #1
 80043c4:	029a      	lsls	r2, r3, #10
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
 80043e2:	e00f      	b.n	8004404 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a58      	ldr	r2, [pc, #352]	; (800454c <HAL_SD_GetCardCSD+0x344>)
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e09d      	b.n	8004540 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004408:	0b9b      	lsrs	r3, r3, #14
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	09db      	lsrs	r3, r3, #7
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004432:	b2da      	uxtb	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	0fdb      	lsrs	r3, r3, #31
 800443e:	b2da      	uxtb	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	0f5b      	lsrs	r3, r3, #29
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	b2da      	uxtb	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	b2da      	uxtb	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	0d9b      	lsrs	r3, r3, #22
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	0d5b      	lsrs	r3, r3, #21
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	0bdb      	lsrs	r3, r3, #15
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	0b9b      	lsrs	r3, r3, #14
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	0b1b      	lsrs	r3, r3, #12
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	0a9b      	lsrs	r3, r3, #10
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	b2da      	uxtb	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	004005ff 	.word	0x004005ff

08004550 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80045b4:	f107 030c 	add.w	r3, r7, #12
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa76 	bl	8004aac <SD_SendStatus>
 80045c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0a5b      	lsrs	r3, r3, #9
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045de:	693b      	ldr	r3, [r7, #16]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	2b82      	cmp	r3, #130	; 0x82
 8004626:	d111      	bne.n	800464c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 ff65 	bl	80054fc <SDMMC_CmdStopTransfer>
 8004632:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff fdd4 	bl	80041f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0208 	bic.w	r2, r2, #8
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f240 523a 	movw	r2, #1338	; 0x53a
 8004664:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f001 fb95 	bl	8005da4 <HAL_SD_RxCpltCallback>
#endif
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d002      	beq.n	80046ae <SD_DMAError+0x2a>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d12d      	bne.n	800470a <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a19      	ldr	r2, [pc, #100]	; (8004718 <SD_DMAError+0x94>)
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f7ff ff68 	bl	80045a8 <HAL_SD_GetCardState>
 80046d8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d002      	beq.n	80046e6 <SD_DMAError+0x62>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10a      	bne.n	80046fc <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ff06 	bl	80054fc <SDMMC_CmdStopTransfer>
 80046f0:	4602      	mov	r2, r0
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	431a      	orrs	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff fd72 	bl	80041f4 <HAL_SD_ErrorCallback>
#endif
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	004005ff 	.word	0x004005ff

0800471c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004732:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff37 	bl	80045a8 <HAL_SD_GetCardState>
 800473a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b06      	cmp	r3, #6
 800474e:	d002      	beq.n	8004756 <SD_DMATxAbort+0x3a>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d10a      	bne.n	800476c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fece 	bl	80054fc <SDMMC_CmdStopTransfer>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	431a      	orrs	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f001 fb01 	bl	8005d7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800477a:	e002      	b.n	8004782 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fd39 	bl	80041f4 <HAL_SD_ErrorCallback>
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f240 523a 	movw	r2, #1338	; 0x53a
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff ff00 	bl	80045a8 <HAL_SD_GetCardState>
 80047a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d002      	beq.n	80047c4 <SD_DMARxAbort+0x3a>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d10a      	bne.n	80047da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fe97 	bl	80054fc <SDMMC_CmdStopTransfer>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f001 faca 	bl	8005d7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80047e8:	e002      	b.n	80047f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff fd02 	bl	80041f4 <HAL_SD_ErrorCallback>
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b094      	sub	sp, #80	; 0x50
 80047fc:	af04      	add	r7, sp, #16
 80047fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004800:	2301      	movs	r3, #1
 8004802:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd49 	bl	80052a0 <SDMMC_GetPowerState>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004814:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004818:	e0b6      	b.n	8004988 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	2b03      	cmp	r3, #3
 8004820:	d02f      	beq.n	8004882 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 ff2f 	bl	800568a <SDMMC_CmdSendCID>
 800482c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <SD_InitCard+0x40>
    {
      return errorstate;
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	e0a7      	b.n	8004988 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fd73 	bl	800532a <SDMMC_GetResponse>
 8004844:	4602      	mov	r2, r0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2104      	movs	r1, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fd6a 	bl	800532a <SDMMC_GetResponse>
 8004856:	4602      	mov	r2, r0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2108      	movs	r1, #8
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fd61 	bl	800532a <SDMMC_GetResponse>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	210c      	movs	r1, #12
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fd58 	bl	800532a <SDMMC_GetResponse>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	2b03      	cmp	r3, #3
 8004888:	d00d      	beq.n	80048a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f107 020e 	add.w	r2, r7, #14
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 ff35 	bl	8005704 <SDMMC_CmdSetRelAdd>
 800489a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	e070      	b.n	8004988 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d036      	beq.n	800491c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 feff 	bl	80056c6 <SDMMC_CmdSendCSD>
 80048c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80048d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d2:	e059      	b.n	8004988 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fd25 	bl	800532a <SDMMC_GetResponse>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2104      	movs	r1, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fd1c 	bl	800532a <SDMMC_GetResponse>
 80048f2:	4602      	mov	r2, r0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2108      	movs	r1, #8
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd13 	bl	800532a <SDMMC_GetResponse>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	210c      	movs	r1, #12
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fd0a 	bl	800532a <SDMMC_GetResponse>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2104      	movs	r1, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fd01 	bl	800532a <SDMMC_GetResponse>
 8004928:	4603      	mov	r3, r0
 800492a:	0d1a      	lsrs	r2, r3, #20
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004930:	f107 0310 	add.w	r3, r7, #16
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fc66 	bl	8004208 <HAL_SD_GetCardCSD>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004946:	e01f      	b.n	8004988 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6819      	ldr	r1, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	461a      	mov	r2, r3
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	4608      	mov	r0, r1
 800495a:	f000 fdf1 	bl	8005540 <SDMMC_CmdSelDesel>
 800495e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <SD_InitCard+0x172>
  {
    return errorstate;
 8004966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004968:	e00e      	b.n	8004988 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681d      	ldr	r5, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	466c      	mov	r4, sp
 8004972:	f103 0210 	add.w	r2, r3, #16
 8004976:	ca07      	ldmia	r2, {r0, r1, r2}
 8004978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800497c:	3304      	adds	r3, #4
 800497e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004980:	4628      	mov	r0, r5
 8004982:	f000 fc33 	bl	80051ec <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3740      	adds	r7, #64	; 0x40
 800498c:	46bd      	mov	sp, r7
 800498e:	bdb0      	pop	{r4, r5, r7, pc}

08004990 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fdec 	bl	8005586 <SDMMC_CmdGoIdleState>
 80049ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <SD_PowerON+0x2a>
  {
    return errorstate;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	e072      	b.n	8004aa0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fdff 	bl	80055c2 <SDMMC_CmdOperCond>
 80049c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fdd5 	bl	8005586 <SDMMC_CmdGoIdleState>
 80049dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <SD_PowerON+0x5e>
    {
      return errorstate;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e05b      	b.n	8004aa0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d137      	bne.n	8004a66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fdff 	bl	8005600 <SDMMC_CmdAppCommand>
 8004a02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02d      	beq.n	8004a66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a0e:	e047      	b.n	8004aa0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fdf2 	bl	8005600 <SDMMC_CmdAppCommand>
 8004a1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	e03b      	b.n	8004aa0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	491e      	ldr	r1, [pc, #120]	; (8004aa8 <SD_PowerON+0x118>)
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fe08 	bl	8005644 <SDMMC_CmdAppOperCommand>
 8004a34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a40:	e02e      	b.n	8004aa0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fc6e 	bl	800532a <SDMMC_GetResponse>
 8004a4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	0fdb      	lsrs	r3, r3, #31
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <SD_PowerON+0xcc>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <SD_PowerON+0xce>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]

    count++;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d802      	bhi.n	8004a76 <SD_PowerON+0xe6>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0cc      	beq.n	8004a10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d902      	bls.n	8004a86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a84:	e00c      	b.n	8004aa0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
 8004a96:	e002      	b.n	8004a9e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	c1100000 	.word	0xc1100000

08004aac <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac0:	e018      	b.n	8004af4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fe39 	bl	8005746 <SDMMC_CmdSendStatus>
 8004ad4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e009      	b.n	8004af4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fc1f 	bl	800532a <SDMMC_GetResponse>
 8004aec:	4602      	mov	r2, r0
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03f      	beq.n	8004b96 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e033      	b.n	8004b84 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fb90 	bl	8005246 <SDMMC_ReadFIFO>
 8004b26:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b07      	cmp	r3, #7
 8004b88:	d9c8      	bls.n	8004b1c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d043      	beq.n	8004c40 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e037      	b.n	8004c2e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	021a      	lsls	r2, r3, #8
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	041a      	lsls	r2, r3, #16
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	061a      	lsls	r2, r3, #24
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f107 0208 	add.w	r2, r7, #8
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb1c 	bl	8005260 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9c4      	bls.n	8004bbe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004c40:	bf00      	nop
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e049      	b.n	8004cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f841 	bl	8004cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 f9f8 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d001      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e04f      	b.n	8004dc4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d018      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIM_Base_Start_IT+0x76>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d115      	bne.n	8004dae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b06      	cmp	r3, #6
 8004d92:	d015      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0xb4>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d011      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	e008      	b.n	8004dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40013400 	.word	0x40013400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	00010007 	.word	0x00010007

08004dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0202 	mvn.w	r2, #2
 8004e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f905 	bl	800503e <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8f7 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f908 	bl	8005052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0204 	mvn.w	r2, #4
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8db 	bl	800503e <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8cd 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f8de 	bl	8005052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0208 	mvn.w	r2, #8
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8b1 	bl	800503e <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8a3 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f8b4 	bl	8005052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0210 	mvn.w	r2, #16
 8004f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f887 	bl	800503e <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f879 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f88a 	bl	8005052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d10e      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0201 	mvn.w	r2, #1
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb facc 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d10e      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f914 	bl	80051c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f907 	bl	80051d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f838 	bl	8005066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b20      	cmp	r3, #32
 8005002:	d10e      	bne.n	8005022 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b20      	cmp	r3, #32
 8005010:	d107      	bne.n	8005022 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f06f 0220 	mvn.w	r2, #32
 800501a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8c7 	bl	80051b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a40      	ldr	r2, [pc, #256]	; (8005190 <TIM_Base_SetConfig+0x114>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d00f      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3d      	ldr	r2, [pc, #244]	; (8005194 <TIM_Base_SetConfig+0x118>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <TIM_Base_SetConfig+0x11c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3b      	ldr	r2, [pc, #236]	; (800519c <TIM_Base_SetConfig+0x120>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3a      	ldr	r2, [pc, #232]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d108      	bne.n	80050ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a2f      	ldr	r2, [pc, #188]	; (8005190 <TIM_Base_SetConfig+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01f      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050dc:	d01b      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <TIM_Base_SetConfig+0x118>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d017      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <TIM_Base_SetConfig+0x11c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	; (800519c <TIM_Base_SetConfig+0x120>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a28      	ldr	r2, [pc, #160]	; (80051a4 <TIM_Base_SetConfig+0x128>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <TIM_Base_SetConfig+0x12c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a26      	ldr	r2, [pc, #152]	; (80051ac <TIM_Base_SetConfig+0x130>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <TIM_Base_SetConfig+0x114>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <TIM_Base_SetConfig+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a11      	ldr	r2, [pc, #68]	; (80051a4 <TIM_Base_SetConfig+0x128>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <TIM_Base_SetConfig+0x12c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <TIM_Base_SetConfig+0x130>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d103      	bne.n	800517c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	615a      	str	r2, [r3, #20]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800

080051b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80051ec:	b084      	sub	sp, #16
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	f107 001c 	add.w	r0, r7, #28
 80051fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800520a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800520e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005212:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005216:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800521a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800522a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	b004      	add	sp, #16
 8005244:	4770      	bx	lr

08005246 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2203      	movs	r2, #3
 800528e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005290:	2002      	movs	r0, #2
 8005292:	f7fb fc55 	bl	8000b40 <HAL_Delay>

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0303 	and.w	r3, r3, #3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80052e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80052e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052f6:	f023 030f 	bic.w	r3, r3, #15
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	b2db      	uxtb	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3314      	adds	r3, #20
 8005338:	461a      	mov	r2, r3
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005376:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800537c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005382:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800539a:	2300      	movs	r3, #0

}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053b6:	2310      	movs	r3, #16
 80053b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053ba:	2340      	movs	r3, #64	; 0x40
 80053bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff ff74 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	2110      	movs	r1, #16
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9d6 	bl	800578c <SDMMC_GetCmdResp1>
 80053e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053e2:	69fb      	ldr	r3, [r7, #28]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80053fa:	2311      	movs	r3, #17
 80053fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053fe:	2340      	movs	r3, #64	; 0x40
 8005400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff ff52 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005418:	f241 3288 	movw	r2, #5000	; 0x1388
 800541c:	2111      	movs	r1, #17
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9b4 	bl	800578c <SDMMC_GetCmdResp1>
 8005424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005426:	69fb      	ldr	r3, [r7, #28]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800543e:	2312      	movs	r3, #18
 8005440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005442:	2340      	movs	r3, #64	; 0x40
 8005444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800544a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff30 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800545c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005460:	2112      	movs	r1, #18
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f992 	bl	800578c <SDMMC_GetCmdResp1>
 8005468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800546a:	69fb      	ldr	r3, [r7, #28]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005482:	2318      	movs	r3, #24
 8005484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800548e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff0e 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80054a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a4:	2118      	movs	r1, #24
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f970 	bl	800578c <SDMMC_GetCmdResp1>
 80054ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ae:	69fb      	ldr	r3, [r7, #28]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80054c6:	2319      	movs	r3, #25
 80054c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054d8:	f107 0308 	add.w	r3, r7, #8
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff feec 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80054e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e8:	2119      	movs	r1, #25
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f94e 	bl	800578c <SDMMC_GetCmdResp1>
 80054f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f2:	69fb      	ldr	r3, [r7, #28]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005508:	230c      	movs	r3, #12
 800550a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005518:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fecb 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005526:	4a05      	ldr	r2, [pc, #20]	; (800553c <SDMMC_CmdStopTransfer+0x40>)
 8005528:	210c      	movs	r1, #12
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f92e 	bl	800578c <SDMMC_GetCmdResp1>
 8005530:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	05f5e100 	.word	0x05f5e100

08005540 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005550:	2307      	movs	r3, #7
 8005552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800555c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005560:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005562:	f107 0310 	add.w	r3, r7, #16
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff fea7 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	2107      	movs	r1, #7
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f909 	bl	800578c <SDMMC_GetCmdResp1>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800559e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fe86 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb23 	bl	8005bfc <SDMMC_GetCmdError>
 80055b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055b8:	69fb      	ldr	r3, [r7, #28]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80055ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80055ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80055d0:	2308      	movs	r3, #8
 80055d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055d4:	2340      	movs	r3, #64	; 0x40
 80055d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fe67 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fab6 	bl	8005b60 <SDMMC_GetCmdResp7>
 80055f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f6:	69fb      	ldr	r3, [r7, #28]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800560e:	2337      	movs	r3, #55	; 0x37
 8005610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe48 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800562c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005630:	2137      	movs	r1, #55	; 0x37
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8aa 	bl	800578c <SDMMC_GetCmdResp1>
 8005638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800563a:	69fb      	ldr	r3, [r7, #28]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005658:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800565a:	2329      	movs	r3, #41	; 0x29
 800565c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800565e:	2340      	movs	r3, #64	; 0x40
 8005660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800566c:	f107 0308 	add.w	r3, r7, #8
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe22 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f9bd 	bl	80059f8 <SDMMC_GetCmdResp3>
 800567e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005680:	69fb      	ldr	r3, [r7, #28]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b088      	sub	sp, #32
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005696:	2302      	movs	r3, #2
 8005698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800569a:	23c0      	movs	r3, #192	; 0xc0
 800569c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fe04 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f957 	bl	8005968 <SDMMC_GetCmdResp2>
 80056ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80056d4:	2309      	movs	r3, #9
 80056d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056d8:	23c0      	movs	r3, #192	; 0xc0
 80056da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fde5 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f938 	bl	8005968 <SDMMC_GetCmdResp2>
 80056f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005712:	2303      	movs	r3, #3
 8005714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800571e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fdc6 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	2103      	movs	r1, #3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f99d 	bl	8005a74 <SDMMC_GetCmdResp6>
 800573a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573c:	69fb      	ldr	r3, [r7, #28]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005754:	230d      	movs	r3, #13
 8005756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005764:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005766:	f107 0308 	add.w	r3, r7, #8
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fda5 	bl	80052bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	210d      	movs	r1, #13
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f807 	bl	800578c <SDMMC_GetCmdResp1>
 800577e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005780:	69fb      	ldr	r3, [r7, #28]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	460b      	mov	r3, r1
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800579a:	4b70      	ldr	r3, [pc, #448]	; (800595c <SDMMC_GetCmdResp1+0x1d0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a70      	ldr	r2, [pc, #448]	; (8005960 <SDMMC_GetCmdResp1+0x1d4>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	0a5a      	lsrs	r2, r3, #9
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	61fa      	str	r2, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057bc:	e0c9      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0ef      	beq.n	80057ae <SDMMC_GetCmdResp1+0x22>
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ea      	bne.n	80057ae <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2204      	movs	r2, #4
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057ea:	2304      	movs	r3, #4
 80057ec:	e0b1      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005800:	2301      	movs	r3, #1
 8005802:	e0a6      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	22c5      	movs	r2, #197	; 0xc5
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fd80 	bl	8005310 <SDMMC_GetCommandResponse>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	7afb      	ldrb	r3, [r7, #11]
 8005816:	4293      	cmp	r3, r2
 8005818:	d001      	beq.n	800581e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800581a:	2301      	movs	r3, #1
 800581c:	e099      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800581e:	2100      	movs	r1, #0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fd82 	bl	800532a <SDMMC_GetResponse>
 8005826:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4b4e      	ldr	r3, [pc, #312]	; (8005964 <SDMMC_GetCmdResp1+0x1d8>)
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005832:	2300      	movs	r3, #0
 8005834:	e08d      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da02      	bge.n	8005842 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800583c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005840:	e087      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	e080      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	e079      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586c:	e071      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800587c:	e069      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588c:	e061      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800589c:	e059      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ac:	e051      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058bc:	e049      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80058c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058cc:	e041      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80058d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058dc:	e039      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80058e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ec:	e031      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80058f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058fc:	e029      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005908:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800590c:	e021      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005918:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800591c:	e019      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800592c:	e011      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800593c:	e009      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005948:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800594c:	e001      	b.n	8005952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800594e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000000 	.word	0x20000000
 8005960:	10624dd3 	.word	0x10624dd3
 8005964:	fdffe008 	.word	0xfdffe008

08005968 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005970:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <SDMMC_GetCmdResp2+0x88>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <SDMMC_GetCmdResp2+0x8c>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0a5b      	lsrs	r3, r3, #9
 800597c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	60fa      	str	r2, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005994:	e026      	b.n	80059e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ef      	beq.n	8005986 <SDMMC_GetCmdResp2+0x1e>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ea      	bne.n	8005986 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059c2:	2304      	movs	r3, #4
 80059c4:	e00e      	b.n	80059e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059d8:	2301      	movs	r3, #1
 80059da:	e003      	b.n	80059e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22c5      	movs	r2, #197	; 0xc5
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000000 	.word	0x20000000
 80059f4:	10624dd3 	.word	0x10624dd3

080059f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <SDMMC_GetCmdResp3+0x74>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <SDMMC_GetCmdResp3+0x78>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	0a5b      	lsrs	r3, r3, #9
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	60fa      	str	r2, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a24:	e01b      	b.n	8005a5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ef      	beq.n	8005a16 <SDMMC_GetCmdResp3+0x1e>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ea      	bne.n	8005a16 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a52:	2304      	movs	r3, #4
 8005a54:	e003      	b.n	8005a5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	22c5      	movs	r2, #197	; 0xc5
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000000 	.word	0x20000000
 8005a70:	10624dd3 	.word	0x10624dd3

08005a74 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a82:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <SDMMC_GetCmdResp6+0xe4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <SDMMC_GetCmdResp6+0xe8>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	61fa      	str	r2, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005aa6:	e052      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ef      	beq.n	8005a98 <SDMMC_GetCmdResp6+0x24>
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ea      	bne.n	8005a98 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	e03a      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e02f      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fc0e 	bl	8005310 <SDMMC_GetCommandResponse>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d001      	beq.n	8005b02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e025      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	22c5      	movs	r2, #197	; 0xc5
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b08:	2100      	movs	r1, #0
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fc0d 	bl	800532a <SDMMC_GetResponse>
 8005b10:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	0c1b      	lsrs	r3, r3, #16
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e011      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b38:	e009      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b48:	e001      	b.n	8005b4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	10624dd3 	.word	0x10624dd3

08005b60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b68:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <SDMMC_GetCmdResp7+0x94>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <SDMMC_GetCmdResp7+0x98>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0a5b      	lsrs	r3, r3, #9
 8005b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b8c:	e02c      	b.n	8005be8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0ef      	beq.n	8005b7e <SDMMC_GetCmdResp7+0x1e>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ea      	bne.n	8005b7e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bba:	2304      	movs	r3, #4
 8005bbc:	e014      	b.n	8005be8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d004      	beq.n	8005bd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e009      	b.n	8005be8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2240      	movs	r2, #64	; 0x40
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005be6:	2300      	movs	r3, #0

}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	10624dd3 	.word	0x10624dd3

08005bfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <SDMMC_GetCmdError+0x50>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <SDMMC_GetCmdError+0x54>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	0a5b      	lsrs	r3, r3, #9
 8005c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c14:	fb02 f303 	mul.w	r3, r2, r3
 8005c18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	60fa      	str	r2, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c28:	e009      	b.n	8005c3e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f1      	beq.n	8005c1a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	22c5      	movs	r2, #197	; 0xc5
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	10624dd3 	.word	0x10624dd3

08005c54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c58:	4904      	ldr	r1, [pc, #16]	; (8005c6c <MX_FATFS_Init+0x18>)
 8005c5a:	4805      	ldr	r0, [pc, #20]	; (8005c70 <MX_FATFS_Init+0x1c>)
 8005c5c:	f003 fcf2 	bl	8009644 <FATFS_LinkDriver>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <MX_FATFS_Init+0x20>)
 8005c66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005c68:	bf00      	nop
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20001d40 	.word	0x20001d40
 8005c70:	0800d364 	.word	0x0800d364
 8005c74:	20001d3c 	.word	0x20001d3c

08005c78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005c7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005c92:	f000 f898 	bl	8005dc6 <BSP_SD_IsDetected>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d001      	beq.n	8005ca0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e005      	b.n	8005cac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005ca0:	4804      	ldr	r0, [pc, #16]	; (8005cb4 <BSP_SD_Init+0x2c>)
 8005ca2:	f7fd feb5 	bl	8003a10 <HAL_SD_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005caa:	79fb      	ldrb	r3, [r7, #7]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200019c0 	.word	0x200019c0

08005cb8 <BSP_SD_ReadBlocks_DMA>:
}

/* USER CODE BEGIN BeforeReadDMABlocksSection */
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmatx = NULL;
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  sd_state = SD_DMAConfigRx(&hsd1);
 8005cce:	480a      	ldr	r0, [pc, #40]	; (8005cf8 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005cd0:	f000 f88c 	bl	8005dec <SD_DMAConfigRx>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	4806      	ldr	r0, [pc, #24]	; (8005cf8 <BSP_SD_ReadBlocks_DMA+0x40>)
 8005ce0:	f7fd ff7e 	bl	8003be0 <HAL_SD_ReadBlocks_DMA>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <BSP_SD_ReadBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	200019c0 	.word	0x200019c0

08005cfc <BSP_SD_WriteBlocks_DMA>:

/* USER CODE BEGIN BeforeWriteDMABlocksSection */
#endif
#ifdef CODE_CORRECTION_SD
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]

  hsd1.hdmarx = NULL;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
  sd_state = SD_DMAConfigTx(&hsd1);
 8005d12:	480a      	ldr	r0, [pc, #40]	; (8005d3c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d14:	f000 f8ae 	bl	8005e74 <SD_DMAConfigTx>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	68f9      	ldr	r1, [r7, #12]
 8005d22:	4806      	ldr	r0, [pc, #24]	; (8005d3c <BSP_SD_WriteBlocks_DMA+0x40>)
 8005d24:	f7fe f824 	bl	8003d70 <HAL_SD_WriteBlocks_DMA>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <BSP_SD_WriteBlocks_DMA+0x36>
  {
    sd_state = MSD_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	200019c0 	.word	0x200019c0

08005d40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d44:	4805      	ldr	r0, [pc, #20]	; (8005d5c <BSP_SD_GetCardState+0x1c>)
 8005d46:	f7fe fc2f 	bl	80045a8 <HAL_SD_GetCardState>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200019c0 	.word	0x200019c0

08005d60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4803      	ldr	r0, [pc, #12]	; (8005d78 <BSP_SD_GetCardInfo+0x18>)
 8005d6c:	f7fe fbf0 	bl	8004550 <HAL_SD_GetCardInfo>
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200019c0 	.word	0x200019c0

08005d7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005d84:	f000 f818 	bl	8005db8 <BSP_SD_AbortCallback>
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005d98:	f000 fa38 	bl	800620c <BSP_SD_WriteCpltCallback>
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005dac:	f000 fa40 	bl	8006230 <BSP_SD_ReadCpltCallback>
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0

}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005dd0:	f000 f892 	bl	8005ef8 <BSP_PlatformIsDetected>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	b2db      	uxtb	r3, r3
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <SD_DMAConfigRx>:
 */
#define SD_DMAx_STREAM DMA2_Channel4
#define SD_DMAx_IRQn DMA2_Channel4_IRQn
//#define SD_DMAx_IRQHandler DMA2_Channel4_IRQHandler
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_rx;
 HAL_StatusTypeDef status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 /* Configure DMA Rx parameters */
 hdma_rx.Init.Request = DMA_REQUEST_7;
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005dfa:	2207      	movs	r2, #7
 8005dfc:	605a      	str	r2, [r3, #4]
 hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]
 hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	60da      	str	r2, [r3, #12]
 hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e0a:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e0c:	2280      	movs	r2, #128	; 0x80
 8005e0e:	611a      	str	r2, [r3, #16]
 hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e16:	615a      	str	r2, [r3, #20]
 hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e18:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e1e:	619a      	str	r2, [r3, #24]
 hdma_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005e20:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e22:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005e26:	621a      	str	r2, [r3, #32]
 hdma_rx.Instance = SD_DMAx_STREAM;
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e2a:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <SD_DMAConfigRx+0x84>)
 8005e2c:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
 8005e34:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_rx);
 8005e3a:	480c      	ldr	r0, [pc, #48]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e3c:	f7fb f930 	bl	80010a0 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_rx);
 8005e40:	480a      	ldr	r0, [pc, #40]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e42:	f7fb f83b 	bl	8000ebc <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_rx);
 8005e46:	4809      	ldr	r0, [pc, #36]	; (8005e6c <SD_DMAConfigRx+0x80>)
 8005e48:	f7fa ff80 	bl	8000d4c <HAL_DMA_Init>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005e50:	2200      	movs	r2, #0
 8005e52:	2106      	movs	r1, #6
 8005e54:	203b      	movs	r0, #59	; 0x3b
 8005e56:	f7fa ff4f 	bl	8000cf8 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005e5a:	203b      	movs	r0, #59	; 0x3b
 8005e5c:	f7fa ff68 	bl	8000d30 <HAL_NVIC_EnableIRQ>
 return (status);
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000002c 	.word	0x2000002c
 8005e70:	40020444 	.word	0x40020444

08005e74 <SD_DMAConfigTx>:
 * @brief Configure the DMA to transmit data to the SD card
 * @retval
 * HAL_ERROR or HAL_OK
 */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 static DMA_HandleTypeDef hdma_tx;
 HAL_StatusTypeDef status;
 /* Configure DMA Tx parameters */
 hdma_tx.Init.Request = DMA_REQUEST_7;
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e7e:	2207      	movs	r2, #7
 8005e80:	605a      	str	r2, [r3, #4]
 hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e82:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e84:	2210      	movs	r2, #16
 8005e86:	609a      	str	r2, [r3, #8]
 hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	60da      	str	r2, [r3, #12]
 hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e8e:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	611a      	str	r2, [r3, #16]
 hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	615a      	str	r2, [r3, #20]
 hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea2:	619a      	str	r2, [r3, #24]
 hdma_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005ea6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005eaa:	621a      	str	r2, [r3, #32]
 hdma_tx.Instance = SD_DMAx_STREAM;
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005eae:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <SD_DMAConfigTx+0x80>)
 8005eb0:	601a      	str	r2, [r3, #0]
 /* Associate the DMA handle */
 __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005eb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005eb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6293      	str	r3, [r2, #40]	; 0x28
 /* Stop any ongoing transfer and reset the state*/
 HAL_DMA_Abort(&hdma_tx);
 8005ebe:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005ec0:	f7fb f8ee 	bl	80010a0 <HAL_DMA_Abort>
 /* Deinitialize the Channel for new transfer */
 HAL_DMA_DeInit(&hdma_tx);
 8005ec4:	480a      	ldr	r0, [pc, #40]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005ec6:	f7fa fff9 	bl	8000ebc <HAL_DMA_DeInit>
 /* Configure the DMA Channel */
 status = HAL_DMA_Init(&hdma_tx);
 8005eca:	4809      	ldr	r0, [pc, #36]	; (8005ef0 <SD_DMAConfigTx+0x7c>)
 8005ecc:	f7fa ff3e 	bl	8000d4c <HAL_DMA_Init>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

 /* NVIC configuration for DMA transfer complete interrupt */
 HAL_NVIC_SetPriority(SD_DMAx_IRQn, 6, 0);
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2106      	movs	r1, #6
 8005ed8:	203b      	movs	r0, #59	; 0x3b
 8005eda:	f7fa ff0d 	bl	8000cf8 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(SD_DMAx_IRQn);
 8005ede:	203b      	movs	r0, #59	; 0x3b
 8005ee0:	f7fa ff26 	bl	8000d30 <HAL_NVIC_EnableIRQ>
 return (status);
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000074 	.word	0x20000074
 8005ef4:	40020444 	.word	0x40020444

08005ef8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005efe:	2301      	movs	r3, #1
 8005f00:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005f02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f0a:	f7fb fbd1 	bl	80016b0 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005f14:	2300      	movs	r3, #0
 8005f16:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005f18:	79fb      	ldrb	r3, [r7, #7]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8005f2a:	f003 fd6f 	bl	8009a0c <osKernelGetTickCount>
 8005f2e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8005f30:	e006      	b.n	8005f40 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f32:	f7ff ff05 	bl	8005d40 <BSP_SD_GetCardState>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e009      	b.n	8005f54 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8005f40:	f003 fd64 	bl	8009a0c <osKernelGetTickCount>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d8f0      	bhi.n	8005f32 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <SD_CheckStatus+0x38>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f6c:	f7ff fee8 	bl	8005d40 <BSP_SD_GetCardState>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d107      	bne.n	8005f86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <SD_CheckStatus+0x38>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <SD_CheckStatus+0x38>)
 8005f84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f86:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <SD_CheckStatus+0x38>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000009 	.word	0x20000009

08005f98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <SD_initialize+0x7c>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8005fa8:	f003 fce8 	bl	800997c <osKernelGetState>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d129      	bne.n	8006006 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005fb2:	f7ff fe69 	bl	8005c88 <BSP_SD_Init>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d107      	bne.n	8005fcc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ffcc 	bl	8005f5c <SD_CheckStatus>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b12      	ldr	r3, [pc, #72]	; (8006014 <SD_initialize+0x7c>)
 8005fca:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <SD_initialize+0x7c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d017      	beq.n	8006006 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <SD_initialize+0x80>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d107      	bne.n	8005fee <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	200a      	movs	r0, #10
 8005fe4:	f003 ff18 	bl	8009e18 <osMessageQueueNew>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <SD_initialize+0x80>)
 8005fec:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <SD_initialize+0x80>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <SD_initialize+0x7c>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	b2da      	uxtb	r2, r3
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <SD_initialize+0x7c>)
 8006004:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006006:	4b03      	ldr	r3, [pc, #12]	; (8006014 <SD_initialize+0x7c>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000009 	.word	0x20000009
 8006018:	200000bc 	.word	0x200000bc

0800601c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff97 	bl	8005f5c <SD_CheckStatus>
 800602e:	4603      	mov	r3, r0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800604c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006050:	f7ff ff67 	bl	8005f22 <SD_CheckStatusWithTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	da01      	bge.n	800605e <SD_read+0x26>
  {
    return res;
 800605a:	7ffb      	ldrb	r3, [r7, #31]
 800605c:	e02f      	b.n	80060be <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68b8      	ldr	r0, [r7, #8]
 8006064:	f7ff fe28 	bl	8005cb8 <BSP_SD_ReadBlocks_DMA>
 8006068:	4603      	mov	r3, r0
 800606a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800606c:	7fbb      	ldrb	r3, [r7, #30]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d124      	bne.n	80060bc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <SD_read+0x90>)
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	f107 0112 	add.w	r1, r7, #18
 800607a:	f247 5330 	movw	r3, #30000	; 0x7530
 800607e:	2200      	movs	r2, #0
 8006080:	f003 ff9e 	bl	8009fc0 <osMessageQueueGet>
 8006084:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d117      	bne.n	80060bc <SD_read+0x84>
 800608c:	8a7b      	ldrh	r3, [r7, #18]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d114      	bne.n	80060bc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006092:	f003 fcbb 	bl	8009a0c <osKernelGetTickCount>
 8006096:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006098:	e007      	b.n	80060aa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800609a:	f7ff fe51 	bl	8005d40 <BSP_SD_GetCardState>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <SD_read+0x72>
              {
                res = RES_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80060a8:	e008      	b.n	80060bc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80060aa:	f003 fcaf 	bl	8009a0c <osKernelGetTickCount>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d9ee      	bls.n	800609a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80060bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200000bc 	.word	0x200000bc

080060cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80060e4:	f7ff ff1d 	bl	8005f22 <SD_CheckStatusWithTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da01      	bge.n	80060f2 <SD_write+0x26>
  {
    return res;
 80060ee:	7ffb      	ldrb	r3, [r7, #31]
 80060f0:	e02d      	b.n	800614e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	f7ff fe00 	bl	8005cfc <BSP_SD_WriteBlocks_DMA>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d124      	bne.n	800614c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <SD_write+0x8c>)
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f107 0112 	add.w	r1, r7, #18
 800610a:	f247 5330 	movw	r3, #30000	; 0x7530
 800610e:	2200      	movs	r2, #0
 8006110:	f003 ff56 	bl	8009fc0 <osMessageQueueGet>
 8006114:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d117      	bne.n	800614c <SD_write+0x80>
 800611c:	8a7b      	ldrh	r3, [r7, #18]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d114      	bne.n	800614c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006122:	f003 fc73 	bl	8009a0c <osKernelGetTickCount>
 8006126:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006128:	e007      	b.n	800613a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800612a:	f7ff fe09 	bl	8005d40 <BSP_SD_GetCardState>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <SD_write+0x6e>
          {
            res = RES_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	77fb      	strb	r3, [r7, #31]
            break;
 8006138:	e008      	b.n	800614c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800613a:	f003 fc67 	bl	8009a0c <osKernelGetTickCount>
 800613e:	4602      	mov	r2, r0
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f247 522f 	movw	r2, #29999	; 0x752f
 8006148:	4293      	cmp	r3, r2
 800614a:	d9ee      	bls.n	800612a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800614c:	7ffb      	ldrb	r3, [r7, #31]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	200000bc 	.word	0x200000bc

0800615c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08c      	sub	sp, #48	; 0x30
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	603a      	str	r2, [r7, #0]
 8006166:	71fb      	strb	r3, [r7, #7]
 8006168:	460b      	mov	r3, r1
 800616a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006172:	4b25      	ldr	r3, [pc, #148]	; (8006208 <SD_ioctl+0xac>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <SD_ioctl+0x28>
 8006180:	2303      	movs	r3, #3
 8006182:	e03c      	b.n	80061fe <SD_ioctl+0xa2>

  switch (cmd)
 8006184:	79bb      	ldrb	r3, [r7, #6]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d834      	bhi.n	80061f4 <SD_ioctl+0x98>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <SD_ioctl+0x34>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061a9 	.word	0x080061a9
 8006198:	080061c1 	.word	0x080061c1
 800619c:	080061db 	.word	0x080061db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061a6:	e028      	b.n	80061fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fdd7 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80061b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061be:	e01c      	b.n	80061fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fdcb 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061d8:	e00f      	b.n	80061fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fdbe 	bl	8005d60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	0a5a      	lsrs	r2, r3, #9
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061f2:	e002      	b.n	80061fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061f4:	2304      	movs	r3, #4
 80061f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80061fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3730      	adds	r7, #48	; 0x30
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000009 	.word	0x20000009

0800620c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8006212:	2302      	movs	r3, #2
 8006214:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <BSP_SD_WriteCpltCallback+0x20>)
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	1db9      	adds	r1, r7, #6
 800621c:	2300      	movs	r3, #0
 800621e:	2200      	movs	r2, #0
 8006220:	f003 fe6e 	bl	8009f00 <osMessageQueuePut>
#endif
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	200000bc 	.word	0x200000bc

08006230 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006236:	2301      	movs	r3, #1
 8006238:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <BSP_SD_ReadCpltCallback+0x20>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	1db9      	adds	r1, r7, #6
 8006240:	2300      	movs	r3, #0
 8006242:	2200      	movs	r2, #0
 8006244:	f003 fe5c 	bl	8009f00 <osMessageQueuePut>
#endif
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200000bc 	.word	0x200000bc

08006254 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <disk_status+0x30>)
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	79fa      	ldrb	r2, [r7, #7]
 800626c:	4905      	ldr	r1, [pc, #20]	; (8006284 <disk_status+0x30>)
 800626e:	440a      	add	r2, r1
 8006270:	7a12      	ldrb	r2, [r2, #8]
 8006272:	4610      	mov	r0, r2
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
  return stat;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200000e8 	.word	0x200000e8

08006288 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <disk_initialize+0x48>)
 800629a:	5cd3      	ldrb	r3, [r2, r3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <disk_initialize+0x48>)
 80062a4:	2101      	movs	r1, #1
 80062a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <disk_initialize+0x48>)
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	79fa      	ldrb	r2, [r7, #7]
 80062b6:	4906      	ldr	r1, [pc, #24]	; (80062d0 <disk_initialize+0x48>)
 80062b8:	440a      	add	r2, r1
 80062ba:	7a12      	ldrb	r2, [r2, #8]
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200000e8 	.word	0x200000e8

080062d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <disk_read+0x3c>)
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	689c      	ldr	r4, [r3, #8]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <disk_read+0x3c>)
 80062f4:	4413      	add	r3, r2
 80062f6:	7a18      	ldrb	r0, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	47a0      	blx	r4
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
  return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
 800630e:	bf00      	nop
 8006310:	200000e8 	.word	0x200000e8

08006314 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <disk_write+0x3c>)
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68dc      	ldr	r4, [r3, #12]
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4a07      	ldr	r2, [pc, #28]	; (8006350 <disk_write+0x3c>)
 8006334:	4413      	add	r3, r2
 8006336:	7a18      	ldrb	r0, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	47a0      	blx	r4
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
  return res;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	bf00      	nop
 8006350:	200000e8 	.word	0x200000e8

08006354 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	603a      	str	r2, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
 8006360:	460b      	mov	r3, r1
 8006362:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <disk_ioctl+0x38>)
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	79fa      	ldrb	r2, [r7, #7]
 8006372:	4906      	ldr	r1, [pc, #24]	; (800638c <disk_ioctl+0x38>)
 8006374:	440a      	add	r2, r1
 8006376:	7a10      	ldrb	r0, [r2, #8]
 8006378:	79b9      	ldrb	r1, [r7, #6]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
  return res;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200000e8 	.word	0x200000e8

08006390 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b21b      	sxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063b2:	89fb      	ldrh	r3, [r7, #14]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3303      	adds	r3, #3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	3202      	adds	r2, #2
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	3201      	adds	r2, #1
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80063f8:	68fb      	ldr	r3, [r7, #12]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	1c53      	adds	r3, r2, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	6179      	str	r1, [r7, #20]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f1      	bne.n	80064ae <mem_cpy+0x1a>
	}
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	617a      	str	r2, [r7, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f3      	bne.n	80064e6 <mem_set+0x10>
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	61ba      	str	r2, [r7, #24]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	1acb      	subs	r3, r1, r3
 8006538:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3b01      	subs	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <mem_cmp+0x40>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0eb      	beq.n	8006524 <mem_cmp+0x18>

	return r;
 800654c:	697b      	ldr	r3, [r7, #20]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006564:	e002      	b.n	800656c <chk_chr+0x12>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3301      	adds	r3, #1
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <chk_chr+0x26>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	4293      	cmp	r3, r2
 800657e:	d1f2      	bne.n	8006566 <chk_chr+0xc>
	return *str;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	781b      	ldrb	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <lock_fs+0x22>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f003 f94b 	bl	800983e <ff_req_grant>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <lock_fs+0x22>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <lock_fs+0x24>
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00d      	beq.n	80065ea <unlock_fs+0x2e>
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	d00a      	beq.n	80065ea <unlock_fs+0x2e>
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	2b0b      	cmp	r3, #11
 80065d8:	d007      	beq.n	80065ea <unlock_fs+0x2e>
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	2b0f      	cmp	r3, #15
 80065de:	d004      	beq.n	80065ea <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f003 f93f 	bl	8009868 <ff_rel_grant>
	}
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e029      	b.n	800665c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006608:	4a27      	ldr	r2, [pc, #156]	; (80066a8 <chk_lock+0xb4>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	4413      	add	r3, r2
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01d      	beq.n	8006652 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006616:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <chk_lock+0xb4>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	4413      	add	r3, r2
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d116      	bne.n	8006656 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006628:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <chk_lock+0xb4>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	3304      	adds	r3, #4
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006638:	429a      	cmp	r2, r3
 800663a:	d10c      	bne.n	8006656 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800663c:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <chk_lock+0xb4>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	4413      	add	r3, r2
 8006644:	3308      	adds	r3, #8
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800664c:	429a      	cmp	r2, r3
 800664e:	d102      	bne.n	8006656 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006650:	e007      	b.n	8006662 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006652:	2301      	movs	r3, #1
 8006654:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d9d2      	bls.n	8006608 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d109      	bne.n	800667c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <chk_lock+0x80>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d101      	bne.n	8006678 <chk_lock+0x84>
 8006674:	2300      	movs	r3, #0
 8006676:	e010      	b.n	800669a <chk_lock+0xa6>
 8006678:	2312      	movs	r3, #18
 800667a:	e00e      	b.n	800669a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <chk_lock+0xa0>
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <chk_lock+0xb4>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	4413      	add	r3, r2
 800668a:	330c      	adds	r3, #12
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006692:	d101      	bne.n	8006698 <chk_lock+0xa4>
 8006694:	2310      	movs	r3, #16
 8006696:	e000      	b.n	800669a <chk_lock+0xa6>
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	200000c8 	.word	0x200000c8

080066ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	e002      	b.n	80066be <enq_lock+0x12>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3301      	adds	r3, #1
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d806      	bhi.n	80066d2 <enq_lock+0x26>
 80066c4:	4a09      	ldr	r2, [pc, #36]	; (80066ec <enq_lock+0x40>)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	4413      	add	r3, r2
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f2      	bne.n	80066b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	200000c8 	.word	0x200000c8

080066f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e01f      	b.n	8006740 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006700:	4a41      	ldr	r2, [pc, #260]	; (8006808 <inc_lock+0x118>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	4413      	add	r3, r2
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d113      	bne.n	800673a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006712:	4a3d      	ldr	r2, [pc, #244]	; (8006808 <inc_lock+0x118>)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	4413      	add	r3, r2
 800671a:	3304      	adds	r3, #4
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006722:	429a      	cmp	r2, r3
 8006724:	d109      	bne.n	800673a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006726:	4a38      	ldr	r2, [pc, #224]	; (8006808 <inc_lock+0x118>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	4413      	add	r3, r2
 800672e:	3308      	adds	r3, #8
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006736:	429a      	cmp	r2, r3
 8006738:	d006      	beq.n	8006748 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d9dc      	bls.n	8006700 <inc_lock+0x10>
 8006746:	e000      	b.n	800674a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006748:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d132      	bne.n	80067b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e002      	b.n	800675c <inc_lock+0x6c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d806      	bhi.n	8006770 <inc_lock+0x80>
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <inc_lock+0x118>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	4413      	add	r3, r2
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f2      	bne.n	8006756 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d101      	bne.n	800677a <inc_lock+0x8a>
 8006776:	2300      	movs	r3, #0
 8006778:	e040      	b.n	80067fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4922      	ldr	r1, [pc, #136]	; (8006808 <inc_lock+0x118>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	440b      	add	r3, r1
 8006786:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	491e      	ldr	r1, [pc, #120]	; (8006808 <inc_lock+0x118>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	440b      	add	r3, r1
 8006794:	3304      	adds	r3, #4
 8006796:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	491a      	ldr	r1, [pc, #104]	; (8006808 <inc_lock+0x118>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	440b      	add	r3, r1
 80067a4:	3308      	adds	r3, #8
 80067a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067a8:	4a17      	ldr	r2, [pc, #92]	; (8006808 <inc_lock+0x118>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	4413      	add	r3, r2
 80067b0:	330c      	adds	r3, #12
 80067b2:	2200      	movs	r2, #0
 80067b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <inc_lock+0xe0>
 80067bc:	4a12      	ldr	r2, [pc, #72]	; (8006808 <inc_lock+0x118>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	330c      	adds	r3, #12
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <inc_lock+0xe0>
 80067cc:	2300      	movs	r3, #0
 80067ce:	e015      	b.n	80067fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d108      	bne.n	80067e8 <inc_lock+0xf8>
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <inc_lock+0x118>)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	4413      	add	r3, r2
 80067de:	330c      	adds	r3, #12
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	e001      	b.n	80067ec <inc_lock+0xfc>
 80067e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ec:	4906      	ldr	r1, [pc, #24]	; (8006808 <inc_lock+0x118>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	440b      	add	r3, r1
 80067f4:	330c      	adds	r3, #12
 80067f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	200000c8 	.word	0x200000c8

0800680c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3b01      	subs	r3, #1
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d825      	bhi.n	800686c <dec_lock+0x60>
		n = Files[i].ctr;
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <dec_lock+0x74>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	4413      	add	r3, r2
 8006828:	330c      	adds	r3, #12
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006834:	d101      	bne.n	800683a <dec_lock+0x2e>
 8006836:	2300      	movs	r3, #0
 8006838:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <dec_lock+0x3a>
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	3b01      	subs	r3, #1
 8006844:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006846:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <dec_lock+0x74>)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	330c      	adds	r3, #12
 8006850:	89fa      	ldrh	r2, [r7, #14]
 8006852:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006854:	89fb      	ldrh	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <dec_lock+0x5a>
 800685a:	4a09      	ldr	r2, [pc, #36]	; (8006880 <dec_lock+0x74>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	737b      	strb	r3, [r7, #13]
 800686a:	e001      	b.n	8006870 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800686c:	2302      	movs	r3, #2
 800686e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006870:	7b7b      	ldrb	r3, [r7, #13]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	200000c8 	.word	0x200000c8

08006884 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e010      	b.n	80068b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006892:	4a0d      	ldr	r2, [pc, #52]	; (80068c8 <clear_lock+0x44>)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	4413      	add	r3, r2
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d105      	bne.n	80068ae <clear_lock+0x2a>
 80068a2:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <clear_lock+0x44>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d9eb      	bls.n	8006892 <clear_lock+0xe>
	}
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	200000c8 	.word	0x200000c8

080068cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	78db      	ldrb	r3, [r3, #3]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d034      	beq.n	800694a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	7858      	ldrb	r0, [r3, #1]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80068f0:	2301      	movs	r3, #1
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	f7ff fd0e 	bl	8006314 <disk_write>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <sync_window+0x38>
			res = FR_DISK_ERR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
 8006902:	e022      	b.n	800694a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	429a      	cmp	r2, r3
 8006918:	d217      	bcs.n	800694a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	789b      	ldrb	r3, [r3, #2]
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	e010      	b.n	8006944 <sync_window+0x78>
					wsect += fs->fsize;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4413      	add	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7858      	ldrb	r0, [r3, #1]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006936:	2301      	movs	r3, #1
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	f7ff fceb 	bl	8006314 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3b01      	subs	r3, #1
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d8eb      	bhi.n	8006922 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d01b      	beq.n	80069a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ffad 	bl	80068cc <sync_window>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d113      	bne.n	80069a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7858      	ldrb	r0, [r3, #1]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006986:	2301      	movs	r3, #1
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	f7ff fca3 	bl	80062d4 <disk_read>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006998:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800699a:	2301      	movs	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff87 	bl	80068cc <sync_window>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d159      	bne.n	8006a7c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d149      	bne.n	8006a64 <sync_fs+0xb4>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d145      	bne.n	8006a64 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	899b      	ldrh	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	2100      	movs	r1, #0
 80069e6:	f7ff fd76 	bl	80064d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	333c      	adds	r3, #60	; 0x3c
 80069ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fd05 	bl	8006406 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	333c      	adds	r3, #60	; 0x3c
 8006a00:	4921      	ldr	r1, [pc, #132]	; (8006a88 <sync_fs+0xd8>)
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fd1a 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	333c      	adds	r3, #60	; 0x3c
 8006a0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a10:	491e      	ldr	r1, [pc, #120]	; (8006a8c <sync_fs+0xdc>)
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7ff fd12 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	333c      	adds	r3, #60	; 0x3c
 8006a1c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7ff fd08 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	333c      	adds	r3, #60	; 0x3c
 8006a30:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7ff fcfe 	bl	800643c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7858      	ldrb	r0, [r3, #1]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f7ff fc5b 	bl	8006314 <disk_write>
			fs->fsi_flag = 0;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fc71 	bl	8006354 <disk_ioctl>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <sync_fs+0xcc>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	41615252 	.word	0x41615252
 8006a8c:	61417272 	.word	0x61417272

08006a90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3b02      	subs	r3, #2
 8006a9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	3b02      	subs	r3, #2
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d301      	bcc.n	8006ab0 <clust2sect+0x20>
 8006aac:	2300      	movs	r3, #0
 8006aae:	e008      	b.n	8006ac2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	895b      	ldrh	r3, [r3, #10]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	fb03 f202 	mul.w	r2, r3, r2
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	4413      	add	r3, r2
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d904      	bls.n	8006aee <get_fat+0x20>
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	e0bb      	b.n	8006c6c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	f000 8083 	beq.w	8006c0a <get_fat+0x13c>
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	f300 80a7 	bgt.w	8006c58 <get_fat+0x18a>
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d002      	beq.n	8006b14 <get_fat+0x46>
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d056      	beq.n	8006bc0 <get_fat+0xf2>
 8006b12:	e0a1      	b.n	8006c58 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b32:	4413      	add	r3, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	6938      	ldr	r0, [r7, #16]
 8006b38:	f7ff ff0c 	bl	8006954 <move_window>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f040 808d 	bne.w	8006c5e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	60fa      	str	r2, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	8992      	ldrh	r2, [r2, #12]
 8006b4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b52:	fb02 f201 	mul.w	r2, r2, r1
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	899b      	ldrh	r3, [r3, #12]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b72:	4413      	add	r3, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff feec 	bl	8006954 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d16f      	bne.n	8006c62 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	899b      	ldrh	r3, [r3, #12]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b8e:	fb02 f201 	mul.w	r2, r2, r1
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <get_fat+0xe8>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	e002      	b.n	8006bbc <get_fat+0xee>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bbc:	617b      	str	r3, [r7, #20]
			break;
 8006bbe:	e055      	b.n	8006c6c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	899b      	ldrh	r3, [r3, #12]
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	4619      	mov	r1, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6938      	ldr	r0, [r7, #16]
 8006bda:	f7ff febb 	bl	8006954 <move_window>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d140      	bne.n	8006c66 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	8992      	ldrh	r2, [r2, #12]
 8006bf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bf6:	fb02 f200 	mul.w	r2, r2, r0
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fbc6 	bl	8006390 <ld_word>
 8006c04:	4603      	mov	r3, r0
 8006c06:	617b      	str	r3, [r7, #20]
			break;
 8006c08:	e030      	b.n	8006c6c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	899b      	ldrh	r3, [r3, #12]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4619      	mov	r1, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c1e:	4413      	add	r3, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f7ff fe96 	bl	8006954 <move_window>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11d      	bne.n	8006c6a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	8992      	ldrh	r2, [r2, #12]
 8006c3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c40:	fb02 f200 	mul.w	r2, r2, r0
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	440b      	add	r3, r1
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fbb9 	bl	80063c0 <ld_dword>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c54:	617b      	str	r3, [r7, #20]
			break;
 8006c56:	e009      	b.n	8006c6c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e006      	b.n	8006c6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c5e:	bf00      	nop
 8006c60:	e004      	b.n	8006c6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c6a:	bf00      	nop
		}
	}

	return val;
 8006c6c:	697b      	ldr	r3, [r7, #20]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c76:	b590      	push	{r4, r7, lr}
 8006c78:	b089      	sub	sp, #36	; 0x24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c82:	2302      	movs	r3, #2
 8006c84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f240 8102 	bls.w	8006e92 <put_fat+0x21c>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	f080 80fc 	bcs.w	8006e92 <put_fat+0x21c>
		switch (fs->fs_type) {
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	f000 80b6 	beq.w	8006e10 <put_fat+0x19a>
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	f300 80fd 	bgt.w	8006ea4 <put_fat+0x22e>
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d003      	beq.n	8006cb6 <put_fat+0x40>
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	f000 8083 	beq.w	8006dba <put_fat+0x144>
 8006cb4:	e0f6      	b.n	8006ea4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	899b      	ldrh	r3, [r3, #12]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff fe3b 	bl	8006954 <move_window>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f040 80d6 	bne.w	8006e96 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	61ba      	str	r2, [r7, #24]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	8992      	ldrh	r2, [r2, #12]
 8006cfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cfe:	fb02 f200 	mul.w	r2, r2, r0
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	440b      	add	r3, r1
 8006d06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <put_fat+0xb8>
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b25b      	sxtb	r3, r3
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	b25a      	sxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b25b      	sxtb	r3, r3
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	e001      	b.n	8006d32 <put_fat+0xbc>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	899b      	ldrh	r3, [r3, #12]
 8006d44:	4619      	mov	r1, r3
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff fdff 	bl	8006954 <move_window>
 8006d56:	4603      	mov	r3, r0
 8006d58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d5a:	7ffb      	ldrb	r3, [r7, #31]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 809c 	bne.w	8006e9a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	899b      	ldrh	r3, [r3, #12]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d74:	fb02 f200 	mul.w	r2, r2, r0
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <put_fat+0x11a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	e00e      	b.n	8006dae <put_fat+0x138>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	b25b      	sxtb	r3, r3
 8006d96:	f023 030f 	bic.w	r3, r3, #15
 8006d9a:	b25a      	sxtb	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	b25b      	sxtb	r3, r3
 8006da8:	4313      	orrs	r3, r2
 8006daa:	b25b      	sxtb	r3, r3
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	70da      	strb	r2, [r3, #3]
			break;
 8006db8:	e074      	b.n	8006ea4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	899b      	ldrh	r3, [r3, #12]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dce:	4413      	add	r3, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fdbe 	bl	8006954 <move_window>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ddc:	7ffb      	ldrb	r3, [r7, #31]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d15d      	bne.n	8006e9e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	8992      	ldrh	r2, [r2, #12]
 8006df0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006df4:	fb02 f200 	mul.w	r2, r2, r0
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	b292      	uxth	r2, r2
 8006e00:	4611      	mov	r1, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff faff 	bl	8006406 <st_word>
			fs->wflag = 1;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	70da      	strb	r2, [r3, #3]
			break;
 8006e0e:	e049      	b.n	8006ea4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	899b      	ldrh	r3, [r3, #12]
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e24:	4413      	add	r3, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fd93 	bl	8006954 <move_window>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e32:	7ffb      	ldrb	r3, [r7, #31]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d134      	bne.n	8006ea2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	8992      	ldrh	r2, [r2, #12]
 8006e4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e50:	fb02 f200 	mul.w	r2, r2, r0
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	440b      	add	r3, r1
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fab1 	bl	80063c0 <ld_dword>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e64:	4323      	orrs	r3, r4
 8006e66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	8992      	ldrh	r2, [r2, #12]
 8006e76:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e7a:	fb02 f200 	mul.w	r2, r2, r0
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	440b      	add	r3, r1
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fad9 	bl	800643c <st_dword>
			fs->wflag = 1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	70da      	strb	r2, [r3, #3]
			break;
 8006e90:	e008      	b.n	8006ea4 <put_fat+0x22e>
		}
	}
 8006e92:	bf00      	nop
 8006e94:	e006      	b.n	8006ea4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006ea2:	bf00      	nop
	return res;
 8006ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3724      	adds	r7, #36	; 0x24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd90      	pop	{r4, r7, pc}

08006eae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d904      	bls.n	8006ed4 <remove_chain+0x26>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d301      	bcc.n	8006ed8 <remove_chain+0x2a>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e04b      	b.n	8006f70 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	69b8      	ldr	r0, [r7, #24]
 8006ee6:	f7ff fec6 	bl	8006c76 <put_fat>
 8006eea:	4603      	mov	r3, r0
 8006eec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006eee:	7ffb      	ldrb	r3, [r7, #31]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <remove_chain+0x4a>
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
 8006ef6:	e03b      	b.n	8006f70 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff fde7 	bl	8006ace <get_fat>
 8006f00:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d031      	beq.n	8006f6c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <remove_chain+0x64>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e02e      	b.n	8006f70 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f18:	d101      	bne.n	8006f1e <remove_chain+0x70>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e028      	b.n	8006f70 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f1e:	2200      	movs	r2, #0
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	69b8      	ldr	r0, [r7, #24]
 8006f24:	f7ff fea7 	bl	8006c76 <put_fat>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f2c:	7ffb      	ldrb	r3, [r7, #31]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <remove_chain+0x88>
 8006f32:	7ffb      	ldrb	r3, [r7, #31]
 8006f34:	e01c      	b.n	8006f70 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	3b02      	subs	r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d20b      	bcs.n	8006f5c <remove_chain+0xae>
			fs->free_clst++;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3c6      	bcc.n	8006ef8 <remove_chain+0x4a>
 8006f6a:	e000      	b.n	8006f6e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f6c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10d      	bne.n	8006faa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <create_chain+0x2c>
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d31b      	bcc.n	8006fdc <create_chain+0x64>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	e018      	b.n	8006fdc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fd8e 	bl	8006ace <get_fat>
 8006fb2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d801      	bhi.n	8006fbe <create_chain+0x46>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e070      	b.n	80070a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc4:	d101      	bne.n	8006fca <create_chain+0x52>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	e06a      	b.n	80070a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d201      	bcs.n	8006fd8 <create_chain+0x60>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	e063      	b.n	80070a0 <create_chain+0x128>
		scl = clst;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d307      	bcc.n	8007000 <create_chain+0x88>
				ncl = 2;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d901      	bls.n	8007000 <create_chain+0x88>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e04f      	b.n	80070a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007000:	69f9      	ldr	r1, [r7, #28]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff fd63 	bl	8006ace <get_fat>
 8007008:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00e      	beq.n	800702e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d003      	beq.n	800701e <create_chain+0xa6>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701c:	d101      	bne.n	8007022 <create_chain+0xaa>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	e03e      	b.n	80070a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	429a      	cmp	r2, r3
 8007028:	d1da      	bne.n	8006fe0 <create_chain+0x68>
 800702a:	2300      	movs	r3, #0
 800702c:	e038      	b.n	80070a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800702e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007034:	69f9      	ldr	r1, [r7, #28]
 8007036:	6938      	ldr	r0, [r7, #16]
 8007038:	f7ff fe1d 	bl	8006c76 <put_fat>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <create_chain+0xe2>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6938      	ldr	r0, [r7, #16]
 8007052:	f7ff fe10 	bl	8006c76 <put_fat>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d116      	bne.n	800708e <create_chain+0x116>
		fs->last_clst = ncl;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	69da      	ldr	r2, [r3, #28]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	3b02      	subs	r3, #2
 8007070:	429a      	cmp	r2, r3
 8007072:	d804      	bhi.n	800707e <create_chain+0x106>
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	1e5a      	subs	r2, r3, #1
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	711a      	strb	r2, [r3, #4]
 800708c:	e007      	b.n	800709e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <create_chain+0x122>
 8007094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007098:	e000      	b.n	800709c <create_chain+0x124>
 800709a:	2301      	movs	r3, #1
 800709c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800709e:	69fb      	ldr	r3, [r7, #28]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	3304      	adds	r3, #4
 80070be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	899b      	ldrh	r3, [r3, #12]
 80070c4:	461a      	mov	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	8952      	ldrh	r2, [r2, #10]
 80070d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	613a      	str	r2, [r7, #16]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <clmt_clust+0x42>
 80070e6:	2300      	movs	r3, #0
 80070e8:	e010      	b.n	800710c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d307      	bcc.n	8007102 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3304      	adds	r3, #4
 80070fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007100:	e7e9      	b.n	80070d6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007102:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4413      	add	r3, r2
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800712e:	d204      	bcs.n	800713a <dir_sdi+0x22>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <dir_sdi+0x26>
		return FR_INT_ERR;
 800713a:	2302      	movs	r3, #2
 800713c:	e071      	b.n	8007222 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <dir_sdi+0x46>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d902      	bls.n	800715e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10c      	bne.n	800717e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	8912      	ldrh	r2, [r2, #8]
 800716c:	4293      	cmp	r3, r2
 800716e:	d301      	bcc.n	8007174 <dir_sdi+0x5c>
 8007170:	2302      	movs	r3, #2
 8007172:	e056      	b.n	8007222 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	61da      	str	r2, [r3, #28]
 800717c:	e02d      	b.n	80071da <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	895b      	ldrh	r3, [r3, #10]
 8007182:	461a      	mov	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	899b      	ldrh	r3, [r3, #12]
 8007188:	fb03 f302 	mul.w	r3, r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800718e:	e019      	b.n	80071c4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fc9a 	bl	8006ace <get_fat>
 800719a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a2:	d101      	bne.n	80071a8 <dir_sdi+0x90>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e03c      	b.n	8007222 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d904      	bls.n	80071b8 <dir_sdi+0xa0>
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d301      	bcc.n	80071bc <dir_sdi+0xa4>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e032      	b.n	8007222 <dir_sdi+0x10a>
			ofs -= csz;
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d2e1      	bcs.n	8007190 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f7ff fc5e 	bl	8006a90 <clust2sect>
 80071d4:	4602      	mov	r2, r0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <dir_sdi+0xd4>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e01a      	b.n	8007222 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	899b      	ldrh	r3, [r3, #12]
 80071f4:	4619      	mov	r1, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80071fc:	441a      	add	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	899b      	ldrh	r3, [r3, #12]
 800720c:	461a      	mov	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	fbb3 f0f2 	udiv	r0, r3, r2
 8007214:	fb02 f200 	mul.w	r2, r2, r0
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	18ca      	adds	r2, r1, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	3320      	adds	r3, #32
 8007240:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <dir_next+0x28>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007250:	d301      	bcc.n	8007256 <dir_next+0x2c>
 8007252:	2304      	movs	r3, #4
 8007254:	e0bb      	b.n	80073ce <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	899b      	ldrh	r3, [r3, #12]
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007262:	fb02 f201 	mul.w	r2, r2, r1
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	f040 809d 	bne.w	80073a8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	8912      	ldrh	r2, [r2, #8]
 8007288:	4293      	cmp	r3, r2
 800728a:	f0c0 808d 	bcc.w	80073a8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	61da      	str	r2, [r3, #28]
 8007294:	2304      	movs	r3, #4
 8007296:	e09a      	b.n	80073ce <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	899b      	ldrh	r3, [r3, #12]
 800729c:	461a      	mov	r2, r3
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	8952      	ldrh	r2, [r2, #10]
 80072a8:	3a01      	subs	r2, #1
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d17b      	bne.n	80073a8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f7ff fc08 	bl	8006ace <get_fat>
 80072be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d801      	bhi.n	80072ca <dir_next+0xa0>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e081      	b.n	80073ce <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d0:	d101      	bne.n	80072d6 <dir_next+0xac>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e07b      	b.n	80073ce <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d359      	bcc.n	8007394 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	61da      	str	r2, [r3, #28]
 80072ec:	2304      	movs	r3, #4
 80072ee:	e06e      	b.n	80073ce <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7ff fe3d 	bl	8006f78 <create_chain>
 80072fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <dir_next+0xe0>
 8007306:	2307      	movs	r3, #7
 8007308:	e061      	b.n	80073ce <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <dir_next+0xea>
 8007310:	2302      	movs	r3, #2
 8007312:	e05c      	b.n	80073ce <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731a:	d101      	bne.n	8007320 <dir_next+0xf6>
 800731c:	2301      	movs	r3, #1
 800731e:	e056      	b.n	80073ce <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fad3 	bl	80068cc <sync_window>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <dir_next+0x106>
 800732c:	2301      	movs	r3, #1
 800732e:	e04e      	b.n	80073ce <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	899b      	ldrh	r3, [r3, #12]
 800733a:	461a      	mov	r2, r3
 800733c:	2100      	movs	r1, #0
 800733e:	f7ff f8ca 	bl	80064d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff fba1 	bl	8006a90 <clust2sect>
 800734e:	4602      	mov	r2, r0
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
 8007354:	e012      	b.n	800737c <dir_next+0x152>
						fs->wflag = 1;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff fab5 	bl	80068cc <sync_window>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <dir_next+0x142>
 8007368:	2301      	movs	r3, #1
 800736a:	e030      	b.n	80073ce <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	895b      	ldrh	r3, [r3, #10]
 8007380:	461a      	mov	r2, r3
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4293      	cmp	r3, r2
 8007386:	d3e6      	bcc.n	8007356 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800739a:	6979      	ldr	r1, [r7, #20]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fb77 	bl	8006a90 <clust2sect>
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	899b      	ldrh	r3, [r3, #12]
 80073b8:	461a      	mov	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80073c0:	fb02 f200 	mul.w	r2, r2, r0
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	18ca      	adds	r2, r1, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073e6:	2100      	movs	r1, #0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fe95 	bl	8007118 <dir_sdi>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d12b      	bne.n	8007450 <dir_alloc+0x7a>
		n = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff faa6 	bl	8006954 <move_window>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d11d      	bne.n	800744e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2be5      	cmp	r3, #229	; 0xe5
 800741a:	d004      	beq.n	8007426 <dir_alloc+0x50>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d107      	bne.n	8007436 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d102      	bne.n	800743a <dir_alloc+0x64>
 8007434:	e00c      	b.n	8007450 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800743a:	2101      	movs	r1, #1
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fef4 	bl	800722a <dir_next>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0d7      	beq.n	80073fc <dir_alloc+0x26>
 800744c:	e000      	b.n	8007450 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800744e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b04      	cmp	r3, #4
 8007454:	d101      	bne.n	800745a <dir_alloc+0x84>
 8007456:	2307      	movs	r3, #7
 8007458:	75fb      	strb	r3, [r7, #23]
	return res;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	331a      	adds	r3, #26
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe ff8c 	bl	8006390 <ld_word>
 8007478:	4603      	mov	r3, r0
 800747a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d109      	bne.n	8007498 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	3314      	adds	r3, #20
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe ff81 	bl	8006390 <ld_word>
 800748e:	4603      	mov	r3, r0
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	331a      	adds	r3, #26
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	b292      	uxth	r2, r2
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe ffa4 	bl	8006406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d109      	bne.n	80074da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f103 0214 	add.w	r2, r3, #20
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fe ff96 	bl	8006406 <st_word>
	}
}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074e4:	b590      	push	{r4, r7, lr}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	331a      	adds	r3, #26
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe ff4c 	bl	8006390 <ld_word>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <cmp_lfn+0x1e>
 80074fe:	2300      	movs	r3, #0
 8007500:	e059      	b.n	80075b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007518:	2301      	movs	r3, #1
 800751a:	81fb      	strh	r3, [r7, #14]
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e033      	b.n	800758a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007522:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <cmp_lfn+0xdc>)
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4413      	add	r3, r2
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	4413      	add	r3, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe ff2d 	bl	8006390 <ld_word>
 8007536:	4603      	mov	r3, r0
 8007538:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800753a:	89fb      	ldrh	r3, [r7, #14]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01a      	beq.n	8007576 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2bfe      	cmp	r3, #254	; 0xfe
 8007544:	d812      	bhi.n	800756c <cmp_lfn+0x88>
 8007546:	89bb      	ldrh	r3, [r7, #12]
 8007548:	4618      	mov	r0, r3
 800754a:	f002 f8c7 	bl	80096dc <ff_wtoupper>
 800754e:	4603      	mov	r3, r0
 8007550:	461c      	mov	r4, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	617a      	str	r2, [r7, #20]
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f002 f8bb 	bl	80096dc <ff_wtoupper>
 8007566:	4603      	mov	r3, r0
 8007568:	429c      	cmp	r4, r3
 800756a:	d001      	beq.n	8007570 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800756c:	2300      	movs	r3, #0
 800756e:	e022      	b.n	80075b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007570:	89bb      	ldrh	r3, [r7, #12]
 8007572:	81fb      	strh	r3, [r7, #14]
 8007574:	e006      	b.n	8007584 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800757c:	4293      	cmp	r3, r2
 800757e:	d001      	beq.n	8007584 <cmp_lfn+0xa0>
 8007580:	2300      	movs	r3, #0
 8007582:	e018      	b.n	80075b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	3301      	adds	r3, #1
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b0c      	cmp	r3, #12
 800758e:	d9c8      	bls.n	8007522 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <cmp_lfn+0xd0>
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <cmp_lfn+0xd0>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <cmp_lfn+0xd0>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075b4:	2301      	movs	r3, #1
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}
 80075be:	bf00      	nop
 80075c0:	0800d3f8 	.word	0x0800d3f8

080075c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	460b      	mov	r3, r1
 80075d4:	71fb      	strb	r3, [r7, #7]
 80075d6:	4613      	mov	r3, r2
 80075d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	330d      	adds	r3, #13
 80075de:	79ba      	ldrb	r2, [r7, #6]
 80075e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	330b      	adds	r3, #11
 80075e6:	220f      	movs	r2, #15
 80075e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	330c      	adds	r3, #12
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	331a      	adds	r3, #26
 80075f6:	2100      	movs	r1, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe ff04 	bl	8006406 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	82fb      	strh	r3, [r7, #22]
 8007612:	2300      	movs	r3, #0
 8007614:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007616:	8afb      	ldrh	r3, [r7, #22]
 8007618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800761c:	4293      	cmp	r3, r2
 800761e:	d007      	beq.n	8007630 <put_lfn+0x6c>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	61fa      	str	r2, [r7, #28]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007630:	4a17      	ldr	r2, [pc, #92]	; (8007690 <put_lfn+0xcc>)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4413      	add	r3, r2
 800763e:	8afa      	ldrh	r2, [r7, #22]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fedf 	bl	8006406 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007648:	8afb      	ldrh	r3, [r7, #22]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <put_lfn+0x90>
 800764e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007652:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3301      	adds	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b0c      	cmp	r3, #12
 800765e:	d9da      	bls.n	8007616 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007660:	8afb      	ldrh	r3, [r7, #22]
 8007662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007666:	4293      	cmp	r3, r2
 8007668:	d006      	beq.n	8007678 <put_lfn+0xb4>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <put_lfn+0xbc>
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	79fa      	ldrb	r2, [r7, #7]
 8007684:	701a      	strb	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	3720      	adds	r7, #32
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	0800d3f8 	.word	0x0800d3f8

08007694 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076a2:	220b      	movs	r2, #11
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7fe fef4 	bl	8006494 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d92b      	bls.n	800770a <gen_numname+0x76>
		sr = seq;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076b6:	e022      	b.n	80076fe <gen_numname+0x6a>
			wc = *lfn++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	1c9a      	adds	r2, r3, #2
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076c2:	2300      	movs	r3, #0
 80076c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076c6:	e017      	b.n	80076f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	005a      	lsls	r2, r3, #1
 80076cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <gen_numname+0x5e>
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	3301      	adds	r3, #1
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	d9e4      	bls.n	80076c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1d8      	bne.n	80076b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800770a:	2307      	movs	r3, #7
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	b2db      	uxtb	r3, r3
 8007718:	3330      	adds	r3, #48	; 0x30
 800771a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800771e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007722:	2b39      	cmp	r3, #57	; 0x39
 8007724:	d904      	bls.n	8007730 <gen_numname+0x9c>
 8007726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800772a:	3307      	adds	r3, #7
 800772c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	62ba      	str	r2, [r7, #40]	; 0x28
 8007736:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800773a:	4413      	add	r3, r2
 800773c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007740:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	091b      	lsrs	r3, r3, #4
 8007748:	603b      	str	r3, [r7, #0]
	} while (seq);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1de      	bne.n	800770e <gen_numname+0x7a>
	ns[i] = '~';
 8007750:	f107 0214 	add.w	r2, r7, #20
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	4413      	add	r3, r2
 8007758:	227e      	movs	r2, #126	; 0x7e
 800775a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	e002      	b.n	8007768 <gen_numname+0xd4>
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	429a      	cmp	r2, r3
 800776e:	d205      	bcs.n	800777c <gen_numname+0xe8>
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	4413      	add	r3, r2
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b20      	cmp	r3, #32
 800777a:	d1f2      	bne.n	8007762 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	2b07      	cmp	r3, #7
 8007780:	d808      	bhi.n	8007794 <gen_numname+0x100>
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	62ba      	str	r2, [r7, #40]	; 0x28
 8007788:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800778c:	4413      	add	r3, r2
 800778e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007792:	e000      	b.n	8007796 <gen_numname+0x102>
 8007794:	2120      	movs	r1, #32
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	627a      	str	r2, [r7, #36]	; 0x24
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	460a      	mov	r2, r1
 80077a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b07      	cmp	r3, #7
 80077a8:	d9e8      	bls.n	800777c <gen_numname+0xe8>
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077c0:	230b      	movs	r3, #11
 80077c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	0852      	lsrs	r2, r2, #1
 80077ca:	01db      	lsls	r3, r3, #7
 80077cc:	4313      	orrs	r3, r2
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	6079      	str	r1, [r7, #4]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3b01      	subs	r3, #1
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ed      	bne.n	80077c4 <sum_sfn+0x10>
	return sum;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007804:	2100      	movs	r1, #0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff fc86 	bl	8007118 <dir_sdi>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <dir_find+0x24>
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	e0a9      	b.n	800796e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800781a:	23ff      	movs	r3, #255	; 0xff
 800781c:	753b      	strb	r3, [r7, #20]
 800781e:	7d3b      	ldrb	r3, [r7, #20]
 8007820:	757b      	strb	r3, [r7, #21]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	4619      	mov	r1, r3
 8007830:	6938      	ldr	r0, [r7, #16]
 8007832:	f7ff f88f 	bl	8006954 <move_window>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 8090 	bne.w	8007962 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800784a:	7dbb      	ldrb	r3, [r7, #22]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <dir_find+0x60>
 8007850:	2304      	movs	r3, #4
 8007852:	75fb      	strb	r3, [r7, #23]
 8007854:	e08a      	b.n	800796c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	330b      	adds	r3, #11
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7bfa      	ldrb	r2, [r7, #15]
 8007868:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800786a:	7dbb      	ldrb	r3, [r7, #22]
 800786c:	2be5      	cmp	r3, #229	; 0xe5
 800786e:	d007      	beq.n	8007880 <dir_find+0x8a>
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <dir_find+0x98>
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b0f      	cmp	r3, #15
 800787e:	d006      	beq.n	800788e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007880:	23ff      	movs	r3, #255	; 0xff
 8007882:	757b      	strb	r3, [r7, #21]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800788a:	631a      	str	r2, [r3, #48]	; 0x30
 800788c:	e05e      	b.n	800794c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	2b0f      	cmp	r3, #15
 8007892:	d136      	bne.n	8007902 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d154      	bne.n	800794c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078a2:	7dbb      	ldrb	r3, [r7, #22]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00d      	beq.n	80078c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	7b5b      	ldrb	r3, [r3, #13]
 80078b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078b4:	7dbb      	ldrb	r3, [r7, #22]
 80078b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ba:	75bb      	strb	r3, [r7, #22]
 80078bc:	7dbb      	ldrb	r3, [r7, #22]
 80078be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078c8:	7dba      	ldrb	r2, [r7, #22]
 80078ca:	7d7b      	ldrb	r3, [r7, #21]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d115      	bne.n	80078fc <dir_find+0x106>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	330d      	adds	r3, #13
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	7d3a      	ldrb	r2, [r7, #20]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d10e      	bne.n	80078fc <dir_find+0x106>
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7ff fdfb 	bl	80074e4 <cmp_lfn>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <dir_find+0x106>
 80078f4:	7d7b      	ldrb	r3, [r7, #21]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	e000      	b.n	80078fe <dir_find+0x108>
 80078fc:	23ff      	movs	r3, #255	; 0xff
 80078fe:	757b      	strb	r3, [r7, #21]
 8007900:	e024      	b.n	800794c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007902:	7d7b      	ldrb	r3, [r7, #21]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <dir_find+0x126>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff ff51 	bl	80077b4 <sum_sfn>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	7d3b      	ldrb	r3, [r7, #20]
 8007918:	4293      	cmp	r3, r2
 800791a:	d024      	beq.n	8007966 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <dir_find+0x14a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a18      	ldr	r0, [r3, #32]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3324      	adds	r3, #36	; 0x24
 8007932:	220b      	movs	r2, #11
 8007934:	4619      	mov	r1, r3
 8007936:	f7fe fde9 	bl	800650c <mem_cmp>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d014      	beq.n	800796a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007940:	23ff      	movs	r3, #255	; 0xff
 8007942:	757b      	strb	r3, [r7, #21]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800794a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800794c:	2100      	movs	r1, #0
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fc6b 	bl	800722a <dir_next>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f43f af65 	beq.w	800782a <dir_find+0x34>
 8007960:	e004      	b.n	800796c <dir_find+0x176>
		if (res != FR_OK) break;
 8007962:	bf00      	nop
 8007964:	e002      	b.n	800796c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007966:	bf00      	nop
 8007968:	e000      	b.n	800796c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800796a:	bf00      	nop

	return res;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08c      	sub	sp, #48	; 0x30
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800798c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <dir_register+0x20>
 8007994:	2306      	movs	r3, #6
 8007996:	e0e0      	b.n	8007b5a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
 800799c:	e002      	b.n	80079a4 <dir_register+0x2c>
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	3301      	adds	r3, #1
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f4      	bne.n	800799e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079ba:	f107 030c 	add.w	r3, r7, #12
 80079be:	220c      	movs	r2, #12
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fd67 	bl	8006494 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d032      	beq.n	8007a36 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2240      	movs	r2, #64	; 0x40
 80079d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079d8:	2301      	movs	r3, #1
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
 80079dc:	e016      	b.n	8007a0c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	f107 010c 	add.w	r1, r7, #12
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	f7ff fe51 	bl	8007694 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff feff 	bl	80077f6 <dir_find>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80079fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	3301      	adds	r3, #1
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b63      	cmp	r3, #99	; 0x63
 8007a10:	d9e5      	bls.n	80079de <dir_register+0x66>
 8007a12:	e000      	b.n	8007a16 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a14:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2b64      	cmp	r3, #100	; 0x64
 8007a1a:	d101      	bne.n	8007a20 <dir_register+0xa8>
 8007a1c:	2307      	movs	r3, #7
 8007a1e:	e09c      	b.n	8007b5a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d002      	beq.n	8007a2e <dir_register+0xb6>
 8007a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a2c:	e095      	b.n	8007b5a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a2e:	7dfa      	ldrb	r2, [r7, #23]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <dir_register+0xd8>
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	330c      	adds	r3, #12
 8007a44:	4a47      	ldr	r2, [pc, #284]	; (8007b64 <dir_register+0x1ec>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	089b      	lsrs	r3, r3, #2
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	e000      	b.n	8007a52 <dir_register+0xda>
 8007a50:	2301      	movs	r3, #1
 8007a52:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a54:	6a39      	ldr	r1, [r7, #32]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff fcbd 	bl	80073d6 <dir_alloc>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d148      	bne.n	8007afc <dir_register+0x184>
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d042      	beq.n	8007afc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	015b      	lsls	r3, r3, #5
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fb48 	bl	8007118 <dir_sdi>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d132      	bne.n	8007afc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff fe8a 	bl	80077b4 <sum_sfn>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	69f8      	ldr	r0, [r7, #28]
 8007aac:	f7fe ff52 	bl	8006954 <move_window>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d11d      	bne.n	8007afa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	6918      	ldr	r0, [r3, #16]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a19      	ldr	r1, [r3, #32]
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	7efb      	ldrb	r3, [r7, #27]
 8007acc:	f7ff fd7a 	bl	80075c4 <put_lfn>
				fs->wflag = 1;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fba6 	bl	800722a <dir_next>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <dir_register+0x184>
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	623b      	str	r3, [r7, #32]
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1d5      	bne.n	8007aa4 <dir_register+0x12c>
 8007af8:	e000      	b.n	8007afc <dir_register+0x184>
				if (res != FR_OK) break;
 8007afa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d128      	bne.n	8007b56 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f7fe ff22 	bl	8006954 <move_window>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d11b      	bne.n	8007b56 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	2220      	movs	r2, #32
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fcd5 	bl	80064d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a18      	ldr	r0, [r3, #32]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3324      	adds	r3, #36	; 0x24
 8007b34:	220b      	movs	r2, #11
 8007b36:	4619      	mov	r1, r3
 8007b38:	f7fe fcac 	bl	8006494 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	330c      	adds	r3, #12
 8007b48:	f002 0218 	and.w	r2, r2, #24
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2201      	movs	r2, #1
 8007b54:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3730      	adds	r7, #48	; 0x30
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	4ec4ec4f 	.word	0x4ec4ec4f

08007b68 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80c9 	beq.w	8007d1a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b90:	d032      	beq.n	8007bf8 <get_fileinfo+0x90>
			i = j = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007b9a:	e01b      	b.n	8007bd4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007b9c:	89fb      	ldrh	r3, [r7, #14]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fd5f 	bl	8009664 <ff_convert>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007baa:	89fb      	ldrh	r3, [r7, #14]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <get_fileinfo+0x4e>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e01a      	b.n	8007bec <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2bfe      	cmp	r3, #254	; 0xfe
 8007bba:	d902      	bls.n	8007bc2 <get_fileinfo+0x5a>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e014      	b.n	8007bec <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	61fa      	str	r2, [r7, #28]
 8007bc8:	89fa      	ldrh	r2, [r7, #14]
 8007bca:	b2d1      	uxtb	r1, r2
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	4413      	add	r3, r2
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	1c59      	adds	r1, r3, #1
 8007bdc:	61b9      	str	r1, [r7, #24]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	81fb      	strh	r3, [r7, #14]
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1d7      	bne.n	8007b9c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3316      	adds	r3, #22
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	3316      	adds	r3, #22
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007c0c:	e04c      	b.n	8007ca8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1a      	ldr	r2, [r3, #32]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	1c59      	adds	r1, r3, #1
 8007c16:	61f9      	str	r1, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	d100      	bne.n	8007c26 <get_fileinfo+0xbe>
 8007c24:	e040      	b.n	8007ca8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d101      	bne.n	8007c30 <get_fileinfo+0xc8>
 8007c2c:	23e5      	movs	r3, #229	; 0xe5
 8007c2e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d10f      	bne.n	8007c56 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8007c36:	89bb      	ldrh	r3, [r7, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <get_fileinfo+0xe0>
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	4413      	add	r3, r2
 8007c42:	3316      	adds	r3, #22
 8007c44:	222e      	movs	r2, #46	; 0x2e
 8007c46:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	61ba      	str	r2, [r7, #24]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	222e      	movs	r2, #46	; 0x2e
 8007c54:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3309      	adds	r3, #9
 8007c5e:	7dfa      	ldrb	r2, [r7, #23]
 8007c60:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007c62:	89bb      	ldrh	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11c      	bne.n	8007ca2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d913      	bls.n	8007c96 <get_fileinfo+0x12e>
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b5a      	cmp	r3, #90	; 0x5a
 8007c72:	d810      	bhi.n	8007c96 <get_fileinfo+0x12e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d901      	bls.n	8007c88 <get_fileinfo+0x120>
 8007c84:	2310      	movs	r3, #16
 8007c86:	e000      	b.n	8007c8a <get_fileinfo+0x122>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	3320      	adds	r3, #32
 8007c94:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3316      	adds	r3, #22
 8007c9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ca0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b0a      	cmp	r3, #10
 8007cac:	d9af      	bls.n	8007c0e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007cae:	89bb      	ldrh	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10d      	bne.n	8007cd0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	4413      	add	r3, r2
 8007cba:	3316      	adds	r3, #22
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <get_fileinfo+0x168>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	3309      	adds	r3, #9
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	7ada      	ldrb	r2, [r3, #11]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	331c      	adds	r3, #28
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fb67 	bl	80063c0 <ld_dword>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	3316      	adds	r3, #22
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fb5e 	bl	80063c0 <ld_dword>
 8007d04:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	80da      	strh	r2, [r3, #6]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	809a      	strh	r2, [r3, #4]
 8007d18:	e000      	b.n	8007d1c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007d1a:	bf00      	nop
}
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	61ba      	str	r2, [r7, #24]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d54:	2b1f      	cmp	r3, #31
 8007d56:	d940      	bls.n	8007dda <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8007d5c:	d006      	beq.n	8007d6c <create_name+0x48>
 8007d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d60:	2b5c      	cmp	r3, #92	; 0x5c
 8007d62:	d110      	bne.n	8007d86 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d64:	e002      	b.n	8007d6c <create_name+0x48>
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	4413      	add	r3, r2
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b2f      	cmp	r3, #47	; 0x2f
 8007d76:	d0f6      	beq.n	8007d66 <create_name+0x42>
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b5c      	cmp	r3, #92	; 0x5c
 8007d82:	d0f0      	beq.n	8007d66 <create_name+0x42>
			break;
 8007d84:	e02a      	b.n	8007ddc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2bfe      	cmp	r3, #254	; 0xfe
 8007d8a:	d901      	bls.n	8007d90 <create_name+0x6c>
 8007d8c:	2306      	movs	r3, #6
 8007d8e:	e177      	b.n	8008080 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fc62 	bl	8009664 <ff_convert>
 8007da0:	4603      	mov	r3, r0
 8007da2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <create_name+0x8a>
 8007daa:	2306      	movs	r3, #6
 8007dac:	e168      	b.n	8008080 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db0:	2b7f      	cmp	r3, #127	; 0x7f
 8007db2:	d809      	bhi.n	8007dc8 <create_name+0xa4>
 8007db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db6:	4619      	mov	r1, r3
 8007db8:	48b3      	ldr	r0, [pc, #716]	; (8008088 <create_name+0x364>)
 8007dba:	f7fe fbce 	bl	800655a <chk_chr>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <create_name+0xa4>
 8007dc4:	2306      	movs	r3, #6
 8007dc6:	e15b      	b.n	8008080 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	617a      	str	r2, [r7, #20]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007dd6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007dd8:	e7b4      	b.n	8007d44 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007dda:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	441a      	add	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de8:	2b1f      	cmp	r3, #31
 8007dea:	d801      	bhi.n	8007df0 <create_name+0xcc>
 8007dec:	2304      	movs	r3, #4
 8007dee:	e000      	b.n	8007df2 <create_name+0xce>
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007df6:	e011      	b.n	8007e1c <create_name+0xf8>
		w = lfn[di - 1];
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d002      	beq.n	8007e16 <create_name+0xf2>
 8007e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e12:	2b2e      	cmp	r3, #46	; 0x2e
 8007e14:	d106      	bne.n	8007e24 <create_name+0x100>
		di--;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1ea      	bne.n	8007df8 <create_name+0xd4>
 8007e22:	e000      	b.n	8007e26 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007e24:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <create_name+0x118>
 8007e38:	2306      	movs	r3, #6
 8007e3a:	e121      	b.n	8008080 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3324      	adds	r3, #36	; 0x24
 8007e40:	220b      	movs	r2, #11
 8007e42:	2120      	movs	r1, #32
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fb46 	bl	80064d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e002      	b.n	8007e56 <create_name+0x132>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d0f5      	beq.n	8007e50 <create_name+0x12c>
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e70:	d0ee      	beq.n	8007e50 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d009      	beq.n	8007e8c <create_name+0x168>
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7c:	f043 0303 	orr.w	r3, r3, #3
 8007e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007e84:	e002      	b.n	8007e8c <create_name+0x168>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <create_name+0x182>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea4:	d1ef      	bne.n	8007e86 <create_name+0x162>

	i = b = 0; ni = 8;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	61ba      	str	r2, [r7, #24]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8090 	beq.w	8007fec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d006      	beq.n	8007ee0 <create_name+0x1bc>
 8007ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed6:	d10a      	bne.n	8007eee <create_name+0x1ca>
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d006      	beq.n	8007eee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	f043 0303 	orr.w	r3, r3, #3
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007eec:	e07d      	b.n	8007fea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d203      	bcs.n	8007efe <create_name+0x1da>
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d123      	bne.n	8007f46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2b0b      	cmp	r3, #11
 8007f02:	d106      	bne.n	8007f12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f08:	f043 0303 	orr.w	r3, r3, #3
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f10:	e06f      	b.n	8007ff2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d005      	beq.n	8007f26 <create_name+0x202>
 8007f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f1e:	f043 0303 	orr.w	r3, r3, #3
 8007f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d860      	bhi.n	8007ff0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	2308      	movs	r3, #8
 8007f34:	623b      	str	r3, [r7, #32]
 8007f36:	230b      	movs	r3, #11
 8007f38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f44:	e051      	b.n	8007fea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f48:	2b7f      	cmp	r3, #127	; 0x7f
 8007f4a:	d914      	bls.n	8007f76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 fb87 	bl	8009664 <ff_convert>
 8007f56:	4603      	mov	r3, r0
 8007f58:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <create_name+0x246>
 8007f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f62:	3b80      	subs	r3, #128	; 0x80
 8007f64:	4a49      	ldr	r2, [pc, #292]	; (800808c <create_name+0x368>)
 8007f66:	5cd3      	ldrb	r3, [r2, r3]
 8007f68:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <create_name+0x268>
 8007f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4843      	ldr	r0, [pc, #268]	; (8008090 <create_name+0x36c>)
 8007f82:	f7fe faea 	bl	800655a <chk_chr>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f8c:	235f      	movs	r3, #95	; 0x5f
 8007f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f94:	f043 0303 	orr.w	r3, r3, #3
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f9c:	e01b      	b.n	8007fd6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa0:	2b40      	cmp	r3, #64	; 0x40
 8007fa2:	d909      	bls.n	8007fb8 <create_name+0x294>
 8007fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fa6:	2b5a      	cmp	r3, #90	; 0x5a
 8007fa8:	d806      	bhi.n	8007fb8 <create_name+0x294>
					b |= 2;
 8007faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fae:	f043 0302 	orr.w	r3, r3, #2
 8007fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fb6:	e00e      	b.n	8007fd6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fba:	2b60      	cmp	r3, #96	; 0x60
 8007fbc:	d90b      	bls.n	8007fd6 <create_name+0x2b2>
 8007fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc0:	2b7a      	cmp	r3, #122	; 0x7a
 8007fc2:	d808      	bhi.n	8007fd6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fc8:	f043 0301 	orr.w	r3, r3, #1
 8007fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fd2:	3b20      	subs	r3, #32
 8007fd4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	623a      	str	r2, [r7, #32]
 8007fdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fde:	b2d1      	uxtb	r1, r2
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007fea:	e763      	b.n	8007eb4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007fec:	bf00      	nop
 8007fee:	e000      	b.n	8007ff2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007ff0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ff8:	2be5      	cmp	r3, #229	; 0xe5
 8007ffa:	d103      	bne.n	8008004 <create_name+0x2e0>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2205      	movs	r2, #5
 8008000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b08      	cmp	r3, #8
 8008008:	d104      	bne.n	8008014 <create_name+0x2f0>
 800800a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008018:	f003 030c 	and.w	r3, r3, #12
 800801c:	2b0c      	cmp	r3, #12
 800801e:	d005      	beq.n	800802c <create_name+0x308>
 8008020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	2b03      	cmp	r3, #3
 800802a:	d105      	bne.n	8008038 <create_name+0x314>
 800802c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d117      	bne.n	8008074 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008048:	f003 0303 	and.w	r3, r3, #3
 800804c:	2b01      	cmp	r3, #1
 800804e:	d105      	bne.n	800805c <create_name+0x338>
 8008050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008054:	f043 0310 	orr.w	r3, r3, #16
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800805c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008060:	f003 030c 	and.w	r3, r3, #12
 8008064:	2b04      	cmp	r3, #4
 8008066:	d105      	bne.n	8008074 <create_name+0x350>
 8008068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800806c:	f043 0308 	orr.w	r3, r3, #8
 8008070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800807a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800807e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008080:	4618      	mov	r0, r3
 8008082:	3728      	adds	r7, #40	; 0x28
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	0800d274 	.word	0x0800d274
 800808c:	0800d378 	.word	0x0800d378
 8008090:	0800d280 	.word	0x0800d280

08008094 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80080a8:	e002      	b.n	80080b0 <follow_path+0x1c>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b2f      	cmp	r3, #47	; 0x2f
 80080b6:	d0f8      	beq.n	80080aa <follow_path+0x16>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b5c      	cmp	r3, #92	; 0x5c
 80080be:	d0f4      	beq.n	80080aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2200      	movs	r2, #0
 80080c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b1f      	cmp	r3, #31
 80080cc:	d80a      	bhi.n	80080e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2280      	movs	r2, #128	; 0x80
 80080d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80080d6:	2100      	movs	r1, #0
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff f81d 	bl	8007118 <dir_sdi>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
 80080e2:	e048      	b.n	8008176 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080e4:	463b      	mov	r3, r7
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fe1b 	bl	8007d24 <create_name>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d139      	bne.n	800816c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fb7c 	bl	80077f6 <dir_find>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008108:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b04      	cmp	r3, #4
 8008114:	d12c      	bne.n	8008170 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d127      	bne.n	8008170 <follow_path+0xdc>
 8008120:	2305      	movs	r3, #5
 8008122:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008124:	e024      	b.n	8008170 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008126:	7afb      	ldrb	r3, [r7, #11]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d121      	bne.n	8008174 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	799b      	ldrb	r3, [r3, #6]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800813c:	2305      	movs	r3, #5
 800813e:	75fb      	strb	r3, [r7, #23]
 8008140:	e019      	b.n	8008176 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	8992      	ldrh	r2, [r2, #12]
 8008150:	fbb3 f0f2 	udiv	r0, r3, r2
 8008154:	fb02 f200 	mul.w	r2, r2, r0
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	440b      	add	r3, r1
 800815c:	4619      	mov	r1, r3
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff f980 	bl	8007464 <ld_clust>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800816a:	e7bb      	b.n	80080e4 <follow_path+0x50>
			if (res != FR_OK) break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <follow_path+0xe2>
				break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008174:	bf00      	nop
			}
		}
	}

	return res;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800818c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d031      	beq.n	80081fa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e002      	b.n	80081a4 <get_ldnumber+0x24>
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b1f      	cmp	r3, #31
 80081aa:	d903      	bls.n	80081b4 <get_ldnumber+0x34>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b3a      	cmp	r3, #58	; 0x3a
 80081b2:	d1f4      	bne.n	800819e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b3a      	cmp	r3, #58	; 0x3a
 80081ba:	d11c      	bne.n	80081f6 <get_ldnumber+0x76>
			tp = *path;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	60fa      	str	r2, [r7, #12]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	3b30      	subs	r3, #48	; 0x30
 80081cc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d80e      	bhi.n	80081f2 <get_ldnumber+0x72>
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d10a      	bne.n	80081f2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d107      	bne.n	80081f2 <get_ldnumber+0x72>
					vol = (int)i;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	3301      	adds	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	e002      	b.n	80081fc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80081fa:	693b      	ldr	r3, [r7, #16]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	70da      	strb	r2, [r3, #3]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800821e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fe fb96 	bl	8006954 <move_window>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <check_fs+0x2a>
 800822e:	2304      	movs	r3, #4
 8008230:	e038      	b.n	80082a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	333c      	adds	r3, #60	; 0x3c
 8008236:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f8a8 	bl	8006390 <ld_word>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008248:	429a      	cmp	r2, r3
 800824a:	d001      	beq.n	8008250 <check_fs+0x48>
 800824c:	2303      	movs	r3, #3
 800824e:	e029      	b.n	80082a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008256:	2be9      	cmp	r3, #233	; 0xe9
 8008258:	d009      	beq.n	800826e <check_fs+0x66>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008260:	2beb      	cmp	r3, #235	; 0xeb
 8008262:	d11e      	bne.n	80082a2 <check_fs+0x9a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800826a:	2b90      	cmp	r3, #144	; 0x90
 800826c:	d119      	bne.n	80082a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	333c      	adds	r3, #60	; 0x3c
 8008272:	3336      	adds	r3, #54	; 0x36
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe f8a3 	bl	80063c0 <ld_dword>
 800827a:	4603      	mov	r3, r0
 800827c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <check_fs+0xa4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d101      	bne.n	800828a <check_fs+0x82>
 8008286:	2300      	movs	r3, #0
 8008288:	e00c      	b.n	80082a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	333c      	adds	r3, #60	; 0x3c
 800828e:	3352      	adds	r3, #82	; 0x52
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe f895 	bl	80063c0 <ld_dword>
 8008296:	4603      	mov	r3, r0
 8008298:	4a05      	ldr	r2, [pc, #20]	; (80082b0 <check_fs+0xa8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d101      	bne.n	80082a2 <check_fs+0x9a>
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082a2:	2302      	movs	r3, #2
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	00544146 	.word	0x00544146
 80082b0:	33544146 	.word	0x33544146

080082b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b096      	sub	sp, #88	; 0x58
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff ff59 	bl	8008180 <get_ldnumber>
 80082ce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80082d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	da01      	bge.n	80082da <find_volume+0x26>
 80082d6:	230b      	movs	r3, #11
 80082d8:	e26c      	b.n	80087b4 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80082da:	4aa4      	ldr	r2, [pc, #656]	; (800856c <find_volume+0x2b8>)
 80082dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <find_volume+0x3a>
 80082ea:	230c      	movs	r3, #12
 80082ec:	e262      	b.n	80087b4 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80082ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082f0:	f7fe f94e 	bl	8006590 <lock_fs>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <find_volume+0x4a>
 80082fa:	230f      	movs	r3, #15
 80082fc:	e25a      	b.n	80087b4 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008302:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	f023 0301 	bic.w	r3, r3, #1
 800830a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01a      	beq.n	800834a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd ff9b 	bl	8006254 <disk_status>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10c      	bne.n	800834a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <find_volume+0x92>
 8008336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008342:	230a      	movs	r3, #10
 8008344:	e236      	b.n	80087b4 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8008346:	2300      	movs	r3, #0
 8008348:	e234      	b.n	80087b4 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008352:	b2da      	uxtb	r2, r3
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	4618      	mov	r0, r3
 800835e:	f7fd ff93 	bl	8006288 <disk_initialize>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008368:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008374:	2303      	movs	r3, #3
 8008376:	e21d      	b.n	80087b4 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <find_volume+0xda>
 800837e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800838a:	230a      	movs	r3, #10
 800838c:	e212      	b.n	80087b4 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	7858      	ldrb	r0, [r3, #1]
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	330c      	adds	r3, #12
 8008396:	461a      	mov	r2, r3
 8008398:	2102      	movs	r1, #2
 800839a:	f7fd ffdb 	bl	8006354 <disk_ioctl>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <find_volume+0xf4>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e205      	b.n	80087b4 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	899b      	ldrh	r3, [r3, #12]
 80083ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b0:	d80d      	bhi.n	80083ce <find_volume+0x11a>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	899b      	ldrh	r3, [r3, #12]
 80083b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ba:	d308      	bcc.n	80083ce <find_volume+0x11a>
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	899b      	ldrh	r3, [r3, #12]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	899b      	ldrh	r3, [r3, #12]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <find_volume+0x11e>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e1f0      	b.n	80087b4 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083da:	f7ff ff15 	bl	8008208 <check_fs>
 80083de:	4603      	mov	r3, r0
 80083e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d14b      	bne.n	8008484 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083ec:	2300      	movs	r3, #0
 80083ee:	643b      	str	r3, [r7, #64]	; 0x40
 80083f0:	e01f      	b.n	8008432 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80083f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008400:	4413      	add	r3, r2
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	3304      	adds	r3, #4
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <find_volume+0x168>
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	3308      	adds	r3, #8
 8008412:	4618      	mov	r0, r3
 8008414:	f7fd ffd4 	bl	80063c0 <ld_dword>
 8008418:	4602      	mov	r2, r0
 800841a:	e000      	b.n	800841e <find_volume+0x16a>
 800841c:	2200      	movs	r2, #0
 800841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008426:	440b      	add	r3, r1
 8008428:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800842c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842e:	3301      	adds	r3, #1
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	2b03      	cmp	r3, #3
 8008436:	d9dc      	bls.n	80083f2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008438:	2300      	movs	r3, #0
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <find_volume+0x194>
 8008442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008444:	3b01      	subs	r3, #1
 8008446:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008450:	4413      	add	r3, r2
 8008452:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008456:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <find_volume+0x1b6>
 800845e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008462:	f7ff fed1 	bl	8008208 <check_fs>
 8008466:	4603      	mov	r3, r0
 8008468:	e000      	b.n	800846c <find_volume+0x1b8>
 800846a:	2303      	movs	r3, #3
 800846c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008470:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008474:	2b01      	cmp	r3, #1
 8008476:	d905      	bls.n	8008484 <find_volume+0x1d0>
 8008478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847a:	3301      	adds	r3, #1
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
 800847e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008480:	2b03      	cmp	r3, #3
 8008482:	d9e1      	bls.n	8008448 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008488:	2b04      	cmp	r3, #4
 800848a:	d101      	bne.n	8008490 <find_volume+0x1dc>
 800848c:	2301      	movs	r3, #1
 800848e:	e191      	b.n	80087b4 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008494:	2b01      	cmp	r3, #1
 8008496:	d901      	bls.n	800849c <find_volume+0x1e8>
 8008498:	230d      	movs	r3, #13
 800849a:	e18b      	b.n	80087b4 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	333c      	adds	r3, #60	; 0x3c
 80084a0:	330b      	adds	r3, #11
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd ff74 	bl	8006390 <ld_word>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	899b      	ldrh	r3, [r3, #12]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d001      	beq.n	80084b8 <find_volume+0x204>
 80084b4:	230d      	movs	r3, #13
 80084b6:	e17d      	b.n	80087b4 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	333c      	adds	r3, #60	; 0x3c
 80084bc:	3316      	adds	r3, #22
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fd ff66 	bl	8006390 <ld_word>
 80084c4:	4603      	mov	r3, r0
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <find_volume+0x228>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	333c      	adds	r3, #60	; 0x3c
 80084d2:	3324      	adds	r3, #36	; 0x24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd ff73 	bl	80063c0 <ld_dword>
 80084da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084e0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	789b      	ldrb	r3, [r3, #2]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d005      	beq.n	8008500 <find_volume+0x24c>
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	789b      	ldrb	r3, [r3, #2]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d001      	beq.n	8008500 <find_volume+0x24c>
 80084fc:	230d      	movs	r3, #13
 80084fe:	e159      	b.n	80087b4 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	461a      	mov	r2, r3
 8008506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008508:	fb02 f303 	mul.w	r3, r2, r3
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008514:	b29a      	uxth	r2, r3
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	895b      	ldrh	r3, [r3, #10]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <find_volume+0x280>
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	895b      	ldrh	r3, [r3, #10]
 8008526:	461a      	mov	r2, r3
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	895b      	ldrh	r3, [r3, #10]
 800852c:	3b01      	subs	r3, #1
 800852e:	4013      	ands	r3, r2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <find_volume+0x284>
 8008534:	230d      	movs	r3, #13
 8008536:	e13d      	b.n	80087b4 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	333c      	adds	r3, #60	; 0x3c
 800853c:	3311      	adds	r3, #17
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd ff26 	bl	8006390 <ld_word>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	891b      	ldrh	r3, [r3, #8]
 8008550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008552:	8992      	ldrh	r2, [r2, #12]
 8008554:	0952      	lsrs	r2, r2, #5
 8008556:	b292      	uxth	r2, r2
 8008558:	fbb3 f1f2 	udiv	r1, r3, r2
 800855c:	fb02 f201 	mul.w	r2, r2, r1
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	b29b      	uxth	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <find_volume+0x2bc>
 8008568:	230d      	movs	r3, #13
 800856a:	e123      	b.n	80087b4 <find_volume+0x500>
 800856c:	200000c0 	.word	0x200000c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	333c      	adds	r3, #60	; 0x3c
 8008574:	3313      	adds	r3, #19
 8008576:	4618      	mov	r0, r3
 8008578:	f7fd ff0a 	bl	8006390 <ld_word>
 800857c:	4603      	mov	r3, r0
 800857e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <find_volume+0x2e0>
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	333c      	adds	r3, #60	; 0x3c
 800858a:	3320      	adds	r3, #32
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd ff17 	bl	80063c0 <ld_dword>
 8008592:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	333c      	adds	r3, #60	; 0x3c
 8008598:	330e      	adds	r3, #14
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fef8 	bl	8006390 <ld_word>
 80085a0:	4603      	mov	r3, r0
 80085a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80085a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <find_volume+0x2fa>
 80085aa:	230d      	movs	r3, #13
 80085ac:	e102      	b.n	80087b4 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	4413      	add	r3, r2
 80085b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b6:	8911      	ldrh	r1, [r2, #8]
 80085b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ba:	8992      	ldrh	r2, [r2, #12]
 80085bc:	0952      	lsrs	r2, r2, #5
 80085be:	b292      	uxth	r2, r2
 80085c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80085c4:	b292      	uxth	r2, r2
 80085c6:	4413      	add	r3, r2
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d201      	bcs.n	80085d6 <find_volume+0x322>
 80085d2:	230d      	movs	r3, #13
 80085d4:	e0ee      	b.n	80087b4 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085de:	8952      	ldrh	r2, [r2, #10]
 80085e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <find_volume+0x33c>
 80085ec:	230d      	movs	r3, #13
 80085ee:	e0e1      	b.n	80087b4 <find_volume+0x500>
		fmt = FS_FAT32;
 80085f0:	2303      	movs	r3, #3
 80085f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d802      	bhi.n	8008606 <find_volume+0x352>
 8008600:	2302      	movs	r3, #2
 8008602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	f640 72f5 	movw	r2, #4085	; 0xff5
 800860c:	4293      	cmp	r3, r2
 800860e:	d802      	bhi.n	8008616 <find_volume+0x362>
 8008610:	2301      	movs	r3, #1
 8008612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	1c9a      	adds	r2, r3, #2
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008622:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008628:	441a      	add	r2, r3
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800862e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	441a      	add	r2, r3
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8008638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800863c:	2b03      	cmp	r3, #3
 800863e:	d11e      	bne.n	800867e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	333c      	adds	r3, #60	; 0x3c
 8008644:	332a      	adds	r3, #42	; 0x2a
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fea2 	bl	8006390 <ld_word>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <find_volume+0x3a2>
 8008652:	230d      	movs	r3, #13
 8008654:	e0ae      	b.n	80087b4 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	891b      	ldrh	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <find_volume+0x3ae>
 800865e:	230d      	movs	r3, #13
 8008660:	e0a8      	b.n	80087b4 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	333c      	adds	r3, #60	; 0x3c
 8008666:	332c      	adds	r3, #44	; 0x2c
 8008668:	4618      	mov	r0, r3
 800866a:	f7fd fea9 	bl	80063c0 <ld_dword>
 800866e:	4602      	mov	r2, r0
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
 800867c:	e01f      	b.n	80086be <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	891b      	ldrh	r3, [r3, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <find_volume+0x3d6>
 8008686:	230d      	movs	r3, #13
 8008688:	e094      	b.n	80087b4 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008690:	441a      	add	r2, r3
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800869a:	2b02      	cmp	r3, #2
 800869c:	d103      	bne.n	80086a6 <find_volume+0x3f2>
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	e00a      	b.n	80086bc <find_volume+0x408>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	6a1a      	ldr	r2, [r3, #32]
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	085a      	lsrs	r2, r3, #1
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086bc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	440b      	add	r3, r1
 80086cc:	3b01      	subs	r3, #1
 80086ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086d0:	8989      	ldrh	r1, [r1, #12]
 80086d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d201      	bcs.n	80086de <find_volume+0x42a>
 80086da:	230d      	movs	r3, #13
 80086dc:	e06a      	b.n	80087b4 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e4:	61da      	str	r2, [r3, #28]
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	69da      	ldr	r2, [r3, #28]
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	2280      	movs	r2, #128	; 0x80
 80086f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d149      	bne.n	8008790 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	333c      	adds	r3, #60	; 0x3c
 8008700:	3330      	adds	r3, #48	; 0x30
 8008702:	4618      	mov	r0, r3
 8008704:	f7fd fe44 	bl	8006390 <ld_word>
 8008708:	4603      	mov	r3, r0
 800870a:	2b01      	cmp	r3, #1
 800870c:	d140      	bne.n	8008790 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008710:	3301      	adds	r3, #1
 8008712:	4619      	mov	r1, r3
 8008714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008716:	f7fe f91d 	bl	8006954 <move_window>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d137      	bne.n	8008790 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	2200      	movs	r2, #0
 8008724:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	333c      	adds	r3, #60	; 0x3c
 800872a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800872e:	4618      	mov	r0, r3
 8008730:	f7fd fe2e 	bl	8006390 <ld_word>
 8008734:	4603      	mov	r3, r0
 8008736:	461a      	mov	r2, r3
 8008738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800873c:	429a      	cmp	r2, r3
 800873e:	d127      	bne.n	8008790 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	333c      	adds	r3, #60	; 0x3c
 8008744:	4618      	mov	r0, r3
 8008746:	f7fd fe3b 	bl	80063c0 <ld_dword>
 800874a:	4603      	mov	r3, r0
 800874c:	4a1b      	ldr	r2, [pc, #108]	; (80087bc <find_volume+0x508>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d11e      	bne.n	8008790 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	333c      	adds	r3, #60	; 0x3c
 8008756:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800875a:	4618      	mov	r0, r3
 800875c:	f7fd fe30 	bl	80063c0 <ld_dword>
 8008760:	4603      	mov	r3, r0
 8008762:	4a17      	ldr	r2, [pc, #92]	; (80087c0 <find_volume+0x50c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d113      	bne.n	8008790 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	333c      	adds	r3, #60	; 0x3c
 800876c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008770:	4618      	mov	r0, r3
 8008772:	f7fd fe25 	bl	80063c0 <ld_dword>
 8008776:	4602      	mov	r2, r0
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	333c      	adds	r3, #60	; 0x3c
 8008780:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008784:	4618      	mov	r0, r3
 8008786:	f7fd fe1b 	bl	80063c0 <ld_dword>
 800878a:	4602      	mov	r2, r0
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008796:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <find_volume+0x510>)
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	3301      	adds	r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <find_volume+0x510>)
 80087a2:	801a      	strh	r2, [r3, #0]
 80087a4:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <find_volume+0x510>)
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80087ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ae:	f7fe f869 	bl	8006884 <clear_lock>
#endif
	return FR_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3758      	adds	r7, #88	; 0x58
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	41615252 	.word	0x41615252
 80087c0:	61417272 	.word	0x61417272
 80087c4:	200000c4 	.word	0x200000c4

080087c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087d2:	2309      	movs	r3, #9
 80087d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02e      	beq.n	800883a <validate+0x72>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02a      	beq.n	800883a <validate+0x72>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d025      	beq.n	800883a <validate+0x72>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	889a      	ldrh	r2, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	88db      	ldrh	r3, [r3, #6]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d11e      	bne.n	800883a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7fd fec5 	bl	8006590 <lock_fs>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d014      	beq.n	8008836 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	4618      	mov	r0, r3
 8008814:	f7fd fd1e 	bl	8006254 <disk_status>
 8008818:	4603      	mov	r3, r0
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <validate+0x60>
				res = FR_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	e008      	b.n	800883a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd fec4 	bl	80065bc <unlock_fs>
 8008834:	e001      	b.n	800883a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008836:	230f      	movs	r3, #15
 8008838:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <validate+0x7e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	e000      	b.n	8008848 <validate+0x80>
 8008846:	2300      	movs	r3, #0
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	6013      	str	r3, [r2, #0]
	return res;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800886a:	f107 0310 	add.w	r3, r7, #16
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fc86 	bl	8008180 <get_ldnumber>
 8008874:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da01      	bge.n	8008880 <f_mount+0x28>
 800887c:	230b      	movs	r3, #11
 800887e:	e048      	b.n	8008912 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008880:	4a26      	ldr	r2, [pc, #152]	; (800891c <f_mount+0xc4>)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008888:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00f      	beq.n	80088b0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008890:	69b8      	ldr	r0, [r7, #24]
 8008892:	f7fd fff7 	bl	8006884 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 ffc3 	bl	8009826 <ff_del_syncobj>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <f_mount+0x52>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e033      	b.n	8008912 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3314      	adds	r3, #20
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f000 ff92 	bl	80097f0 <ff_cre_syncobj>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <f_mount+0x7e>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e01d      	b.n	8008912 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4910      	ldr	r1, [pc, #64]	; (800891c <f_mount+0xc4>)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <f_mount+0x94>
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d001      	beq.n	80088f0 <f_mount+0x98>
 80088ec:	2300      	movs	r3, #0
 80088ee:	e010      	b.n	8008912 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80088f0:	f107 010c 	add.w	r1, r7, #12
 80088f4:	f107 0308 	add.w	r3, r7, #8
 80088f8:	2200      	movs	r2, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fcda 	bl	80082b4 <find_volume>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	7dfa      	ldrb	r2, [r7, #23]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fd fe56 	bl	80065bc <unlock_fs>
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200000c0 	.word	0x200000c0

08008920 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b09a      	sub	sp, #104	; 0x68
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <f_open+0x18>
 8008934:	2309      	movs	r3, #9
 8008936:	e1d7      	b.n	8008ce8 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800893e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008940:	79fa      	ldrb	r2, [r7, #7]
 8008942:	f107 0110 	add.w	r1, r7, #16
 8008946:	f107 0308 	add.w	r3, r7, #8
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fcb2 	bl	80082b4 <find_volume>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 81b4 	bne.w	8008cc8 <f_open+0x3a8>
		dj.obj.fs = fs;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008968:	f000 ff89 	bl	800987e <ff_memalloc>
 800896c:	65b8      	str	r0, [r7, #88]	; 0x58
 800896e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <f_open+0x62>
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2111      	movs	r1, #17
 8008978:	4618      	mov	r0, r3
 800897a:	f7fd fe1f 	bl	80065bc <unlock_fs>
 800897e:	2311      	movs	r3, #17
 8008980:	e1b2      	b.n	8008ce8 <f_open+0x3c8>
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008986:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fb7f 	bl	8008094 <follow_path>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800899c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d11a      	bne.n	80089da <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80089a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089a8:	b25b      	sxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da03      	bge.n	80089b6 <f_open+0x96>
				res = FR_INVALID_NAME;
 80089ae:	2306      	movs	r3, #6
 80089b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80089b4:	e011      	b.n	80089da <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fd fe10 	bl	80065f4 <chk_lock>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	f003 031c 	and.w	r3, r3, #28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d07f      	beq.n	8008ae4 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 80089e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d017      	beq.n	8008a1c <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80089ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d10e      	bne.n	8008a12 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80089f4:	f7fd fe5a 	bl	80066ac <enq_lock>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d006      	beq.n	8008a0c <f_open+0xec>
 80089fe:	f107 0314 	add.w	r3, r7, #20
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe ffb8 	bl	8007978 <dir_register>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	e000      	b.n	8008a0e <f_open+0xee>
 8008a0c:	2312      	movs	r3, #18
 8008a0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	f043 0308 	orr.w	r3, r3, #8
 8008a18:	71fb      	strb	r3, [r7, #7]
 8008a1a:	e010      	b.n	8008a3e <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008a1c:	7ebb      	ldrb	r3, [r7, #26]
 8008a1e:	f003 0311 	and.w	r3, r3, #17
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <f_open+0x10e>
					res = FR_DENIED;
 8008a26:	2307      	movs	r3, #7
 8008a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008a2c:	e007      	b.n	8008a3e <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <f_open+0x11e>
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d168      	bne.n	8008b18 <f_open+0x1f8>
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d063      	beq.n	8008b18 <f_open+0x1f8>
				dw = GET_FATTIME();
 8008a50:	f7fd f912 	bl	8005c78 <get_fattime>
 8008a54:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	330e      	adds	r3, #14
 8008a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fd fced 	bl	800643c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	3316      	adds	r3, #22
 8008a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fd fce7 	bl	800643c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	330b      	adds	r3, #11
 8008a72:	2220      	movs	r2, #32
 8008a74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe fcf1 	bl	8007464 <ld_clust>
 8008a82:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fd09 	bl	80074a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	331c      	adds	r3, #28
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fd fcd0 	bl	800643c <st_dword>
					fs->wflag = 1;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d037      	beq.n	8008b18 <f_open+0x1f8>
						dw = fs->winsect;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008aae:	f107 0314 	add.w	r3, r7, #20
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe f9f9 	bl	8006eae <remove_chain>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d126      	bne.n	8008b18 <f_open+0x1f8>
							res = move_window(fs, dw);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd ff40 	bl	8006954 <move_window>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	619a      	str	r2, [r3, #24]
 8008ae2:	e019      	b.n	8008b18 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d115      	bne.n	8008b18 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008aec:	7ebb      	ldrb	r3, [r7, #26]
 8008aee:	f003 0310 	and.w	r3, r3, #16
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <f_open+0x1de>
					res = FR_NO_FILE;
 8008af6:	2304      	movs	r3, #4
 8008af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008afc:	e00c      	b.n	8008b18 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <f_open+0x1f8>
 8008b08:	7ebb      	ldrb	r3, [r7, #26]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <f_open+0x1f8>
						res = FR_DENIED;
 8008b12:	2307      	movs	r3, #7
 8008b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008b18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d128      	bne.n	8008b72 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <f_open+0x212>
				mode |= FA_MODIFIED;
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bf14      	ite	ne
 8008b4a:	2301      	movne	r3, #1
 8008b4c:	2300      	moveq	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd fdc9 	bl	80066f0 <inc_lock>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <f_open+0x252>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f040 80a3 	bne.w	8008cc2 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fc6e 	bl	8007464 <ld_clust>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	331c      	adds	r3, #28
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fd fc14 	bl	80063c0 <ld_dword>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	88da      	ldrh	r2, [r3, #6]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	79fa      	ldrb	r2, [r7, #7]
 8008bb6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3330      	adds	r3, #48	; 0x30
 8008bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fd fc7e 	bl	80064d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d06e      	beq.n	8008cc2 <f_open+0x3a2>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d06a      	beq.n	8008cc2 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	895b      	ldrh	r3, [r3, #10]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	899b      	ldrh	r3, [r3, #12]
 8008bfe:	fb03 f302 	mul.w	r3, r3, r2
 8008c02:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c10:	e016      	b.n	8008c40 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fd ff59 	bl	8006ace <get_fat>
 8008c1c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d802      	bhi.n	8008c2a <f_open+0x30a>
 8008c24:	2302      	movs	r3, #2
 8008c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c30:	d102      	bne.n	8008c38 <f_open+0x318>
 8008c32:	2301      	movs	r3, #1
 8008c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <f_open+0x330>
 8008c48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d8e0      	bhi.n	8008c12 <f_open+0x2f2>
				}
				fp->clust = clst;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c54:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d131      	bne.n	8008cc2 <f_open+0x3a2>
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	899b      	ldrh	r3, [r3, #12]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c6a:	fb02 f201 	mul.w	r2, r2, r1
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d026      	beq.n	8008cc2 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fd ff09 	bl	8006a90 <clust2sect>
 8008c7e:	64b8      	str	r0, [r7, #72]	; 0x48
 8008c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <f_open+0x36e>
						res = FR_INT_ERR;
 8008c86:	2302      	movs	r3, #2
 8008c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008c8c:	e019      	b.n	8008cc2 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	899b      	ldrh	r3, [r3, #12]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c96:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9c:	441a      	add	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	7858      	ldrb	r0, [r3, #1]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a1a      	ldr	r2, [r3, #32]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f7fd fb0f 	bl	80062d4 <disk_read>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <f_open+0x3a2>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008cc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008cc4:	f000 fde7 	bl	8009896 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <f_open+0x3b6>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd fc6c 	bl	80065bc <unlock_fs>
 8008ce4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3768      	adds	r7, #104	; 0x68
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	; 0x38
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f107 0214 	add.w	r2, r7, #20
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fd59 	bl	80087c8 <validate>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d107      	bne.n	8008d34 <f_read+0x44>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	7d5b      	ldrb	r3, [r3, #21]
 8008d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <f_read+0x58>
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fd fc3d 	bl	80065bc <unlock_fs>
 8008d42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d46:	e15d      	b.n	8009004 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	7d1b      	ldrb	r3, [r3, #20]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d106      	bne.n	8008d62 <f_read+0x72>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2107      	movs	r1, #7
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fd fc2f 	bl	80065bc <unlock_fs>
 8008d5e:	2307      	movs	r3, #7
 8008d60:	e150      	b.n	8009004 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	f240 813c 	bls.w	8008ff0 <f_read+0x300>
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008d7c:	e138      	b.n	8008ff0 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	8992      	ldrh	r2, [r2, #12]
 8008d86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d8a:	fb02 f201 	mul.w	r2, r2, r1
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f040 80f3 	bne.w	8008f7c <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	8992      	ldrh	r2, [r2, #12]
 8008d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	8952      	ldrh	r2, [r2, #10]
 8008da6:	3a01      	subs	r2, #1
 8008da8:	4013      	ands	r3, r2
 8008daa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d139      	bne.n	8008e26 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d103      	bne.n	8008dc2 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8008dc0:	e013      	b.n	8008dea <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d007      	beq.n	8008dda <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7fe f969 	bl	80070a8 <clmt_clust>
 8008dd6:	6338      	str	r0, [r7, #48]	; 0x30
 8008dd8:	e007      	b.n	8008dea <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	4619      	mov	r1, r3
 8008de2:	4610      	mov	r0, r2
 8008de4:	f7fd fe73 	bl	8006ace <get_fat>
 8008de8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d809      	bhi.n	8008e04 <f_read+0x114>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2202      	movs	r2, #2
 8008df4:	755a      	strb	r2, [r3, #21]
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2102      	movs	r1, #2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fd fbde 	bl	80065bc <unlock_fs>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e0ff      	b.n	8009004 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e0a:	d109      	bne.n	8008e20 <f_read+0x130>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	755a      	strb	r2, [r3, #21]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd fbd0 	bl	80065bc <unlock_fs>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0f1      	b.n	8009004 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e24:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fd fe2e 	bl	8006a90 <clust2sect>
 8008e34:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d109      	bne.n	8008e50 <f_read+0x160>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	755a      	strb	r2, [r3, #21]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2102      	movs	r1, #2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd fbb8 	bl	80065bc <unlock_fs>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e0d9      	b.n	8009004 <f_read+0x314>
			sect += csect;
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	899b      	ldrh	r3, [r3, #12]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d046      	beq.n	8008efa <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	4413      	add	r3, r2
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	8952      	ldrh	r2, [r2, #10]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d905      	bls.n	8008e86 <f_read+0x196>
					cc = fs->csize - csect;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	895b      	ldrh	r3, [r3, #10]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	7858      	ldrb	r0, [r3, #1]
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e90:	f7fd fa20 	bl	80062d4 <disk_read>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <f_read+0x1be>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	755a      	strb	r2, [r3, #21]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fd fb89 	bl	80065bc <unlock_fs>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e0aa      	b.n	8009004 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	7d1b      	ldrb	r3, [r3, #20]
 8008eb2:	b25b      	sxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da18      	bge.n	8008eea <f_read+0x1fa>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1a      	ldr	r2, [r3, #32]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d911      	bls.n	8008eea <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	8992      	ldrh	r2, [r2, #12]
 8008ed2:	fb02 f303 	mul.w	r3, r2, r3
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed8:	18d0      	adds	r0, r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	899b      	ldrh	r3, [r3, #12]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f7fd fad5 	bl	8006494 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	899b      	ldrh	r3, [r3, #12]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008ef8:	e066      	b.n	8008fc8 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d038      	beq.n	8008f76 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	7d1b      	ldrb	r3, [r3, #20]
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da1d      	bge.n	8008f4a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	7858      	ldrb	r0, [r3, #1]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f7fd f9f9 	bl	8006314 <disk_write>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <f_read+0x24c>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	755a      	strb	r2, [r3, #21]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2101      	movs	r1, #1
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fd fb42 	bl	80065bc <unlock_fs>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e063      	b.n	8009004 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7d1b      	ldrb	r3, [r3, #20]
 8008f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	7858      	ldrb	r0, [r3, #1]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f54:	2301      	movs	r3, #1
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	f7fd f9bc 	bl	80062d4 <disk_read>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <f_read+0x286>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	755a      	strb	r2, [r3, #21]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fd fb25 	bl	80065bc <unlock_fs>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e046      	b.n	8009004 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	899b      	ldrh	r3, [r3, #12]
 8008f80:	4618      	mov	r0, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	8992      	ldrh	r2, [r2, #12]
 8008f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f8e:	fb02 f201 	mul.w	r2, r2, r1
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	1ac3      	subs	r3, r0, r3
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d901      	bls.n	8008fa4 <f_read+0x2b4>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	8992      	ldrh	r2, [r2, #12]
 8008fb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fb6:	fb02 f200 	mul.w	r2, r2, r0
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fc4:	f7fd fa66 	bl	8006494 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	4413      	add	r3, r2
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	699a      	ldr	r2, [r3, #24]
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	441a      	add	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	619a      	str	r2, [r3, #24]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	441a      	add	r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f47f aec3 	bne.w	8008d7e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fd fadd 	bl	80065bc <unlock_fs>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3738      	adds	r7, #56	; 0x38
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f107 0210 	add.w	r2, r7, #16
 800902a:	4611      	mov	r1, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fbcb 	bl	80087c8 <validate>
 8009032:	4603      	mov	r3, r0
 8009034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800903c:	2b00      	cmp	r3, #0
 800903e:	d107      	bne.n	8009050 <f_write+0x44>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	7d5b      	ldrb	r3, [r3, #21]
 8009044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <f_write+0x58>
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7fd faaf 	bl	80065bc <unlock_fs>
 800905e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009062:	e192      	b.n	800938a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7d1b      	ldrb	r3, [r3, #20]
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <f_write+0x72>
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2107      	movs	r1, #7
 8009074:	4618      	mov	r0, r3
 8009076:	f7fd faa1 	bl	80065bc <unlock_fs>
 800907a:	2307      	movs	r3, #7
 800907c:	e185      	b.n	800938a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	429a      	cmp	r2, r3
 800908c:	f080 816a 	bcs.w	8009364 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	43db      	mvns	r3, r3
 8009096:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009098:	e164      	b.n	8009364 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	8992      	ldrh	r2, [r2, #12]
 80090a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80090a6:	fb02 f201 	mul.w	r2, r2, r1
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 810f 	bne.w	80092d0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	8992      	ldrh	r2, [r2, #12]
 80090ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	8952      	ldrh	r2, [r2, #10]
 80090c2:	3a01      	subs	r2, #1
 80090c4:	4013      	ands	r3, r2
 80090c6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d14d      	bne.n	800916a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10c      	bne.n	80090f0 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11a      	bne.n	8009118 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd ff46 	bl	8006f78 <create_chain>
 80090ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80090ee:	e013      	b.n	8009118 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	4619      	mov	r1, r3
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7fd ffd2 	bl	80070a8 <clmt_clust>
 8009104:	62b8      	str	r0, [r7, #40]	; 0x28
 8009106:	e007      	b.n	8009118 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7fd ff31 	bl	8006f78 <create_chain>
 8009116:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 8127 	beq.w	800936e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	2b01      	cmp	r3, #1
 8009124:	d109      	bne.n	800913a <f_write+0x12e>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2202      	movs	r2, #2
 800912a:	755a      	strb	r2, [r3, #21]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2102      	movs	r1, #2
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fa43 	bl	80065bc <unlock_fs>
 8009136:	2302      	movs	r3, #2
 8009138:	e127      	b.n	800938a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009140:	d109      	bne.n	8009156 <f_write+0x14a>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	755a      	strb	r2, [r3, #21]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2101      	movs	r1, #1
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd fa35 	bl	80065bc <unlock_fs>
 8009152:	2301      	movs	r3, #1
 8009154:	e119      	b.n	800938a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800915a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <f_write+0x15e>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009168:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	7d1b      	ldrb	r3, [r3, #20]
 800916e:	b25b      	sxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	da1d      	bge.n	80091b0 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	7858      	ldrb	r0, [r3, #1]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6a1a      	ldr	r2, [r3, #32]
 8009182:	2301      	movs	r3, #1
 8009184:	f7fd f8c6 	bl	8006314 <disk_write>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <f_write+0x196>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	755a      	strb	r2, [r3, #21]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2101      	movs	r1, #1
 8009198:	4618      	mov	r0, r3
 800919a:	f7fd fa0f 	bl	80065bc <unlock_fs>
 800919e:	2301      	movs	r3, #1
 80091a0:	e0f3      	b.n	800938a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	7d1b      	ldrb	r3, [r3, #20]
 80091a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7fd fc69 	bl	8006a90 <clust2sect>
 80091be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <f_write+0x1ce>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2202      	movs	r2, #2
 80091ca:	755a      	strb	r2, [r3, #21]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd f9f3 	bl	80065bc <unlock_fs>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e0d7      	b.n	800938a <f_write+0x37e>
			sect += csect;
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	4413      	add	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	899b      	ldrh	r3, [r3, #12]
 80091e6:	461a      	mov	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80091ee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d048      	beq.n	8009288 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	4413      	add	r3, r2
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	8952      	ldrh	r2, [r2, #10]
 8009200:	4293      	cmp	r3, r2
 8009202:	d905      	bls.n	8009210 <f_write+0x204>
					cc = fs->csize - csect;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	895b      	ldrh	r3, [r3, #10]
 8009208:	461a      	mov	r2, r3
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	7858      	ldrb	r0, [r3, #1]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	69f9      	ldr	r1, [r7, #28]
 800921a:	f7fd f87b 	bl	8006314 <disk_write>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <f_write+0x22c>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	755a      	strb	r2, [r3, #21]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2101      	movs	r1, #1
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd f9c4 	bl	80065bc <unlock_fs>
 8009234:	2301      	movs	r3, #1
 8009236:	e0a8      	b.n	800938a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a1a      	ldr	r2, [r3, #32]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	6a3a      	ldr	r2, [r7, #32]
 8009242:	429a      	cmp	r2, r3
 8009244:	d918      	bls.n	8009278 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	8992      	ldrh	r2, [r2, #12]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	69fa      	ldr	r2, [r7, #28]
 800925e:	18d1      	adds	r1, r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	461a      	mov	r2, r3
 8009266:	f7fd f915 	bl	8006494 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	7d1b      	ldrb	r3, [r3, #20]
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	899b      	ldrh	r3, [r3, #12]
 800927c:	461a      	mov	r2, r3
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009286:	e050      	b.n	800932a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	429a      	cmp	r2, r3
 8009290:	d01b      	beq.n	80092ca <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800929a:	429a      	cmp	r2, r3
 800929c:	d215      	bcs.n	80092ca <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	7858      	ldrb	r0, [r3, #1]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092a8:	2301      	movs	r3, #1
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	f7fd f812 	bl	80062d4 <disk_read>
 80092b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	755a      	strb	r2, [r3, #21]
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2101      	movs	r1, #1
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fd f97b 	bl	80065bc <unlock_fs>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e05f      	b.n	800938a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	899b      	ldrh	r3, [r3, #12]
 80092d4:	4618      	mov	r0, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	8992      	ldrh	r2, [r2, #12]
 80092de:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e2:	fb02 f201 	mul.w	r2, r2, r1
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	1ac3      	subs	r3, r0, r3
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80092ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d901      	bls.n	80092f8 <f_write+0x2ec>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	8992      	ldrh	r2, [r2, #12]
 8009306:	fbb3 f0f2 	udiv	r0, r3, r2
 800930a:	fb02 f200 	mul.w	r2, r2, r0
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	440b      	add	r3, r1
 8009312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009314:	69f9      	ldr	r1, [r7, #28]
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd f8bc 	bl	8006494 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	7d1b      	ldrb	r3, [r3, #20]
 8009320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009324:	b2da      	uxtb	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800932a:	69fa      	ldr	r2, [r7, #28]
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	4413      	add	r3, r2
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	441a      	add	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	619a      	str	r2, [r3, #24]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	429a      	cmp	r2, r3
 8009348:	bf38      	it	cc
 800934a:	461a      	movcc	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	60da      	str	r2, [r3, #12]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	441a      	add	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f47f ae97 	bne.w	800909a <f_write+0x8e>
 800936c:	e000      	b.n	8009370 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800936e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	7d1b      	ldrb	r3, [r3, #20]
 8009374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009378:	b2da      	uxtb	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f7fd f91a 	bl	80065bc <unlock_fs>
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3730      	adds	r7, #48	; 0x30
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f107 0208 	add.w	r2, r7, #8
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fa10 	bl	80087c8 <validate>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d16d      	bne.n	800948e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7d1b      	ldrb	r3, [r3, #20]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d067      	beq.n	800948e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7d1b      	ldrb	r3, [r3, #20]
 80093c2:	b25b      	sxtb	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da1a      	bge.n	80093fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	7858      	ldrb	r0, [r3, #1]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1a      	ldr	r2, [r3, #32]
 80093d6:	2301      	movs	r3, #1
 80093d8:	f7fc ff9c 	bl	8006314 <disk_write>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <f_sync+0x5e>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2101      	movs	r1, #1
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fd f8e8 	bl	80065bc <unlock_fs>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e055      	b.n	800949c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7d1b      	ldrb	r3, [r3, #20]
 80093f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80093fe:	f7fc fc3b 	bl	8005c78 <get_fattime>
 8009402:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fd faa1 	bl	8006954 <move_window>
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d138      	bne.n	800948e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	330b      	adds	r3, #11
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	330b      	adds	r3, #11
 800942c:	f042 0220 	orr.w	r2, r2, #32
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	461a      	mov	r2, r3
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	f7fe f82f 	bl	80074a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f103 021c 	add.w	r2, r3, #28
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fc fff3 	bl	800643c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3316      	adds	r3, #22
 800945a:	6939      	ldr	r1, [r7, #16]
 800945c:	4618      	mov	r0, r3
 800945e:	f7fc ffed 	bl	800643c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3312      	adds	r3, #18
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f7fc ffcc 	bl	8006406 <st_word>
					fs->wflag = 1;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2201      	movs	r2, #1
 8009472:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f7fd fa9a 	bl	80069b0 <sync_fs>
 800947c:	4603      	mov	r3, r0
 800947e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7d1b      	ldrb	r3, [r3, #20]
 8009484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	7dfa      	ldrb	r2, [r7, #23]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd f891 	bl	80065bc <unlock_fs>
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff70 	bl	8009392 <f_sync>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11d      	bne.n	80094f8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f107 0208 	add.w	r2, r7, #8
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff f97f 	bl	80087c8 <validate>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d111      	bne.n	80094f8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fd f997 	bl	800680c <dec_lock>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd f862 	bl	80065bc <unlock_fs>
#endif
		}
	}
	return res;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b092      	sub	sp, #72	; 0x48
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800950c:	f107 010c 	add.w	r1, r7, #12
 8009510:	1d3b      	adds	r3, r7, #4
 8009512:	2200      	movs	r2, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fecd 	bl	80082b4 <find_volume>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009520:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009524:	2b00      	cmp	r3, #0
 8009526:	d134      	bne.n	8009592 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 8009528:	f44f 7000 	mov.w	r0, #512	; 0x200
 800952c:	f000 f9a7 	bl	800987e <ff_memalloc>
 8009530:	6438      	str	r0, [r7, #64]	; 0x40
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <f_stat+0x44>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2111      	movs	r1, #17
 800953c:	4618      	mov	r0, r3
 800953e:	f7fd f83d 	bl	80065bc <unlock_fs>
 8009542:	2311      	movs	r3, #17
 8009544:	e02e      	b.n	80095a4 <f_stat+0xa2>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800954a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe fd9d 	bl	8008094 <follow_path>
 800955a:	4603      	mov	r3, r0
 800955c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 8009560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009564:	2b00      	cmp	r3, #0
 8009566:	d111      	bne.n	800958c <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009568:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800956c:	b25b      	sxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	da03      	bge.n	800957a <f_stat+0x78>
				res = FR_INVALID_NAME;
 8009572:	2306      	movs	r3, #6
 8009574:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009578:	e008      	b.n	800958c <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <f_stat+0x8a>
 8009580:	f107 030c 	add.w	r3, r7, #12
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe faee 	bl	8007b68 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800958c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800958e:	f000 f982 	bl	8009896 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd f80e 	bl	80065bc <unlock_fs>
 80095a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3748      	adds	r7, #72	; 0x48
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80095c2:	4b1f      	ldr	r3, [pc, #124]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095c4:	7a5b      	ldrb	r3, [r3, #9]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d131      	bne.n	8009630 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80095cc:	4b1c      	ldr	r3, [pc, #112]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095ce:	7a5b      	ldrb	r3, [r3, #9]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095d6:	2100      	movs	r1, #0
 80095d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80095da:	4b19      	ldr	r3, [pc, #100]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095dc:	7a5b      	ldrb	r3, [r3, #9]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80095ea:	4b15      	ldr	r3, [pc, #84]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095ec:	7a5b      	ldrb	r3, [r3, #9]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	4b13      	ldr	r3, [pc, #76]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095f4:	4413      	add	r3, r2
 80095f6:	79fa      	ldrb	r2, [r7, #7]
 80095f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095fa:	4b11      	ldr	r3, [pc, #68]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 80095fc:	7a5b      	ldrb	r3, [r3, #9]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	b2d1      	uxtb	r1, r2
 8009604:	4a0e      	ldr	r2, [pc, #56]	; (8009640 <FATFS_LinkDriverEx+0x94>)
 8009606:	7251      	strb	r1, [r2, #9]
 8009608:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800960a:	7dbb      	ldrb	r3, [r7, #22]
 800960c:	3330      	adds	r3, #48	; 0x30
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	3301      	adds	r3, #1
 8009618:	223a      	movs	r2, #58	; 0x3a
 800961a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3302      	adds	r3, #2
 8009620:	222f      	movs	r2, #47	; 0x2f
 8009622:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3303      	adds	r3, #3
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
}
 8009632:	4618      	mov	r0, r3
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	200000e8 	.word	0x200000e8

08009644 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800964e:	2200      	movs	r2, #0
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff ffaa 	bl	80095ac <FATFS_LinkDriverEx>
 8009658:	4603      	mov	r3, r0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009670:	88fb      	ldrh	r3, [r7, #6]
 8009672:	2b7f      	cmp	r3, #127	; 0x7f
 8009674:	d802      	bhi.n	800967c <ff_convert+0x18>
		c = chr;
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	81fb      	strh	r3, [r7, #14]
 800967a:	e025      	b.n	80096c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	2bff      	cmp	r3, #255	; 0xff
 8009686:	d805      	bhi.n	8009694 <ff_convert+0x30>
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	3b80      	subs	r3, #128	; 0x80
 800968c:	4a12      	ldr	r2, [pc, #72]	; (80096d8 <ff_convert+0x74>)
 800968e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009692:	e000      	b.n	8009696 <ff_convert+0x32>
 8009694:	2300      	movs	r3, #0
 8009696:	81fb      	strh	r3, [r7, #14]
 8009698:	e016      	b.n	80096c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800969a:	2300      	movs	r3, #0
 800969c:	81fb      	strh	r3, [r7, #14]
 800969e:	e009      	b.n	80096b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	4a0d      	ldr	r2, [pc, #52]	; (80096d8 <ff_convert+0x74>)
 80096a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a8:	88fa      	ldrh	r2, [r7, #6]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d006      	beq.n	80096bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80096ae:	89fb      	ldrh	r3, [r7, #14]
 80096b0:	3301      	adds	r3, #1
 80096b2:	81fb      	strh	r3, [r7, #14]
 80096b4:	89fb      	ldrh	r3, [r7, #14]
 80096b6:	2b7f      	cmp	r3, #127	; 0x7f
 80096b8:	d9f2      	bls.n	80096a0 <ff_convert+0x3c>
 80096ba:	e000      	b.n	80096be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80096bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80096be:	89fb      	ldrh	r3, [r7, #14]
 80096c0:	3380      	adds	r3, #128	; 0x80
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80096c8:	89fb      	ldrh	r3, [r7, #14]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	0800d408 	.word	0x0800d408

080096dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ec:	d201      	bcs.n	80096f2 <ff_wtoupper+0x16>
 80096ee:	4b3e      	ldr	r3, [pc, #248]	; (80097e8 <ff_wtoupper+0x10c>)
 80096f0:	e000      	b.n	80096f4 <ff_wtoupper+0x18>
 80096f2:	4b3e      	ldr	r3, [pc, #248]	; (80097ec <ff_wtoupper+0x110>)
 80096f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	1c9a      	adds	r2, r3, #2
 80096fa:	617a      	str	r2, [r7, #20]
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009700:	8a7b      	ldrh	r3, [r7, #18]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d068      	beq.n	80097d8 <ff_wtoupper+0xfc>
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	8a7b      	ldrh	r3, [r7, #18]
 800970a:	429a      	cmp	r2, r3
 800970c:	d364      	bcc.n	80097d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	1c9a      	adds	r2, r3, #2
 8009712:	617a      	str	r2, [r7, #20]
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	823b      	strh	r3, [r7, #16]
 8009718:	8a3b      	ldrh	r3, [r7, #16]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	81fb      	strh	r3, [r7, #14]
 800971e:	8a3b      	ldrh	r3, [r7, #16]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	8a79      	ldrh	r1, [r7, #18]
 8009728:	8a3b      	ldrh	r3, [r7, #16]
 800972a:	440b      	add	r3, r1
 800972c:	429a      	cmp	r2, r3
 800972e:	da49      	bge.n	80097c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	2b08      	cmp	r3, #8
 8009734:	d84f      	bhi.n	80097d6 <ff_wtoupper+0xfa>
 8009736:	a201      	add	r2, pc, #4	; (adr r2, 800973c <ff_wtoupper+0x60>)
 8009738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973c:	08009761 	.word	0x08009761
 8009740:	08009773 	.word	0x08009773
 8009744:	08009789 	.word	0x08009789
 8009748:	08009791 	.word	0x08009791
 800974c:	08009799 	.word	0x08009799
 8009750:	080097a1 	.word	0x080097a1
 8009754:	080097a9 	.word	0x080097a9
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097b9 	.word	0x080097b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009760:	88fa      	ldrh	r2, [r7, #6]
 8009762:	8a7b      	ldrh	r3, [r7, #18]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	4413      	add	r3, r2
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	80fb      	strh	r3, [r7, #6]
 8009770:	e027      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009772:	88fa      	ldrh	r2, [r7, #6]
 8009774:	8a7b      	ldrh	r3, [r7, #18]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	b29b      	uxth	r3, r3
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	b29b      	uxth	r3, r3
 8009780:	88fa      	ldrh	r2, [r7, #6]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	80fb      	strh	r3, [r7, #6]
 8009786:	e01c      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	3b10      	subs	r3, #16
 800978c:	80fb      	strh	r3, [r7, #6]
 800978e:	e018      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	3b20      	subs	r3, #32
 8009794:	80fb      	strh	r3, [r7, #6]
 8009796:	e014      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	3b30      	subs	r3, #48	; 0x30
 800979c:	80fb      	strh	r3, [r7, #6]
 800979e:	e010      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80097a0:	88fb      	ldrh	r3, [r7, #6]
 80097a2:	3b1a      	subs	r3, #26
 80097a4:	80fb      	strh	r3, [r7, #6]
 80097a6:	e00c      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80097a8:	88fb      	ldrh	r3, [r7, #6]
 80097aa:	3308      	adds	r3, #8
 80097ac:	80fb      	strh	r3, [r7, #6]
 80097ae:	e008      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80097b0:	88fb      	ldrh	r3, [r7, #6]
 80097b2:	3b50      	subs	r3, #80	; 0x50
 80097b4:	80fb      	strh	r3, [r7, #6]
 80097b6:	e004      	b.n	80097c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80097be:	80fb      	strh	r3, [r7, #6]
 80097c0:	bf00      	nop
			}
			break;
 80097c2:	e008      	b.n	80097d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d195      	bne.n	80096f6 <ff_wtoupper+0x1a>
 80097ca:	8a3b      	ldrh	r3, [r7, #16]
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80097d4:	e78f      	b.n	80096f6 <ff_wtoupper+0x1a>
			break;
 80097d6:	bf00      	nop
	}

	return chr;
 80097d8:	88fb      	ldrh	r3, [r7, #6]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	0800d508 	.word	0x0800d508
 80097ec:	0800d6fc 	.word	0x0800d6fc

080097f0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	6039      	str	r1, [r7, #0]
 80097fa:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80097fc:	2200      	movs	r2, #0
 80097fe:	2101      	movs	r1, #1
 8009800:	2001      	movs	r0, #1
 8009802:	f000 f9c5 	bl	8009b90 <osSemaphoreNew>
 8009806:	4602      	mov	r2, r0
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2301      	movne	r3, #1
 8009816:	2300      	moveq	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	60fb      	str	r3, [r7, #12]

    return ret;
 800981c:	68fb      	ldr	r3, [r7, #12]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 face 	bl	8009dd0 <osSemaphoreDelete>
#endif
    return 1;
 8009834:	2301      	movs	r3, #1
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800984a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa28 	bl	8009ca4 <osSemaphoreAcquire>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800985a:	2301      	movs	r3, #1
 800985c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800985e:	68fb      	ldr	r3, [r7, #12]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fa69 	bl	8009d48 <osSemaphoreRelease>
#endif
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f003 fa96 	bl	800cdb8 <pvPortMalloc>
 800988c:	4603      	mov	r3, r0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f003 fb56 	bl	800cf50 <vPortFree>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <__NVIC_SetPriority>:
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	db0a      	blt.n	80098d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	490c      	ldr	r1, [pc, #48]	; (80098f8 <__NVIC_SetPriority+0x4c>)
 80098c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ca:	0112      	lsls	r2, r2, #4
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	440b      	add	r3, r1
 80098d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80098d4:	e00a      	b.n	80098ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	4908      	ldr	r1, [pc, #32]	; (80098fc <__NVIC_SetPriority+0x50>)
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	3b04      	subs	r3, #4
 80098e4:	0112      	lsls	r2, r2, #4
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	440b      	add	r3, r1
 80098ea:	761a      	strb	r2, [r3, #24]
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	e000e100 	.word	0xe000e100
 80098fc:	e000ed00 	.word	0xe000ed00

08009900 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <SysTick_Handler+0x1c>)
 8009906:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009908:	f002 fade 	bl	800bec8 <xTaskGetSchedulerState>
 800990c:	4603      	mov	r3, r0
 800990e:	2b01      	cmp	r3, #1
 8009910:	d001      	beq.n	8009916 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009912:	f003 f9c1 	bl	800cc98 <xPortSysTickHandler>
  }
}
 8009916:	bf00      	nop
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	e000e010 	.word	0xe000e010

08009920 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009924:	2100      	movs	r1, #0
 8009926:	f06f 0004 	mvn.w	r0, #4
 800992a:	f7ff ffbf 	bl	80098ac <__NVIC_SetPriority>
#endif
}
 800992e:	bf00      	nop
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993a:	f3ef 8305 	mrs	r3, IPSR
 800993e:	603b      	str	r3, [r7, #0]
  return(result);
 8009940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009946:	f06f 0305 	mvn.w	r3, #5
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e00c      	b.n	8009968 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800994e:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <osKernelInitialize+0x44>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009956:	4b08      	ldr	r3, [pc, #32]	; (8009978 <osKernelInitialize+0x44>)
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800995c:	2300      	movs	r3, #0
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e002      	b.n	8009968 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009968:	687b      	ldr	r3, [r7, #4]
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	200000f4 	.word	0x200000f4

0800997c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009982:	f002 faa1 	bl	800bec8 <xTaskGetSchedulerState>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <osKernelGetState+0x1a>
 800998c:	2b02      	cmp	r3, #2
 800998e:	d105      	bne.n	800999c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009990:	2302      	movs	r3, #2
 8009992:	607b      	str	r3, [r7, #4]
      break;
 8009994:	e00c      	b.n	80099b0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009996:	2303      	movs	r3, #3
 8009998:	607b      	str	r3, [r7, #4]
      break;
 800999a:	e009      	b.n	80099b0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800999c:	4b07      	ldr	r3, [pc, #28]	; (80099bc <osKernelGetState+0x40>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d102      	bne.n	80099aa <osKernelGetState+0x2e>
        state = osKernelReady;
 80099a4:	2301      	movs	r3, #1
 80099a6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80099a8:	e001      	b.n	80099ae <osKernelGetState+0x32>
        state = osKernelInactive;
 80099aa:	2300      	movs	r3, #0
 80099ac:	607b      	str	r3, [r7, #4]
      break;
 80099ae:	bf00      	nop
  }

  return (state);
 80099b0:	687b      	ldr	r3, [r7, #4]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200000f4 	.word	0x200000f4

080099c0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c6:	f3ef 8305 	mrs	r3, IPSR
 80099ca:	603b      	str	r3, [r7, #0]
  return(result);
 80099cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <osKernelStart+0x1a>
    stat = osErrorISR;
 80099d2:	f06f 0305 	mvn.w	r3, #5
 80099d6:	607b      	str	r3, [r7, #4]
 80099d8:	e010      	b.n	80099fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <osKernelStart+0x48>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d109      	bne.n	80099f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099e2:	f7ff ff9d 	bl	8009920 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <osKernelStart+0x48>)
 80099e8:	2202      	movs	r2, #2
 80099ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099ec:	f001 fe12 	bl	800b614 <vTaskStartScheduler>
      stat = osOK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	607b      	str	r3, [r7, #4]
 80099f4:	e002      	b.n	80099fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099fc:	687b      	ldr	r3, [r7, #4]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200000f4 	.word	0x200000f4

08009a0c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a12:	f3ef 8305 	mrs	r3, IPSR
 8009a16:	603b      	str	r3, [r7, #0]
  return(result);
 8009a18:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009a1e:	f001 ff1b 	bl	800b858 <xTaskGetTickCountFromISR>
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	e002      	b.n	8009a2c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009a26:	f001 ff07 	bl	800b838 <xTaskGetTickCount>
 8009a2a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009a2c:	687b      	ldr	r3, [r7, #4]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b08e      	sub	sp, #56	; 0x38
 8009a3a:	af04      	add	r7, sp, #16
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a46:	f3ef 8305 	mrs	r3, IPSR
 8009a4a:	617b      	str	r3, [r7, #20]
  return(result);
 8009a4c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d17e      	bne.n	8009b50 <osThreadNew+0x11a>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d07b      	beq.n	8009b50 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a5c:	2318      	movs	r3, #24
 8009a5e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d045      	beq.n	8009afc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <osThreadNew+0x48>
        name = attr->name;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <osThreadNew+0x6e>
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	2b38      	cmp	r3, #56	; 0x38
 8009a96:	d805      	bhi.n	8009aa4 <osThreadNew+0x6e>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <osThreadNew+0x72>
        return (NULL);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e054      	b.n	8009b52 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	089b      	lsrs	r3, r3, #2
 8009ab6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00e      	beq.n	8009ade <osThreadNew+0xa8>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b5b      	cmp	r3, #91	; 0x5b
 8009ac6:	d90a      	bls.n	8009ade <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <osThreadNew+0xa8>
        mem = 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	61bb      	str	r3, [r7, #24]
 8009adc:	e010      	b.n	8009b00 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10c      	bne.n	8009b00 <osThreadNew+0xca>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d108      	bne.n	8009b00 <osThreadNew+0xca>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <osThreadNew+0xca>
          mem = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	e001      	b.n	8009b00 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d110      	bne.n	8009b28 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b0e:	9202      	str	r2, [sp, #8]
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6a3a      	ldr	r2, [r7, #32]
 8009b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f001 fba3 	bl	800b268 <xTaskCreateStatic>
 8009b22:	4603      	mov	r3, r0
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	e013      	b.n	8009b50 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d110      	bne.n	8009b50 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	f107 0310 	add.w	r3, r7, #16
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f001 fbee 	bl	800b322 <xTaskCreate>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d001      	beq.n	8009b50 <osThreadNew+0x11a>
            hTask = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b50:	693b      	ldr	r3, [r7, #16]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3728      	adds	r7, #40	; 0x28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b62:	f3ef 8305 	mrs	r3, IPSR
 8009b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <osDelay+0x1c>
    stat = osErrorISR;
 8009b6e:	f06f 0305 	mvn.w	r3, #5
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e007      	b.n	8009b86 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 fd13 	bl	800b5ac <vTaskDelay>
    }
  }

  return (stat);
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ba0:	f3ef 8305 	mrs	r3, IPSR
 8009ba4:	613b      	str	r3, [r7, #16]
  return(result);
 8009ba6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d175      	bne.n	8009c98 <osSemaphoreNew+0x108>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d072      	beq.n	8009c98 <osSemaphoreNew+0x108>
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d86e      	bhi.n	8009c98 <osSemaphoreNew+0x108>
    mem = -1;
 8009bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d015      	beq.n	8009bf2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d006      	beq.n	8009bdc <osSemaphoreNew+0x4c>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	2b4f      	cmp	r3, #79	; 0x4f
 8009bd4:	d902      	bls.n	8009bdc <osSemaphoreNew+0x4c>
        mem = 1;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	e00c      	b.n	8009bf6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d108      	bne.n	8009bf6 <osSemaphoreNew+0x66>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <osSemaphoreNew+0x66>
          mem = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61bb      	str	r3, [r7, #24]
 8009bf0:	e001      	b.n	8009bf6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bfc:	d04c      	beq.n	8009c98 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d128      	bne.n	8009c56 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d10a      	bne.n	8009c20 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2203      	movs	r2, #3
 8009c10:	9200      	str	r2, [sp, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	2001      	movs	r0, #1
 8009c18:	f000 fb80 	bl	800a31c <xQueueGenericCreateStatic>
 8009c1c:	61f8      	str	r0, [r7, #28]
 8009c1e:	e005      	b.n	8009c2c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009c20:	2203      	movs	r2, #3
 8009c22:	2100      	movs	r1, #0
 8009c24:	2001      	movs	r0, #1
 8009c26:	f000 fbf1 	bl	800a40c <xQueueGenericCreate>
 8009c2a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d022      	beq.n	8009c78 <osSemaphoreNew+0xe8>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01f      	beq.n	8009c78 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009c38:	2300      	movs	r3, #0
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f000 fcac 	bl	800a59c <xQueueGenericSend>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d016      	beq.n	8009c78 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f001 f938 	bl	800aec0 <vQueueDelete>
            hSemaphore = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	e010      	b.n	8009c78 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d108      	bne.n	8009c6e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	461a      	mov	r2, r3
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fc2e 	bl	800a4c6 <xQueueCreateCountingSemaphoreStatic>
 8009c6a:	61f8      	str	r0, [r7, #28]
 8009c6c:	e004      	b.n	8009c78 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fc5f 	bl	800a534 <xQueueCreateCountingSemaphore>
 8009c76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e001      	b.n	8009c90 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c90:	6979      	ldr	r1, [r7, #20]
 8009c92:	69f8      	ldr	r0, [r7, #28]
 8009c94:	f001 fa60 	bl	800b158 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c98:	69fb      	ldr	r3, [r7, #28]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009cbc:	f06f 0303 	mvn.w	r3, #3
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e039      	b.n	8009d38 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cc4:	f3ef 8305 	mrs	r3, IPSR
 8009cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d022      	beq.n	8009d16 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009cd6:	f06f 0303 	mvn.w	r3, #3
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	e02c      	b.n	8009d38 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	2100      	movs	r1, #0
 8009cea:	6938      	ldr	r0, [r7, #16]
 8009cec:	f001 f868 	bl	800adc0 <xQueueReceiveFromISR>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d003      	beq.n	8009cfe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009cf6:	f06f 0302 	mvn.w	r3, #2
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e01c      	b.n	8009d38 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d019      	beq.n	8009d38 <osSemaphoreAcquire+0x94>
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <osSemaphoreAcquire+0xa0>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	e010      	b.n	8009d38 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6938      	ldr	r0, [r7, #16]
 8009d1a:	f000 ff45 	bl	800aba8 <xQueueSemaphoreTake>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d009      	beq.n	8009d38 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009d2a:	f06f 0301 	mvn.w	r3, #1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e002      	b.n	8009d38 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009d32:	f06f 0302 	mvn.w	r3, #2
 8009d36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009d38:	697b      	ldr	r3, [r7, #20]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009d5e:	f06f 0303 	mvn.w	r3, #3
 8009d62:	617b      	str	r3, [r7, #20]
 8009d64:	e02c      	b.n	8009dc0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d66:	f3ef 8305 	mrs	r3, IPSR
 8009d6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01a      	beq.n	8009da8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6938      	ldr	r0, [r7, #16]
 8009d7e:	f000 fda6 	bl	800a8ce <xQueueGiveFromISR>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d003      	beq.n	8009d90 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009d88:	f06f 0302 	mvn.w	r3, #2
 8009d8c:	617b      	str	r3, [r7, #20]
 8009d8e:	e017      	b.n	8009dc0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d014      	beq.n	8009dc0 <osSemaphoreRelease+0x78>
 8009d96:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <osSemaphoreRelease+0x84>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	e00b      	b.n	8009dc0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009da8:	2300      	movs	r3, #0
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	6938      	ldr	r0, [r7, #16]
 8009db0:	f000 fbf4 	bl	800a59c <xQueueGenericSend>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d002      	beq.n	8009dc0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009dc0:	697b      	ldr	r3, [r7, #20]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ddc:	f3ef 8305 	mrs	r3, IPSR
 8009de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009de2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009de8:	f06f 0305 	mvn.w	r3, #5
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	e00e      	b.n	8009e0e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d103      	bne.n	8009dfe <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009df6:	f06f 0303 	mvn.w	r3, #3
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e007      	b.n	8009e0e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009dfe:	6938      	ldr	r0, [r7, #16]
 8009e00:	f001 f9d4 	bl	800b1ac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009e08:	6938      	ldr	r0, [r7, #16]
 8009e0a:	f001 f859 	bl	800aec0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009e0e:	697b      	ldr	r3, [r7, #20]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e28:	f3ef 8305 	mrs	r3, IPSR
 8009e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8009e2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d15f      	bne.n	8009ef4 <osMessageQueueNew+0xdc>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d05c      	beq.n	8009ef4 <osMessageQueueNew+0xdc>
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d059      	beq.n	8009ef4 <osMessageQueueNew+0xdc>
    mem = -1;
 8009e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d029      	beq.n	8009ea0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <osMessageQueueNew+0x62>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	2b4f      	cmp	r3, #79	; 0x4f
 8009e5a:	d90e      	bls.n	8009e7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	695a      	ldr	r2, [r3, #20]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	fb01 f303 	mul.w	r3, r1, r3
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d302      	bcc.n	8009e7a <osMessageQueueNew+0x62>
        mem = 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e014      	b.n	8009ea4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d110      	bne.n	8009ea4 <osMessageQueueNew+0x8c>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10c      	bne.n	8009ea4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d108      	bne.n	8009ea4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <osMessageQueueNew+0x8c>
          mem = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61bb      	str	r3, [r7, #24]
 8009e9e:	e001      	b.n	8009ea4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d10b      	bne.n	8009ec2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691a      	ldr	r2, [r3, #16]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	9100      	str	r1, [sp, #0]
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 fa2f 	bl	800a31c <xQueueGenericCreateStatic>
 8009ebe:	61f8      	str	r0, [r7, #28]
 8009ec0:	e008      	b.n	8009ed4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d105      	bne.n	8009ed4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009ec8:	2200      	movs	r2, #0
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 fa9d 	bl	800a40c <xQueueGenericCreate>
 8009ed2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00c      	beq.n	8009ef4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e001      	b.n	8009eec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	69f8      	ldr	r0, [r7, #28]
 8009ef0:	f001 f932 	bl	800b158 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f18:	f3ef 8305 	mrs	r3, IPSR
 8009f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8009f1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d028      	beq.n	8009f76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <osMessageQueuePut+0x36>
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <osMessageQueuePut+0x36>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009f36:	f06f 0303 	mvn.w	r3, #3
 8009f3a:	61fb      	str	r3, [r7, #28]
 8009f3c:	e038      	b.n	8009fb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009f42:	f107 0210 	add.w	r2, r7, #16
 8009f46:	2300      	movs	r3, #0
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	69b8      	ldr	r0, [r7, #24]
 8009f4c:	f000 fc24 	bl	800a798 <xQueueGenericSendFromISR>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d003      	beq.n	8009f5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009f56:	f06f 0302 	mvn.w	r3, #2
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e028      	b.n	8009fb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d025      	beq.n	8009fb0 <osMessageQueuePut+0xb0>
 8009f64:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <osMessageQueuePut+0xbc>)
 8009f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	e01c      	b.n	8009fb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <osMessageQueuePut+0x82>
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009f82:	f06f 0303 	mvn.w	r3, #3
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e012      	b.n	8009fb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	69b8      	ldr	r0, [r7, #24]
 8009f92:	f000 fb03 	bl	800a59c <xQueueGenericSend>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d009      	beq.n	8009fb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009fa2:	f06f 0301 	mvn.w	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	e002      	b.n	8009fb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009faa:	f06f 0302 	mvn.w	r3, #2
 8009fae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009fb0:	69fb      	ldr	r3, [r7, #28]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3720      	adds	r7, #32
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fd6:	f3ef 8305 	mrs	r3, IPSR
 8009fda:	617b      	str	r3, [r7, #20]
  return(result);
 8009fdc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d028      	beq.n	800a034 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d005      	beq.n	8009ff4 <osMessageQueueGet+0x34>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <osMessageQueueGet+0x34>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009ff4:	f06f 0303 	mvn.w	r3, #3
 8009ff8:	61fb      	str	r3, [r7, #28]
 8009ffa:	e037      	b.n	800a06c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a000:	f107 0310 	add.w	r3, r7, #16
 800a004:	461a      	mov	r2, r3
 800a006:	68b9      	ldr	r1, [r7, #8]
 800a008:	69b8      	ldr	r0, [r7, #24]
 800a00a:	f000 fed9 	bl	800adc0 <xQueueReceiveFromISR>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b01      	cmp	r3, #1
 800a012:	d003      	beq.n	800a01c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a014:	f06f 0302 	mvn.w	r3, #2
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	e027      	b.n	800a06c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d024      	beq.n	800a06c <osMessageQueueGet+0xac>
 800a022:	4b15      	ldr	r3, [pc, #84]	; (800a078 <osMessageQueueGet+0xb8>)
 800a024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	e01b      	b.n	800a06c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <osMessageQueueGet+0x80>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a040:	f06f 0303 	mvn.w	r3, #3
 800a044:	61fb      	str	r3, [r7, #28]
 800a046:	e011      	b.n	800a06c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	69b8      	ldr	r0, [r7, #24]
 800a04e:	f000 fccb 	bl	800a9e8 <xQueueReceive>
 800a052:	4603      	mov	r3, r0
 800a054:	2b01      	cmp	r3, #1
 800a056:	d009      	beq.n	800a06c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a05e:	f06f 0301 	mvn.w	r3, #1
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e002      	b.n	800a06c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a066:	f06f 0302 	mvn.w	r3, #2
 800a06a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a06c:	69fb      	ldr	r3, [r7, #28]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a08c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4a06      	ldr	r2, [pc, #24]	; (800a0ac <vApplicationGetIdleTaskMemory+0x30>)
 800a092:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2280      	movs	r2, #128	; 0x80
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200000f8 	.word	0x200000f8
 800a0ac:	20000154 	.word	0x20000154

0800a0b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a07      	ldr	r2, [pc, #28]	; (800a0dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a0c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4a06      	ldr	r2, [pc, #24]	; (800a0e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a0c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ce:	601a      	str	r2, [r3, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000354 	.word	0x20000354
 800a0e0:	200003b0 	.word	0x200003b0

0800a0e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f103 0208 	add.w	r2, r3, #8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f103 0208 	add.w	r2, r3, #8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0208 	add.w	r2, r3, #8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
}
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a19c:	d103      	bne.n	800a1a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e00c      	b.n	800a1c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e002      	b.n	800a1b4 <vListInsert+0x2e>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d2f6      	bcs.n	800a1ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	6892      	ldr	r2, [r2, #8]
 800a20e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d103      	bne.n	800a22c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a276:	f002 fc7d 	bl	800cb74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a286:	fb01 f303 	mul.w	r3, r1, r3
 800a28a:	441a      	add	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	68f9      	ldr	r1, [r7, #12]
 800a2aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	441a      	add	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	22ff      	movs	r2, #255	; 0xff
 800a2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	22ff      	movs	r2, #255	; 0xff
 800a2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d114      	bne.n	800a2f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d01a      	beq.n	800a30a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3310      	adds	r3, #16
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fc37 	bl	800bb4c <xTaskRemoveFromEventList>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d012      	beq.n	800a30a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <xQueueGenericReset+0xcc>)
 800a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	e009      	b.n	800a30a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fef2 	bl	800a0e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff feed 	bl	800a0e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a30a:	f002 fc63 	bl	800cbd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a30e:	2301      	movs	r3, #1
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <xQueueGenericCreateStatic+0x52>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <xQueueGenericCreateStatic+0x56>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <xQueueGenericCreateStatic+0x58>
 800a372:	2300      	movs	r3, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	623b      	str	r3, [r7, #32]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <xQueueGenericCreateStatic+0x7e>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <xQueueGenericCreateStatic+0x82>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <xQueueGenericCreateStatic+0x84>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	61fb      	str	r3, [r7, #28]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3ba:	2350      	movs	r3, #80	; 0x50
 800a3bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b50      	cmp	r3, #80	; 0x50
 800a3c2:	d00a      	beq.n	800a3da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	61bb      	str	r3, [r7, #24]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00d      	beq.n	800a402 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f83f 	bl	800a480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a404:	4618      	mov	r0, r3
 800a406:	3730      	adds	r7, #48	; 0x30
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	; 0x28
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	613b      	str	r3, [r7, #16]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	3350      	adds	r3, #80	; 0x50
 800a444:	4618      	mov	r0, r3
 800a446:	f002 fcb7 	bl	800cdb8 <pvPortMalloc>
 800a44a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d011      	beq.n	800a476 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	3350      	adds	r3, #80	; 0x50
 800a45a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	4613      	mov	r3, r2
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f805 	bl	800a480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a476:	69bb      	ldr	r3, [r7, #24]
	}
 800a478:	4618      	mov	r0, r3
 800a47a:	3720      	adds	r7, #32
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	e002      	b.n	800a4a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	69b8      	ldr	r0, [r7, #24]
 800a4b2:	f7ff fecb 	bl	800a24c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	78fa      	ldrb	r2, [r7, #3]
 800a4ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b08a      	sub	sp, #40	; 0x28
 800a4ca:	af02      	add	r7, sp, #8
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	61bb      	str	r3, [r7, #24]
}
 800a4ea:	bf00      	nop
 800a4ec:	e7fe      	b.n	800a4ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d90a      	bls.n	800a50c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	617b      	str	r3, [r7, #20]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a50c:	2302      	movs	r3, #2
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff ff00 	bl	800a31c <xQueueGenericCreateStatic>
 800a51c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a52a:	69fb      	ldr	r3, [r7, #28]
	}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	613b      	str	r3, [r7, #16]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d90a      	bls.n	800a578 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60fb      	str	r3, [r7, #12]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a578:	2202      	movs	r2, #2
 800a57a:	2100      	movs	r1, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff ff45 	bl	800a40c <xQueueGenericCreate>
 800a582:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a590:	697b      	ldr	r3, [r7, #20]
	}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueGenericSend+0x32>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <xQueueGenericSend+0x40>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <xQueueGenericSend+0x44>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <xQueueGenericSend+0x46>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <xQueueGenericSend+0x60>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d103      	bne.n	800a60a <xQueueGenericSend+0x6e>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d101      	bne.n	800a60e <xQueueGenericSend+0x72>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGenericSend+0x74>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueGenericSend+0x8e>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	623b      	str	r3, [r7, #32]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a62a:	f001 fc4d 	bl	800bec8 <xTaskGetSchedulerState>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <xQueueGenericSend+0x9e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <xQueueGenericSend+0xa2>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <xQueueGenericSend+0xa4>
 800a63e:	2300      	movs	r3, #0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericSend+0xbe>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	61fb      	str	r3, [r7, #28]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a65a:	f002 fa8b 	bl	800cb74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <xQueueGenericSend+0xd4>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d129      	bne.n	800a6c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a676:	f000 fc5e 	bl	800af36 <prvCopyDataToQueue>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	3324      	adds	r3, #36	; 0x24
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fa5f 	bl	800bb4c <xTaskRemoveFromEventList>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d013      	beq.n	800a6bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a694:	4b3f      	ldr	r3, [pc, #252]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e00a      	b.n	800a6bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6bc:	f002 fa8a 	bl	800cbd4 <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e063      	b.n	800a78c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f002 fa83 	bl	800cbd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e05c      	b.n	800a78c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 fa99 	bl	800bc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f002 fa75 	bl	800cbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 fff9 	bl	800b6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f002 fa41 	bl	800cb74 <vPortEnterCritical>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6fe:	d103      	bne.n	800a708 <xQueueGenericSend+0x16c>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x182>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71e:	f002 fa59 	bl	800cbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fa88 	bl	800bc40 <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d124      	bne.n	800a780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a738:	f000 fcf5 	bl	800b126 <prvIsQueueFull>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d018      	beq.n	800a774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3310      	adds	r3, #16
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 f9ae 	bl	800baac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fc80 	bl	800b056 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 ffd1 	bl	800b6fc <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f47f af7c 	bne.w	800a65a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a762:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <xQueueGenericSend+0x1f8>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	e772      	b.n	800a65a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a776:	f000 fc6e 	bl	800b056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77a:	f000 ffbf 	bl	800b6fc <xTaskResumeAll>
 800a77e:	e76c      	b.n	800a65a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a782:	f000 fc68 	bl	800b056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a786:	f000 ffb9 	bl	800b6fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a78a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3738      	adds	r7, #56	; 0x38
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b090      	sub	sp, #64	; 0x40
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <xQueueGenericSendFromISR+0x3c>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <xQueueGenericSendFromISR+0x40>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <xQueueGenericSendFromISR+0x42>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d103      	bne.n	800a802 <xQueueGenericSendFromISR+0x6a>
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <xQueueGenericSendFromISR+0x6e>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <xQueueGenericSendFromISR+0x70>
 800a806:	2300      	movs	r3, #0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	623b      	str	r3, [r7, #32]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a822:	f002 fa89 	bl	800cd38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a826:	f3ef 8211 	mrs	r2, BASEPRI
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	61fa      	str	r2, [r7, #28]
 800a83c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a83e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a840:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <xQueueGenericSendFromISR+0xbc>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d12f      	bne.n	800a8b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a86a:	f000 fb64 	bl	800af36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a86e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a876:	d112      	bne.n	800a89e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d016      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a882:	3324      	adds	r3, #36	; 0x24
 800a884:	4618      	mov	r0, r3
 800a886:	f001 f961 	bl	800bb4c <xTaskRemoveFromEventList>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00e      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e007      	b.n	800a8ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a89e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	b25a      	sxtb	r2, r3
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8b2:	e001      	b.n	800a8b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3740      	adds	r7, #64	; 0x40
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b08e      	sub	sp, #56	; 0x38
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	623b      	str	r3, [r7, #32]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00a      	beq.n	800a916 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61fb      	str	r3, [r7, #28]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <xQueueGiveFromISR+0x58>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <xQueueGiveFromISR+0x5c>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <xQueueGiveFromISR+0x5e>
 800a92a:	2300      	movs	r3, #0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	61bb      	str	r3, [r7, #24]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a946:	f002 f9f7 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800a94a:	f3ef 8211 	mrs	r2, BASEPRI
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	617a      	str	r2, [r7, #20]
 800a960:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a962:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a972:	429a      	cmp	r2, r3
 800a974:	d22b      	bcs.n	800a9ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a97c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a990:	d112      	bne.n	800a9b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d016      	beq.n	800a9c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	3324      	adds	r3, #36	; 0x24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f8d4 	bl	800bb4c <xTaskRemoveFromEventList>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	e007      	b.n	800a9c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	b25a      	sxtb	r2, r3
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a9cc:	e001      	b.n	800a9d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f383 8811 	msr	BASEPRI, r3
}
 800a9dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3738      	adds	r7, #56	; 0x38
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08c      	sub	sp, #48	; 0x30
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <xQueueReceive+0x30>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	623b      	str	r3, [r7, #32]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d103      	bne.n	800aa26 <xQueueReceive+0x3e>
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <xQueueReceive+0x42>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueReceive+0x44>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueReceive+0x5e>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	61fb      	str	r3, [r7, #28]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa46:	f001 fa3f 	bl	800bec8 <xTaskGetSchedulerState>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <xQueueReceive+0x6e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <xQueueReceive+0x72>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <xQueueReceive+0x74>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueReceive+0x8e>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	61bb      	str	r3, [r7, #24]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa76:	f002 f87d 	bl	800cb74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01f      	beq.n	800aac6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa8a:	f000 fabe 	bl	800b00a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	1e5a      	subs	r2, r3, #1
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00f      	beq.n	800aabe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	3310      	adds	r3, #16
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 f852 	bl	800bb4c <xTaskRemoveFromEventList>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aaae:	4b3d      	ldr	r3, [pc, #244]	; (800aba4 <xQueueReceive+0x1bc>)
 800aab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aabe:	f002 f889 	bl	800cbd4 <vPortExitCritical>
				return pdPASS;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e069      	b.n	800ab9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aacc:	f002 f882 	bl	800cbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aad0:	2300      	movs	r3, #0
 800aad2:	e062      	b.n	800ab9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aada:	f107 0310 	add.w	r3, r7, #16
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 f898 	bl	800bc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aae8:	f002 f874 	bl	800cbd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaec:	f000 fdf8 	bl	800b6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaf0:	f002 f840 	bl	800cb74 <vPortEnterCritical>
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab00:	d103      	bne.n	800ab0a <xQueueReceive+0x122>
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab10:	b25b      	sxtb	r3, r3
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab16:	d103      	bne.n	800ab20 <xQueueReceive+0x138>
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab20:	f002 f858 	bl	800cbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab24:	1d3a      	adds	r2, r7, #4
 800ab26:	f107 0310 	add.w	r3, r7, #16
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 f887 	bl	800bc40 <xTaskCheckForTimeOut>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d123      	bne.n	800ab80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab3a:	f000 fade 	bl	800b0fa <prvIsQueueEmpty>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d017      	beq.n	800ab74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 ffad 	bl	800baac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab54:	f000 fa7f 	bl	800b056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab58:	f000 fdd0 	bl	800b6fc <xTaskResumeAll>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d189      	bne.n	800aa76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab62:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <xQueueReceive+0x1bc>)
 800ab64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	e780      	b.n	800aa76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab76:	f000 fa6e 	bl	800b056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab7a:	f000 fdbf 	bl	800b6fc <xTaskResumeAll>
 800ab7e:	e77a      	b.n	800aa76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f000 fa68 	bl	800b056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab86:	f000 fdb9 	bl	800b6fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab8c:	f000 fab5 	bl	800b0fa <prvIsQueueEmpty>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f43f af6f 	beq.w	800aa76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3730      	adds	r7, #48	; 0x30
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abba:	2300      	movs	r3, #0
 800abbc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <xQueueSemaphoreTake+0x32>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	623b      	str	r3, [r7, #32]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	61fb      	str	r3, [r7, #28]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abf8:	f001 f966 	bl	800bec8 <xTaskGetSchedulerState>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <xQueueSemaphoreTake+0x60>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <xQueueSemaphoreTake+0x64>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e000      	b.n	800ac0e <xQueueSemaphoreTake+0x66>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10a      	bne.n	800ac28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	61bb      	str	r3, [r7, #24]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac28:	f001 ffa4 	bl	800cb74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d024      	beq.n	800ac82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	1e5a      	subs	r2, r3, #1
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d104      	bne.n	800ac52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac48:	f001 fab4 	bl	800c1b4 <pvTaskIncrementMutexHeldCount>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00f      	beq.n	800ac7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 ff74 	bl	800bb4c <xTaskRemoveFromEventList>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac6a:	4b54      	ldr	r3, [pc, #336]	; (800adbc <xQueueSemaphoreTake+0x214>)
 800ac6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac7a:	f001 ffab 	bl	800cbd4 <vPortExitCritical>
				return pdPASS;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e097      	b.n	800adb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d111      	bne.n	800acac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00a      	beq.n	800aca4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	617b      	str	r3, [r7, #20]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aca4:	f001 ff96 	bl	800cbd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aca8:	2300      	movs	r3, #0
 800acaa:	e082      	b.n	800adb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acb2:	f107 030c 	add.w	r3, r7, #12
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 ffac 	bl	800bc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acc0:	f001 ff88 	bl	800cbd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acc4:	f000 fd0c 	bl	800b6e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acc8:	f001 ff54 	bl	800cb74 <vPortEnterCritical>
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd2:	b25b      	sxtb	r3, r3
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acd8:	d103      	bne.n	800ace2 <xQueueSemaphoreTake+0x13a>
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ace8:	b25b      	sxtb	r3, r3
 800acea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acee:	d103      	bne.n	800acf8 <xQueueSemaphoreTake+0x150>
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acf8:	f001 ff6c 	bl	800cbd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acfc:	463a      	mov	r2, r7
 800acfe:	f107 030c 	add.w	r3, r7, #12
 800ad02:	4611      	mov	r1, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 ff9b 	bl	800bc40 <xTaskCheckForTimeOut>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d132      	bne.n	800ad76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad12:	f000 f9f2 	bl	800b0fa <prvIsQueueEmpty>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d026      	beq.n	800ad6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ad24:	f001 ff26 	bl	800cb74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 f8e9 	bl	800bf04 <xTaskPriorityInherit>
 800ad32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad34:	f001 ff4e 	bl	800cbd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	3324      	adds	r3, #36	; 0x24
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 feb3 	bl	800baac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad48:	f000 f985 	bl	800b056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad4c:	f000 fcd6 	bl	800b6fc <xTaskResumeAll>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f47f af68 	bne.w	800ac28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ad58:	4b18      	ldr	r3, [pc, #96]	; (800adbc <xQueueSemaphoreTake+0x214>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	e75e      	b.n	800ac28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6c:	f000 f973 	bl	800b056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad70:	f000 fcc4 	bl	800b6fc <xTaskResumeAll>
 800ad74:	e758      	b.n	800ac28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad78:	f000 f96d 	bl	800b056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad7c:	f000 fcbe 	bl	800b6fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad82:	f000 f9ba 	bl	800b0fa <prvIsQueueEmpty>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f43f af4d 	beq.w	800ac28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ad94:	f001 feee 	bl	800cb74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad9a:	f000 f8b4 	bl	800af06 <prvGetDisinheritPriorityAfterTimeout>
 800ad9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 f982 	bl	800c0b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adac:	f001 ff12 	bl	800cbd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3738      	adds	r7, #56	; 0x38
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	e000ed04 	.word	0xe000ed04

0800adc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08e      	sub	sp, #56	; 0x38
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	623b      	str	r3, [r7, #32]
}
 800ade8:	bf00      	nop
 800adea:	e7fe      	b.n	800adea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d103      	bne.n	800adfa <xQueueReceiveFromISR+0x3a>
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <xQueueReceiveFromISR+0x3e>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e000      	b.n	800ae00 <xQueueReceiveFromISR+0x40>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61fb      	str	r3, [r7, #28]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae1a:	f001 ff8d 	bl	800cd38 <vPortValidateInterruptPriority>
	__asm volatile
 800ae1e:	f3ef 8211 	mrs	r2, BASEPRI
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	61ba      	str	r2, [r7, #24]
 800ae34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d02f      	beq.n	800aea6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae54:	f000 f8d9 	bl	800b00a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	1e5a      	subs	r2, r3, #1
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae68:	d112      	bne.n	800ae90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d016      	beq.n	800aea0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	3310      	adds	r3, #16
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fe68 	bl	800bb4c <xTaskRemoveFromEventList>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00e      	beq.n	800aea0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e007      	b.n	800aea0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae94:	3301      	adds	r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	b25a      	sxtb	r2, r3
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aea0:	2301      	movs	r3, #1
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
 800aea4:	e001      	b.n	800aeaa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f383 8811 	msr	BASEPRI, r3
}
 800aeb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3738      	adds	r7, #56	; 0x38
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <vQueueDelete+0x28>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60bb      	str	r3, [r7, #8]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f95f 	bl	800b1ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d102      	bne.n	800aefe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f002 f829 	bl	800cf50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af06:	b480      	push	{r7}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af20:	60fb      	str	r3, [r7, #12]
 800af22:	e001      	b.n	800af28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af28:	68fb      	ldr	r3, [r7, #12]
	}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10d      	bne.n	800af70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d14d      	bne.n	800aff8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	4618      	mov	r0, r3
 800af62:	f001 f837 	bl	800bfd4 <xTaskPriorityDisinherit>
 800af66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	609a      	str	r2, [r3, #8]
 800af6e:	e043      	b.n	800aff8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d119      	bne.n	800afaa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6858      	ldr	r0, [r3, #4]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	461a      	mov	r2, r3
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	f002 f927 	bl	800d1d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685a      	ldr	r2, [r3, #4]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d32b      	bcc.n	800aff8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	605a      	str	r2, [r3, #4]
 800afa8:	e026      	b.n	800aff8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68d8      	ldr	r0, [r3, #12]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb2:	461a      	mov	r2, r3
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	f002 f90d 	bl	800d1d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	425b      	negs	r3, r3
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d207      	bcs.n	800afe6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	689a      	ldr	r2, [r3, #8]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	425b      	negs	r3, r3
 800afe0:	441a      	add	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d105      	bne.n	800aff8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b000:	697b      	ldr	r3, [r7, #20]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d018      	beq.n	800b04e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	441a      	add	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	429a      	cmp	r2, r3
 800b034:	d303      	bcc.n	800b03e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68d9      	ldr	r1, [r3, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	461a      	mov	r2, r3
 800b048:	6838      	ldr	r0, [r7, #0]
 800b04a:	f002 f8c3 	bl	800d1d4 <memcpy>
	}
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b05e:	f001 fd89 	bl	800cb74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b068:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b06a:	e011      	b.n	800b090 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d012      	beq.n	800b09a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3324      	adds	r3, #36	; 0x24
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fd67 	bl	800bb4c <xTaskRemoveFromEventList>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b084:	f000 fe3e 	bl	800bd04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	dce9      	bgt.n	800b06c <prvUnlockQueue+0x16>
 800b098:	e000      	b.n	800b09c <prvUnlockQueue+0x46>
					break;
 800b09a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	22ff      	movs	r2, #255	; 0xff
 800b0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0a4:	f001 fd96 	bl	800cbd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0a8:	f001 fd64 	bl	800cb74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0b4:	e011      	b.n	800b0da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d012      	beq.n	800b0e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3310      	adds	r3, #16
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fd42 	bl	800bb4c <xTaskRemoveFromEventList>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0ce:	f000 fe19 	bl	800bd04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dce9      	bgt.n	800b0b6 <prvUnlockQueue+0x60>
 800b0e2:	e000      	b.n	800b0e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	22ff      	movs	r2, #255	; 0xff
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0ee:	f001 fd71 	bl	800cbd4 <vPortExitCritical>
}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b102:	f001 fd37 	bl	800cb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b10e:	2301      	movs	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e001      	b.n	800b118 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b118:	f001 fd5c 	bl	800cbd4 <vPortExitCritical>

	return xReturn;
 800b11c:	68fb      	ldr	r3, [r7, #12]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b12e:	f001 fd21 	bl	800cb74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d102      	bne.n	800b144 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b13e:	2301      	movs	r3, #1
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e001      	b.n	800b148 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b148:	f001 fd44 	bl	800cbd4 <vPortExitCritical>

	return xReturn;
 800b14c:	68fb      	ldr	r3, [r7, #12]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	e014      	b.n	800b192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b168:	4a0f      	ldr	r2, [pc, #60]	; (800b1a8 <vQueueAddToRegistry+0x50>)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b174:	490c      	ldr	r1, [pc, #48]	; (800b1a8 <vQueueAddToRegistry+0x50>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b17e:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <vQueueAddToRegistry+0x50>)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	4413      	add	r3, r2
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b18a:	e006      	b.n	800b19a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b07      	cmp	r3, #7
 800b196:	d9e7      	bls.n	800b168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20003db0 	.word	0x20003db0

0800b1ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e016      	b.n	800b1e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b1ba:	4a10      	ldr	r2, [pc, #64]	; (800b1fc <vQueueUnregisterQueue+0x50>)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d10b      	bne.n	800b1e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b1ca:	4a0c      	ldr	r2, [pc, #48]	; (800b1fc <vQueueUnregisterQueue+0x50>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b1d4:	4a09      	ldr	r2, [pc, #36]	; (800b1fc <vQueueUnregisterQueue+0x50>)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	00db      	lsls	r3, r3, #3
 800b1da:	4413      	add	r3, r2
 800b1dc:	2200      	movs	r2, #0
 800b1de:	605a      	str	r2, [r3, #4]
				break;
 800b1e0:	e006      	b.n	800b1f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b07      	cmp	r3, #7
 800b1ec:	d9e5      	bls.n	800b1ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b1ee:	bf00      	nop
 800b1f0:	bf00      	nop
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	20003db0 	.word	0x20003db0

0800b200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b210:	f001 fcb0 	bl	800cb74 <vPortEnterCritical>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b220:	d103      	bne.n	800b22a <vQueueWaitForMessageRestricted+0x2a>
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b230:	b25b      	sxtb	r3, r3
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b236:	d103      	bne.n	800b240 <vQueueWaitForMessageRestricted+0x40>
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b240:	f001 fcc8 	bl	800cbd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d106      	bne.n	800b25a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	3324      	adds	r3, #36	; 0x24
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fc4d 	bl	800baf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b25a:	6978      	ldr	r0, [r7, #20]
 800b25c:	f7ff fefb 	bl	800b056 <prvUnlockQueue>
	}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08e      	sub	sp, #56	; 0x38
 800b26c:	af04      	add	r7, sp, #16
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	623b      	str	r3, [r7, #32]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <xTaskCreateStatic+0x46>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	61fb      	str	r3, [r7, #28]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2ae:	235c      	movs	r3, #92	; 0x5c
 800b2b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2b5c      	cmp	r3, #92	; 0x5c
 800b2b6:	d00a      	beq.n	800b2ce <xTaskCreateStatic+0x66>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	61bb      	str	r3, [r7, #24]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d01e      	beq.n	800b314 <xTaskCreateStatic+0xac>
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01b      	beq.n	800b314 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	9302      	str	r3, [sp, #8]
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 f850 	bl	800b3ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b30c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b30e:	f000 f8dd 	bl	800b4cc <prvAddNewTaskToReadyList>
 800b312:	e001      	b.n	800b318 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b322:	b580      	push	{r7, lr}
 800b324:	b08c      	sub	sp, #48	; 0x30
 800b326:	af04      	add	r7, sp, #16
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	603b      	str	r3, [r7, #0]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4618      	mov	r0, r3
 800b338:	f001 fd3e 	bl	800cdb8 <pvPortMalloc>
 800b33c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00e      	beq.n	800b362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b344:	205c      	movs	r0, #92	; 0x5c
 800b346:	f001 fd37 	bl	800cdb8 <pvPortMalloc>
 800b34a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	631a      	str	r2, [r3, #48]	; 0x30
 800b358:	e005      	b.n	800b366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b35a:	6978      	ldr	r0, [r7, #20]
 800b35c:	f001 fdf8 	bl	800cf50 <vPortFree>
 800b360:	e001      	b.n	800b366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d017      	beq.n	800b39c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b374:	88fa      	ldrh	r2, [r7, #6]
 800b376:	2300      	movs	r3, #0
 800b378:	9303      	str	r3, [sp, #12]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	9302      	str	r3, [sp, #8]
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	9301      	str	r3, [sp, #4]
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 f80e 	bl	800b3ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b390:	69f8      	ldr	r0, [r7, #28]
 800b392:	f000 f89b 	bl	800b4cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b396:	2301      	movs	r3, #1
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	e002      	b.n	800b3a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	21a5      	movs	r1, #165	; 0xa5
 800b3c6:	f001 ff13 	bl	800d1f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f023 0307 	bic.w	r3, r3, #7
 800b3e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	617b      	str	r3, [r7, #20]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d01f      	beq.n	800b44a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	e012      	b.n	800b436 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	7819      	ldrb	r1, [r3, #0]
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	3334      	adds	r3, #52	; 0x34
 800b420:	460a      	mov	r2, r1
 800b422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d006      	beq.n	800b43e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	3301      	adds	r3, #1
 800b434:	61fb      	str	r3, [r7, #28]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	2b0f      	cmp	r3, #15
 800b43a:	d9e9      	bls.n	800b410 <prvInitialiseNewTask+0x64>
 800b43c:	e000      	b.n	800b440 <prvInitialiseNewTask+0x94>
			{
				break;
 800b43e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b448:	e003      	b.n	800b452 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	2b37      	cmp	r3, #55	; 0x37
 800b456:	d901      	bls.n	800b45c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b458:	2337      	movs	r3, #55	; 0x37
 800b45a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	2200      	movs	r2, #0
 800b46c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	3304      	adds	r3, #4
 800b472:	4618      	mov	r0, r3
 800b474:	f7fe fe56 	bl	800a124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	3318      	adds	r3, #24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fe fe51 	bl	800a124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	2200      	movs	r2, #0
 800b49c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	68f9      	ldr	r1, [r7, #12]
 800b4aa:	69b8      	ldr	r0, [r7, #24]
 800b4ac:	f001 fa38 	bl	800c920 <pxPortInitialiseStack>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c2:	bf00      	nop
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4d4:	f001 fb4e 	bl	800cb74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4d8:	4b2d      	ldr	r3, [pc, #180]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	4a2c      	ldr	r2, [pc, #176]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4e2:	4b2c      	ldr	r3, [pc, #176]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4ea:	4a2a      	ldr	r2, [pc, #168]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4f0:	4b27      	ldr	r3, [pc, #156]	; (800b590 <prvAddNewTaskToReadyList+0xc4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d110      	bne.n	800b51a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4f8:	f000 fc28 	bl	800bd4c <prvInitialiseTaskLists>
 800b4fc:	e00d      	b.n	800b51a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4fe:	4b26      	ldr	r3, [pc, #152]	; (800b598 <prvAddNewTaskToReadyList+0xcc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b506:	4b23      	ldr	r3, [pc, #140]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b510:	429a      	cmp	r2, r3
 800b512:	d802      	bhi.n	800b51a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b514:	4a1f      	ldr	r2, [pc, #124]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b51a:	4b20      	ldr	r3, [pc, #128]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	4a1e      	ldr	r2, [pc, #120]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b524:	4b1d      	ldr	r3, [pc, #116]	; (800b59c <prvAddNewTaskToReadyList+0xd0>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b530:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <prvAddNewTaskToReadyList+0xd4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <prvAddNewTaskToReadyList+0x74>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	4a18      	ldr	r2, [pc, #96]	; (800b5a0 <prvAddNewTaskToReadyList+0xd4>)
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <prvAddNewTaskToReadyList+0xd8>)
 800b54e:	441a      	add	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7fe fdf1 	bl	800a13e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b55c:	f001 fb3a 	bl	800cbd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <prvAddNewTaskToReadyList+0xcc>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00e      	beq.n	800b586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <prvAddNewTaskToReadyList+0xc8>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	429a      	cmp	r2, r3
 800b574:	d207      	bcs.n	800b586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <prvAddNewTaskToReadyList+0xdc>)
 800b578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20000c84 	.word	0x20000c84
 800b594:	200007b0 	.word	0x200007b0
 800b598:	20000c90 	.word	0x20000c90
 800b59c:	20000ca0 	.word	0x20000ca0
 800b5a0:	20000c8c 	.word	0x20000c8c
 800b5a4:	200007b4 	.word	0x200007b4
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <vTaskDelay+0x60>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <vTaskDelay+0x30>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	60bb      	str	r3, [r7, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5dc:	f000 f880 	bl	800b6e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fdfa 	bl	800c1dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5e8:	f000 f888 	bl	800b6fc <xTaskResumeAll>
 800b5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d107      	bne.n	800b604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <vTaskDelay+0x64>)
 800b5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b604:	bf00      	nop
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000cac 	.word	0x20000cac
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b622:	463a      	mov	r2, r7
 800b624:	1d39      	adds	r1, r7, #4
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fd26 	bl	800a07c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	9202      	str	r2, [sp, #8]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	2300      	movs	r3, #0
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	460a      	mov	r2, r1
 800b642:	4921      	ldr	r1, [pc, #132]	; (800b6c8 <vTaskStartScheduler+0xb4>)
 800b644:	4821      	ldr	r0, [pc, #132]	; (800b6cc <vTaskStartScheduler+0xb8>)
 800b646:	f7ff fe0f 	bl	800b268 <xTaskCreateStatic>
 800b64a:	4603      	mov	r3, r0
 800b64c:	4a20      	ldr	r2, [pc, #128]	; (800b6d0 <vTaskStartScheduler+0xbc>)
 800b64e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b650:	4b1f      	ldr	r3, [pc, #124]	; (800b6d0 <vTaskStartScheduler+0xbc>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b658:	2301      	movs	r3, #1
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e001      	b.n	800b662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b65e:	2300      	movs	r3, #0
 800b660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d102      	bne.n	800b66e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b668:	f000 fe0c 	bl	800c284 <xTimerCreateTimerTask>
 800b66c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d116      	bne.n	800b6a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	613b      	str	r3, [r7, #16]
}
 800b686:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b688:	4b12      	ldr	r3, [pc, #72]	; (800b6d4 <vTaskStartScheduler+0xc0>)
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b68e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b690:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <vTaskStartScheduler+0xc4>)
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <vTaskStartScheduler+0xc8>)
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b69c:	f001 f9c8 	bl	800ca30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6a0:	e00e      	b.n	800b6c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a8:	d10a      	bne.n	800b6c0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	60fb      	str	r3, [r7, #12]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <vTaskStartScheduler+0xaa>
}
 800b6c0:	bf00      	nop
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	0800d2bc 	.word	0x0800d2bc
 800b6cc:	0800bd1d 	.word	0x0800bd1d
 800b6d0:	20000ca8 	.word	0x20000ca8
 800b6d4:	20000ca4 	.word	0x20000ca4
 800b6d8:	20000c90 	.word	0x20000c90
 800b6dc:	20000c88 	.word	0x20000c88

0800b6e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <vTaskSuspendAll+0x18>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	4a03      	ldr	r2, [pc, #12]	; (800b6f8 <vTaskSuspendAll+0x18>)
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6ee:	bf00      	nop
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20000cac 	.word	0x20000cac

0800b6fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b706:	2300      	movs	r3, #0
 800b708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b70a:	4b42      	ldr	r3, [pc, #264]	; (800b814 <xTaskResumeAll+0x118>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <xTaskResumeAll+0x2c>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	603b      	str	r3, [r7, #0]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b728:	f001 fa24 	bl	800cb74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b72c:	4b39      	ldr	r3, [pc, #228]	; (800b814 <xTaskResumeAll+0x118>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3b01      	subs	r3, #1
 800b732:	4a38      	ldr	r2, [pc, #224]	; (800b814 <xTaskResumeAll+0x118>)
 800b734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b736:	4b37      	ldr	r3, [pc, #220]	; (800b814 <xTaskResumeAll+0x118>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d162      	bne.n	800b804 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b73e:	4b36      	ldr	r3, [pc, #216]	; (800b818 <xTaskResumeAll+0x11c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d05e      	beq.n	800b804 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b746:	e02f      	b.n	800b7a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b748:	4b34      	ldr	r3, [pc, #208]	; (800b81c <xTaskResumeAll+0x120>)
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3318      	adds	r3, #24
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe fd4f 	bl	800a1f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fd4a 	bl	800a1f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	4b2d      	ldr	r3, [pc, #180]	; (800b820 <xTaskResumeAll+0x124>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d903      	bls.n	800b778 <xTaskResumeAll+0x7c>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	4a2a      	ldr	r2, [pc, #168]	; (800b820 <xTaskResumeAll+0x124>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4a27      	ldr	r2, [pc, #156]	; (800b824 <xTaskResumeAll+0x128>)
 800b786:	441a      	add	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3304      	adds	r3, #4
 800b78c:	4619      	mov	r1, r3
 800b78e:	4610      	mov	r0, r2
 800b790:	f7fe fcd5 	bl	800a13e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4b23      	ldr	r3, [pc, #140]	; (800b828 <xTaskResumeAll+0x12c>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d302      	bcc.n	800b7a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7a2:	4b22      	ldr	r3, [pc, #136]	; (800b82c <xTaskResumeAll+0x130>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <xTaskResumeAll+0x120>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1cb      	bne.n	800b748 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7b6:	f000 fb67 	bl	800be88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7ba:	4b1d      	ldr	r3, [pc, #116]	; (800b830 <xTaskResumeAll+0x134>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d010      	beq.n	800b7e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7c6:	f000 f859 	bl	800b87c <xTaskIncrementTick>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7d0:	4b16      	ldr	r3, [pc, #88]	; (800b82c <xTaskResumeAll+0x130>)
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1f1      	bne.n	800b7c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7e2:	4b13      	ldr	r3, [pc, #76]	; (800b830 <xTaskResumeAll+0x134>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7e8:	4b10      	ldr	r3, [pc, #64]	; (800b82c <xTaskResumeAll+0x130>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d009      	beq.n	800b804 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <xTaskResumeAll+0x138>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b804:	f001 f9e6 	bl	800cbd4 <vPortExitCritical>

	return xAlreadyYielded;
 800b808:	68bb      	ldr	r3, [r7, #8]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20000cac 	.word	0x20000cac
 800b818:	20000c84 	.word	0x20000c84
 800b81c:	20000c44 	.word	0x20000c44
 800b820:	20000c8c 	.word	0x20000c8c
 800b824:	200007b4 	.word	0x200007b4
 800b828:	200007b0 	.word	0x200007b0
 800b82c:	20000c98 	.word	0x20000c98
 800b830:	20000c94 	.word	0x20000c94
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b83e:	4b05      	ldr	r3, [pc, #20]	; (800b854 <xTaskGetTickCount+0x1c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b844:	687b      	ldr	r3, [r7, #4]
}
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20000c88 	.word	0x20000c88

0800b858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b85e:	f001 fa6b 	bl	800cd38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b862:	2300      	movs	r3, #0
 800b864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b866:	4b04      	ldr	r3, [pc, #16]	; (800b878 <xTaskGetTickCountFromISR+0x20>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b86c:	683b      	ldr	r3, [r7, #0]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20000c88 	.word	0x20000c88

0800b87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b886:	4b4f      	ldr	r3, [pc, #316]	; (800b9c4 <xTaskIncrementTick+0x148>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 808f 	bne.w	800b9ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b890:	4b4d      	ldr	r3, [pc, #308]	; (800b9c8 <xTaskIncrementTick+0x14c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b898:	4a4b      	ldr	r2, [pc, #300]	; (800b9c8 <xTaskIncrementTick+0x14c>)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d120      	bne.n	800b8e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8a4:	4b49      	ldr	r3, [pc, #292]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	603b      	str	r3, [r7, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <xTaskIncrementTick+0x46>
 800b8c4:	4b41      	ldr	r3, [pc, #260]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	4b41      	ldr	r3, [pc, #260]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a3f      	ldr	r2, [pc, #252]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	4a3f      	ldr	r2, [pc, #252]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	4b3e      	ldr	r3, [pc, #248]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	4a3d      	ldr	r2, [pc, #244]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	f000 fad1 	bl	800be88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e6:	4b3c      	ldr	r3, [pc, #240]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d349      	bcc.n	800b984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8f0:	4b36      	ldr	r3, [pc, #216]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d104      	bne.n	800b904 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fa:	4b37      	ldr	r3, [pc, #220]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b900:	601a      	str	r2, [r3, #0]
					break;
 800b902:	e03f      	b.n	800b984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b31      	ldr	r3, [pc, #196]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d203      	bcs.n	800b924 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b91c:	4a2e      	ldr	r2, [pc, #184]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b922:	e02f      	b.n	800b984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fc65 	bl	800a1f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3318      	adds	r3, #24
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fc5c 	bl	800a1f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskIncrementTick+0xd8>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a22      	ldr	r2, [pc, #136]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b962:	441a      	add	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fe fbe7 	bl	800a13e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b974:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d3b8      	bcc.n	800b8f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b97e:	2301      	movs	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b982:	e7b5      	b.n	800b8f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b984:	4b17      	ldr	r3, [pc, #92]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4915      	ldr	r1, [pc, #84]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	440b      	add	r3, r1
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d901      	bls.n	800b9a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9a0:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <xTaskIncrementTick+0x16c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	e004      	b.n	800b9b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	4a0d      	ldr	r2, [pc, #52]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9b8:	697b      	ldr	r3, [r7, #20]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000cac 	.word	0x20000cac
 800b9c8:	20000c88 	.word	0x20000c88
 800b9cc:	20000c3c 	.word	0x20000c3c
 800b9d0:	20000c40 	.word	0x20000c40
 800b9d4:	20000c9c 	.word	0x20000c9c
 800b9d8:	20000ca4 	.word	0x20000ca4
 800b9dc:	20000c8c 	.word	0x20000c8c
 800b9e0:	200007b4 	.word	0x200007b4
 800b9e4:	200007b0 	.word	0x200007b0
 800b9e8:	20000c98 	.word	0x20000c98
 800b9ec:	20000c94 	.word	0x20000c94

0800b9f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9f6:	4b28      	ldr	r3, [pc, #160]	; (800ba98 <vTaskSwitchContext+0xa8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9fe:	4b27      	ldr	r3, [pc, #156]	; (800ba9c <vTaskSwitchContext+0xac>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba04:	e041      	b.n	800ba8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ba06:	4b25      	ldr	r3, [pc, #148]	; (800ba9c <vTaskSwitchContext+0xac>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0c:	4b24      	ldr	r3, [pc, #144]	; (800baa0 <vTaskSwitchContext+0xb0>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e010      	b.n	800ba36 <vTaskSwitchContext+0x46>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <vTaskSwitchContext+0x40>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <vTaskSwitchContext+0x3e>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	491b      	ldr	r1, [pc, #108]	; (800baa4 <vTaskSwitchContext+0xb4>)
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0e4      	beq.n	800ba14 <vTaskSwitchContext+0x24>
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4a13      	ldr	r2, [pc, #76]	; (800baa4 <vTaskSwitchContext+0xb4>)
 800ba56:	4413      	add	r3, r2
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	605a      	str	r2, [r3, #4]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d104      	bne.n	800ba7a <vTaskSwitchContext+0x8a>
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	685a      	ldr	r2, [r3, #4]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	605a      	str	r2, [r3, #4]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	4a09      	ldr	r2, [pc, #36]	; (800baa8 <vTaskSwitchContext+0xb8>)
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	4a06      	ldr	r2, [pc, #24]	; (800baa0 <vTaskSwitchContext+0xb0>)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6013      	str	r3, [r2, #0]
}
 800ba8a:	bf00      	nop
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	20000cac 	.word	0x20000cac
 800ba9c:	20000c98 	.word	0x20000c98
 800baa0:	20000c8c 	.word	0x20000c8c
 800baa4:	200007b4 	.word	0x200007b4
 800baa8:	200007b0 	.word	0x200007b0

0800baac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	60fb      	str	r3, [r7, #12]
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bad2:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <vTaskPlaceOnEventList+0x44>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3318      	adds	r3, #24
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7fe fb53 	bl	800a186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bae0:	2101      	movs	r1, #1
 800bae2:	6838      	ldr	r0, [r7, #0]
 800bae4:	f000 fb7a 	bl	800c1dc <prvAddCurrentTaskToDelayedList>
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	200007b0 	.word	0x200007b0

0800baf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	617b      	str	r3, [r7, #20]
}
 800bb18:	bf00      	nop
 800bb1a:	e7fe      	b.n	800bb1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3318      	adds	r3, #24
 800bb22:	4619      	mov	r1, r3
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7fe fb0a 	bl	800a13e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb36:	6879      	ldr	r1, [r7, #4]
 800bb38:	68b8      	ldr	r0, [r7, #8]
 800bb3a:	f000 fb4f 	bl	800c1dc <prvAddCurrentTaskToDelayedList>
	}
 800bb3e:	bf00      	nop
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	200007b0 	.word	0x200007b0

0800bb4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	60fb      	str	r3, [r7, #12]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe fb3b 	bl	800a1f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb82:	4b1e      	ldr	r3, [pc, #120]	; (800bbfc <xTaskRemoveFromEventList+0xb0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d11d      	bne.n	800bbc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe fb32 	bl	800a1f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb98:	4b19      	ldr	r3, [pc, #100]	; (800bc00 <xTaskRemoveFromEventList+0xb4>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d903      	bls.n	800bba8 <xTaskRemoveFromEventList+0x5c>
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	4a16      	ldr	r2, [pc, #88]	; (800bc00 <xTaskRemoveFromEventList+0xb4>)
 800bba6:	6013      	str	r3, [r2, #0]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4a13      	ldr	r2, [pc, #76]	; (800bc04 <xTaskRemoveFromEventList+0xb8>)
 800bbb6:	441a      	add	r2, r3
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f7fe fabd 	bl	800a13e <vListInsertEnd>
 800bbc4:	e005      	b.n	800bbd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	3318      	adds	r3, #24
 800bbca:	4619      	mov	r1, r3
 800bbcc:	480e      	ldr	r0, [pc, #56]	; (800bc08 <xTaskRemoveFromEventList+0xbc>)
 800bbce:	f7fe fab6 	bl	800a13e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <xTaskRemoveFromEventList+0xc0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d905      	bls.n	800bbec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbe4:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <xTaskRemoveFromEventList+0xc4>)
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	e001      	b.n	800bbf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbf0:	697b      	ldr	r3, [r7, #20]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000cac 	.word	0x20000cac
 800bc00:	20000c8c 	.word	0x20000c8c
 800bc04:	200007b4 	.word	0x200007b4
 800bc08:	20000c44 	.word	0x20000c44
 800bc0c:	200007b0 	.word	0x200007b0
 800bc10:	20000c98 	.word	0x20000c98

0800bc14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <vTaskInternalSetTimeOutState+0x24>)
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc24:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <vTaskInternalSetTimeOutState+0x28>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	605a      	str	r2, [r3, #4]
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20000c9c 	.word	0x20000c9c
 800bc3c:	20000c88 	.word	0x20000c88

0800bc40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	613b      	str	r3, [r7, #16]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	60fb      	str	r3, [r7, #12]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc82:	f000 ff77 	bl	800cb74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc86:	4b1d      	ldr	r3, [pc, #116]	; (800bcfc <xTaskCheckForTimeOut+0xbc>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc9e:	d102      	bne.n	800bca6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	61fb      	str	r3, [r7, #28]
 800bca4:	e023      	b.n	800bcee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <xTaskCheckForTimeOut+0xc0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d007      	beq.n	800bcc2 <xTaskCheckForTimeOut+0x82>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d302      	bcc.n	800bcc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	61fb      	str	r3, [r7, #28]
 800bcc0:	e015      	b.n	800bcee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d20b      	bcs.n	800bce4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff9b 	bl	800bc14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	61fb      	str	r3, [r7, #28]
 800bce2:	e004      	b.n	800bcee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcea:	2301      	movs	r3, #1
 800bcec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcee:	f000 ff71 	bl	800cbd4 <vPortExitCritical>

	return xReturn;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3720      	adds	r7, #32
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	20000c88 	.word	0x20000c88
 800bd00:	20000c9c 	.word	0x20000c9c

0800bd04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd08:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <vTaskMissedYield+0x14>)
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	20000c98 	.word	0x20000c98

0800bd1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd24:	f000 f852 	bl	800bdcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd28:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <prvIdleTask+0x28>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d9f9      	bls.n	800bd24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd30:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <prvIdleTask+0x2c>)
 800bd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd40:	e7f0      	b.n	800bd24 <prvIdleTask+0x8>
 800bd42:	bf00      	nop
 800bd44:	200007b4 	.word	0x200007b4
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd52:	2300      	movs	r3, #0
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	e00c      	b.n	800bd72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4a12      	ldr	r2, [pc, #72]	; (800bdac <prvInitialiseTaskLists+0x60>)
 800bd64:	4413      	add	r3, r2
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe f9bc 	bl	800a0e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	607b      	str	r3, [r7, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b37      	cmp	r3, #55	; 0x37
 800bd76:	d9ef      	bls.n	800bd58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd78:	480d      	ldr	r0, [pc, #52]	; (800bdb0 <prvInitialiseTaskLists+0x64>)
 800bd7a:	f7fe f9b3 	bl	800a0e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd7e:	480d      	ldr	r0, [pc, #52]	; (800bdb4 <prvInitialiseTaskLists+0x68>)
 800bd80:	f7fe f9b0 	bl	800a0e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd84:	480c      	ldr	r0, [pc, #48]	; (800bdb8 <prvInitialiseTaskLists+0x6c>)
 800bd86:	f7fe f9ad 	bl	800a0e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd8a:	480c      	ldr	r0, [pc, #48]	; (800bdbc <prvInitialiseTaskLists+0x70>)
 800bd8c:	f7fe f9aa 	bl	800a0e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd90:	480b      	ldr	r0, [pc, #44]	; (800bdc0 <prvInitialiseTaskLists+0x74>)
 800bd92:	f7fe f9a7 	bl	800a0e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd96:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <prvInitialiseTaskLists+0x78>)
 800bd98:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <prvInitialiseTaskLists+0x64>)
 800bd9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <prvInitialiseTaskLists+0x7c>)
 800bd9e:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <prvInitialiseTaskLists+0x68>)
 800bda0:	601a      	str	r2, [r3, #0]
}
 800bda2:	bf00      	nop
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	200007b4 	.word	0x200007b4
 800bdb0:	20000c14 	.word	0x20000c14
 800bdb4:	20000c28 	.word	0x20000c28
 800bdb8:	20000c44 	.word	0x20000c44
 800bdbc:	20000c58 	.word	0x20000c58
 800bdc0:	20000c70 	.word	0x20000c70
 800bdc4:	20000c3c 	.word	0x20000c3c
 800bdc8:	20000c40 	.word	0x20000c40

0800bdcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdd2:	e019      	b.n	800be08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdd4:	f000 fece 	bl	800cb74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd8:	4b10      	ldr	r3, [pc, #64]	; (800be1c <prvCheckTasksWaitingTermination+0x50>)
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fa07 	bl	800a1f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <prvCheckTasksWaitingTermination+0x54>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	4a0b      	ldr	r2, [pc, #44]	; (800be20 <prvCheckTasksWaitingTermination+0x54>)
 800bdf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdf4:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <prvCheckTasksWaitingTermination+0x58>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	4a0a      	ldr	r2, [pc, #40]	; (800be24 <prvCheckTasksWaitingTermination+0x58>)
 800bdfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdfe:	f000 fee9 	bl	800cbd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f810 	bl	800be28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be08:	4b06      	ldr	r3, [pc, #24]	; (800be24 <prvCheckTasksWaitingTermination+0x58>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e1      	bne.n	800bdd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be10:	bf00      	nop
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000c58 	.word	0x20000c58
 800be20:	20000c84 	.word	0x20000c84
 800be24:	20000c6c 	.word	0x20000c6c

0800be28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be36:	2b00      	cmp	r3, #0
 800be38:	d108      	bne.n	800be4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 f886 	bl	800cf50 <vPortFree>
				vPortFree( pxTCB );
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 f883 	bl	800cf50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be4a:	e018      	b.n	800be7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be52:	2b01      	cmp	r3, #1
 800be54:	d103      	bne.n	800be5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 f87a 	bl	800cf50 <vPortFree>
	}
 800be5c:	e00f      	b.n	800be7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be64:	2b02      	cmp	r3, #2
 800be66:	d00a      	beq.n	800be7e <prvDeleteTCB+0x56>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	60fb      	str	r3, [r7, #12]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <prvDeleteTCB+0x54>
	}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be8e:	4b0c      	ldr	r3, [pc, #48]	; (800bec0 <prvResetNextTaskUnblockTime+0x38>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d104      	bne.n	800bea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <prvResetNextTaskUnblockTime+0x3c>)
 800be9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bea0:	e008      	b.n	800beb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea2:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <prvResetNextTaskUnblockTime+0x38>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	4a04      	ldr	r2, [pc, #16]	; (800bec4 <prvResetNextTaskUnblockTime+0x3c>)
 800beb2:	6013      	str	r3, [r2, #0]
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	20000c3c 	.word	0x20000c3c
 800bec4:	20000ca4 	.word	0x20000ca4

0800bec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bece:	4b0b      	ldr	r3, [pc, #44]	; (800befc <xTaskGetSchedulerState+0x34>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d102      	bne.n	800bedc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bed6:	2301      	movs	r3, #1
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e008      	b.n	800beee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <xTaskGetSchedulerState+0x38>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bee4:	2302      	movs	r3, #2
 800bee6:	607b      	str	r3, [r7, #4]
 800bee8:	e001      	b.n	800beee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800beee:	687b      	ldr	r3, [r7, #4]
	}
 800bef0:	4618      	mov	r0, r3
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	20000c90 	.word	0x20000c90
 800bf00:	20000cac 	.word	0x20000cac

0800bf04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d051      	beq.n	800bfbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	4b2a      	ldr	r3, [pc, #168]	; (800bfc8 <xTaskPriorityInherit+0xc4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d241      	bcs.n	800bfac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	db06      	blt.n	800bf3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf30:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <xTaskPriorityInherit+0xc4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6959      	ldr	r1, [r3, #20]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4a1f      	ldr	r2, [pc, #124]	; (800bfcc <xTaskPriorityInherit+0xc8>)
 800bf50:	4413      	add	r3, r2
 800bf52:	4299      	cmp	r1, r3
 800bf54:	d122      	bne.n	800bf9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe f94c 	bl	800a1f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf60:	4b19      	ldr	r3, [pc, #100]	; (800bfc8 <xTaskPriorityInherit+0xc4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	4b18      	ldr	r3, [pc, #96]	; (800bfd0 <xTaskPriorityInherit+0xcc>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d903      	bls.n	800bf7e <xTaskPriorityInherit+0x7a>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	4a15      	ldr	r2, [pc, #84]	; (800bfd0 <xTaskPriorityInherit+0xcc>)
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf82:	4613      	mov	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4a10      	ldr	r2, [pc, #64]	; (800bfcc <xTaskPriorityInherit+0xc8>)
 800bf8c:	441a      	add	r2, r3
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f7fe f8d2 	bl	800a13e <vListInsertEnd>
 800bf9a:	e004      	b.n	800bfa6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <xTaskPriorityInherit+0xc4>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e008      	b.n	800bfbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <xTaskPriorityInherit+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d201      	bcs.n	800bfbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
	}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	200007b0 	.word	0x200007b0
 800bfcc:	200007b4 	.word	0x200007b4
 800bfd0:	20000c8c 	.word	0x20000c8c

0800bfd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d056      	beq.n	800c098 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfea:	4b2e      	ldr	r3, [pc, #184]	; (800c0a4 <xTaskPriorityDisinherit+0xd0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d00a      	beq.n	800c00a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	60fb      	str	r3, [r7, #12]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10a      	bne.n	800c028 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60bb      	str	r3, [r7, #8]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c02c:	1e5a      	subs	r2, r3, #1
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d02c      	beq.n	800c098 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c042:	2b00      	cmp	r3, #0
 800c044:	d128      	bne.n	800c098 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3304      	adds	r3, #4
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe f8d4 	bl	800a1f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c068:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <xTaskPriorityDisinherit+0xd4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d903      	bls.n	800c078 <xTaskPriorityDisinherit+0xa4>
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	4a0c      	ldr	r2, [pc, #48]	; (800c0a8 <xTaskPriorityDisinherit+0xd4>)
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07c:	4613      	mov	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4a09      	ldr	r2, [pc, #36]	; (800c0ac <xTaskPriorityDisinherit+0xd8>)
 800c086:	441a      	add	r2, r3
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4619      	mov	r1, r3
 800c08e:	4610      	mov	r0, r2
 800c090:	f7fe f855 	bl	800a13e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c098:	697b      	ldr	r3, [r7, #20]
	}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	200007b0 	.word	0x200007b0
 800c0a8:	20000c8c 	.word	0x20000c8c
 800c0ac:	200007b4 	.word	0x200007b4

0800c0b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b088      	sub	sp, #32
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d06a      	beq.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	60fb      	str	r3, [r7, #12]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d902      	bls.n	800c0f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	61fb      	str	r3, [r7, #28]
 800c0f4:	e002      	b.n	800c0fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	69fa      	ldr	r2, [r7, #28]
 800c102:	429a      	cmp	r2, r3
 800c104:	d04b      	beq.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d146      	bne.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c110:	4b25      	ldr	r3, [pc, #148]	; (800c1a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	429a      	cmp	r2, r3
 800c118:	d10a      	bne.n	800c130 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60bb      	str	r3, [r7, #8]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	db04      	blt.n	800c14e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	6959      	ldr	r1, [r3, #20]
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	4613      	mov	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4a13      	ldr	r2, [pc, #76]	; (800c1ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c15e:	4413      	add	r3, r2
 800c160:	4299      	cmp	r1, r3
 800c162:	d11c      	bne.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	3304      	adds	r3, #4
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe f845 	bl	800a1f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d903      	bls.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	4a0c      	ldr	r2, [pc, #48]	; (800c1b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4a07      	ldr	r2, [pc, #28]	; (800c1ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c190:	441a      	add	r2, r3
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7fd ffd0 	bl	800a13e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c19e:	bf00      	nop
 800c1a0:	3720      	adds	r7, #32
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	200007b0 	.word	0x200007b0
 800c1ac:	200007b4 	.word	0x200007b4
 800c1b0:	20000c8c 	.word	0x20000c8c

0800c1b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1b8:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1c0:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1c6:	3201      	adds	r2, #1
 800c1c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c1ca:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
	}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	200007b0 	.word	0x200007b0

0800c1dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1e6:	4b21      	ldr	r3, [pc, #132]	; (800c26c <prvAddCurrentTaskToDelayedList+0x90>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ec:	4b20      	ldr	r3, [pc, #128]	; (800c270 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe f800 	bl	800a1f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1fe:	d10a      	bne.n	800c216 <prvAddCurrentTaskToDelayedList+0x3a>
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d007      	beq.n	800c216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c206:	4b1a      	ldr	r3, [pc, #104]	; (800c270 <prvAddCurrentTaskToDelayedList+0x94>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4619      	mov	r1, r3
 800c20e:	4819      	ldr	r0, [pc, #100]	; (800c274 <prvAddCurrentTaskToDelayedList+0x98>)
 800c210:	f7fd ff95 	bl	800a13e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c214:	e026      	b.n	800c264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4413      	add	r3, r2
 800c21c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c21e:	4b14      	ldr	r3, [pc, #80]	; (800c270 <prvAddCurrentTaskToDelayedList+0x94>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d209      	bcs.n	800c242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <prvAddCurrentTaskToDelayedList+0x94>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	3304      	adds	r3, #4
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7fd ffa3 	bl	800a186 <vListInsert>
}
 800c240:	e010      	b.n	800c264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c242:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	4b0a      	ldr	r3, [pc, #40]	; (800c270 <prvAddCurrentTaskToDelayedList+0x94>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3304      	adds	r3, #4
 800c24c:	4619      	mov	r1, r3
 800c24e:	4610      	mov	r0, r2
 800c250:	f7fd ff99 	bl	800a186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c254:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d202      	bcs.n	800c264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c25e:	4a08      	ldr	r2, [pc, #32]	; (800c280 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	6013      	str	r3, [r2, #0]
}
 800c264:	bf00      	nop
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20000c88 	.word	0x20000c88
 800c270:	200007b0 	.word	0x200007b0
 800c274:	20000c70 	.word	0x20000c70
 800c278:	20000c40 	.word	0x20000c40
 800c27c:	20000c3c 	.word	0x20000c3c
 800c280:	20000ca4 	.word	0x20000ca4

0800c284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08a      	sub	sp, #40	; 0x28
 800c288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c28e:	f000 fb07 	bl	800c8a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c292:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <xTimerCreateTimerTask+0x80>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d021      	beq.n	800c2de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2a2:	1d3a      	adds	r2, r7, #4
 800c2a4:	f107 0108 	add.w	r1, r7, #8
 800c2a8:	f107 030c 	add.w	r3, r7, #12
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd feff 	bl	800a0b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	9202      	str	r2, [sp, #8]
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	2302      	movs	r3, #2
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	460a      	mov	r2, r1
 800c2c4:	4910      	ldr	r1, [pc, #64]	; (800c308 <xTimerCreateTimerTask+0x84>)
 800c2c6:	4811      	ldr	r0, [pc, #68]	; (800c30c <xTimerCreateTimerTask+0x88>)
 800c2c8:	f7fe ffce 	bl	800b268 <xTaskCreateStatic>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	4a10      	ldr	r2, [pc, #64]	; (800c310 <xTimerCreateTimerTask+0x8c>)
 800c2d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <xTimerCreateTimerTask+0x8c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10a      	bne.n	800c2fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	613b      	str	r3, [r7, #16]
}
 800c2f6:	bf00      	nop
 800c2f8:	e7fe      	b.n	800c2f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2fa:	697b      	ldr	r3, [r7, #20]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000ce0 	.word	0x20000ce0
 800c308:	0800d2c4 	.word	0x0800d2c4
 800c30c:	0800c449 	.word	0x0800c449
 800c310:	20000ce4 	.word	0x20000ce4

0800c314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08a      	sub	sp, #40	; 0x28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c322:	2300      	movs	r3, #0
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	623b      	str	r3, [r7, #32]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c342:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <xTimerGenericCommand+0x98>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d02a      	beq.n	800c3a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b05      	cmp	r3, #5
 800c35a:	dc18      	bgt.n	800c38e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c35c:	f7ff fdb4 	bl	800bec8 <xTaskGetSchedulerState>
 800c360:	4603      	mov	r3, r0
 800c362:	2b02      	cmp	r3, #2
 800c364:	d109      	bne.n	800c37a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c366:	4b11      	ldr	r3, [pc, #68]	; (800c3ac <xTimerGenericCommand+0x98>)
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f107 0110 	add.w	r1, r7, #16
 800c36e:	2300      	movs	r3, #0
 800c370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c372:	f7fe f913 	bl	800a59c <xQueueGenericSend>
 800c376:	6278      	str	r0, [r7, #36]	; 0x24
 800c378:	e012      	b.n	800c3a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c37a:	4b0c      	ldr	r3, [pc, #48]	; (800c3ac <xTimerGenericCommand+0x98>)
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	f107 0110 	add.w	r1, r7, #16
 800c382:	2300      	movs	r3, #0
 800c384:	2200      	movs	r2, #0
 800c386:	f7fe f909 	bl	800a59c <xQueueGenericSend>
 800c38a:	6278      	str	r0, [r7, #36]	; 0x24
 800c38c:	e008      	b.n	800c3a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c38e:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <xTimerGenericCommand+0x98>)
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	f107 0110 	add.w	r1, r7, #16
 800c396:	2300      	movs	r3, #0
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	f7fe f9fd 	bl	800a798 <xQueueGenericSendFromISR>
 800c39e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3728      	adds	r7, #40	; 0x28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20000ce0 	.word	0x20000ce0

0800c3b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ba:	4b22      	ldr	r3, [pc, #136]	; (800c444 <prvProcessExpiredTimer+0x94>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fd ff15 	bl	800a1f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d022      	beq.n	800c422 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	699a      	ldr	r2, [r3, #24]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	18d1      	adds	r1, r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	6978      	ldr	r0, [r7, #20]
 800c3ea:	f000 f8d1 	bl	800c590 <prvInsertTimerInActiveList>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d01f      	beq.n	800c434 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	6978      	ldr	r0, [r7, #20]
 800c400:	f7ff ff88 	bl	800c314 <xTimerGenericCommand>
 800c404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d113      	bne.n	800c434 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60fb      	str	r3, [r7, #12]
}
 800c41e:	bf00      	nop
 800c420:	e7fe      	b.n	800c420 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c428:	f023 0301 	bic.w	r3, r3, #1
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	6978      	ldr	r0, [r7, #20]
 800c43a:	4798      	blx	r3
}
 800c43c:	bf00      	nop
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	20000cd8 	.word	0x20000cd8

0800c448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c450:	f107 0308 	add.w	r3, r7, #8
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f857 	bl	800c508 <prvGetNextExpireTime>
 800c45a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	4619      	mov	r1, r3
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f000 f803 	bl	800c46c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c466:	f000 f8d5 	bl	800c614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c46a:	e7f1      	b.n	800c450 <prvTimerTask+0x8>

0800c46c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c476:	f7ff f933 	bl	800b6e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c47a:	f107 0308 	add.w	r3, r7, #8
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 f866 	bl	800c550 <prvSampleTimeNow>
 800c484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d130      	bne.n	800c4ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <prvProcessTimerOrBlockTask+0x3c>
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	429a      	cmp	r2, r3
 800c498:	d806      	bhi.n	800c4a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c49a:	f7ff f92f 	bl	800b6fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c49e:	68f9      	ldr	r1, [r7, #12]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff ff85 	bl	800c3b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4a6:	e024      	b.n	800c4f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d008      	beq.n	800c4c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4ae:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <prvProcessTimerOrBlockTask+0x90>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <prvProcessTimerOrBlockTask+0x50>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e000      	b.n	800c4be <prvProcessTimerOrBlockTask+0x52>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4c0:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <prvProcessTimerOrBlockTask+0x94>)
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f7fe fe97 	bl	800b200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4d2:	f7ff f913 	bl	800b6fc <xTaskResumeAll>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4dc:	4b09      	ldr	r3, [pc, #36]	; (800c504 <prvProcessTimerOrBlockTask+0x98>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
}
 800c4ec:	e001      	b.n	800c4f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4ee:	f7ff f905 	bl	800b6fc <xTaskResumeAll>
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000cdc 	.word	0x20000cdc
 800c500:	20000ce0 	.word	0x20000ce0
 800c504:	e000ed04 	.word	0xe000ed04

0800c508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c510:	4b0e      	ldr	r3, [pc, #56]	; (800c54c <prvGetNextExpireTime+0x44>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <prvGetNextExpireTime+0x16>
 800c51a:	2201      	movs	r2, #1
 800c51c:	e000      	b.n	800c520 <prvGetNextExpireTime+0x18>
 800c51e:	2200      	movs	r2, #0
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d105      	bne.n	800c538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c52c:	4b07      	ldr	r3, [pc, #28]	; (800c54c <prvGetNextExpireTime+0x44>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	e001      	b.n	800c53c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c53c:	68fb      	ldr	r3, [r7, #12]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20000cd8 	.word	0x20000cd8

0800c550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c558:	f7ff f96e 	bl	800b838 <xTaskGetTickCount>
 800c55c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c55e:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <prvSampleTimeNow+0x3c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	429a      	cmp	r2, r3
 800c566:	d205      	bcs.n	800c574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c568:	f000 f936 	bl	800c7d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	e002      	b.n	800c57a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c57a:	4a04      	ldr	r2, [pc, #16]	; (800c58c <prvSampleTimeNow+0x3c>)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c580:	68fb      	ldr	r3, [r7, #12]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000ce8 	.word	0x20000ce8

0800c590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d812      	bhi.n	800c5dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	1ad2      	subs	r2, r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d302      	bcc.n	800c5ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	617b      	str	r3, [r7, #20]
 800c5c8:	e01b      	b.n	800c602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5ca:	4b10      	ldr	r3, [pc, #64]	; (800c60c <prvInsertTimerInActiveList+0x7c>)
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	f7fd fdd6 	bl	800a186 <vListInsert>
 800c5da:	e012      	b.n	800c602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d206      	bcs.n	800c5f2 <prvInsertTimerInActiveList+0x62>
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d302      	bcc.n	800c5f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e007      	b.n	800c602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5f2:	4b07      	ldr	r3, [pc, #28]	; (800c610 <prvInsertTimerInActiveList+0x80>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7fd fdc2 	bl	800a186 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c602:	697b      	ldr	r3, [r7, #20]
}
 800c604:	4618      	mov	r0, r3
 800c606:	3718      	adds	r7, #24
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	20000cdc 	.word	0x20000cdc
 800c610:	20000cd8 	.word	0x20000cd8

0800c614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08e      	sub	sp, #56	; 0x38
 800c618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c61a:	e0ca      	b.n	800c7b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da18      	bge.n	800c654 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c622:	1d3b      	adds	r3, r7, #4
 800c624:	3304      	adds	r3, #4
 800c626:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	61fb      	str	r3, [r7, #28]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c64a:	6850      	ldr	r0, [r2, #4]
 800c64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c64e:	6892      	ldr	r2, [r2, #8]
 800c650:	4611      	mov	r1, r2
 800c652:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	f2c0 80aa 	blt.w	800c7b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d004      	beq.n	800c672 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	3304      	adds	r3, #4
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fd fdc3 	bl	800a1f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c672:	463b      	mov	r3, r7
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff ff6b 	bl	800c550 <prvSampleTimeNow>
 800c67a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b09      	cmp	r3, #9
 800c680:	f200 8097 	bhi.w	800c7b2 <prvProcessReceivedCommands+0x19e>
 800c684:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <prvProcessReceivedCommands+0x78>)
 800c686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68a:	bf00      	nop
 800c68c:	0800c6b5 	.word	0x0800c6b5
 800c690:	0800c6b5 	.word	0x0800c6b5
 800c694:	0800c6b5 	.word	0x0800c6b5
 800c698:	0800c729 	.word	0x0800c729
 800c69c:	0800c73d 	.word	0x0800c73d
 800c6a0:	0800c787 	.word	0x0800c787
 800c6a4:	0800c6b5 	.word	0x0800c6b5
 800c6a8:	0800c6b5 	.word	0x0800c6b5
 800c6ac:	0800c729 	.word	0x0800c729
 800c6b0:	0800c73d 	.word	0x0800c73d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ba:	f043 0301 	orr.w	r3, r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	18d1      	adds	r1, r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d4:	f7ff ff5c 	bl	800c590 <prvInsertTimerInActiveList>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d069      	beq.n	800c7b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05e      	beq.n	800c7b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	441a      	add	r2, r3
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	2300      	movs	r3, #0
 800c702:	2100      	movs	r1, #0
 800c704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c706:	f7ff fe05 	bl	800c314 <xTimerGenericCommand>
 800c70a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d14f      	bne.n	800c7b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	61bb      	str	r3, [r7, #24]
}
 800c724:	bf00      	nop
 800c726:	e7fe      	b.n	800c726 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c72e:	f023 0301 	bic.w	r3, r3, #1
 800c732:	b2da      	uxtb	r2, r3
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c73a:	e03a      	b.n	800c7b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c742:	f043 0301 	orr.w	r3, r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	617b      	str	r3, [r7, #20]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	18d1      	adds	r1, r2, r3
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c780:	f7ff ff06 	bl	800c590 <prvInsertTimerInActiveList>
					break;
 800c784:	e015      	b.n	800c7b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c78c:	f003 0302 	and.w	r3, r3, #2
 800c790:	2b00      	cmp	r3, #0
 800c792:	d103      	bne.n	800c79c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c796:	f000 fbdb 	bl	800cf50 <vPortFree>
 800c79a:	e00a      	b.n	800c7b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a2:	f023 0301 	bic.w	r3, r3, #1
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7ae:	e000      	b.n	800c7b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7b2:	4b08      	ldr	r3, [pc, #32]	; (800c7d4 <prvProcessReceivedCommands+0x1c0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	1d39      	adds	r1, r7, #4
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe f914 	bl	800a9e8 <xQueueReceive>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f47f af2a 	bne.w	800c61c <prvProcessReceivedCommands+0x8>
	}
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	3730      	adds	r7, #48	; 0x30
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20000ce0 	.word	0x20000ce0

0800c7d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7de:	e048      	b.n	800c872 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7e0:	4b2d      	ldr	r3, [pc, #180]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ea:	4b2b      	ldr	r3, [pc, #172]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd fcfd 	bl	800a1f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80c:	f003 0304 	and.w	r3, r3, #4
 800c810:	2b00      	cmp	r3, #0
 800c812:	d02e      	beq.n	800c872 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	4413      	add	r3, r2
 800c81c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	429a      	cmp	r2, r3
 800c824:	d90e      	bls.n	800c844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c832:	4b19      	ldr	r3, [pc, #100]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3304      	adds	r3, #4
 800c83a:	4619      	mov	r1, r3
 800c83c:	4610      	mov	r0, r2
 800c83e:	f7fd fca2 	bl	800a186 <vListInsert>
 800c842:	e016      	b.n	800c872 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c844:	2300      	movs	r3, #0
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	2100      	movs	r1, #0
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff fd60 	bl	800c314 <xTimerGenericCommand>
 800c854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10a      	bne.n	800c872 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	f383 8811 	msr	BASEPRI, r3
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	603b      	str	r3, [r7, #0]
}
 800c86e:	bf00      	nop
 800c870:	e7fe      	b.n	800c870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c872:	4b09      	ldr	r3, [pc, #36]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1b1      	bne.n	800c7e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c87c:	4b06      	ldr	r3, [pc, #24]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c882:	4b06      	ldr	r3, [pc, #24]	; (800c89c <prvSwitchTimerLists+0xc4>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a04      	ldr	r2, [pc, #16]	; (800c898 <prvSwitchTimerLists+0xc0>)
 800c888:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c88a:	4a04      	ldr	r2, [pc, #16]	; (800c89c <prvSwitchTimerLists+0xc4>)
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	6013      	str	r3, [r2, #0]
}
 800c890:	bf00      	nop
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20000cd8 	.word	0x20000cd8
 800c89c:	20000cdc 	.word	0x20000cdc

0800c8a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8a6:	f000 f965 	bl	800cb74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8aa:	4b15      	ldr	r3, [pc, #84]	; (800c900 <prvCheckForValidListAndQueue+0x60>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d120      	bne.n	800c8f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8b2:	4814      	ldr	r0, [pc, #80]	; (800c904 <prvCheckForValidListAndQueue+0x64>)
 800c8b4:	f7fd fc16 	bl	800a0e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8b8:	4813      	ldr	r0, [pc, #76]	; (800c908 <prvCheckForValidListAndQueue+0x68>)
 800c8ba:	f7fd fc13 	bl	800a0e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <prvCheckForValidListAndQueue+0x6c>)
 800c8c0:	4a10      	ldr	r2, [pc, #64]	; (800c904 <prvCheckForValidListAndQueue+0x64>)
 800c8c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8c4:	4b12      	ldr	r3, [pc, #72]	; (800c910 <prvCheckForValidListAndQueue+0x70>)
 800c8c6:	4a10      	ldr	r2, [pc, #64]	; (800c908 <prvCheckForValidListAndQueue+0x68>)
 800c8c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	4b11      	ldr	r3, [pc, #68]	; (800c914 <prvCheckForValidListAndQueue+0x74>)
 800c8d0:	4a11      	ldr	r2, [pc, #68]	; (800c918 <prvCheckForValidListAndQueue+0x78>)
 800c8d2:	2110      	movs	r1, #16
 800c8d4:	200a      	movs	r0, #10
 800c8d6:	f7fd fd21 	bl	800a31c <xQueueGenericCreateStatic>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4a08      	ldr	r2, [pc, #32]	; (800c900 <prvCheckForValidListAndQueue+0x60>)
 800c8de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <prvCheckForValidListAndQueue+0x60>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d005      	beq.n	800c8f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8e8:	4b05      	ldr	r3, [pc, #20]	; (800c900 <prvCheckForValidListAndQueue+0x60>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	490b      	ldr	r1, [pc, #44]	; (800c91c <prvCheckForValidListAndQueue+0x7c>)
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fe fc32 	bl	800b158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f4:	f000 f96e 	bl	800cbd4 <vPortExitCritical>
}
 800c8f8:	bf00      	nop
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20000ce0 	.word	0x20000ce0
 800c904:	20000cb0 	.word	0x20000cb0
 800c908:	20000cc4 	.word	0x20000cc4
 800c90c:	20000cd8 	.word	0x20000cd8
 800c910:	20000cdc 	.word	0x20000cdc
 800c914:	20000d8c 	.word	0x20000d8c
 800c918:	20000cec 	.word	0x20000cec
 800c91c:	0800d2cc 	.word	0x0800d2cc

0800c920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3b04      	subs	r3, #4
 800c930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3b04      	subs	r3, #4
 800c93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	f023 0201 	bic.w	r2, r3, #1
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	3b04      	subs	r3, #4
 800c94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c950:	4a0c      	ldr	r2, [pc, #48]	; (800c984 <pxPortInitialiseStack+0x64>)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3b14      	subs	r3, #20
 800c95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3b04      	subs	r3, #4
 800c966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f06f 0202 	mvn.w	r2, #2
 800c96e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3b20      	subs	r3, #32
 800c974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c976:	68fb      	ldr	r3, [r7, #12]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3714      	adds	r7, #20
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	0800c989 	.word	0x0800c989

0800c988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c992:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <prvTaskExitError+0x54>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c99a:	d00a      	beq.n	800c9b2 <prvTaskExitError+0x2a>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	60fb      	str	r3, [r7, #12]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <prvTaskExitError+0x28>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	60bb      	str	r3, [r7, #8]
}
 800c9c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9c6:	bf00      	nop
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0fc      	beq.n	800c9c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9ce:	bf00      	nop
 800c9d0:	bf00      	nop
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	2000000c 	.word	0x2000000c

0800c9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9e0:	4b07      	ldr	r3, [pc, #28]	; (800ca00 <pxCurrentTCBConst2>)
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ea:	f380 8809 	msr	PSP, r0
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f04f 0000 	mov.w	r0, #0
 800c9f6:	f380 8811 	msr	BASEPRI, r0
 800c9fa:	4770      	bx	lr
 800c9fc:	f3af 8000 	nop.w

0800ca00 <pxCurrentTCBConst2>:
 800ca00:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop

0800ca08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca08:	4808      	ldr	r0, [pc, #32]	; (800ca2c <prvPortStartFirstTask+0x24>)
 800ca0a:	6800      	ldr	r0, [r0, #0]
 800ca0c:	6800      	ldr	r0, [r0, #0]
 800ca0e:	f380 8808 	msr	MSP, r0
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8814 	msr	CONTROL, r0
 800ca1a:	b662      	cpsie	i
 800ca1c:	b661      	cpsie	f
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	df00      	svc	0
 800ca28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca2a:	bf00      	nop
 800ca2c:	e000ed08 	.word	0xe000ed08

0800ca30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca36:	4b46      	ldr	r3, [pc, #280]	; (800cb50 <xPortStartScheduler+0x120>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a46      	ldr	r2, [pc, #280]	; (800cb54 <xPortStartScheduler+0x124>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d10a      	bne.n	800ca56 <xPortStartScheduler+0x26>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	613b      	str	r3, [r7, #16]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca56:	4b3e      	ldr	r3, [pc, #248]	; (800cb50 <xPortStartScheduler+0x120>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a3f      	ldr	r2, [pc, #252]	; (800cb58 <xPortStartScheduler+0x128>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d10a      	bne.n	800ca76 <xPortStartScheduler+0x46>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	60fb      	str	r3, [r7, #12]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca76:	4b39      	ldr	r3, [pc, #228]	; (800cb5c <xPortStartScheduler+0x12c>)
 800ca78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca90:	78fb      	ldrb	r3, [r7, #3]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	4b31      	ldr	r3, [pc, #196]	; (800cb60 <xPortStartScheduler+0x130>)
 800ca9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca9e:	4b31      	ldr	r3, [pc, #196]	; (800cb64 <xPortStartScheduler+0x134>)
 800caa0:	2207      	movs	r2, #7
 800caa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caa4:	e009      	b.n	800caba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800caa6:	4b2f      	ldr	r3, [pc, #188]	; (800cb64 <xPortStartScheduler+0x134>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3b01      	subs	r3, #1
 800caac:	4a2d      	ldr	r2, [pc, #180]	; (800cb64 <xPortStartScheduler+0x134>)
 800caae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	005b      	lsls	r3, r3, #1
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caba:	78fb      	ldrb	r3, [r7, #3]
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cac2:	2b80      	cmp	r3, #128	; 0x80
 800cac4:	d0ef      	beq.n	800caa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cac6:	4b27      	ldr	r3, [pc, #156]	; (800cb64 <xPortStartScheduler+0x134>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1c3 0307 	rsb	r3, r3, #7
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d00a      	beq.n	800cae8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	60bb      	str	r3, [r7, #8]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cae8:	4b1e      	ldr	r3, [pc, #120]	; (800cb64 <xPortStartScheduler+0x134>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	4a1d      	ldr	r2, [pc, #116]	; (800cb64 <xPortStartScheduler+0x134>)
 800caf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <xPortStartScheduler+0x134>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cafa:	4a1a      	ldr	r2, [pc, #104]	; (800cb64 <xPortStartScheduler+0x134>)
 800cafc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb06:	4b18      	ldr	r3, [pc, #96]	; (800cb68 <xPortStartScheduler+0x138>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <xPortStartScheduler+0x138>)
 800cb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb12:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <xPortStartScheduler+0x138>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a14      	ldr	r2, [pc, #80]	; (800cb68 <xPortStartScheduler+0x138>)
 800cb18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb1e:	f000 f8dd 	bl	800ccdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb22:	4b12      	ldr	r3, [pc, #72]	; (800cb6c <xPortStartScheduler+0x13c>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb28:	f000 f8fc 	bl	800cd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb2c:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <xPortStartScheduler+0x140>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a0f      	ldr	r2, [pc, #60]	; (800cb70 <xPortStartScheduler+0x140>)
 800cb32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb38:	f7ff ff66 	bl	800ca08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb3c:	f7fe ff58 	bl	800b9f0 <vTaskSwitchContext>
	prvTaskExitError();
 800cb40:	f7ff ff22 	bl	800c988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	e000ed00 	.word	0xe000ed00
 800cb54:	410fc271 	.word	0x410fc271
 800cb58:	410fc270 	.word	0x410fc270
 800cb5c:	e000e400 	.word	0xe000e400
 800cb60:	20000ddc 	.word	0x20000ddc
 800cb64:	20000de0 	.word	0x20000de0
 800cb68:	e000ed20 	.word	0xe000ed20
 800cb6c:	2000000c 	.word	0x2000000c
 800cb70:	e000ef34 	.word	0xe000ef34

0800cb74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	607b      	str	r3, [r7, #4]
}
 800cb8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <vPortEnterCritical+0x58>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	4a0d      	ldr	r2, [pc, #52]	; (800cbcc <vPortEnterCritical+0x58>)
 800cb96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb98:	4b0c      	ldr	r3, [pc, #48]	; (800cbcc <vPortEnterCritical+0x58>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d10f      	bne.n	800cbc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <vPortEnterCritical+0x5c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	603b      	str	r3, [r7, #0]
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <vPortEnterCritical+0x4a>
	}
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	2000000c 	.word	0x2000000c
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbda:	4b12      	ldr	r3, [pc, #72]	; (800cc24 <vPortExitCritical+0x50>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10a      	bne.n	800cbf8 <vPortExitCritical+0x24>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	607b      	str	r3, [r7, #4]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbf8:	4b0a      	ldr	r3, [pc, #40]	; (800cc24 <vPortExitCritical+0x50>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4a09      	ldr	r2, [pc, #36]	; (800cc24 <vPortExitCritical+0x50>)
 800cc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc02:	4b08      	ldr	r3, [pc, #32]	; (800cc24 <vPortExitCritical+0x50>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d105      	bne.n	800cc16 <vPortExitCritical+0x42>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	f383 8811 	msr	BASEPRI, r3
}
 800cc14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc16:	bf00      	nop
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	2000000c 	.word	0x2000000c
	...

0800cc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc30:	f3ef 8009 	mrs	r0, PSP
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4b15      	ldr	r3, [pc, #84]	; (800cc90 <pxCurrentTCBConst>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f01e 0f10 	tst.w	lr, #16
 800cc40:	bf08      	it	eq
 800cc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc54:	f380 8811 	msr	BASEPRI, r0
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f7fe fec6 	bl	800b9f0 <vTaskSwitchContext>
 800cc64:	f04f 0000 	mov.w	r0, #0
 800cc68:	f380 8811 	msr	BASEPRI, r0
 800cc6c:	bc09      	pop	{r0, r3}
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	6808      	ldr	r0, [r1, #0]
 800cc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc76:	f01e 0f10 	tst.w	lr, #16
 800cc7a:	bf08      	it	eq
 800cc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc80:	f380 8809 	msr	PSP, r0
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst>:
 800cc90:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	607b      	str	r3, [r7, #4]
}
 800ccb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccb2:	f7fe fde3 	bl	800b87c <xTaskIncrementTick>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccbc:	4b06      	ldr	r3, [pc, #24]	; (800ccd8 <xPortSysTickHandler+0x40>)
 800ccbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f383 8811 	msr	BASEPRI, r3
}
 800ccce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cce6:	4b0b      	ldr	r3, [pc, #44]	; (800cd14 <vPortSetupTimerInterrupt+0x38>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccec:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <vPortSetupTimerInterrupt+0x3c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a0a      	ldr	r2, [pc, #40]	; (800cd1c <vPortSetupTimerInterrupt+0x40>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	099b      	lsrs	r3, r3, #6
 800ccf8:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <vPortSetupTimerInterrupt+0x44>)
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccfe:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	e000e010 	.word	0xe000e010
 800cd14:	e000e018 	.word	0xe000e018
 800cd18:	20000000 	.word	0x20000000
 800cd1c:	10624dd3 	.word	0x10624dd3
 800cd20:	e000e014 	.word	0xe000e014

0800cd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd34 <vPortEnableVFP+0x10>
 800cd28:	6801      	ldr	r1, [r0, #0]
 800cd2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd2e:	6001      	str	r1, [r0, #0]
 800cd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd32:	bf00      	nop
 800cd34:	e000ed88 	.word	0xe000ed88

0800cd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd3e:	f3ef 8305 	mrs	r3, IPSR
 800cd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	d914      	bls.n	800cd74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd4a:	4a17      	ldr	r2, [pc, #92]	; (800cda8 <vPortValidateInterruptPriority+0x70>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd54:	4b15      	ldr	r3, [pc, #84]	; (800cdac <vPortValidateInterruptPriority+0x74>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	7afa      	ldrb	r2, [r7, #11]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d20a      	bcs.n	800cd74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	607b      	str	r3, [r7, #4]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd74:	4b0e      	ldr	r3, [pc, #56]	; (800cdb0 <vPortValidateInterruptPriority+0x78>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd7c:	4b0d      	ldr	r3, [pc, #52]	; (800cdb4 <vPortValidateInterruptPriority+0x7c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d90a      	bls.n	800cd9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	603b      	str	r3, [r7, #0]
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <vPortValidateInterruptPriority+0x60>
	}
 800cd9a:	bf00      	nop
 800cd9c:	3714      	adds	r7, #20
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	e000e3f0 	.word	0xe000e3f0
 800cdac:	20000ddc 	.word	0x20000ddc
 800cdb0:	e000ed0c 	.word	0xe000ed0c
 800cdb4:	20000de0 	.word	0x20000de0

0800cdb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08a      	sub	sp, #40	; 0x28
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdc4:	f7fe fc8c 	bl	800b6e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdc8:	4b5b      	ldr	r3, [pc, #364]	; (800cf38 <pvPortMalloc+0x180>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdd0:	f000 f920 	bl	800d014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdd4:	4b59      	ldr	r3, [pc, #356]	; (800cf3c <pvPortMalloc+0x184>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f040 8093 	bne.w	800cf08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d01d      	beq.n	800ce24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cde8:	2208      	movs	r2, #8
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4413      	add	r3, r2
 800cdee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d014      	beq.n	800ce24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f023 0307 	bic.w	r3, r3, #7
 800ce00:	3308      	adds	r3, #8
 800ce02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f003 0307 	and.w	r3, r3, #7
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00a      	beq.n	800ce24 <pvPortMalloc+0x6c>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617b      	str	r3, [r7, #20]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d06e      	beq.n	800cf08 <pvPortMalloc+0x150>
 800ce2a:	4b45      	ldr	r3, [pc, #276]	; (800cf40 <pvPortMalloc+0x188>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d869      	bhi.n	800cf08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce34:	4b43      	ldr	r3, [pc, #268]	; (800cf44 <pvPortMalloc+0x18c>)
 800ce36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce38:	4b42      	ldr	r3, [pc, #264]	; (800cf44 <pvPortMalloc+0x18c>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce3e:	e004      	b.n	800ce4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d903      	bls.n	800ce5c <pvPortMalloc+0xa4>
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1f1      	bne.n	800ce40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce5c:	4b36      	ldr	r3, [pc, #216]	; (800cf38 <pvPortMalloc+0x180>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d050      	beq.n	800cf08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2208      	movs	r2, #8
 800ce6c:	4413      	add	r3, r2
 800ce6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	1ad2      	subs	r2, r2, r3
 800ce80:	2308      	movs	r3, #8
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d91f      	bls.n	800cec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	f003 0307 	and.w	r3, r3, #7
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	613b      	str	r3, [r7, #16]
}
 800ceac:	bf00      	nop
 800ceae:	e7fe      	b.n	800ceae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	1ad2      	subs	r2, r2, r3
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cec2:	69b8      	ldr	r0, [r7, #24]
 800cec4:	f000 f908 	bl	800d0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cec8:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <pvPortMalloc+0x188>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	4a1b      	ldr	r2, [pc, #108]	; (800cf40 <pvPortMalloc+0x188>)
 800ced4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ced6:	4b1a      	ldr	r3, [pc, #104]	; (800cf40 <pvPortMalloc+0x188>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	4b1b      	ldr	r3, [pc, #108]	; (800cf48 <pvPortMalloc+0x190>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d203      	bcs.n	800ceea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cee2:	4b17      	ldr	r3, [pc, #92]	; (800cf40 <pvPortMalloc+0x188>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a18      	ldr	r2, [pc, #96]	; (800cf48 <pvPortMalloc+0x190>)
 800cee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <pvPortMalloc+0x184>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	431a      	orrs	r2, r3
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	2200      	movs	r2, #0
 800cefc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <pvPortMalloc+0x194>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3301      	adds	r3, #1
 800cf04:	4a11      	ldr	r2, [pc, #68]	; (800cf4c <pvPortMalloc+0x194>)
 800cf06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf08:	f7fe fbf8 	bl	800b6fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	f003 0307 	and.w	r3, r3, #7
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00a      	beq.n	800cf2c <pvPortMalloc+0x174>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	60fb      	str	r3, [r7, #12]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <pvPortMalloc+0x172>
	return pvReturn;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3728      	adds	r7, #40	; 0x28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	200019a4 	.word	0x200019a4
 800cf3c:	200019b8 	.word	0x200019b8
 800cf40:	200019a8 	.word	0x200019a8
 800cf44:	2000199c 	.word	0x2000199c
 800cf48:	200019ac 	.word	0x200019ac
 800cf4c:	200019b0 	.word	0x200019b0

0800cf50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d04d      	beq.n	800cffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf62:	2308      	movs	r3, #8
 800cf64:	425b      	negs	r3, r3
 800cf66:	697a      	ldr	r2, [r7, #20]
 800cf68:	4413      	add	r3, r2
 800cf6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	4b24      	ldr	r3, [pc, #144]	; (800d008 <vPortFree+0xb8>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4013      	ands	r3, r2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <vPortFree+0x44>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	60fb      	str	r3, [r7, #12]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00a      	beq.n	800cfb2 <vPortFree+0x62>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	60bb      	str	r3, [r7, #8]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	4b14      	ldr	r3, [pc, #80]	; (800d008 <vPortFree+0xb8>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d01e      	beq.n	800cffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d11a      	bne.n	800cffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	4b0e      	ldr	r3, [pc, #56]	; (800d008 <vPortFree+0xb8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	43db      	mvns	r3, r3
 800cfd2:	401a      	ands	r2, r3
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfd8:	f7fe fb82 	bl	800b6e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <vPortFree+0xbc>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	4a09      	ldr	r2, [pc, #36]	; (800d00c <vPortFree+0xbc>)
 800cfe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cfea:	6938      	ldr	r0, [r7, #16]
 800cfec:	f000 f874 	bl	800d0d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <vPortFree+0xc0>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	4a06      	ldr	r2, [pc, #24]	; (800d010 <vPortFree+0xc0>)
 800cff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cffa:	f7fe fb7f 	bl	800b6fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cffe:	bf00      	nop
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	200019b8 	.word	0x200019b8
 800d00c:	200019a8 	.word	0x200019a8
 800d010:	200019b4 	.word	0x200019b4

0800d014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d01a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d020:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <prvHeapInit+0xac>)
 800d022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00c      	beq.n	800d048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3307      	adds	r3, #7
 800d032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 0307 	bic.w	r3, r3, #7
 800d03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	4a1f      	ldr	r2, [pc, #124]	; (800d0c0 <prvHeapInit+0xac>)
 800d044:	4413      	add	r3, r2
 800d046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d04c:	4a1d      	ldr	r2, [pc, #116]	; (800d0c4 <prvHeapInit+0xb0>)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d052:	4b1c      	ldr	r3, [pc, #112]	; (800d0c4 <prvHeapInit+0xb0>)
 800d054:	2200      	movs	r2, #0
 800d056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	4413      	add	r3, r2
 800d05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d060:	2208      	movs	r2, #8
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	1a9b      	subs	r3, r3, r2
 800d066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f023 0307 	bic.w	r3, r3, #7
 800d06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	4a15      	ldr	r2, [pc, #84]	; (800d0c8 <prvHeapInit+0xb4>)
 800d074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <prvHeapInit+0xb4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2200      	movs	r2, #0
 800d07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d07e:	4b12      	ldr	r3, [pc, #72]	; (800d0c8 <prvHeapInit+0xb4>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d094:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <prvHeapInit+0xb4>)
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	4a0a      	ldr	r2, [pc, #40]	; (800d0cc <prvHeapInit+0xb8>)
 800d0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	4a09      	ldr	r2, [pc, #36]	; (800d0d0 <prvHeapInit+0xbc>)
 800d0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <prvHeapInit+0xc0>)
 800d0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0b2:	601a      	str	r2, [r3, #0]
}
 800d0b4:	bf00      	nop
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	20000de4 	.word	0x20000de4
 800d0c4:	2000199c 	.word	0x2000199c
 800d0c8:	200019a4 	.word	0x200019a4
 800d0cc:	200019ac 	.word	0x200019ac
 800d0d0:	200019a8 	.word	0x200019a8
 800d0d4:	200019b8 	.word	0x200019b8

0800d0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0e0:	4b28      	ldr	r3, [pc, #160]	; (800d184 <prvInsertBlockIntoFreeList+0xac>)
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	e002      	b.n	800d0ec <prvInsertBlockIntoFreeList+0x14>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d8f7      	bhi.n	800d0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	4413      	add	r3, r2
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	429a      	cmp	r2, r3
 800d106:	d108      	bne.n	800d11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	441a      	add	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	441a      	add	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d118      	bne.n	800d160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <prvInsertBlockIntoFreeList+0xb0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d00d      	beq.n	800d156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	441a      	add	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	e008      	b.n	800d168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d156:	4b0c      	ldr	r3, [pc, #48]	; (800d188 <prvInsertBlockIntoFreeList+0xb0>)
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	e003      	b.n	800d168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d002      	beq.n	800d176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d176:	bf00      	nop
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	2000199c 	.word	0x2000199c
 800d188:	200019a4 	.word	0x200019a4

0800d18c <__libc_init_array>:
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	4d0d      	ldr	r5, [pc, #52]	; (800d1c4 <__libc_init_array+0x38>)
 800d190:	4c0d      	ldr	r4, [pc, #52]	; (800d1c8 <__libc_init_array+0x3c>)
 800d192:	1b64      	subs	r4, r4, r5
 800d194:	10a4      	asrs	r4, r4, #2
 800d196:	2600      	movs	r6, #0
 800d198:	42a6      	cmp	r6, r4
 800d19a:	d109      	bne.n	800d1b0 <__libc_init_array+0x24>
 800d19c:	4d0b      	ldr	r5, [pc, #44]	; (800d1cc <__libc_init_array+0x40>)
 800d19e:	4c0c      	ldr	r4, [pc, #48]	; (800d1d0 <__libc_init_array+0x44>)
 800d1a0:	f000 f82e 	bl	800d200 <_init>
 800d1a4:	1b64      	subs	r4, r4, r5
 800d1a6:	10a4      	asrs	r4, r4, #2
 800d1a8:	2600      	movs	r6, #0
 800d1aa:	42a6      	cmp	r6, r4
 800d1ac:	d105      	bne.n	800d1ba <__libc_init_array+0x2e>
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}
 800d1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b4:	4798      	blx	r3
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	e7ee      	b.n	800d198 <__libc_init_array+0xc>
 800d1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1be:	4798      	blx	r3
 800d1c0:	3601      	adds	r6, #1
 800d1c2:	e7f2      	b.n	800d1aa <__libc_init_array+0x1e>
 800d1c4:	0800d7b8 	.word	0x0800d7b8
 800d1c8:	0800d7b8 	.word	0x0800d7b8
 800d1cc:	0800d7b8 	.word	0x0800d7b8
 800d1d0:	0800d7bc 	.word	0x0800d7bc

0800d1d4 <memcpy>:
 800d1d4:	440a      	add	r2, r1
 800d1d6:	4291      	cmp	r1, r2
 800d1d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d1dc:	d100      	bne.n	800d1e0 <memcpy+0xc>
 800d1de:	4770      	bx	lr
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1ea:	4291      	cmp	r1, r2
 800d1ec:	d1f9      	bne.n	800d1e2 <memcpy+0xe>
 800d1ee:	bd10      	pop	{r4, pc}

0800d1f0 <memset>:
 800d1f0:	4402      	add	r2, r0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d100      	bne.n	800d1fa <memset+0xa>
 800d1f8:	4770      	bx	lr
 800d1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d1fe:	e7f9      	b.n	800d1f4 <memset+0x4>

0800d200 <_init>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr

0800d20c <_fini>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	bf00      	nop
 800d210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d212:	bc08      	pop	{r3}
 800d214:	469e      	mov	lr, r3
 800d216:	4770      	bx	lr
