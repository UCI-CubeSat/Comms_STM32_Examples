
FreeRTOS_intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a0c  08007a0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a14  08007a14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f0  20000010  08007a2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002200  08007a2c  00022200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df85  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382e  00000000  00000000  0003dfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  000417f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  00042f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003631  00000000  00000000  00044560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183de  00000000  00000000  00047b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdaf1  00000000  00000000  0005ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015da60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006264  00000000  00000000  0015dab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078c0 	.word	0x080078c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080078c0 	.word	0x080078c0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb59 	bl	8000b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f858 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8fe 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f8cc 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 fbf0 	bl	8003cc0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of protect */
  protectHandle = osMutexNew(&protect_attributes);
 80004e0:	4818      	ldr	r0, [pc, #96]	; (8000544 <main+0x7c>)
 80004e2:	f003 fd75 	bl	8003fd0 <osMutexNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <main+0x80>)
 80004ea:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of sema_test */
  sema_testHandle = osSemaphoreNew(1, 1, &sema_test_attributes);
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <main+0x84>)
 80004ee:	2101      	movs	r1, #1
 80004f0:	2001      	movs	r0, #1
 80004f2:	f003 fdf3 	bl	80040dc <osSemaphoreNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a15      	ldr	r2, [pc, #84]	; (8000550 <main+0x88>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timer_test */
  timer_testHandle = osTimerNew(timer_callback, osTimerPeriodic, NULL, &timer_test_attributes);
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <main+0x8c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	2101      	movs	r1, #1
 8000502:	4815      	ldr	r0, [pc, #84]	; (8000558 <main+0x90>)
 8000504:	f003 fce8 	bl	8003ed8 <osTimerNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <main+0x94>)
 800050c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <main+0x98>)
 8000510:	2100      	movs	r1, #0
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <main+0x9c>)
 8000514:	f003 fc1e 	bl	8003d54 <osThreadNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <main+0xa0>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <main+0xa4>)
 8000520:	2100      	movs	r1, #0
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0xa8>)
 8000524:	f003 fc16 	bl	8003d54 <osThreadNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <main+0xac>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of button */
  buttonHandle = osThreadNew(StartTask03, NULL, &button_attributes);
 800052e:	4a12      	ldr	r2, [pc, #72]	; (8000578 <main+0xb0>)
 8000530:	2100      	movs	r1, #0
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <main+0xb4>)
 8000534:	f003 fc0e 	bl	8003d54 <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <main+0xb8>)
 800053c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053e:	f003 fbe3 	bl	8003d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x7a>
 8000544:	080079a4 	.word	0x080079a4
 8000548:	200020e0 	.word	0x200020e0
 800054c:	080079b4 	.word	0x080079b4
 8000550:	20001e50 	.word	0x20001e50
 8000554:	08007994 	.word	0x08007994
 8000558:	0800087d 	.word	0x0800087d
 800055c:	20001944 	.word	0x20001944
 8000560:	08007928 	.word	0x08007928
 8000564:	080007dd 	.word	0x080007dd
 8000568:	20002168 	.word	0x20002168
 800056c:	0800794c 	.word	0x0800794c
 8000570:	0800081d 	.word	0x0800081d
 8000574:	2000216c 	.word	0x2000216c
 8000578:	08007970 	.word	0x08007970
 800057c:	08000859 	.word	0x08000859
 8000580:	20001eb0 	.word	0x20001eb0

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0b8      	sub	sp, #224	; 0xe0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f98c 	bl	80078b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2288      	movs	r2, #136	; 0x88
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f007 f97e 	bl	80078b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b4:	2310      	movs	r3, #16
 80005b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c6:	2360      	movs	r3, #96	; 0x60
 80005c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fea6 	bl	800134c <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000606:	f000 f955 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000628:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fa72 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800063a:	f000 f93b 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800063e:	2302      	movs	r3, #2
 8000640:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000642:	2300      	movs	r3, #0
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fc9d 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000654:	f000 f92e 	bl	80008b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000658:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065c:	f000 fe20 	bl	80012a0 <HAL_PWREx_ControlVoltageScaling>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000666:	f000 f925 	bl	80008b4 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	37e0      	adds	r7, #224	; 0xe0
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	f002 fbf4 	bl	8002ea4 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f8f7 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200020e4 	.word	0x200020e4
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0xbc>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073a:	f000 fd67 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000754:	f000 fbb0 	bl	8000eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000758:	2320      	movs	r3, #32
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fba1 	bl	8000eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2105      	movs	r1, #5
 800077a:	2028      	movs	r0, #40	; 0x28
 800077c:	f000 faf2 	bl	8000d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000780:	2028      	movs	r0, #40	; 0x28
 8000782:	f000 fb0b 	bl	8000d9c <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	10210000 	.word	0x10210000
 8000798:	48000800 	.word	0x48000800

0800079c <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007a6:	f000 fd49 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(buttonHandle);
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <EXTI15_10_IRQHandler+0x38>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 f974 	bl	8005a9c <xTaskResumeFromISR>
 80007b4:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d007      	beq.n	80007cc <EXTI15_10_IRQHandler+0x30>
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <EXTI15_10_IRQHandler+0x3c>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20001eb0 	.word	0x20001eb0
 80007d8:	e000ed04 	.word	0xe000ed04

080007dc <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //example of taking mutex and freeing it
	  osSemaphoreAcquire(sema_testHandle, osWaitForever);
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <StartBlink01+0x3c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fcff 	bl	80041f0 <osSemaphoreAcquire>
	  //osMutexWait(protectHandle, osWaitForever);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fd07 	bl	800120c <HAL_GPIO_WritePin>
	  //osMutexRelease(protectHandle);
	  osDelay(1500);
 80007fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000802:	f003 fb39 	bl	8003e78 <osDelay>
	  osSemaphoreRelease(sema_testHandle);
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <StartBlink01+0x3c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fd42 	bl	8004294 <osSemaphoreRelease>
	  osDelay(50);
 8000810:	2032      	movs	r0, #50	; 0x32
 8000812:	f003 fb31 	bl	8003e78 <osDelay>
	  osSemaphoreAcquire(sema_testHandle, osWaitForever);
 8000816:	e7e5      	b.n	80007e4 <StartBlink01+0x8>
 8000818:	20001e50 	.word	0x20001e50

0800081c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(sema_testHandle, osWaitForever);
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <StartBlink02+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fcdf 	bl	80041f0 <osSemaphoreAcquire>
	  	  //osMutexRelease(protectHandle);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fce7 	bl	800120c <HAL_GPIO_WritePin>
	  osDelay(400);
 800083e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000842:	f003 fb19 	bl	8003e78 <osDelay>
	  osSemaphoreRelease(sema_testHandle);
 8000846:	4b03      	ldr	r3, [pc, #12]	; (8000854 <StartBlink02+0x38>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f003 fd22 	bl	8004294 <osSemaphoreRelease>
	  osSemaphoreAcquire(sema_testHandle, osWaitForever);
 8000850:	e7e8      	b.n	8000824 <StartBlink02+0x8>
 8000852:	bf00      	nop
 8000854:	20001e50 	.word	0x20001e50

08000858 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL); //suspend task each time, wait for external signal
 8000860:	2000      	movs	r0, #0
 8000862:	f005 f873 	bl	800594c <vTaskSuspend>
	//set the pin value to 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2120      	movs	r1, #32
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f000 fccd 	bl	800120c <HAL_GPIO_WritePin>
	osDelay(2500);
 8000872:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000876:	f003 faff 	bl	8003e78 <osDelay>
	vTaskSuspend(NULL); //suspend task each time, wait for external signal
 800087a:	e7f1      	b.n	8000860 <StartTask03+0x8>

0800087c <timer_callback>:
  /* USER CODE END StartTask03 */
}

/* timer_callback function */
void timer_callback(void *argument)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timer_callback */

  /* USER CODE END timer_callback */
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 f987 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40001000 	.word	0x40001000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x5c>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_MspInit+0x5c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x5c>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x5c>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x5c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x5c>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f000 fa31 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2105      	movs	r1, #5
 8000906:	2005      	movs	r0, #5
 8000908:	f000 fa2c 	bl	8000d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800090c:	2005      	movs	r0, #5
 800090e:	f000 fa45 	bl	8000d9c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <HAL_UART_MspInit+0x8c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d130      	bne.n	80009a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6593      	str	r3, [r2, #88]	; 0x58
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fa92 	bl	8000eb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	2026      	movs	r0, #38	; 0x26
 800099a:	f000 f9e3 	bl	8000d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099e:	2026      	movs	r0, #38	; 0x26
 80009a0:	f000 f9fc 	bl	8000d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2036      	movs	r0, #54	; 0x36
 80009ca:	f000 f9cb 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ce:	2036      	movs	r0, #54	; 0x36
 80009d0:	f000 f9e4 	bl	8000d9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_InitTick+0x9c>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_InitTick+0x9c>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6593      	str	r3, [r2, #88]	; 0x58
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_InitTick+0x9c>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ec:	f107 0210 	add.w	r2, r7, #16
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fa34 	bl	8001e64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009fc:	f001 fa06 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8000a00:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_InitTick+0xa0>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0c9b      	lsrs	r3, r3, #18
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_InitTick+0xa8>)
 8000a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a32:	f001 ff65 	bl	8002900 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_InitTick+0xa4>)
 8000a3e:	f001 ffc1 	bl	80029c4 <HAL_TIM_Base_Start_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	20002170 	.word	0x20002170
 8000a5c:	40001000 	.word	0x40001000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <USART2_IRQHandler+0x10>)
 8000aa2:	f002 fa4d 	bl	8002f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200020e4 	.word	0x200020e4

08000ab0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <TIM6_DAC_IRQHandler+0x10>)
 8000ab6:	f001 fff5 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20002170 	.word	0x20002170

08000ac4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <SystemInit+0x64>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SystemInit+0x64>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SystemInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0x68>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SystemInit+0x68>)
 8000af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0x68>)
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0x68>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffc6 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
	ldr	r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b54:	f842 3b04 	str.w	r3, [r2], #4

08000b58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <LoopForever+0x16>)
	cmp	r2, r3
 8000b5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f006 fe75 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fcb1 	bl	80004c8 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b6c:	08007a1c 	.word	0x08007a1c
	ldr	r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b74:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b78:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b7c:	20002200 	.word	0x20002200

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>

08000b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f8de 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff0e 	bl	80009b4 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba4:	f7ff fe8c 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200021bc 	.word	0x200021bc

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200021bc 	.word	0x200021bc

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d008      	beq.n	8000de2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e022      	b.n	8000e28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 020e 	bic.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0201 	bic.w	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f003 021c 	and.w	r2, r3, #28
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d005      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e029      	b.n	8000eac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 020e 	bic.w	r2, r2, #14
 8000e66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	f003 021c 	and.w	r2, r3, #28
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4798      	blx	r3
    }
  }
  return status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e17f      	b.n	80011c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8171 	beq.w	80011c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d00b      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	2b11      	cmp	r3, #17
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b12      	cmp	r3, #18
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f003 0201 	and.w	r2, r3, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d118      	bne.n	8000fa0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x128>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	6939      	ldr	r1, [r7, #16]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80ac 	beq.w	80011c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_GPIO_Init+0x330>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a5e      	ldr	r2, [pc, #376]	; (80011e8 <HAL_GPIO_Init+0x330>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_GPIO_Init+0x330>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001082:	4a5a      	ldr	r2, [pc, #360]	; (80011ec <HAL_GPIO_Init+0x334>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x242>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_GPIO_Init+0x338>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x23e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x33c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x23a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x340>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x236>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x344>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x232>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x348>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x22e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x34c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x22a>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x244>
 80010fa:	2300      	movs	r3, #0
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110c:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x334>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x350>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x350>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x350>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x350>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x350>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae78 	bne.w	8000ec8 <HAL_GPIO_Init+0x10>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	48000c00 	.word	0x48000c00
 80011fc:	48001000 	.word	0x48001000
 8001200:	48001400 	.word	0x48001400
 8001204:	48001800 	.word	0x48001800
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001228:	e002      	b.n	8001230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_PWREx_GetVoltageRange+0x18>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40007000 	.word	0x40007000

080012a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ae:	d130      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012bc:	d038      	beq.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2232      	movs	r2, #50	; 0x32
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	0c9b      	lsrs	r3, r3, #18
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e4:	e002      	b.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f8:	d102      	bne.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f2      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130c:	d110      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e00f      	b.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d007      	beq.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001328:	4a05      	ldr	r2, [pc, #20]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40007000 	.word	0x40007000
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83

0800134c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e3d4      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135e:	4ba1      	ldr	r3, [pc, #644]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001368:	4b9e      	ldr	r3, [pc, #632]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80e4 	beq.w	8001548 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_RCC_OscConfig+0x4a>
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	2b0c      	cmp	r3, #12
 800138a:	f040 808b 	bne.w	80014a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b01      	cmp	r3, #1
 8001392:	f040 8087 	bne.w	80014a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001396:	4b93      	ldr	r3, [pc, #588]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x62>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e3ac      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_RCC_OscConfig+0x7c>
 80013be:	4b89      	ldr	r3, [pc, #548]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c6:	e005      	b.n	80013d4 <HAL_RCC_OscConfig+0x88>
 80013c8:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d223      	bcs.n	8001420 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fd73 	bl	8001ec8 <RCC_SetFlashLatencyFromMSIRange>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e38d      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ec:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4977      	ldr	r1, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4972      	ldr	r1, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
 800141e:	e025      	b.n	800146c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001420:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6f      	ldr	r2, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b6d      	ldr	r3, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	496a      	ldr	r1, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143e:	4b69      	ldr	r3, [pc, #420]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4965      	ldr	r1, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fd33 	bl	8001ec8 <RCC_SetFlashLatencyFromMSIRange>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e34d      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146c:	f000 fc36 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	495a      	ldr	r1, [pc, #360]	; (80015e8 <HAL_RCC_OscConfig+0x29c>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_OscConfig+0x2a0>)
 800148a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x2a4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fa8f 	bl	80009b4 <HAL_InitTick>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d052      	beq.n	8001546 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	e331      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d032      	beq.n	8001512 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ac:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb90 	bl	8000bdc <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb8c 	bl	8000bdc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e31a      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	493b      	ldr	r1, [pc, #236]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4936      	ldr	r1, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
 8001510:	e01a      	b.n	8001548 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb5d 	bl	8000bdc <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001526:	f7ff fb59 	bl	8000bdc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e2e7      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x1da>
 8001544:	e000      	b.n	8001548 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d074      	beq.n	800163e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b08      	cmp	r3, #8
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x21a>
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d10e      	bne.n	800157e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d10b      	bne.n	800157e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d064      	beq.n	800163c <HAL_RCC_OscConfig+0x2f0>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d160      	bne.n	800163c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e2c4      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x24a>
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 800158e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	e01d      	b.n	80015d2 <HAL_RCC_OscConfig+0x286>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159e:	d10c      	bne.n	80015ba <HAL_RCC_OscConfig+0x26e>
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e00b      	b.n	80015d2 <HAL_RCC_OscConfig+0x286>
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x298>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01c      	beq.n	8001614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff faff 	bl	8000bdc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e0:	e011      	b.n	8001606 <HAL_RCC_OscConfig+0x2ba>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	080079c4 	.word	0x080079c4
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff faf2 	bl	8000bdc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e280      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001606:	4baf      	ldr	r3, [pc, #700]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x2a8>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fae2 	bl	8000bdc <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fade 	bl	8000bdc <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e26c      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162e:	4ba5      	ldr	r3, [pc, #660]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x2d0>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d060      	beq.n	800170c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d005      	beq.n	800165c <HAL_RCC_OscConfig+0x310>
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d119      	bne.n	800168a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d116      	bne.n	800168a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165c:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x328>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e249      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	4990      	ldr	r1, [pc, #576]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	e040      	b.n	800170c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d023      	beq.n	80016da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001692:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a8b      	ldr	r2, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169e:	f7ff fa9d 	bl	8000bdc <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fa99 	bl	8000bdc <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e227      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b8:	4b82      	ldr	r3, [pc, #520]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	497c      	ldr	r1, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
 80016d8:	e018      	b.n	800170c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a79      	ldr	r2, [pc, #484]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80016e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fa79 	bl	8000bdc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fa75 	bl	8000bdc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e203      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d03c      	beq.n	8001792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01c      	beq.n	800175a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	4a67      	ldr	r2, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa54 	bl	8000bdc <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fa50 	bl	8000bdc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1de      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174a:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ef      	beq.n	8001738 <HAL_RCC_OscConfig+0x3ec>
 8001758:	e01b      	b.n	8001792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fa37 	bl	8000bdc <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fa33 	bl	8000bdc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1c1      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001784:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ef      	bne.n	8001772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80a6 	beq.w	80018ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6593      	str	r3, [r2, #88]	; 0x58
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_OscConfig+0x57c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d118      	bne.n	800180a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_OscConfig+0x57c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0x57c>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e4:	f7ff f9fa 	bl	8000bdc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ec:	f7ff f9f6 	bl	8000bdc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e184      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x57c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x4d8>
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001818:	4a2a      	ldr	r2, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001822:	e024      	b.n	800186e <HAL_RCC_OscConfig+0x522>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d110      	bne.n	800184e <HAL_RCC_OscConfig+0x502>
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184c:	e00f      	b.n	800186e <HAL_RCC_OscConfig+0x522>
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001866:	f023 0304 	bic.w	r3, r3, #4
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff f9b1 	bl	8000bdc <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f9ad 	bl	8000bdc <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e139      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x578>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ed      	beq.n	800187e <HAL_RCC_OscConfig+0x532>
 80018a2:	e01a      	b.n	80018da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff f99a 	bl	8000bdc <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018aa:	e00f      	b.n	80018cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff f996 	bl	8000bdc <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d906      	bls.n	80018cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e122      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018cc:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e8      	bne.n	80018ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	4a8a      	ldr	r2, [pc, #552]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8108 	beq.w	8001b06 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	f040 80d0 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001900:	4b83      	ldr	r3, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	429a      	cmp	r2, r3
 8001912:	d130      	bne.n	8001976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	3b01      	subs	r3, #1
 8001920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d127      	bne.n	8001976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d11f      	bne.n	8001976 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001940:	2a07      	cmp	r2, #7
 8001942:	bf14      	ite	ne
 8001944:	2201      	movne	r2, #1
 8001946:	2200      	moveq	r2, #0
 8001948:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	4293      	cmp	r3, r2
 800194c:	d113      	bne.n	8001976 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d109      	bne.n	8001976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d06e      	beq.n	8001a54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d069      	beq.n	8001a50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800197c:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b7      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001998:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 800199e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a4:	f7ff f91a 	bl	8000bdc <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f916 	bl	8000bdc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0a4      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019be:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <HAL_RCC_OscConfig+0x7c8>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019da:	3a01      	subs	r2, #1
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019e4:	0212      	lsls	r2, r2, #8
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ec:	0852      	lsrs	r2, r2, #1
 80019ee:	3a01      	subs	r2, #1
 80019f0:	0552      	lsls	r2, r2, #21
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019f8:	0852      	lsrs	r2, r2, #1
 80019fa:	3a01      	subs	r2, #1
 80019fc:	0652      	lsls	r2, r2, #25
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a04:	0912      	lsrs	r2, r2, #4
 8001a06:	0452      	lsls	r2, r2, #17
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	4941      	ldr	r1, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a3b      	ldr	r2, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a28:	f7ff f8d8 	bl	8000bdc <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f8d4 	bl	8000bdc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e062      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4e:	e05a      	b.n	8001b06 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e059      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d152      	bne.n	8001b06 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a78:	f7ff f8b0 	bl	8000bdc <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f8ac 	bl	8000bdc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e03a      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x734>
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d02d      	beq.n	8001b02 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001ac4:	f023 0303 	bic.w	r3, r3, #3
 8001ac8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001ad0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f87f 	bl	8000bdc <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f87b 	bl	8000bdc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e009      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x7c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x796>
 8001b00:	e001      	b.n	8001b06 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	f99d808c 	.word	0xf99d808c

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0c8      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4961      	ldr	r1, [pc, #388]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b0      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d04c      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d121      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e09e      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d115      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e092      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba0:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e086      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e07e      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 0203 	bic.w	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	493f      	ldr	r1, [pc, #252]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f803 	bl	8000bdc <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7fe ffff 	bl	8000bdc <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e066      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 020c 	and.w	r2, r3, #12
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d1eb      	bne.n	8001bda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	492c      	ldr	r1, [pc, #176]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d210      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4924      	ldr	r1, [pc, #144]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e036      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4918      	ldr	r1, [pc, #96]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4910      	ldr	r1, [pc, #64]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8e:	f000 f825 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	5ccb      	ldrb	r3, [r1, r3]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fe7e 	bl	80009b4 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	080079c4 	.word	0x080079c4
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d11e      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e004      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d134      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0xac>
 8001d80:	e005      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	e005      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8a:	617b      	str	r3, [r7, #20]
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	fb02 f203 	mul.w	r2, r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	0e5b      	lsrs	r3, r3, #25
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080079dc 	.word	0x080079dc
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4904      	ldr	r1, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	080079d4 	.word	0x080079d4

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e3c:	f7ff ffda 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0adb      	lsrs	r3, r3, #11
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4904      	ldr	r1, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	080079d4 	.word	0x080079d4

08001e64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	220f      	movs	r2, #15
 8001e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCC_GetClockConfig+0x60>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0207 	and.w	r2, r3, #7
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff f9d0 	bl	8001284 <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
 8001ee6:	e014      	b.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f00:	f7ff f9c0 	bl	8001284 <HAL_PWREx_GetVoltageRange>
 8001f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f18:	d10b      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d919      	bls.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2ba0      	cmp	r3, #160	; 0xa0
 8001f24:	d902      	bls.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e013      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e010      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d902      	bls.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f38:	2303      	movs	r3, #3
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e00a      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d102      	bne.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f44:	2302      	movs	r3, #2
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e004      	b.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b70      	cmp	r3, #112	; 0x70
 8001f4e:	d101      	bne.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 0207 	bic.w	r2, r3, #7
 8001f5c:	4909      	ldr	r1, [pc, #36]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40022000 	.word	0x40022000

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f90:	2300      	movs	r3, #0
 8001f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d041      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fac:	d02a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb2:	d824      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fbe:	d81e      	bhi.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc8:	d010      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fca:	e018      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fcc:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a85      	ldr	r2, [pc, #532]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd8:	e015      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fabb 	bl	800255c <RCCEx_PLLSAI1_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fea:	e00c      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3320      	adds	r3, #32
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fba6 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e003      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	74fb      	strb	r3, [r7, #19]
      break;
 8002002:	e000      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200c:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201a:	4973      	ldr	r1, [pc, #460]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002022:	e001      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d041      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800203c:	d02a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800203e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002042:	d824      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002048:	d008      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800204a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800204e:	d81e      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d010      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800205a:	e018      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a61      	ldr	r2, [pc, #388]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002068:	e015      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fa73 	bl	800255c <RCCEx_PLLSAI1_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800207a:	e00c      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3320      	adds	r3, #32
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fb5e 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e003      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
      break;
 8002092:	e000      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800209c:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020aa:	494f      	ldr	r1, [pc, #316]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b2:	e001      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a0 	beq.w	8002206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	; 0x58
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002108:	f7fe fd68 	bl	8000bdc <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fd64 	bl	8000bdc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d902      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	74fb      	strb	r3, [r7, #19]
        break;
 8002122:	e005      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d15c      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	d019      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fd23 	bl	8000bdc <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	e00b      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fd1f 	bl	8000bdc <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d902      	bls.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	74fb      	strb	r3, [r7, #19]
            break;
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ec      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	4904      	ldr	r1, [pc, #16]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021de:	e009      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
 80021e4:	e006      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f4:	7c7b      	ldrb	r3, [r7, #17]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	4a9d      	ldr	r2, [pc, #628]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002212:	4b98      	ldr	r3, [pc, #608]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f023 0203 	bic.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	4994      	ldr	r1, [pc, #592]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002234:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 020c 	bic.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	498c      	ldr	r1, [pc, #560]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4983      	ldr	r1, [pc, #524]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002278:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	497b      	ldr	r1, [pc, #492]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	4972      	ldr	r1, [pc, #456]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	496a      	ldr	r1, [pc, #424]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	4961      	ldr	r1, [pc, #388]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4959      	ldr	r1, [pc, #356]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002330:	4950      	ldr	r1, [pc, #320]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	4948      	ldr	r1, [pc, #288]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002366:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d028      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002396:	4937      	ldr	r1, [pc, #220]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e011      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023be:	d10c      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	2101      	movs	r1, #1
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f8c8 	bl	800255c <RCCEx_PLLSAI1_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d028      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	491f      	ldr	r1, [pc, #124]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002404:	d106      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002410:	60d3      	str	r3, [r2, #12]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2101      	movs	r1, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f899 	bl	800255c <RCCEx_PLLSAI1_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02b      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002462:	d109      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a02      	ldr	r2, [pc, #8]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246e:	60d3      	str	r3, [r2, #12]
 8002470:	e014      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f867 	bl	800255c <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b6:	4928      	ldr	r1, [pc, #160]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f844 	bl	800255c <RCCEx_PLLSAI1_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d014      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e011      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3320      	adds	r3, #32
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f925 	bl	8002744 <RCCEx_PLLSAI2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002522:	490d      	ldr	r1, [pc, #52]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800254e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
       ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800258e:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
       ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d047      	beq.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d018      	beq.n	80025e2 <RCCEx_PLLSAI1_Config+0x86>
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d825      	bhi.n	8002600 <RCCEx_PLLSAI1_Config+0xa4>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x62>
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d009      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x74>
 80025bc:	e020      	b.n	8002600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e01a      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d116      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e0:	e013      	b.n	800260a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e2:	4b57      	ldr	r3, [pc, #348]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fe:	e006      	b.n	800260e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e004      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	430b      	orrs	r3, r1
 800262c:	4944      	ldr	r1, [pc, #272]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d17d      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe faca 	bl	8000bdc <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264c:	f7fe fac6 	bl	8000bdc <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
        break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ef      	bne.n	800264c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d160      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	0912      	lsrs	r2, r2, #4
 8002690:	0452      	lsls	r2, r2, #17
 8002692:	430a      	orrs	r2, r1
 8002694:	492a      	ldr	r1, [pc, #168]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	610b      	str	r3, [r1, #16]
 800269a:	e027      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d112      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	0211      	lsls	r1, r2, #8
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6912      	ldr	r2, [r2, #16]
 80026b8:	0852      	lsrs	r2, r2, #1
 80026ba:	3a01      	subs	r2, #1
 80026bc:	0552      	lsls	r2, r2, #21
 80026be:	430a      	orrs	r2, r1
 80026c0:	491f      	ldr	r1, [pc, #124]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	610b      	str	r3, [r1, #16]
 80026c6:	e011      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	0211      	lsls	r1, r2, #8
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6952      	ldr	r2, [r2, #20]
 80026de:	0852      	lsrs	r2, r2, #1
 80026e0:	3a01      	subs	r2, #1
 80026e2:	0652      	lsls	r2, r2, #25
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4916      	ldr	r1, [pc, #88]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fa70 	bl	8000bdc <HAL_GetTick>
 80026fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026fe:	e009      	b.n	8002714 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002700:	f7fe fa6c 	bl	8000bdc <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	73fb      	strb	r3, [r7, #15]
          break;
 8002712:	e005      	b.n	8002720 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ef      	beq.n	8002700 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	4904      	ldr	r1, [pc, #16]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000

08002744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800275e:	4b67      	ldr	r3, [pc, #412]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
       ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002776:	4b61      	ldr	r3, [pc, #388]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
       ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d047      	beq.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e044      	b.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d018      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x86>
 8002798:	2b03      	cmp	r3, #3
 800279a:	d825      	bhi.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d002      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x62>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d009      	beq.n	80027b8 <RCCEx_PLLSAI2_Config+0x74>
 80027a4:	e020      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e01a      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e013      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e6:	e006      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e004      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	430b      	orrs	r3, r1
 8002814:	4939      	ldr	r1, [pc, #228]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d167      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe f9d6 	bl	8000bdc <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002832:	e009      	b.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002834:	f7fe f9d2 	bl	8000bdc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]
        break;
 8002846:	e005      	b.n	8002854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ef      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d14a      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	0912      	lsrs	r2, r2, #4
 8002878:	0452      	lsls	r2, r2, #17
 800287a:	430a      	orrs	r2, r1
 800287c:	491f      	ldr	r1, [pc, #124]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	614b      	str	r3, [r1, #20]
 8002882:	e011      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800288c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6912      	ldr	r2, [r2, #16]
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0652      	lsls	r2, r2, #25
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4916      	ldr	r1, [pc, #88]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe f992 	bl	8000bdc <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ba:	e009      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028bc:	f7fe f98e 	bl	8000bdc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
          break;
 80028ce:	e005      	b.n	80028dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e049      	b.n	80029a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f841 	bl	80029ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f000 f9f8 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e04f      	b.n	8002a7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01d      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d018      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00e      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x76>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d115      	bne.n	8002a66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d015      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0xb4>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a52:	d011      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	e008      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40013400 	.word	0x40013400
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	00010007 	.word	0x00010007

08002aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0202 	mvn.w	r2, #2
 8002ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f905 	bl	8002cf6 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8f7 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f908 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0204 	mvn.w	r2, #4
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8db 	bl	8002cf6 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8cd 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8de 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0208 	mvn.w	r2, #8
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8b1 	bl	8002cf6 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8a3 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f8b4 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0210 	mvn.w	r2, #16
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f887 	bl	8002cf6 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f879 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f88a 	bl	8002d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fe34 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f914 	bl	8002e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	d10e      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d107      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f907 	bl	8002e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d10e      	bne.n	8002cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f838 	bl	8002d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d10e      	bne.n	8002cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d107      	bne.n	8002cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0220 	mvn.w	r2, #32
 8002cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8c7 	bl	8002e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <TIM_Base_SetConfig+0x114>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d00f      	beq.n	8002d74 <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3d      	ldr	r2, [pc, #244]	; (8002e4c <TIM_Base_SetConfig+0x118>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <TIM_Base_SetConfig+0x11c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <TIM_Base_SetConfig+0x120>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <TIM_Base_SetConfig+0x124>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2f      	ldr	r2, [pc, #188]	; (8002e48 <TIM_Base_SetConfig+0x114>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d01b      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <TIM_Base_SetConfig+0x118>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d017      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <TIM_Base_SetConfig+0x11c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <TIM_Base_SetConfig+0x120>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00f      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a29      	ldr	r2, [pc, #164]	; (8002e58 <TIM_Base_SetConfig+0x124>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00b      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <TIM_Base_SetConfig+0x128>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <TIM_Base_SetConfig+0x12c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <TIM_Base_SetConfig+0x130>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d108      	bne.n	8002de0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <TIM_Base_SetConfig+0x114>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00f      	beq.n	8002e2c <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <TIM_Base_SetConfig+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <TIM_Base_SetConfig+0x128>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <TIM_Base_SetConfig+0xf8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <TIM_Base_SetConfig+0x12c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_Base_SetConfig+0xf8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <TIM_Base_SetConfig+0x130>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e040      	b.n	8002f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fd2a 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa4e 	bl	8003384 <UART_SetConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e022      	b.n	8002f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fccc 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fd53 	bl	80039dc <UART_CheckIdleState>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d113      	bne.n	8002f98 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 81ce 	beq.w	800332a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
      }
      return;
 8002f96:	e1c8      	b.n	800332a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80e3 	beq.w	8003166 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4ba6      	ldr	r3, [pc, #664]	; (8003248 <HAL_UART_IRQHandler+0x308>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80d8 	beq.w	8003166 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_UART_IRQHandler+0xa2>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <HAL_UART_IRQHandler+0xce>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_UART_IRQHandler+0xfa>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2204      	movs	r2, #4
 8003028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d104      	bne.n	8003058 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2208      	movs	r2, #8
 800305e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	f043 0208 	orr.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_UART_IRQHandler+0x15e>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800308c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8142 	beq.w	800332e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00c      	beq.n	80030ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d004      	beq.n	80030ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d031      	beq.n	8003152 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fd39 	bl	8003b66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d123      	bne.n	800314a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003110:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	2b00      	cmp	r3, #0
 8003118:	d013      	beq.n	8003142 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a4b      	ldr	r2, [pc, #300]	; (800324c <HAL_UART_IRQHandler+0x30c>)
 8003120:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fe84 	bl	8000e34 <HAL_DMA_Abort_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800313c:	4610      	mov	r0, r2
 800313e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e00f      	b.n	8003162 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f908 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00b      	b.n	8003162 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f904 	bl	8003358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e007      	b.n	8003162 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f900 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003160:	e0e5      	b.n	800332e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003162:	bf00      	nop
    return;
 8003164:	e0e3      	b.n	800332e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	2b01      	cmp	r3, #1
 800316c:	f040 80a9 	bne.w	80032c2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a3 	beq.w	80032c2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 809d 	beq.w	80032c2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d158      	bne.n	8003250 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80031a8:	893b      	ldrh	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80c1 	beq.w	8003332 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031b6:	893a      	ldrh	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f080 80ba 	bcs.w	8003332 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	893a      	ldrh	r2, [r7, #8]
 80031c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d12a      	bne.n	800322c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003204:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0210 	bic.w	r2, r2, #16
 8003220:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fdc6 	bl	8000db8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003238:	b29b      	uxth	r3, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	b29b      	uxth	r3, r3
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f893 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003246:	e074      	b.n	8003332 <HAL_UART_IRQHandler+0x3f2>
 8003248:	04000120 	.word	0x04000120
 800324c:	08003bc5 	.word	0x08003bc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800325c:	b29b      	uxth	r3, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d060      	beq.n	8003336 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003282:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0210 	bic.w	r2, r2, #16
 80032b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f856 	bl	800336c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032c0:	e039      	b.n	8003336 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_UART_IRQHandler+0x3a8>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fc9e 	bl	8003c22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032e6:	e029      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01a      	beq.n	800333a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
    }
    return;
 800330c:	e015      	b.n	800333a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d011      	beq.n	800333c <HAL_UART_IRQHandler+0x3fc>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fc64 	bl	8003bf0 <UART_EndTransmit_IT>
    return;
 8003328:	e008      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
      return;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
    return;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HAL_UART_IRQHandler+0x3fc>
    return;
 800333a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop

08003344 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4bad      	ldr	r3, [pc, #692]	; (8003664 <UART_SetConfig+0x2e0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	69f9      	ldr	r1, [r7, #28]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4aa2      	ldr	r2, [pc, #648]	; (8003668 <UART_SetConfig+0x2e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a99      	ldr	r2, [pc, #612]	; (800366c <UART_SetConfig+0x2e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d121      	bne.n	800344e <UART_SetConfig+0xca>
 800340a:	4b99      	ldr	r3, [pc, #612]	; (8003670 <UART_SetConfig+0x2ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d817      	bhi.n	8003448 <UART_SetConfig+0xc4>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x9c>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003431 	.word	0x08003431
 8003424:	0800343d 	.word	0x0800343d
 8003428:	08003437 	.word	0x08003437
 800342c:	08003443 	.word	0x08003443
 8003430:	2301      	movs	r3, #1
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e0e7      	b.n	8003606 <UART_SetConfig+0x282>
 8003436:	2302      	movs	r3, #2
 8003438:	76fb      	strb	r3, [r7, #27]
 800343a:	e0e4      	b.n	8003606 <UART_SetConfig+0x282>
 800343c:	2304      	movs	r3, #4
 800343e:	76fb      	strb	r3, [r7, #27]
 8003440:	e0e1      	b.n	8003606 <UART_SetConfig+0x282>
 8003442:	2308      	movs	r3, #8
 8003444:	76fb      	strb	r3, [r7, #27]
 8003446:	e0de      	b.n	8003606 <UART_SetConfig+0x282>
 8003448:	2310      	movs	r3, #16
 800344a:	76fb      	strb	r3, [r7, #27]
 800344c:	e0db      	b.n	8003606 <UART_SetConfig+0x282>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a88      	ldr	r2, [pc, #544]	; (8003674 <UART_SetConfig+0x2f0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d132      	bne.n	80034be <UART_SetConfig+0x13a>
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <UART_SetConfig+0x2ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d828      	bhi.n	80034b8 <UART_SetConfig+0x134>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0xe8>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034a1 	.word	0x080034a1
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034b9 	.word	0x080034b9
 8003478:	080034b9 	.word	0x080034b9
 800347c:	080034ad 	.word	0x080034ad
 8003480:	080034b9 	.word	0x080034b9
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034b9 	.word	0x080034b9
 800348c:	080034a7 	.word	0x080034a7
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080034b9 	.word	0x080034b9
 800349c:	080034b3 	.word	0x080034b3
 80034a0:	2300      	movs	r3, #0
 80034a2:	76fb      	strb	r3, [r7, #27]
 80034a4:	e0af      	b.n	8003606 <UART_SetConfig+0x282>
 80034a6:	2302      	movs	r3, #2
 80034a8:	76fb      	strb	r3, [r7, #27]
 80034aa:	e0ac      	b.n	8003606 <UART_SetConfig+0x282>
 80034ac:	2304      	movs	r3, #4
 80034ae:	76fb      	strb	r3, [r7, #27]
 80034b0:	e0a9      	b.n	8003606 <UART_SetConfig+0x282>
 80034b2:	2308      	movs	r3, #8
 80034b4:	76fb      	strb	r3, [r7, #27]
 80034b6:	e0a6      	b.n	8003606 <UART_SetConfig+0x282>
 80034b8:	2310      	movs	r3, #16
 80034ba:	76fb      	strb	r3, [r7, #27]
 80034bc:	e0a3      	b.n	8003606 <UART_SetConfig+0x282>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6d      	ldr	r2, [pc, #436]	; (8003678 <UART_SetConfig+0x2f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0x186>
 80034c8:	4b69      	ldr	r3, [pc, #420]	; (8003670 <UART_SetConfig+0x2ec>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d013      	beq.n	80034fe <UART_SetConfig+0x17a>
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d814      	bhi.n	8003504 <UART_SetConfig+0x180>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d009      	beq.n	80034f2 <UART_SetConfig+0x16e>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d810      	bhi.n	8003504 <UART_SetConfig+0x180>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <UART_SetConfig+0x168>
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d006      	beq.n	80034f8 <UART_SetConfig+0x174>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x180>
 80034ec:	2300      	movs	r3, #0
 80034ee:	76fb      	strb	r3, [r7, #27]
 80034f0:	e089      	b.n	8003606 <UART_SetConfig+0x282>
 80034f2:	2302      	movs	r3, #2
 80034f4:	76fb      	strb	r3, [r7, #27]
 80034f6:	e086      	b.n	8003606 <UART_SetConfig+0x282>
 80034f8:	2304      	movs	r3, #4
 80034fa:	76fb      	strb	r3, [r7, #27]
 80034fc:	e083      	b.n	8003606 <UART_SetConfig+0x282>
 80034fe:	2308      	movs	r3, #8
 8003500:	76fb      	strb	r3, [r7, #27]
 8003502:	e080      	b.n	8003606 <UART_SetConfig+0x282>
 8003504:	2310      	movs	r3, #16
 8003506:	76fb      	strb	r3, [r7, #27]
 8003508:	e07d      	b.n	8003606 <UART_SetConfig+0x282>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <UART_SetConfig+0x2f8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d120      	bne.n	8003556 <UART_SetConfig+0x1d2>
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <UART_SetConfig+0x2ec>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d013      	beq.n	800354a <UART_SetConfig+0x1c6>
 8003522:	2bc0      	cmp	r3, #192	; 0xc0
 8003524:	d814      	bhi.n	8003550 <UART_SetConfig+0x1cc>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d009      	beq.n	800353e <UART_SetConfig+0x1ba>
 800352a:	2b80      	cmp	r3, #128	; 0x80
 800352c:	d810      	bhi.n	8003550 <UART_SetConfig+0x1cc>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0x1b4>
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d006      	beq.n	8003544 <UART_SetConfig+0x1c0>
 8003536:	e00b      	b.n	8003550 <UART_SetConfig+0x1cc>
 8003538:	2300      	movs	r3, #0
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e063      	b.n	8003606 <UART_SetConfig+0x282>
 800353e:	2302      	movs	r3, #2
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e060      	b.n	8003606 <UART_SetConfig+0x282>
 8003544:	2304      	movs	r3, #4
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e05d      	b.n	8003606 <UART_SetConfig+0x282>
 800354a:	2308      	movs	r3, #8
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e05a      	b.n	8003606 <UART_SetConfig+0x282>
 8003550:	2310      	movs	r3, #16
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e057      	b.n	8003606 <UART_SetConfig+0x282>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a49      	ldr	r2, [pc, #292]	; (8003680 <UART_SetConfig+0x2fc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0x228>
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <UART_SetConfig+0x2ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356e:	d017      	beq.n	80035a0 <UART_SetConfig+0x21c>
 8003570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003574:	d817      	bhi.n	80035a6 <UART_SetConfig+0x222>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d00b      	beq.n	8003594 <UART_SetConfig+0x210>
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d811      	bhi.n	80035a6 <UART_SetConfig+0x222>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <UART_SetConfig+0x20a>
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	d006      	beq.n	800359a <UART_SetConfig+0x216>
 800358c:	e00b      	b.n	80035a6 <UART_SetConfig+0x222>
 800358e:	2300      	movs	r3, #0
 8003590:	76fb      	strb	r3, [r7, #27]
 8003592:	e038      	b.n	8003606 <UART_SetConfig+0x282>
 8003594:	2302      	movs	r3, #2
 8003596:	76fb      	strb	r3, [r7, #27]
 8003598:	e035      	b.n	8003606 <UART_SetConfig+0x282>
 800359a:	2304      	movs	r3, #4
 800359c:	76fb      	strb	r3, [r7, #27]
 800359e:	e032      	b.n	8003606 <UART_SetConfig+0x282>
 80035a0:	2308      	movs	r3, #8
 80035a2:	76fb      	strb	r3, [r7, #27]
 80035a4:	e02f      	b.n	8003606 <UART_SetConfig+0x282>
 80035a6:	2310      	movs	r3, #16
 80035a8:	76fb      	strb	r3, [r7, #27]
 80035aa:	e02c      	b.n	8003606 <UART_SetConfig+0x282>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <UART_SetConfig+0x2e4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d125      	bne.n	8003602 <UART_SetConfig+0x27e>
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <UART_SetConfig+0x2ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d017      	beq.n	80035f6 <UART_SetConfig+0x272>
 80035c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ca:	d817      	bhi.n	80035fc <UART_SetConfig+0x278>
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d00b      	beq.n	80035ea <UART_SetConfig+0x266>
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d811      	bhi.n	80035fc <UART_SetConfig+0x278>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <UART_SetConfig+0x260>
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d006      	beq.n	80035f0 <UART_SetConfig+0x26c>
 80035e2:	e00b      	b.n	80035fc <UART_SetConfig+0x278>
 80035e4:	2300      	movs	r3, #0
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e00d      	b.n	8003606 <UART_SetConfig+0x282>
 80035ea:	2302      	movs	r3, #2
 80035ec:	76fb      	strb	r3, [r7, #27]
 80035ee:	e00a      	b.n	8003606 <UART_SetConfig+0x282>
 80035f0:	2304      	movs	r3, #4
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e007      	b.n	8003606 <UART_SetConfig+0x282>
 80035f6:	2308      	movs	r3, #8
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e004      	b.n	8003606 <UART_SetConfig+0x282>
 80035fc:	2310      	movs	r3, #16
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	e001      	b.n	8003606 <UART_SetConfig+0x282>
 8003602:	2310      	movs	r3, #16
 8003604:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <UART_SetConfig+0x2e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 8087 	bne.w	8003720 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003612:	7efb      	ldrb	r3, [r7, #27]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d837      	bhi.n	8003688 <UART_SetConfig+0x304>
 8003618:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <UART_SetConfig+0x29c>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003645 	.word	0x08003645
 8003624:	08003689 	.word	0x08003689
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003689 	.word	0x08003689
 8003630:	08003653 	.word	0x08003653
 8003634:	08003689 	.word	0x08003689
 8003638:	08003689 	.word	0x08003689
 800363c:	08003689 	.word	0x08003689
 8003640:	0800365b 	.word	0x0800365b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7fe fbe2 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8003648:	6178      	str	r0, [r7, #20]
        break;
 800364a:	e022      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <UART_SetConfig+0x300>)
 800364e:	617b      	str	r3, [r7, #20]
        break;
 8003650:	e01f      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7fe fb43 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8003656:	6178      	str	r0, [r7, #20]
        break;
 8003658:	e01b      	b.n	8003692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	617b      	str	r3, [r7, #20]
        break;
 8003660:	e017      	b.n	8003692 <UART_SetConfig+0x30e>
 8003662:	bf00      	nop
 8003664:	efff69f3 	.word	0xefff69f3
 8003668:	40008000 	.word	0x40008000
 800366c:	40013800 	.word	0x40013800
 8003670:	40021000 	.word	0x40021000
 8003674:	40004400 	.word	0x40004400
 8003678:	40004800 	.word	0x40004800
 800367c:	40004c00 	.word	0x40004c00
 8003680:	40005000 	.word	0x40005000
 8003684:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	76bb      	strb	r3, [r7, #26]
        break;
 8003690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80f1 	beq.w	800387c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d305      	bcc.n	80036b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d902      	bls.n	80036bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	76bb      	strb	r3, [r7, #26]
 80036ba:	e0df      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	020b      	lsls	r3, r1, #8
 80036ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036d2:	0202      	lsls	r2, r0, #8
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	6849      	ldr	r1, [r1, #4]
 80036d8:	0849      	lsrs	r1, r1, #1
 80036da:	4608      	mov	r0, r1
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	1814      	adds	r4, r2, r0
 80036e2:	eb43 0501 	adc.w	r5, r3, r1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fc fd6c 	bl	80001d0 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d308      	bcc.n	800371a <UART_SetConfig+0x396>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d204      	bcs.n	800371a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	e0b0      	b.n	800387c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	76bb      	strb	r3, [r7, #26]
 800371e:	e0ad      	b.n	800387c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d15c      	bne.n	80037e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800372a:	7efb      	ldrb	r3, [r7, #27]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d828      	bhi.n	8003782 <UART_SetConfig+0x3fe>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x3b4>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fb56 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8003760:	6178      	str	r0, [r7, #20]
        break;
 8003762:	e013      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7fe fb68 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8003768:	6178      	str	r0, [r7, #20]
        break;
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b49      	ldr	r3, [pc, #292]	; (8003894 <UART_SetConfig+0x510>)
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e00c      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe fab3 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8003776:	6178      	str	r0, [r7, #20]
        break;
 8003778:	e008      	b.n	800378c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	617b      	str	r3, [r7, #20]
        break;
 8003780:	e004      	b.n	800378c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	76bb      	strb	r3, [r7, #26]
        break;
 800378a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d074      	beq.n	800387c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005a      	lsls	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d916      	bls.n	80037de <UART_SetConfig+0x45a>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b6:	d212      	bcs.n	80037de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	89fa      	ldrh	r2, [r7, #14]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e04e      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	76bb      	strb	r3, [r7, #26]
 80037e2:	e04b      	b.n	800387c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e4:	7efb      	ldrb	r3, [r7, #27]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d827      	bhi.n	800383a <UART_SetConfig+0x4b6>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x46c>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003815 	.word	0x08003815
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	08003825 	.word	0x08003825
 80037fc:	0800383b 	.word	0x0800383b
 8003800:	0800382b 	.word	0x0800382b
 8003804:	0800383b 	.word	0x0800383b
 8003808:	0800383b 	.word	0x0800383b
 800380c:	0800383b 	.word	0x0800383b
 8003810:	08003833 	.word	0x08003833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7fe fafa 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8003818:	6178      	str	r0, [r7, #20]
        break;
 800381a:	e013      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7fe fb0c 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 8003820:	6178      	str	r0, [r7, #20]
        break;
 8003822:	e00f      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <UART_SetConfig+0x510>)
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	e00c      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382a:	f7fe fa57 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 800382e:	6178      	str	r0, [r7, #20]
        break;
 8003830:	e008      	b.n	8003844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003836:	617b      	str	r3, [r7, #20]
        break;
 8003838:	e004      	b.n	8003844 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	76bb      	strb	r3, [r7, #26]
        break;
 8003842:	bf00      	nop
    }

    if (pclk != 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085a      	lsrs	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	b29b      	uxth	r3, r3
 800385e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d908      	bls.n	8003878 <UART_SetConfig+0x4f4>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d204      	bcs.n	8003878 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e001      	b.n	800387c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003888:	7ebb      	ldrb	r3, [r7, #26]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bdb0      	pop	{r4, r5, r7, pc}
 8003892:	bf00      	nop
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ec:	f7fd f8f6 	bl	8000bdc <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10e      	bne.n	8003a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82d 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e023      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f817 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00d      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	e05e      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a86:	d05a      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a88:	f7fd f8a8 	bl	8000bdc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11b      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e043      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02c      	beq.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d124      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003afc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e00f      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4013      	ands	r3, r2
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d091      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d107      	bne.n	8003ba6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0210 	bic.w	r2, r2, #16
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fbb8 	bl	8003358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fb95 	bl	8003344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <__NVIC_SetPriority>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	; (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SysTick_Handler+0x1c>)
 8003c92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c94:	f002 fbbc 	bl	8006410 <xTaskGetSchedulerState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d001      	beq.n	8003ca2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c9e:	f003 fb5b 	bl	8007358 <xPortSysTickHandler>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f06f 0004 	mvn.w	r0, #4
 8003cb6:	f7ff ffbf 	bl	8003c38 <__NVIC_SetPriority>
#endif
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc6:	f3ef 8305 	mrs	r3, IPSR
 8003cca:	603b      	str	r3, [r7, #0]
  return(result);
 8003ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003cd2:	f06f 0305 	mvn.w	r3, #5
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	e00c      	b.n	8003cf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <osKernelInitialize+0x44>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <osKernelInitialize+0x44>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e002      	b.n	8003cf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000002c 	.word	0x2000002c

08003d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d0e:	f3ef 8305 	mrs	r3, IPSR
 8003d12:	603b      	str	r3, [r7, #0]
  return(result);
 8003d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d1a:	f06f 0305 	mvn.w	r3, #5
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	e010      	b.n	8003d44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <osKernelStart+0x48>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d109      	bne.n	8003d3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d2a:	f7ff ffbf 	bl	8003cac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <osKernelStart+0x48>)
 8003d30:	2202      	movs	r2, #2
 8003d32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d34:	f001 ff24 	bl	8005b80 <vTaskStartScheduler>
      stat = osOK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e002      	b.n	8003d44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d44:	687b      	ldr	r3, [r7, #4]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000002c 	.word	0x2000002c

08003d54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af04      	add	r7, sp, #16
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d64:	f3ef 8305 	mrs	r3, IPSR
 8003d68:	617b      	str	r3, [r7, #20]
  return(result);
 8003d6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d17e      	bne.n	8003e6e <osThreadNew+0x11a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d07b      	beq.n	8003e6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d7a:	2318      	movs	r3, #24
 8003d7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d045      	beq.n	8003e1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <osThreadNew+0x48>
        name = attr->name;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <osThreadNew+0x6e>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b38      	cmp	r3, #56	; 0x38
 8003db4:	d805      	bhi.n	8003dc2 <osThreadNew+0x6e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <osThreadNew+0x72>
        return (NULL);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e054      	b.n	8003e70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <osThreadNew+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b5b      	cmp	r3, #91	; 0x5b
 8003de4:	d90a      	bls.n	8003dfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <osThreadNew+0xa8>
        mem = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e010      	b.n	8003e1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <osThreadNew+0xca>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d108      	bne.n	8003e1e <osThreadNew+0xca>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <osThreadNew+0xca>
          mem = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	e001      	b.n	8003e1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d110      	bne.n	8003e46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e2c:	9202      	str	r2, [sp, #8]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f001 fbb0 	bl	80055a0 <xTaskCreateStatic>
 8003e40:	4603      	mov	r3, r0
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e013      	b.n	8003e6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d110      	bne.n	8003e6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f001 fbfb 	bl	800565a <xTaskCreate>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <osThreadNew+0x11a>
            hTask = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e6e:	693b      	ldr	r3, [r7, #16]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <osDelay+0x1c>
    stat = osErrorISR;
 8003e8c:	f06f 0305 	mvn.w	r3, #5
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e007      	b.n	8003ea4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f001 fd20 	bl	80058e4 <vTaskDelay>
    }
  }

  return (stat);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f003 f870 	bl	8006f9c <pvTimerGetTimerID>
 8003ebc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6852      	ldr	r2, [r2, #4]
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	; 0x30
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eec:	f3ef 8305 	mrs	r3, IPSR
 8003ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d163      	bne.n	8003fc0 <osTimerNew+0xe8>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d060      	beq.n	8003fc0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003efe:	2008      	movs	r0, #8
 8003f00:	f003 faba 	bl	8007478 <pvPortMalloc>
 8003f04:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d059      	beq.n	8003fc0 <osTimerNew+0xe8>
      callb->func = func;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <osTimerNew+0x4c>
        reload = pdFALSE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	e001      	b.n	8003f28 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f2c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01c      	beq.n	8003f72 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <osTimerNew+0x6e>
          name = attr->name;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d006      	beq.n	8003f5c <osTimerNew+0x84>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b2b      	cmp	r3, #43	; 0x2b
 8003f54:	d902      	bls.n	8003f5c <osTimerNew+0x84>
          mem = 1;
 8003f56:	2301      	movs	r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e00c      	b.n	8003f76 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <osTimerNew+0x9e>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <osTimerNew+0x9e>
            mem = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	e001      	b.n	8003f76 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d10c      	bne.n	8003f96 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <osTimerNew+0xf4>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8e:	f002 fc86 	bl	800689e <xTimerCreateStatic>
 8003f92:	6238      	str	r0, [r7, #32]
 8003f94:	e00b      	b.n	8003fae <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <osTimerNew+0xf4>)
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa8:	f002 fc58 	bl	800685c <xTimerCreate>
 8003fac:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <osTimerNew+0xe8>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <osTimerNew+0xe8>
        vPortFree (callb);
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f003 fb28 	bl	8007610 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	08003eaf 	.word	0x08003eaf

08003fd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fdc:	f3ef 8305 	mrs	r3, IPSR
 8003fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fe2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d174      	bne.n	80040d2 <osMutexNew+0x102>
    if (attr != NULL) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e001      	b.n	8003ffa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <osMutexNew+0x3a>
      rmtx = 1U;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e001      	b.n	800400e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d15c      	bne.n	80040d2 <osMutexNew+0x102>
      mem = -1;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <osMutexNew+0x6a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b4f      	cmp	r3, #79	; 0x4f
 8004032:	d902      	bls.n	800403a <osMutexNew+0x6a>
          mem = 1;
 8004034:	2301      	movs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e00c      	b.n	8004054 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <osMutexNew+0x84>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <osMutexNew+0x84>
            mem = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e001      	b.n	8004054 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d112      	bne.n	8004080 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4619      	mov	r1, r3
 8004066:	2004      	movs	r0, #4
 8004068:	f000 fbaf 	bl	80047ca <xQueueCreateMutexStatic>
 800406c:	61f8      	str	r0, [r7, #28]
 800406e:	e016      	b.n	800409e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4619      	mov	r1, r3
 8004076:	2001      	movs	r0, #1
 8004078:	f000 fba7 	bl	80047ca <xQueueCreateMutexStatic>
 800407c:	61f8      	str	r0, [r7, #28]
 800407e:	e00e      	b.n	800409e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800408c:	2004      	movs	r0, #4
 800408e:	f000 fb84 	bl	800479a <xQueueCreateMutex>
 8004092:	61f8      	str	r0, [r7, #28]
 8004094:	e003      	b.n	800409e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004096:	2001      	movs	r0, #1
 8004098:	f000 fb7f 	bl	800479a <xQueueCreateMutex>
 800409c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <osMutexNew+0xee>
        if (attr != NULL) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <osMutexNew+0xe2>
          name = attr->name;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e001      	b.n	80040b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	69f8      	ldr	r0, [r7, #28]
 80040ba:	f001 f9e9 	bl	8005490 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d006      	beq.n	80040d2 <osMutexNew+0x102>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80040d2:	69fb      	ldr	r3, [r7, #28]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ec:	f3ef 8305 	mrs	r3, IPSR
 80040f0:	613b      	str	r3, [r7, #16]
  return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d175      	bne.n	80041e4 <osSemaphoreNew+0x108>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d072      	beq.n	80041e4 <osSemaphoreNew+0x108>
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	429a      	cmp	r2, r3
 8004104:	d86e      	bhi.n	80041e4 <osSemaphoreNew+0x108>
    mem = -1;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <osSemaphoreNew+0x4c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b4f      	cmp	r3, #79	; 0x4f
 8004120:	d902      	bls.n	8004128 <osSemaphoreNew+0x4c>
        mem = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e00c      	b.n	8004142 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <osSemaphoreNew+0x66>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <osSemaphoreNew+0x66>
          mem = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e001      	b.n	8004142 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004148:	d04c      	beq.n	80041e4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d128      	bne.n	80041a2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10a      	bne.n	800416c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2203      	movs	r2, #3
 800415c:	9200      	str	r2, [sp, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	2001      	movs	r0, #1
 8004164:	f000 fa2a 	bl	80045bc <xQueueGenericCreateStatic>
 8004168:	61f8      	str	r0, [r7, #28]
 800416a:	e005      	b.n	8004178 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800416c:	2203      	movs	r2, #3
 800416e:	2100      	movs	r1, #0
 8004170:	2001      	movs	r0, #1
 8004172:	f000 fa9b 	bl	80046ac <xQueueGenericCreate>
 8004176:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d022      	beq.n	80041c4 <osSemaphoreNew+0xe8>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01f      	beq.n	80041c4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004184:	2300      	movs	r3, #0
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	69f8      	ldr	r0, [r7, #28]
 800418c:	f000 fba2 	bl	80048d4 <xQueueGenericSend>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d016      	beq.n	80041c4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004196:	69f8      	ldr	r0, [r7, #28]
 8004198:	f001 f82e 	bl	80051f8 <vQueueDelete>
            hSemaphore = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	e010      	b.n	80041c4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	461a      	mov	r2, r3
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb25 	bl	8004800 <xQueueCreateCountingSemaphoreStatic>
 80041b6:	61f8      	str	r0, [r7, #28]
 80041b8:	e004      	b.n	80041c4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fb56 	bl	800486e <xQueueCreateCountingSemaphore>
 80041c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e001      	b.n	80041dc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	69f8      	ldr	r0, [r7, #28]
 80041e0:	f001 f956 	bl	8005490 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80041e4:	69fb      	ldr	r3, [r7, #28]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004208:	f06f 0303 	mvn.w	r3, #3
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e039      	b.n	8004284 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004210:	f3ef 8305 	mrs	r3, IPSR
 8004214:	60fb      	str	r3, [r7, #12]
  return(result);
 8004216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004218:	2b00      	cmp	r3, #0
 800421a:	d022      	beq.n	8004262 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004222:	f06f 0303 	mvn.w	r3, #3
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e02c      	b.n	8004284 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	461a      	mov	r2, r3
 8004234:	2100      	movs	r1, #0
 8004236:	6938      	ldr	r0, [r7, #16]
 8004238:	f000 ff5e 	bl	80050f8 <xQueueReceiveFromISR>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d003      	beq.n	800424a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004242:	f06f 0302 	mvn.w	r3, #2
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e01c      	b.n	8004284 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d019      	beq.n	8004284 <osSemaphoreAcquire+0x94>
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <osSemaphoreAcquire+0xa0>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	e010      	b.n	8004284 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	6938      	ldr	r0, [r7, #16]
 8004266:	f000 fe3b 	bl	8004ee0 <xQueueSemaphoreTake>
 800426a:	4603      	mov	r3, r0
 800426c:	2b01      	cmp	r3, #1
 800426e:	d009      	beq.n	8004284 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004276:	f06f 0301 	mvn.w	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e002      	b.n	8004284 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800427e:	f06f 0302 	mvn.w	r3, #2
 8004282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004284:	697b      	ldr	r3, [r7, #20]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80042aa:	f06f 0303 	mvn.w	r3, #3
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e02c      	b.n	800430c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b2:	f3ef 8305 	mrs	r3, IPSR
 80042b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80042b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	4619      	mov	r1, r3
 80042c8:	6938      	ldr	r0, [r7, #16]
 80042ca:	f000 fc9c 	bl	8004c06 <xQueueGiveFromISR>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d003      	beq.n	80042dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80042d4:	f06f 0302 	mvn.w	r3, #2
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e017      	b.n	800430c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d014      	beq.n	800430c <osSemaphoreRelease+0x78>
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <osSemaphoreRelease+0x84>)
 80042e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	e00b      	b.n	800430c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80042f4:	2300      	movs	r3, #0
 80042f6:	2200      	movs	r2, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 faea 	bl	80048d4 <xQueueGenericSend>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d002      	beq.n	800430c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004306:	f06f 0302 	mvn.w	r3, #2
 800430a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <vApplicationGetIdleTaskMemory+0x2c>)
 800432c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a06      	ldr	r2, [pc, #24]	; (800434c <vApplicationGetIdleTaskMemory+0x30>)
 8004332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2280      	movs	r2, #128	; 0x80
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000030 	.word	0x20000030
 800434c:	2000008c 	.word	0x2000008c

08004350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a07      	ldr	r2, [pc, #28]	; (800437c <vApplicationGetTimerTaskMemory+0x2c>)
 8004360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a06      	ldr	r2, [pc, #24]	; (8004380 <vApplicationGetTimerTaskMemory+0x30>)
 8004366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	2000028c 	.word	0x2000028c
 8004380:	200002e8 	.word	0x200002e8

08004384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800439c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f103 0208 	add.w	r2, r3, #8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 0208 	add.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443c:	d103      	bne.n	8004446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e00c      	b.n	8004460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3308      	adds	r3, #8
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e002      	b.n	8004454 <vListInsert+0x2e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d2f6      	bcs.n	800444e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6892      	ldr	r2, [r2, #8]
 80044ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6852      	ldr	r2, [r2, #4]
 80044b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d103      	bne.n	80044cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	1e5a      	subs	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004516:	f002 fe8d 	bl	8007234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	441a      	add	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	3b01      	subs	r3, #1
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	22ff      	movs	r2, #255	; 0xff
 8004562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d114      	bne.n	8004596 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01a      	beq.n	80045aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3310      	adds	r3, #16
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fd8b 	bl	8006094 <xTaskRemoveFromEventList>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <xQueueGenericReset+0xcc>)
 8004586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	e009      	b.n	80045aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3310      	adds	r3, #16
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fef2 	bl	8004384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3324      	adds	r3, #36	; 0x24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff feed 	bl	8004384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045aa:	f002 fe73 	bl	8007294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ae:	2301      	movs	r3, #1
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08e      	sub	sp, #56	; 0x38
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <xQueueGenericCreateStatic+0x52>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <xQueueGenericCreateStatic+0x56>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <xQueueGenericCreateStatic+0x58>
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	623b      	str	r3, [r7, #32]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <xQueueGenericCreateStatic+0x7e>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <xQueueGenericCreateStatic+0x82>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <xQueueGenericCreateStatic+0x84>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fb      	str	r3, [r7, #28]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800465a:	2350      	movs	r3, #80	; 0x50
 800465c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d00a      	beq.n	800467a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61bb      	str	r3, [r7, #24]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800467a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800468e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f83f 	bl	8004720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3730      	adds	r7, #48	; 0x30
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	613b      	str	r3, [r7, #16]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3350      	adds	r3, #80	; 0x50
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 fec7 	bl	8007478 <pvPortMalloc>
 80046ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3350      	adds	r3, #80	; 0x50
 80046fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004704:	79fa      	ldrb	r2, [r7, #7]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f805 	bl	8004720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004716:	69bb      	ldr	r3, [r7, #24]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e002      	b.n	8004742 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474e:	2101      	movs	r1, #1
 8004750:	69b8      	ldr	r0, [r7, #24]
 8004752:	f7ff fecb 	bl	80044ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004786:	2300      	movs	r3, #0
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8a1 	bl	80048d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6939      	ldr	r1, [r7, #16]
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff ff7a 	bl	80046ac <xQueueGenericCreate>
 80047b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ffd3 	bl	8004766 <prvInitialiseMutex>

		return xNewQueue;
 80047c0:	68fb      	ldr	r3, [r7, #12]
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b088      	sub	sp, #32
 80047ce:	af02      	add	r7, sp, #8
 80047d0:	4603      	mov	r3, r0
 80047d2:	6039      	str	r1, [r7, #0]
 80047d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047d6:	2301      	movs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f7ff fee7 	bl	80045bc <xQueueGenericCreateStatic>
 80047ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ffb8 	bl	8004766 <prvInitialiseMutex>

		return xNewQueue;
 80047f6:	68fb      	ldr	r3, [r7, #12]
	}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61bb      	str	r3, [r7, #24]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d90a      	bls.n	8004846 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	617b      	str	r3, [r7, #20]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004846:	2302      	movs	r3, #2
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	2100      	movs	r1, #0
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff feb3 	bl	80045bc <xQueueGenericCreateStatic>
 8004856:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004864:	69fb      	ldr	r3, [r7, #28]
	}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	613b      	str	r3, [r7, #16]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d90a      	bls.n	80048b2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60fb      	str	r3, [r7, #12]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80048b2:	2202      	movs	r2, #2
 80048b4:	2100      	movs	r1, #0
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fef8 	bl	80046ac <xQueueGenericCreate>
 80048bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80048ca:	697b      	ldr	r3, [r7, #20]
	}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	; 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericSend+0x32>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <xQueueGenericSend+0x40>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <xQueueGenericSend+0x44>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <xQueueGenericSend+0x46>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <xQueueGenericSend+0x60>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d103      	bne.n	8004942 <xQueueGenericSend+0x6e>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <xQueueGenericSend+0x72>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericSend+0x74>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericSend+0x8e>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	623b      	str	r3, [r7, #32]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004962:	f001 fd55 	bl	8006410 <xTaskGetSchedulerState>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <xQueueGenericSend+0x9e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <xQueueGenericSend+0xa2>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <xQueueGenericSend+0xa4>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <xQueueGenericSend+0xbe>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	61fb      	str	r3, [r7, #28]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004992:	f002 fc4f 	bl	8007234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <xQueueGenericSend+0xd4>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d129      	bne.n	80049fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ae:	f000 fc5e 	bl	800526e <prvCopyDataToQueue>
 80049b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 fb67 	bl	8006094 <xTaskRemoveFromEventList>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <xQueueGenericSend+0x1f8>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	e00a      	b.n	80049f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <xQueueGenericSend+0x1f8>)
 80049e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049f4:	f002 fc4e 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e063      	b.n	8004ac4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a02:	f002 fc47 	bl	8007294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e05c      	b.n	8004ac4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fba1 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a1e:	f002 fc39 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a22:	f001 f913 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a26:	f002 fc05 	bl	8007234 <vPortEnterCritical>
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a30:	b25b      	sxtb	r3, r3
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a36:	d103      	bne.n	8004a40 <xQueueGenericSend+0x16c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a4c:	d103      	bne.n	8004a56 <xQueueGenericSend+0x182>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a56:	f002 fc1d 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a5a:	1d3a      	adds	r2, r7, #4
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fb90 	bl	8006188 <xTaskCheckForTimeOut>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d124      	bne.n	8004ab8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a70:	f000 fcf5 	bl	800545e <prvIsQueueFull>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4611      	mov	r1, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 fab6 	bl	8005ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 fc80 	bl	800538e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a8e:	f001 f8eb 	bl	8005c68 <xTaskResumeAll>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f af7c 	bne.w	8004992 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <xQueueGenericSend+0x1f8>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	e772      	b.n	8004992 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aae:	f000 fc6e 	bl	800538e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ab2:	f001 f8d9 	bl	8005c68 <xTaskResumeAll>
 8004ab6:	e76c      	b.n	8004992 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aba:	f000 fc68 	bl	800538e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004abe:	f001 f8d3 	bl	8005c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ac2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3738      	adds	r7, #56	; 0x38
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b090      	sub	sp, #64	; 0x40
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <xQueueGenericSendFromISR+0x3c>
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <xQueueGenericSendFromISR+0x40>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <xQueueGenericSendFromISR+0x42>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <xQueueGenericSendFromISR+0x6a>
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <xQueueGenericSendFromISR+0x6e>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <xQueueGenericSendFromISR+0x70>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	623b      	str	r3, [r7, #32]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b5a:	f002 fc4d 	bl	80073f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	61fa      	str	r2, [r7, #28]
 8004b74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <xQueueGenericSendFromISR+0xbc>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d12f      	bne.n	8004bec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ba2:	f000 fb64 	bl	800526e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ba6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bae:	d112      	bne.n	8004bd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d016      	beq.n	8004be6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fa69 	bl	8006094 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	b25a      	sxtb	r2, r3
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004be6:	2301      	movs	r3, #1
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004bea:	e001      	b.n	8004bf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3740      	adds	r7, #64	; 0x40
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b08e      	sub	sp, #56	; 0x38
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	623b      	str	r3, [r7, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61fb      	str	r3, [r7, #28]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <xQueueGiveFromISR+0x58>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <xQueueGiveFromISR+0x5c>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueGiveFromISR+0x5e>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	61bb      	str	r3, [r7, #24]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c7e:	f002 fbbb 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c82:	f3ef 8211 	mrs	r2, BASEPRI
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004c9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d22b      	bcs.n	8004d06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc8:	d112      	bne.n	8004cf0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 f9dc 	bl	8006094 <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00e      	beq.n	8004d00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e007      	b.n	8004d00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	b25a      	sxtb	r2, r3
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d00:	2301      	movs	r3, #1
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
 8004d04:	e001      	b.n	8004d0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f383 8811 	msr	BASEPRI, r3
}
 8004d14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3738      	adds	r7, #56	; 0x38
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xQueueReceive+0x30>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	623b      	str	r3, [r7, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueReceive+0x3e>
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <xQueueReceive+0x42>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueReceive+0x44>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueReceive+0x5e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	61fb      	str	r3, [r7, #28]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d7e:	f001 fb47 	bl	8006410 <xTaskGetSchedulerState>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <xQueueReceive+0x6e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <xQueueReceive+0x72>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <xQueueReceive+0x74>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xQueueReceive+0x8e>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	61bb      	str	r3, [r7, #24]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dae:	f002 fa41 	bl	8007234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01f      	beq.n	8004dfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc2:	f000 fabe 	bl	8005342 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00f      	beq.n	8004df6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	3310      	adds	r3, #16
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f95a 	bl	8006094 <xTaskRemoveFromEventList>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <xQueueReceive+0x1bc>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004df6:	f002 fa4d 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e069      	b.n	8004ed2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e04:	f002 fa46 	bl	8007294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e062      	b.n	8004ed2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e12:	f107 0310 	add.w	r3, r7, #16
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 f9a0 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e20:	f002 fa38 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e24:	f000 ff12 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e28:	f002 fa04 	bl	8007234 <vPortEnterCritical>
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e32:	b25b      	sxtb	r3, r3
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e38:	d103      	bne.n	8004e42 <xQueueReceive+0x122>
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e4e:	d103      	bne.n	8004e58 <xQueueReceive+0x138>
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e58:	f002 fa1c 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e5c:	1d3a      	adds	r2, r7, #4
 8004e5e:	f107 0310 	add.w	r3, r7, #16
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f98f 	bl	8006188 <xTaskCheckForTimeOut>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d123      	bne.n	8004eb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e72:	f000 fade 	bl	8005432 <prvIsQueueEmpty>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d017      	beq.n	8004eac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	3324      	adds	r3, #36	; 0x24
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f8b5 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8c:	f000 fa7f 	bl	800538e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e90:	f000 feea 	bl	8005c68 <xTaskResumeAll>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d189      	bne.n	8004dae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <xQueueReceive+0x1bc>)
 8004e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	e780      	b.n	8004dae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eae:	f000 fa6e 	bl	800538e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eb2:	f000 fed9 	bl	8005c68 <xTaskResumeAll>
 8004eb6:	e77a      	b.n	8004dae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eba:	f000 fa68 	bl	800538e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ebe:	f000 fed3 	bl	8005c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec4:	f000 fab5 	bl	8005432 <prvIsQueueEmpty>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f43f af6f 	beq.w	8004dae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ed0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3730      	adds	r7, #48	; 0x30
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	; 0x38
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	623b      	str	r3, [r7, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	61fb      	str	r3, [r7, #28]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f30:	f001 fa6e 	bl	8006410 <xTaskGetSchedulerState>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <xQueueSemaphoreTake+0x60>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <xQueueSemaphoreTake+0x64>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <xQueueSemaphoreTake+0x66>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	61bb      	str	r3, [r7, #24]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f60:	f002 f968 	bl	8007234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d024      	beq.n	8004fba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f80:	f001 fbbc 	bl	80066fc <pvTaskIncrementMutexHeldCount>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00f      	beq.n	8004fb2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	3310      	adds	r3, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 f87c 	bl	8006094 <xTaskRemoveFromEventList>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fa2:	4b54      	ldr	r3, [pc, #336]	; (80050f4 <xQueueSemaphoreTake+0x214>)
 8004fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fb2:	f002 f96f 	bl	8007294 <vPortExitCritical>
				return pdPASS;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e097      	b.n	80050ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d111      	bne.n	8004fe4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	617b      	str	r3, [r7, #20]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004fdc:	f002 f95a 	bl	8007294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e082      	b.n	80050ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f8b4 	bl	800615c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ff8:	f002 f94c 	bl	8007294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ffc:	f000 fe26 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005000:	f002 f918 	bl	8007234 <vPortEnterCritical>
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800500a:	b25b      	sxtb	r3, r3
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005010:	d103      	bne.n	800501a <xQueueSemaphoreTake+0x13a>
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005020:	b25b      	sxtb	r3, r3
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005026:	d103      	bne.n	8005030 <xQueueSemaphoreTake+0x150>
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005030:	f002 f930 	bl	8007294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005034:	463a      	mov	r2, r7
 8005036:	f107 030c 	add.w	r3, r7, #12
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f8a3 	bl	8006188 <xTaskCheckForTimeOut>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d132      	bne.n	80050ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800504a:	f000 f9f2 	bl	8005432 <prvIsQueueEmpty>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d026      	beq.n	80050a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800505c:	f002 f8ea 	bl	8007234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f001 f9f1 	bl	800644c <xTaskPriorityInherit>
 800506a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800506c:	f002 f912 	bl	8007294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	3324      	adds	r3, #36	; 0x24
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f000 ffbb 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800507e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005080:	f000 f985 	bl	800538e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005084:	f000 fdf0 	bl	8005c68 <xTaskResumeAll>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f47f af68 	bne.w	8004f60 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005090:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <xQueueSemaphoreTake+0x214>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	e75e      	b.n	8004f60 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80050a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050a4:	f000 f973 	bl	800538e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a8:	f000 fdde 	bl	8005c68 <xTaskResumeAll>
 80050ac:	e758      	b.n	8004f60 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80050ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050b0:	f000 f96d 	bl	800538e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050b4:	f000 fdd8 	bl	8005c68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050ba:	f000 f9ba 	bl	8005432 <prvIsQueueEmpty>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f43f af4d 	beq.w	8004f60 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80050cc:	f002 f8b2 	bl	8007234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80050d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050d2:	f000 f8b4 	bl	800523e <prvGetDisinheritPriorityAfterTimeout>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fa8a 	bl	80065f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80050e4:	f002 f8d6 	bl	8007294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3738      	adds	r7, #56	; 0x38
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08e      	sub	sp, #56	; 0x38
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	623b      	str	r3, [r7, #32]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <xQueueReceiveFromISR+0x3a>
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <xQueueReceiveFromISR+0x3e>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <xQueueReceiveFromISR+0x40>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	61fb      	str	r3, [r7, #28]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005152:	f002 f951 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 8005156:	f3ef 8211 	mrs	r2, BASEPRI
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	61ba      	str	r2, [r7, #24]
 800516c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800516e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02f      	beq.n	80051de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800518c:	f000 f8d9 	bl	8005342 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a0:	d112      	bne.n	80051c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	3310      	adds	r3, #16
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 ff70 	bl	8006094 <xTaskRemoveFromEventList>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	b25a      	sxtb	r2, r3
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80051d8:	2301      	movs	r3, #1
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	e001      	b.n	80051e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80051de:	2300      	movs	r3, #0
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f383 8811 	msr	BASEPRI, r3
}
 80051ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3738      	adds	r7, #56	; 0x38
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <vQueueDelete+0x28>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60bb      	str	r3, [r7, #8]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f95f 	bl	80054e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f002 f9ed 	bl	8007610 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d006      	beq.n	800525c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e001      	b.n	8005260 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005260:	68fb      	ldr	r3, [r7, #12]
	}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b086      	sub	sp, #24
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d14d      	bne.n	8005330 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f001 f93f 	bl	800651c <xTaskPriorityDisinherit>
 800529e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	e043      	b.n	8005330 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d119      	bne.n	80052e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6858      	ldr	r0, [r3, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	461a      	mov	r2, r3
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	f002 faeb 	bl	8007894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d32b      	bcc.n	8005330 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	e026      	b.n	8005330 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68d8      	ldr	r0, [r3, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	461a      	mov	r2, r3
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	f002 fad1 	bl	8007894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	425b      	negs	r3, r3
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d207      	bcs.n	800531e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	425b      	negs	r3, r3
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d105      	bne.n	8005330 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3b01      	subs	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005338:	697b      	ldr	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d018      	beq.n	8005386 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	441a      	add	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d303      	bcc.n	8005376 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68d9      	ldr	r1, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	461a      	mov	r2, r3
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f002 fa87 	bl	8007894 <memcpy>
	}
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005396:	f001 ff4d 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053a2:	e011      	b.n	80053c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3324      	adds	r3, #36	; 0x24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fe6f 	bl	8006094 <xTaskRemoveFromEventList>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053bc:	f000 ff46 	bl	800624c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dce9      	bgt.n	80053a4 <prvUnlockQueue+0x16>
 80053d0:	e000      	b.n	80053d4 <prvUnlockQueue+0x46>
					break;
 80053d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053dc:	f001 ff5a 	bl	8007294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053e0:	f001 ff28 	bl	8007234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ec:	e011      	b.n	8005412 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3310      	adds	r3, #16
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fe4a 	bl	8006094 <xTaskRemoveFromEventList>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005406:	f000 ff21 	bl	800624c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	3b01      	subs	r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005416:	2b00      	cmp	r3, #0
 8005418:	dce9      	bgt.n	80053ee <prvUnlockQueue+0x60>
 800541a:	e000      	b.n	800541e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800541c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005426:	f001 ff35 	bl	8007294 <vPortExitCritical>
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800543a:	f001 fefb 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e001      	b.n	8005450 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005450:	f001 ff20 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005454:	68fb      	ldr	r3, [r7, #12]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005466:	f001 fee5 	bl	8007234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	429a      	cmp	r2, r3
 8005474:	d102      	bne.n	800547c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e001      	b.n	8005480 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005480:	f001 ff08 	bl	8007294 <vPortExitCritical>

	return xReturn;
 8005484:	68fb      	ldr	r3, [r7, #12]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e014      	b.n	80054ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054a0:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <vQueueAddToRegistry+0x50>)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10b      	bne.n	80054c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <vQueueAddToRegistry+0x50>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054b6:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <vQueueAddToRegistry+0x50>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054c2:	e006      	b.n	80054d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d9e7      	bls.n	80054a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	200021c0 	.word	0x200021c0

080054e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e016      	b.n	8005520 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80054f2:	4a10      	ldr	r2, [pc, #64]	; (8005534 <vQueueUnregisterQueue+0x50>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d10b      	bne.n	800551a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005502:	4a0c      	ldr	r2, [pc, #48]	; (8005534 <vQueueUnregisterQueue+0x50>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2100      	movs	r1, #0
 8005508:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <vQueueUnregisterQueue+0x50>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]
				break;
 8005518:	e006      	b.n	8005528 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b07      	cmp	r3, #7
 8005524:	d9e5      	bls.n	80054f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	200021c0 	.word	0x200021c0

08005538 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005548:	f001 fe74 	bl	8007234 <vPortEnterCritical>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005552:	b25b      	sxtb	r3, r3
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005558:	d103      	bne.n	8005562 <vQueueWaitForMessageRestricted+0x2a>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	b25b      	sxtb	r3, r3
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556e:	d103      	bne.n	8005578 <vQueueWaitForMessageRestricted+0x40>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005578:	f001 fe8c 	bl	8007294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3324      	adds	r3, #36	; 0x24
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fd55 	bl	800603c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f7ff fefb 	bl	800538e <prvUnlockQueue>
	}
 8005598:	bf00      	nop
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	; 0x38
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61fb      	str	r3, [r7, #28]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055e6:	235c      	movs	r3, #92	; 0x5c
 80055e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b5c      	cmp	r3, #92	; 0x5c
 80055ee:	d00a      	beq.n	8005606 <xTaskCreateStatic+0x66>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	61bb      	str	r3, [r7, #24]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005606:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01e      	beq.n	800564c <xTaskCreateStatic+0xac>
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01b      	beq.n	800564c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005626:	2300      	movs	r3, #0
 8005628:	9303      	str	r3, [sp, #12]
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	9302      	str	r3, [sp, #8]
 800562e:	f107 0314 	add.w	r3, r7, #20
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f850 	bl	80056e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005646:	f000 f8dd 	bl	8005804 <prvAddNewTaskToReadyList>
 800564a:	e001      	b.n	8005650 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005650:	697b      	ldr	r3, [r7, #20]
	}
 8005652:	4618      	mov	r0, r3
 8005654:	3728      	adds	r7, #40	; 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800565a:	b580      	push	{r7, lr}
 800565c:	b08c      	sub	sp, #48	; 0x30
 800565e:	af04      	add	r7, sp, #16
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f001 ff02 	bl	8007478 <pvPortMalloc>
 8005674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800567c:	205c      	movs	r0, #92	; 0x5c
 800567e:	f001 fefb 	bl	8007478 <pvPortMalloc>
 8005682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
 8005690:	e005      	b.n	800569e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f001 ffbc 	bl	8007610 <vPortFree>
 8005698:	e001      	b.n	800569e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d017      	beq.n	80056d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056ac:	88fa      	ldrh	r2, [r7, #6]
 80056ae:	2300      	movs	r3, #0
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f80e 	bl	80056e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056c8:	69f8      	ldr	r0, [r7, #28]
 80056ca:	f000 f89b 	bl	8005804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e002      	b.n	80056da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056da:	69bb      	ldr	r3, [r7, #24]
	}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	461a      	mov	r2, r3
 80056fc:	21a5      	movs	r1, #165	; 0xa5
 80056fe:	f002 f8d7 	bl	80078b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800570c:	3b01      	subs	r3, #1
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	617b      	str	r3, [r7, #20]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d01f      	beq.n	8005782 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e012      	b.n	800576e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	7819      	ldrb	r1, [r3, #0]
 8005750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	3334      	adds	r3, #52	; 0x34
 8005758:	460a      	mov	r2, r1
 800575a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d006      	beq.n	8005776 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	3301      	adds	r3, #1
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d9e9      	bls.n	8005748 <prvInitialiseNewTask+0x64>
 8005774:	e000      	b.n	8005778 <prvInitialiseNewTask+0x94>
			{
				break;
 8005776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005780:	e003      	b.n	800578a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	2b37      	cmp	r3, #55	; 0x37
 800578e:	d901      	bls.n	8005794 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005790:	2337      	movs	r3, #55	; 0x37
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	3304      	adds	r3, #4
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fe0a 	bl	80043c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	3318      	adds	r3, #24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fe05 	bl	80043c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2200      	movs	r2, #0
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	68f9      	ldr	r1, [r7, #12]
 80057e2:	69b8      	ldr	r0, [r7, #24]
 80057e4:	f001 fbfa 	bl	8006fdc <pxPortInitialiseStack>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057fa:	bf00      	nop
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800580c:	f001 fd12 	bl	8007234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 8005818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800581a:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d110      	bne.n	8005852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005830:	f000 fd30 	bl	8006294 <prvInitialiseTaskLists>
 8005834:	e00d      	b.n	8005852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <prvAddNewTaskToReadyList+0xcc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800583e:	4b23      	ldr	r3, [pc, #140]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d802      	bhi.n	8005852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005852:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 800585a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <prvAddNewTaskToReadyList+0xd4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <prvAddNewTaskToReadyList+0x74>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <prvAddNewTaskToReadyList+0xd4>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <prvAddNewTaskToReadyList+0xd8>)
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7fe fda5 	bl	80043de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005894:	f001 fcfe 	bl	8007294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <prvAddNewTaskToReadyList+0xcc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d207      	bcs.n	80058be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <prvAddNewTaskToReadyList+0xdc>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000bbc 	.word	0x20000bbc
 80058cc:	200006e8 	.word	0x200006e8
 80058d0:	20000bc8 	.word	0x20000bc8
 80058d4:	20000bd8 	.word	0x20000bd8
 80058d8:	20000bc4 	.word	0x20000bc4
 80058dc:	200006ec 	.word	0x200006ec
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d017      	beq.n	8005926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <vTaskDelay+0x60>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <vTaskDelay+0x30>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60bb      	str	r3, [r7, #8]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005914:	f000 f99a 	bl	8005c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 ff02 	bl	8006724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005920:	f000 f9a2 	bl	8005c68 <xTaskResumeAll>
 8005924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <vTaskDelay+0x64>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20000be4 	.word	0x20000be4
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005954:	f001 fc6e 	bl	8007234 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <vTaskSuspend+0x18>
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <vTaskSuspend+0xd4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	e000      	b.n	8005966 <vTaskSuspend+0x1a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fd93 	bl	8004498 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3318      	adds	r3, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fd8a 	bl	8004498 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4826      	ldr	r0, [pc, #152]	; (8005a24 <vTaskSuspend+0xd8>)
 800598c:	f7fe fd27 	bl	80043de <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d103      	bne.n	80059a4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80059a4:	f001 fc76 	bl	8007294 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80059a8:	4b1f      	ldr	r3, [pc, #124]	; (8005a28 <vTaskSuspend+0xdc>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80059b0:	f001 fc40 	bl	8007234 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80059b4:	f000 fd0c 	bl	80063d0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80059b8:	f001 fc6c 	bl	8007294 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <vTaskSuspend+0xd4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d127      	bne.n	8005a16 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <vTaskSuspend+0xdc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d017      	beq.n	80059fe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80059ce:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <vTaskSuspend+0xe0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <vTaskSuspend+0xa0>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60bb      	str	r3, [r7, #8]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <vTaskSuspend+0xe4>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059fc:	e00b      	b.n	8005a16 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <vTaskSuspend+0xd8>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <vTaskSuspend+0xe8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d103      	bne.n	8005a12 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <vTaskSuspend+0xd4>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
	}
 8005a10:	e001      	b.n	8005a16 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005a12:	f000 fa91 	bl	8005f38 <vTaskSwitchContext>
	}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	200006e8 	.word	0x200006e8
 8005a24:	20000ba8 	.word	0x20000ba8
 8005a28:	20000bc8 	.word	0x20000bc8
 8005a2c:	20000be4 	.word	0x20000be4
 8005a30:	e000ed04 	.word	0xe000ed04
 8005a34:	20000bbc 	.word	0x20000bbc

08005a38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60fb      	str	r3, [r7, #12]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <prvTaskIsTaskSuspended+0x5c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10a      	bne.n	8005a84 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <prvTaskIsTaskSuspended+0x60>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d005      	beq.n	8005a84 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a84:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000ba8 	.word	0x20000ba8
 8005a98:	20000b7c 	.word	0x20000b7c

08005a9c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	61bb      	str	r3, [r7, #24]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ac8:	f001 fc96 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 8005acc:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	617a      	str	r2, [r7, #20]
 8005ae2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ae4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ae6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005ae8:	6a38      	ldr	r0, [r7, #32]
 8005aea:	f7ff ffa5 	bl	8005a38 <prvTaskIsTaskSuspended>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d030      	beq.n	8005b56 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af4:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <xTaskResumeFromISR+0xd0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d126      	bne.n	8005b4a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <xTaskResumeFromISR+0xd4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d301      	bcc.n	8005b0e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fcc0 	bl	8004498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <xTaskResumeFromISR+0xd8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d903      	bls.n	8005b2c <xTaskResumeFromISR+0x90>
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <xTaskResumeFromISR+0xd8>)
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <xTaskResumeFromISR+0xdc>)
 8005b3a:	441a      	add	r2, r3
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f7fe fc4b 	bl	80043de <vListInsertEnd>
 8005b48:	e005      	b.n	8005b56 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	4619      	mov	r1, r3
 8005b50:	480a      	ldr	r0, [pc, #40]	; (8005b7c <xTaskResumeFromISR+0xe0>)
 8005b52:	f7fe fc44 	bl	80043de <vListInsertEnd>
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f383 8811 	msr	BASEPRI, r3
}
 8005b60:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3728      	adds	r7, #40	; 0x28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000be4 	.word	0x20000be4
 8005b70:	200006e8 	.word	0x200006e8
 8005b74:	20000bc4 	.word	0x20000bc4
 8005b78:	200006ec 	.word	0x200006ec
 8005b7c:	20000b7c 	.word	0x20000b7c

08005b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b8e:	463a      	mov	r2, r7
 8005b90:	1d39      	adds	r1, r7, #4
 8005b92:	f107 0308 	add.w	r3, r7, #8
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fbc0 	bl	800431c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	9202      	str	r2, [sp, #8]
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	2300      	movs	r3, #0
 8005bac:	460a      	mov	r2, r1
 8005bae:	4921      	ldr	r1, [pc, #132]	; (8005c34 <vTaskStartScheduler+0xb4>)
 8005bb0:	4821      	ldr	r0, [pc, #132]	; (8005c38 <vTaskStartScheduler+0xb8>)
 8005bb2:	f7ff fcf5 	bl	80055a0 <xTaskCreateStatic>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <vTaskStartScheduler+0xbc>)
 8005bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <vTaskStartScheduler+0xbc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e001      	b.n	8005bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d102      	bne.n	8005bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bd4:	f000 fdfa 	bl	80067cc <xTimerCreateTimerTask>
 8005bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d116      	bne.n	8005c0e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <vTaskStartScheduler+0xc0>)
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <vTaskStartScheduler+0xc4>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c02:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <vTaskStartScheduler+0xc8>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c08:	f001 fa72 	bl	80070f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c0c:	e00e      	b.n	8005c2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c14:	d10a      	bne.n	8005c2c <vTaskStartScheduler+0xac>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskStartScheduler+0xaa>
}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08007910 	.word	0x08007910
 8005c38:	08006265 	.word	0x08006265
 8005c3c:	20000be0 	.word	0x20000be0
 8005c40:	20000bdc 	.word	0x20000bdc
 8005c44:	20000bc8 	.word	0x20000bc8
 8005c48:	20000bc0 	.word	0x20000bc0

08005c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <vTaskSuspendAll+0x18>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a03      	ldr	r2, [pc, #12]	; (8005c64 <vTaskSuspendAll+0x18>)
 8005c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c5a:	bf00      	nop
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000be4 	.word	0x20000be4

08005c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c76:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <xTaskResumeAll+0x118>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	603b      	str	r3, [r7, #0]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c94:	f001 face 	bl	8007234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <xTaskResumeAll+0x118>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a38      	ldr	r2, [pc, #224]	; (8005d80 <xTaskResumeAll+0x118>)
 8005ca0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <xTaskResumeAll+0x118>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d162      	bne.n	8005d70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005caa:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <xTaskResumeAll+0x11c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d05e      	beq.n	8005d70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb2:	e02f      	b.n	8005d14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb4:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <xTaskResumeAll+0x120>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3318      	adds	r3, #24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fbe9 	bl	8004498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fbe4 	bl	8004498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <xTaskResumeAll+0x124>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d903      	bls.n	8005ce4 <xTaskResumeAll+0x7c>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <xTaskResumeAll+0x124>)
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <xTaskResumeAll+0x128>)
 8005cf2:	441a      	add	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fe fb6f 	bl	80043de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <xTaskResumeAll+0x12c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d0e:	4b22      	ldr	r3, [pc, #136]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d14:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <xTaskResumeAll+0x120>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1cb      	bne.n	8005cb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d22:	f000 fb55 	bl	80063d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <xTaskResumeAll+0x134>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d010      	beq.n	8005d54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d32:	f000 f847 	bl	8005dc4 <xTaskIncrementTick>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d3c:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f1      	bne.n	8005d32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <xTaskResumeAll+0x134>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <xTaskResumeAll+0x130>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <xTaskResumeAll+0x138>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 fa90 	bl	8007294 <vPortExitCritical>

	return xAlreadyYielded;
 8005d74:	68bb      	ldr	r3, [r7, #8]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000be4 	.word	0x20000be4
 8005d84:	20000bbc 	.word	0x20000bbc
 8005d88:	20000b7c 	.word	0x20000b7c
 8005d8c:	20000bc4 	.word	0x20000bc4
 8005d90:	200006ec 	.word	0x200006ec
 8005d94:	200006e8 	.word	0x200006e8
 8005d98:	20000bd0 	.word	0x20000bd0
 8005d9c:	20000bcc 	.word	0x20000bcc
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <xTaskGetTickCount+0x1c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20000bc0 	.word	0x20000bc0

08005dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dce:	4b4f      	ldr	r3, [pc, #316]	; (8005f0c <xTaskIncrementTick+0x148>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 808f 	bne.w	8005ef6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dd8:	4b4d      	ldr	r3, [pc, #308]	; (8005f10 <xTaskIncrementTick+0x14c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005de0:	4a4b      	ldr	r2, [pc, #300]	; (8005f10 <xTaskIncrementTick+0x14c>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d120      	bne.n	8005e2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <xTaskIncrementTick+0x48>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	603b      	str	r3, [r7, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <xTaskIncrementTick+0x46>
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <xTaskIncrementTick+0x154>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a3f      	ldr	r2, [pc, #252]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <xTaskIncrementTick+0x154>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <xTaskIncrementTick+0x158>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <xTaskIncrementTick+0x158>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	f000 fad1 	bl	80063d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e2e:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d349      	bcc.n	8005ecc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e38:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e48:	601a      	str	r2, [r3, #0]
					break;
 8005e4a:	e03f      	b.n	8005ecc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <xTaskIncrementTick+0x150>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d203      	bcs.n	8005e6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e64:	4a2e      	ldr	r2, [pc, #184]	; (8005f20 <xTaskIncrementTick+0x15c>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e6a:	e02f      	b.n	8005ecc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fb11 	bl	8004498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3318      	adds	r3, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fb08 	bl	8004498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <xTaskIncrementTick+0x160>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d903      	bls.n	8005e9c <xTaskIncrementTick+0xd8>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <xTaskIncrementTick+0x160>)
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <xTaskIncrementTick+0x164>)
 8005eaa:	441a      	add	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7fe fa93 	bl	80043de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <xTaskIncrementTick+0x168>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3b8      	bcc.n	8005e38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eca:	e7b5      	b.n	8005e38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ecc:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <xTaskIncrementTick+0x168>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	4915      	ldr	r1, [pc, #84]	; (8005f28 <xTaskIncrementTick+0x164>)
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d901      	bls.n	8005ee8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <xTaskIncrementTick+0x16c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e004      	b.n	8005f00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <xTaskIncrementTick+0x170>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <xTaskIncrementTick+0x170>)
 8005efe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f00:	697b      	ldr	r3, [r7, #20]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000be4 	.word	0x20000be4
 8005f10:	20000bc0 	.word	0x20000bc0
 8005f14:	20000b74 	.word	0x20000b74
 8005f18:	20000b78 	.word	0x20000b78
 8005f1c:	20000bd4 	.word	0x20000bd4
 8005f20:	20000bdc 	.word	0x20000bdc
 8005f24:	20000bc4 	.word	0x20000bc4
 8005f28:	200006ec 	.word	0x200006ec
 8005f2c:	200006e8 	.word	0x200006e8
 8005f30:	20000bd0 	.word	0x20000bd0
 8005f34:	20000bcc 	.word	0x20000bcc

08005f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f3e:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <vTaskSwitchContext+0xa8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f46:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <vTaskSwitchContext+0xac>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f4c:	e041      	b.n	8005fd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <vTaskSwitchContext+0xac>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <vTaskSwitchContext+0xb0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e010      	b.n	8005f7e <vTaskSwitchContext+0x46>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vTaskSwitchContext+0x3e>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	491b      	ldr	r1, [pc, #108]	; (8005fec <vTaskSwitchContext+0xb4>)
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0e4      	beq.n	8005f5c <vTaskSwitchContext+0x24>
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <vTaskSwitchContext+0xb4>)
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	605a      	str	r2, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d104      	bne.n	8005fc2 <vTaskSwitchContext+0x8a>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <vTaskSwitchContext+0xb8>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4a06      	ldr	r2, [pc, #24]	; (8005fe8 <vTaskSwitchContext+0xb0>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6013      	str	r3, [r2, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000be4 	.word	0x20000be4
 8005fe4:	20000bd0 	.word	0x20000bd0
 8005fe8:	20000bc4 	.word	0x20000bc4
 8005fec:	200006ec 	.word	0x200006ec
 8005ff0:	200006e8 	.word	0x200006e8

08005ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
}
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800601a:	4b07      	ldr	r3, [pc, #28]	; (8006038 <vTaskPlaceOnEventList+0x44>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3318      	adds	r3, #24
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fe f9ff 	bl	8004426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006028:	2101      	movs	r1, #1
 800602a:	6838      	ldr	r0, [r7, #0]
 800602c:	f000 fb7a 	bl	8006724 <prvAddCurrentTaskToDelayedList>
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	200006e8 	.word	0x200006e8

0800603c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	617b      	str	r3, [r7, #20]
}
 8006060:	bf00      	nop
 8006062:	e7fe      	b.n	8006062 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <vTaskPlaceOnEventListRestricted+0x54>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3318      	adds	r3, #24
 800606a:	4619      	mov	r1, r3
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7fe f9b6 	bl	80043de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800607c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68b8      	ldr	r0, [r7, #8]
 8006082:	f000 fb4f 	bl	8006724 <prvAddCurrentTaskToDelayedList>
	}
 8006086:	bf00      	nop
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200006e8 	.word	0x200006e8

08006094 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3318      	adds	r3, #24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe f9e7 	bl	8004498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ca:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <xTaskRemoveFromEventList+0xb0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d11d      	bne.n	800610e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe f9de 	bl	8004498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <xTaskRemoveFromEventList+0xb4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <xTaskRemoveFromEventList+0x5c>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <xTaskRemoveFromEventList+0xb4>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <xTaskRemoveFromEventList+0xb8>)
 80060fe:	441a      	add	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe f969 	bl	80043de <vListInsertEnd>
 800610c:	e005      	b.n	800611a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3318      	adds	r3, #24
 8006112:	4619      	mov	r1, r3
 8006114:	480e      	ldr	r0, [pc, #56]	; (8006150 <xTaskRemoveFromEventList+0xbc>)
 8006116:	f7fe f962 	bl	80043de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <xTaskRemoveFromEventList+0xc0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d905      	bls.n	8006134 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <xTaskRemoveFromEventList+0xc4>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e001      	b.n	8006138 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006138:	697b      	ldr	r3, [r7, #20]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000be4 	.word	0x20000be4
 8006148:	20000bc4 	.word	0x20000bc4
 800614c:	200006ec 	.word	0x200006ec
 8006150:	20000b7c 	.word	0x20000b7c
 8006154:	200006e8 	.word	0x200006e8
 8006158:	20000bd0 	.word	0x20000bd0

0800615c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <vTaskInternalSetTimeOutState+0x24>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <vTaskInternalSetTimeOutState+0x28>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	605a      	str	r2, [r3, #4]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000bd4 	.word	0x20000bd4
 8006184:	20000bc0 	.word	0x20000bc0

08006188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	613b      	str	r3, [r7, #16]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061ca:	f001 f833 	bl	8007234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <xTaskCheckForTimeOut+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e6:	d102      	bne.n	80061ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e023      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <xTaskCheckForTimeOut+0xc0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d007      	beq.n	800620a <xTaskCheckForTimeOut+0x82>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e015      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d20b      	bcs.n	800622c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff9b 	bl	800615c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e004      	b.n	8006236 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006236:	f001 f82d 	bl	8007294 <vPortExitCritical>

	return xReturn;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000bc0 	.word	0x20000bc0
 8006248:	20000bd4 	.word	0x20000bd4

0800624c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <vTaskMissedYield+0x14>)
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000bd0 	.word	0x20000bd0

08006264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800626c:	f000 f852 	bl	8006314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvIdleTask+0x28>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d9f9      	bls.n	800626c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <prvIdleTask+0x2c>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006288:	e7f0      	b.n	800626c <prvIdleTask+0x8>
 800628a:	bf00      	nop
 800628c:	200006ec 	.word	0x200006ec
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	e00c      	b.n	80062ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <prvInitialiseTaskLists+0x60>)
 80062ac:	4413      	add	r3, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe f868 	bl	8004384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b37      	cmp	r3, #55	; 0x37
 80062be:	d9ef      	bls.n	80062a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c0:	480d      	ldr	r0, [pc, #52]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062c2:	f7fe f85f 	bl	8004384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062c6:	480d      	ldr	r0, [pc, #52]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062c8:	f7fe f85c 	bl	8004384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062cc:	480c      	ldr	r0, [pc, #48]	; (8006300 <prvInitialiseTaskLists+0x6c>)
 80062ce:	f7fe f859 	bl	8004384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062d2:	480c      	ldr	r0, [pc, #48]	; (8006304 <prvInitialiseTaskLists+0x70>)
 80062d4:	f7fe f856 	bl	8004384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062d8:	480b      	ldr	r0, [pc, #44]	; (8006308 <prvInitialiseTaskLists+0x74>)
 80062da:	f7fe f853 	bl	8004384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <prvInitialiseTaskLists+0x78>)
 80062e0:	4a05      	ldr	r2, [pc, #20]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvInitialiseTaskLists+0x7c>)
 80062e6:	4a05      	ldr	r2, [pc, #20]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200006ec 	.word	0x200006ec
 80062f8:	20000b4c 	.word	0x20000b4c
 80062fc:	20000b60 	.word	0x20000b60
 8006300:	20000b7c 	.word	0x20000b7c
 8006304:	20000b90 	.word	0x20000b90
 8006308:	20000ba8 	.word	0x20000ba8
 800630c:	20000b74 	.word	0x20000b74
 8006310:	20000b78 	.word	0x20000b78

08006314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631a:	e019      	b.n	8006350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800631c:	f000 ff8a 	bl	8007234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <prvCheckTasksWaitingTermination+0x50>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe f8b3 	bl	8004498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a0b      	ldr	r2, [pc, #44]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 800633a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3b01      	subs	r3, #1
 8006342:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006346:	f000 ffa5 	bl	8007294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f810 	bl	8006370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e1      	bne.n	800631c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000b90 	.word	0x20000b90
 8006368:	20000bbc 	.word	0x20000bbc
 800636c:	20000ba4 	.word	0x20000ba4

08006370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f942 	bl	8007610 <vPortFree>
				vPortFree( pxTCB );
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f93f 	bl	8007610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006392:	e018      	b.n	80063c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800639a:	2b01      	cmp	r3, #1
 800639c:	d103      	bne.n	80063a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 f936 	bl	8007610 <vPortFree>
	}
 80063a4:	e00f      	b.n	80063c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d00a      	beq.n	80063c6 <prvDeleteTCB+0x56>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <prvDeleteTCB+0x54>
	}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <prvResetNextTaskUnblockTime+0x38>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <prvResetNextTaskUnblockTime+0x3c>)
 80063e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063e8:	e008      	b.n	80063fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <prvResetNextTaskUnblockTime+0x38>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	4a04      	ldr	r2, [pc, #16]	; (800640c <prvResetNextTaskUnblockTime+0x3c>)
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	20000b74 	.word	0x20000b74
 800640c:	20000bdc 	.word	0x20000bdc

08006410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <xTaskGetSchedulerState+0x34>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800641e:	2301      	movs	r3, #1
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	e008      	b.n	8006436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006424:	4b08      	ldr	r3, [pc, #32]	; (8006448 <xTaskGetSchedulerState+0x38>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800642c:	2302      	movs	r3, #2
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	e001      	b.n	8006436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006436:	687b      	ldr	r3, [r7, #4]
	}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000bc8 	.word	0x20000bc8
 8006448:	20000be4 	.word	0x20000be4

0800644c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d051      	beq.n	8006506 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <xTaskPriorityInherit+0xc4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	429a      	cmp	r2, r3
 800646e:	d241      	bcs.n	80064f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	db06      	blt.n	8006486 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006478:	4b25      	ldr	r3, [pc, #148]	; (8006510 <xTaskPriorityInherit+0xc4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6959      	ldr	r1, [r3, #20]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <xTaskPriorityInherit+0xc8>)
 8006498:	4413      	add	r3, r2
 800649a:	4299      	cmp	r1, r3
 800649c:	d122      	bne.n	80064e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fff8 	bl	8004498 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064a8:	4b19      	ldr	r3, [pc, #100]	; (8006510 <xTaskPriorityInherit+0xc4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <xTaskPriorityInherit+0xcc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <xTaskPriorityInherit+0x7a>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <xTaskPriorityInherit+0xcc>)
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <xTaskPriorityInherit+0xc8>)
 80064d4:	441a      	add	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3304      	adds	r3, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f7fd ff7e 	bl	80043de <vListInsertEnd>
 80064e2:	e004      	b.n	80064ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <xTaskPriorityInherit+0xc4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80064ee:	2301      	movs	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e008      	b.n	8006506 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <xTaskPriorityInherit+0xc4>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d201      	bcs.n	8006506 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006506:	68fb      	ldr	r3, [r7, #12]
	}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	200006e8 	.word	0x200006e8
 8006514:	200006ec 	.word	0x200006ec
 8006518:	20000bc4 	.word	0x20000bc4

0800651c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d056      	beq.n	80065e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006532:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <xTaskPriorityDisinherit+0xd0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	429a      	cmp	r2, r3
 800653a:	d00a      	beq.n	8006552 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60bb      	str	r3, [r7, #8]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	429a      	cmp	r2, r3
 8006584:	d02c      	beq.n	80065e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658a:	2b00      	cmp	r3, #0
 800658c:	d128      	bne.n	80065e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3304      	adds	r3, #4
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd ff80 	bl	8004498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <xTaskPriorityDisinherit+0xd4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d903      	bls.n	80065c0 <xTaskPriorityDisinherit+0xa4>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <xTaskPriorityDisinherit+0xd4>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <xTaskPriorityDisinherit+0xd8>)
 80065ce:	441a      	add	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fd ff01 	bl	80043de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065e0:	697b      	ldr	r3, [r7, #20]
	}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200006e8 	.word	0x200006e8
 80065f0:	20000bc4 	.word	0x20000bc4
 80065f4:	200006ec 	.word	0x200006ec

080065f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006606:	2301      	movs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d06a      	beq.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	60fb      	str	r3, [r7, #12]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d902      	bls.n	800663e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	61fb      	str	r3, [r7, #28]
 800663c:	e002      	b.n	8006644 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	429a      	cmp	r2, r3
 800664c:	d04b      	beq.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	429a      	cmp	r2, r3
 8006656:	d146      	bne.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	429a      	cmp	r2, r3
 8006660:	d10a      	bne.n	8006678 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db04      	blt.n	8006696 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	6959      	ldr	r1, [r3, #20]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066a6:	4413      	add	r3, r2
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d11c      	bne.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fef1 	bl	8004498 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d903      	bls.n	80066ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066d8:	441a      	add	r2, r3
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fd fe7c 	bl	80043de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066e6:	bf00      	nop
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200006e8 	.word	0x200006e8
 80066f4:	200006ec 	.word	0x200006ec
 80066f8:	20000bc4 	.word	0x20000bc4

080066fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <pvTaskIncrementMutexHeldCount+0x24>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <pvTaskIncrementMutexHeldCount+0x24>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800670e:	3201      	adds	r2, #1
 8006710:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006712:	4b03      	ldr	r3, [pc, #12]	; (8006720 <pvTaskIncrementMutexHeldCount+0x24>)
 8006714:	681b      	ldr	r3, [r3, #0]
	}
 8006716:	4618      	mov	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	200006e8 	.word	0x200006e8

08006724 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006734:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd feac 	bl	8004498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006746:	d10a      	bne.n	800675e <prvAddCurrentTaskToDelayedList+0x3a>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800674e:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4819      	ldr	r0, [pc, #100]	; (80067bc <prvAddCurrentTaskToDelayedList+0x98>)
 8006758:	f7fd fe41 	bl	80043de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800675c:	e026      	b.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4413      	add	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	429a      	cmp	r2, r3
 8006774:	d209      	bcs.n	800678a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006776:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fd fe4f 	bl	8004426 <vListInsert>
}
 8006788:	e010      	b.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678a:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fd fe45 	bl	8004426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d202      	bcs.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067a6:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000bc0 	.word	0x20000bc0
 80067b8:	200006e8 	.word	0x200006e8
 80067bc:	20000ba8 	.word	0x20000ba8
 80067c0:	20000b78 	.word	0x20000b78
 80067c4:	20000b74 	.word	0x20000b74
 80067c8:	20000bdc 	.word	0x20000bdc

080067cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	; 0x28
 80067d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067d6:	f000 fba1 	bl	8006f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067da:	4b1c      	ldr	r3, [pc, #112]	; (800684c <xTimerCreateTimerTask+0x80>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d021      	beq.n	8006826 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067ea:	1d3a      	adds	r2, r7, #4
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fd fdab 	bl	8004350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	9202      	str	r2, [sp, #8]
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	2302      	movs	r3, #2
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	460a      	mov	r2, r1
 800680c:	4910      	ldr	r1, [pc, #64]	; (8006850 <xTimerCreateTimerTask+0x84>)
 800680e:	4811      	ldr	r0, [pc, #68]	; (8006854 <xTimerCreateTimerTask+0x88>)
 8006810:	f7fe fec6 	bl	80055a0 <xTaskCreateStatic>
 8006814:	4603      	mov	r3, r0
 8006816:	4a10      	ldr	r2, [pc, #64]	; (8006858 <xTimerCreateTimerTask+0x8c>)
 8006818:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <xTimerCreateTimerTask+0x8c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	613b      	str	r3, [r7, #16]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006842:	697b      	ldr	r3, [r7, #20]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000c18 	.word	0x20000c18
 8006850:	08007918 	.word	0x08007918
 8006854:	08006ac5 	.word	0x08006ac5
 8006858:	20000c1c 	.word	0x20000c1c

0800685c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800686a:	202c      	movs	r0, #44	; 0x2c
 800686c:	f000 fe04 	bl	8007478 <pvPortMalloc>
 8006870:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f843 	bl	800691a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006894:	697b      	ldr	r3, [r7, #20]
	}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b08a      	sub	sp, #40	; 0x28
 80068a2:	af02      	add	r7, sp, #8
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80068ac:	232c      	movs	r3, #44	; 0x2c
 80068ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b2c      	cmp	r3, #44	; 0x2c
 80068b4:	d00a      	beq.n	80068cc <xTimerCreateStatic+0x2e>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61bb      	str	r3, [r7, #24]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xTimerCreateStatic+0x4c>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	617b      	str	r3, [r7, #20]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f805 	bl	800691a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006910:	69fb      	ldr	r3, [r7, #28]
	}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01e      	beq.n	8006988 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800694a:	f000 fae7 	bl	8006f1c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	6a3a      	ldr	r2, [r7, #32]
 8006964:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	3304      	adds	r3, #4
 800696a:	4618      	mov	r0, r3
 800696c:	f7fd fd2a 	bl	80043c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800697c:	f043 0304 	orr.w	r3, r3, #4
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006988:	bf00      	nop
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <xTimerGenericCommand+0x2e>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	623b      	str	r3, [r7, #32]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <xTimerGenericCommand+0x98>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02a      	beq.n	8006a1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	dc18      	bgt.n	8006a0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069d8:	f7ff fd1a 	bl	8006410 <xTaskGetSchedulerState>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d109      	bne.n	80069f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e2:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <xTimerGenericCommand+0x98>)
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	f107 0110 	add.w	r1, r7, #16
 80069ea:	2300      	movs	r3, #0
 80069ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ee:	f7fd ff71 	bl	80048d4 <xQueueGenericSend>
 80069f2:	6278      	str	r0, [r7, #36]	; 0x24
 80069f4:	e012      	b.n	8006a1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <xTimerGenericCommand+0x98>)
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	f107 0110 	add.w	r1, r7, #16
 80069fe:	2300      	movs	r3, #0
 8006a00:	2200      	movs	r2, #0
 8006a02:	f7fd ff67 	bl	80048d4 <xQueueGenericSend>
 8006a06:	6278      	str	r0, [r7, #36]	; 0x24
 8006a08:	e008      	b.n	8006a1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <xTimerGenericCommand+0x98>)
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f107 0110 	add.w	r1, r7, #16
 8006a12:	2300      	movs	r3, #0
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	f7fe f85b 	bl	8004ad0 <xQueueGenericSendFromISR>
 8006a1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3728      	adds	r7, #40	; 0x28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000c18 	.word	0x20000c18

08006a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <prvProcessExpiredTimer+0x94>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fd27 	bl	8004498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d022      	beq.n	8006a9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	18d1      	adds	r1, r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	6978      	ldr	r0, [r7, #20]
 8006a66:	f000 f8d1 	bl	8006c0c <prvInsertTimerInActiveList>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01f      	beq.n	8006ab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a70:	2300      	movs	r3, #0
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	6978      	ldr	r0, [r7, #20]
 8006a7c:	f7ff ff88 	bl	8006990 <xTimerGenericCommand>
 8006a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d113      	bne.n	8006ab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	6978      	ldr	r0, [r7, #20]
 8006ab6:	4798      	blx	r3
}
 8006ab8:	bf00      	nop
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000c10 	.word	0x20000c10

08006ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f857 	bl	8006b84 <prvGetNextExpireTime>
 8006ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4619      	mov	r1, r3
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f803 	bl	8006ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ae2:	f000 f8d5 	bl	8006c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ae6:	e7f1      	b.n	8006acc <prvTimerTask+0x8>

08006ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006af2:	f7ff f8ab 	bl	8005c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006af6:	f107 0308 	add.w	r3, r7, #8
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f866 	bl	8006bcc <prvSampleTimeNow>
 8006b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d130      	bne.n	8006b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <prvProcessTimerOrBlockTask+0x3c>
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d806      	bhi.n	8006b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b16:	f7ff f8a7 	bl	8005c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff85 	bl	8006a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b22:	e024      	b.n	8006b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <prvProcessTimerOrBlockTask+0x90>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <prvProcessTimerOrBlockTask+0x50>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <prvProcessTimerOrBlockTask+0x52>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <prvProcessTimerOrBlockTask+0x94>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f7fe fcf5 	bl	8005538 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b4e:	f7ff f88b 	bl	8005c68 <xTaskResumeAll>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <prvProcessTimerOrBlockTask+0x98>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
}
 8006b68:	e001      	b.n	8006b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b6a:	f7ff f87d 	bl	8005c68 <xTaskResumeAll>
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000c14 	.word	0x20000c14
 8006b7c:	20000c18 	.word	0x20000c18
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <prvGetNextExpireTime+0x44>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <prvGetNextExpireTime+0x16>
 8006b96:	2201      	movs	r2, #1
 8006b98:	e000      	b.n	8006b9c <prvGetNextExpireTime+0x18>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <prvGetNextExpireTime+0x44>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e001      	b.n	8006bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000c10 	.word	0x20000c10

08006bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd4:	f7ff f8e6 	bl	8005da4 <xTaskGetTickCount>
 8006bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <prvSampleTimeNow+0x3c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d205      	bcs.n	8006bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be4:	f000 f936 	bl	8006e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bf6:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <prvSampleTimeNow+0x3c>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000c20 	.word	0x20000c20

08006c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d812      	bhi.n	8006c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d302      	bcc.n	8006c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e01b      	b.n	8006c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <prvInsertTimerInActiveList+0x7c>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f7fd fbe8 	bl	8004426 <vListInsert>
 8006c56:	e012      	b.n	8006c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d206      	bcs.n	8006c6e <prvInsertTimerInActiveList+0x62>
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d302      	bcc.n	8006c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e007      	b.n	8006c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <prvInsertTimerInActiveList+0x80>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f7fd fbd4 	bl	8004426 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c7e:	697b      	ldr	r3, [r7, #20]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000c14 	.word	0x20000c14
 8006c8c:	20000c10 	.word	0x20000c10

08006c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08e      	sub	sp, #56	; 0x38
 8006c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c96:	e0ca      	b.n	8006e2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da18      	bge.n	8006cd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	61fb      	str	r3, [r7, #28]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc6:	6850      	ldr	r0, [r2, #4]
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	6892      	ldr	r2, [r2, #8]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f2c0 80aa 	blt.w	8006e2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd fbd5 	bl	8004498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cee:	463b      	mov	r3, r7
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff ff6b 	bl	8006bcc <prvSampleTimeNow>
 8006cf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b09      	cmp	r3, #9
 8006cfc:	f200 8097 	bhi.w	8006e2e <prvProcessReceivedCommands+0x19e>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <prvProcessReceivedCommands+0x78>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d31 	.word	0x08006d31
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d31 	.word	0x08006d31
 8006d14:	08006da5 	.word	0x08006da5
 8006d18:	08006db9 	.word	0x08006db9
 8006d1c:	08006e03 	.word	0x08006e03
 8006d20:	08006d31 	.word	0x08006d31
 8006d24:	08006d31 	.word	0x08006d31
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006db9 	.word	0x08006db9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	18d1      	adds	r1, r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d50:	f7ff ff5c 	bl	8006c0c <prvInsertTimerInActiveList>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d069      	beq.n	8006e2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d05e      	beq.n	8006e2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	441a      	add	r2, r3
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d82:	f7ff fe05 	bl	8006990 <xTimerGenericCommand>
 8006d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d14f      	bne.n	8006e2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61bb      	str	r3, [r7, #24]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006db6:	e03a      	b.n	8006e2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	617b      	str	r3, [r7, #20]
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	18d1      	adds	r1, r2, r3
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dfc:	f7ff ff06 	bl	8006c0c <prvInsertTimerInActiveList>
					break;
 8006e00:	e015      	b.n	8006e2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d103      	bne.n	8006e18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e12:	f000 fbfd 	bl	8007610 <vPortFree>
 8006e16:	e00a      	b.n	8006e2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e2a:	e000      	b.n	8006e2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e2e:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <prvProcessReceivedCommands+0x1c0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	1d39      	adds	r1, r7, #4
 8006e34:	2200      	movs	r2, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fd ff72 	bl	8004d20 <xQueueReceive>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f af2a 	bne.w	8006c98 <prvProcessReceivedCommands+0x8>
	}
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3730      	adds	r7, #48	; 0x30
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000c18 	.word	0x20000c18

08006e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5a:	e048      	b.n	8006eee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e5c:	4b2d      	ldr	r3, [pc, #180]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e66:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd fb0f 	bl	8004498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d02e      	beq.n	8006eee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d90e      	bls.n	8006ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7fd fab4 	bl	8004426 <vListInsert>
 8006ebe:	e016      	b.n	8006eee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fd60 	bl	8006990 <xTimerGenericCommand>
 8006ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	603b      	str	r3, [r7, #0]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1b1      	bne.n	8006e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <prvSwitchTimerLists+0xc4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvSwitchTimerLists+0xc0>)
 8006f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f06:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <prvSwitchTimerLists+0xc4>)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000c10 	.word	0x20000c10
 8006f18:	20000c14 	.word	0x20000c14

08006f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f22:	f000 f987 	bl	8007234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d120      	bne.n	8006f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f2e:	4814      	ldr	r0, [pc, #80]	; (8006f80 <prvCheckForValidListAndQueue+0x64>)
 8006f30:	f7fd fa28 	bl	8004384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f34:	4813      	ldr	r0, [pc, #76]	; (8006f84 <prvCheckForValidListAndQueue+0x68>)
 8006f36:	f7fd fa25 	bl	8004384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <prvCheckForValidListAndQueue+0x6c>)
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <prvCheckForValidListAndQueue+0x64>)
 8006f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <prvCheckForValidListAndQueue+0x70>)
 8006f42:	4a10      	ldr	r2, [pc, #64]	; (8006f84 <prvCheckForValidListAndQueue+0x68>)
 8006f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f46:	2300      	movs	r3, #0
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <prvCheckForValidListAndQueue+0x74>)
 8006f4c:	4a11      	ldr	r2, [pc, #68]	; (8006f94 <prvCheckForValidListAndQueue+0x78>)
 8006f4e:	2110      	movs	r1, #16
 8006f50:	200a      	movs	r0, #10
 8006f52:	f7fd fb33 	bl	80045bc <xQueueGenericCreateStatic>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	490b      	ldr	r1, [pc, #44]	; (8006f98 <prvCheckForValidListAndQueue+0x7c>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fa90 	bl	8005490 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f70:	f000 f990 	bl	8007294 <vPortExitCritical>
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000c18 	.word	0x20000c18
 8006f80:	20000be8 	.word	0x20000be8
 8006f84:	20000bfc 	.word	0x20000bfc
 8006f88:	20000c10 	.word	0x20000c10
 8006f8c:	20000c14 	.word	0x20000c14
 8006f90:	20000cc4 	.word	0x20000cc4
 8006f94:	20000c24 	.word	0x20000c24
 8006f98:	08007920 	.word	0x08007920

08006f9c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	60fb      	str	r3, [r7, #12]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006fc4:	f000 f936 	bl	8007234 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006fce:	f000 f961 	bl	8007294 <vPortExitCritical>

	return pvReturn;
 8006fd2:	693b      	ldr	r3, [r7, #16]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b04      	subs	r3, #4
 8006fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0201 	bic.w	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b04      	subs	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <pxPortInitialiseStack+0x64>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b14      	subs	r3, #20
 8007016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b04      	subs	r3, #4
 8007022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f06f 0202 	mvn.w	r2, #2
 800702a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3b20      	subs	r3, #32
 8007030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007032:	68fb      	ldr	r3, [r7, #12]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	08007045 	.word	0x08007045

08007044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800704e:	4b12      	ldr	r3, [pc, #72]	; (8007098 <prvTaskExitError+0x54>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007056:	d00a      	beq.n	800706e <prvTaskExitError+0x2a>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	60fb      	str	r3, [r7, #12]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <prvTaskExitError+0x28>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60bb      	str	r3, [r7, #8]
}
 8007080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007082:	bf00      	nop
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0fc      	beq.n	8007084 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	2000000c 	.word	0x2000000c
 800709c:	00000000 	.word	0x00000000

080070a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <pxCurrentTCBConst2>)
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	f380 8809 	msr	PSP, r0
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	4770      	bx	lr
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst2>:
 80070c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070c8:	4808      	ldr	r0, [pc, #32]	; (80070ec <prvPortStartFirstTask+0x24>)
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f380 8808 	msr	MSP, r0
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8814 	msr	CONTROL, r0
 80070da:	b662      	cpsie	i
 80070dc:	b661      	cpsie	f
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	df00      	svc	0
 80070e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ea:	bf00      	nop
 80070ec:	e000ed08 	.word	0xe000ed08

080070f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070f6:	4b46      	ldr	r3, [pc, #280]	; (8007210 <xPortStartScheduler+0x120>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a46      	ldr	r2, [pc, #280]	; (8007214 <xPortStartScheduler+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10a      	bne.n	8007116 <xPortStartScheduler+0x26>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007116:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <xPortStartScheduler+0x120>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <xPortStartScheduler+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10a      	bne.n	8007136 <xPortStartScheduler+0x46>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <xPortStartScheduler+0x12c>)
 8007138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007158:	b2da      	uxtb	r2, r3
 800715a:	4b31      	ldr	r3, [pc, #196]	; (8007220 <xPortStartScheduler+0x130>)
 800715c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <xPortStartScheduler+0x134>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007164:	e009      	b.n	800717a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007166:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <xPortStartScheduler+0x134>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b01      	subs	r3, #1
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <xPortStartScheduler+0x134>)
 800716e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d0ef      	beq.n	8007166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <xPortStartScheduler+0x134>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1c3 0307 	rsb	r3, r3, #7
 800718e:	2b04      	cmp	r3, #4
 8007190:	d00a      	beq.n	80071a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <xPortStartScheduler+0x134>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <xPortStartScheduler+0x134>)
 80071b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <xPortStartScheduler+0x134>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ba:	4a1a      	ldr	r2, [pc, #104]	; (8007224 <xPortStartScheduler+0x134>)
 80071bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071c6:	4b18      	ldr	r3, [pc, #96]	; (8007228 <xPortStartScheduler+0x138>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a17      	ldr	r2, [pc, #92]	; (8007228 <xPortStartScheduler+0x138>)
 80071cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <xPortStartScheduler+0x138>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a14      	ldr	r2, [pc, #80]	; (8007228 <xPortStartScheduler+0x138>)
 80071d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071de:	f000 f8dd 	bl	800739c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <xPortStartScheduler+0x13c>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071e8:	f000 f8fc 	bl	80073e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <xPortStartScheduler+0x140>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <xPortStartScheduler+0x140>)
 80071f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071f8:	f7ff ff66 	bl	80070c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071fc:	f7fe fe9c 	bl	8005f38 <vTaskSwitchContext>
	prvTaskExitError();
 8007200:	f7ff ff20 	bl	8007044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	e000ed00 	.word	0xe000ed00
 8007214:	410fc271 	.word	0x410fc271
 8007218:	410fc270 	.word	0x410fc270
 800721c:	e000e400 	.word	0xe000e400
 8007220:	20000d14 	.word	0x20000d14
 8007224:	20000d18 	.word	0x20000d18
 8007228:	e000ed20 	.word	0xe000ed20
 800722c:	2000000c 	.word	0x2000000c
 8007230:	e000ef34 	.word	0xe000ef34

08007234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	607b      	str	r3, [r7, #4]
}
 800724c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <vPortEnterCritical+0x58>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <vPortEnterCritical+0x58>)
 8007256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <vPortEnterCritical+0x58>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10f      	bne.n	8007280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vPortEnterCritical+0x5c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <vPortEnterCritical+0x4c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	603b      	str	r3, [r7, #0]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vPortEnterCritical+0x4a>
	}
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	2000000c 	.word	0x2000000c
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <vPortExitCritical+0x50>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <vPortExitCritical+0x24>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	607b      	str	r3, [r7, #4]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <vPortExitCritical+0x50>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <vPortExitCritical+0x50>)
 80072c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <vPortExitCritical+0x42>
 80072ca:	2300      	movs	r3, #0
 80072cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f383 8811 	msr	BASEPRI, r3
}
 80072d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
	...

080072f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072f0:	f3ef 8009 	mrs	r0, PSP
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <pxCurrentTCBConst>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f01e 0f10 	tst.w	lr, #16
 8007300:	bf08      	it	eq
 8007302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007314:	f380 8811 	msr	BASEPRI, r0
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f7fe fe0a 	bl	8005f38 <vTaskSwitchContext>
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f380 8811 	msr	BASEPRI, r0
 800732c:	bc09      	pop	{r0, r3}
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	f01e 0f10 	tst.w	lr, #16
 800733a:	bf08      	it	eq
 800733c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007340:	f380 8809 	msr	PSP, r0
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
}
 8007370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007372:	f7fe fd27 	bl	8005dc4 <xTaskIncrementTick>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800737c:	4b06      	ldr	r3, [pc, #24]	; (8007398 <xPortSysTickHandler+0x40>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <vPortSetupTimerInterrupt+0x38>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <vPortSetupTimerInterrupt+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <vPortSetupTimerInterrupt+0x40>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <vPortSetupTimerInterrupt+0x44>)
 80073ba:	3b01      	subs	r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073be:	4b04      	ldr	r3, [pc, #16]	; (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073c0:	2207      	movs	r2, #7
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000000 	.word	0x20000000
 80073dc:	10624dd3 	.word	0x10624dd3
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073f4 <vPortEnableVFP+0x10>
 80073e8:	6801      	ldr	r1, [r0, #0]
 80073ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ee:	6001      	str	r1, [r0, #0]
 80073f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073f2:	bf00      	nop
 80073f4:	e000ed88 	.word	0xe000ed88

080073f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073fe:	f3ef 8305 	mrs	r3, IPSR
 8007402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d914      	bls.n	8007434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800740a:	4a17      	ldr	r2, [pc, #92]	; (8007468 <vPortValidateInterruptPriority+0x70>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007414:	4b15      	ldr	r3, [pc, #84]	; (800746c <vPortValidateInterruptPriority+0x74>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	429a      	cmp	r2, r3
 800741c:	d20a      	bcs.n	8007434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <vPortValidateInterruptPriority+0x78>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <vPortValidateInterruptPriority+0x7c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d90a      	bls.n	800745a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	603b      	str	r3, [r7, #0]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <vPortValidateInterruptPriority+0x60>
	}
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	e000e3f0 	.word	0xe000e3f0
 800746c:	20000d14 	.word	0x20000d14
 8007470:	e000ed0c 	.word	0xe000ed0c
 8007474:	20000d18 	.word	0x20000d18

08007478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007484:	f7fe fbe2 	bl	8005c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007488:	4b5b      	ldr	r3, [pc, #364]	; (80075f8 <pvPortMalloc+0x180>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007490:	f000 f920 	bl	80076d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007494:	4b59      	ldr	r3, [pc, #356]	; (80075fc <pvPortMalloc+0x184>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 8093 	bne.w	80075c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d01d      	beq.n	80074e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074a8:	2208      	movs	r2, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d014      	beq.n	80074e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	3308      	adds	r3, #8
 80074c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <pvPortMalloc+0x6c>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	617b      	str	r3, [r7, #20]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d06e      	beq.n	80075c8 <pvPortMalloc+0x150>
 80074ea:	4b45      	ldr	r3, [pc, #276]	; (8007600 <pvPortMalloc+0x188>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d869      	bhi.n	80075c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074f4:	4b43      	ldr	r3, [pc, #268]	; (8007604 <pvPortMalloc+0x18c>)
 80074f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074f8:	4b42      	ldr	r3, [pc, #264]	; (8007604 <pvPortMalloc+0x18c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074fe:	e004      	b.n	800750a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d903      	bls.n	800751c <pvPortMalloc+0xa4>
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f1      	bne.n	8007500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800751c:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <pvPortMalloc+0x180>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007522:	429a      	cmp	r2, r3
 8007524:	d050      	beq.n	80075c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2208      	movs	r2, #8
 800752c:	4413      	add	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	2308      	movs	r3, #8
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	429a      	cmp	r2, r3
 8007546:	d91f      	bls.n	8007588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4413      	add	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <pvPortMalloc+0xf8>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	613b      	str	r3, [r7, #16]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007582:	69b8      	ldr	r0, [r7, #24]
 8007584:	f000 f908 	bl	8007798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <pvPortMalloc+0x188>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <pvPortMalloc+0x188>)
 8007594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <pvPortMalloc+0x188>)
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <pvPortMalloc+0x190>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d203      	bcs.n	80075aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <pvPortMalloc+0x188>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <pvPortMalloc+0x190>)
 80075a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <pvPortMalloc+0x184>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <pvPortMalloc+0x194>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a11      	ldr	r2, [pc, #68]	; (800760c <pvPortMalloc+0x194>)
 80075c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075c8:	f7fe fb4e 	bl	8005c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <pvPortMalloc+0x174>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <pvPortMalloc+0x172>
	return pvReturn;
 80075ec:	69fb      	ldr	r3, [r7, #28]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200018dc 	.word	0x200018dc
 80075fc:	200018f0 	.word	0x200018f0
 8007600:	200018e0 	.word	0x200018e0
 8007604:	200018d4 	.word	0x200018d4
 8007608:	200018e4 	.word	0x200018e4
 800760c:	200018e8 	.word	0x200018e8

08007610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04d      	beq.n	80076be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007622:	2308      	movs	r3, #8
 8007624:	425b      	negs	r3, r3
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <vPortFree+0xb8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4013      	ands	r3, r2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <vPortFree+0x44>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60fb      	str	r3, [r7, #12]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <vPortFree+0x62>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60bb      	str	r3, [r7, #8]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <vPortFree+0xb8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01e      	beq.n	80076be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <vPortFree+0xb8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007698:	f7fe fad8 	bl	8005c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <vPortFree+0xbc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <vPortFree+0xbc>)
 80076a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076aa:	6938      	ldr	r0, [r7, #16]
 80076ac:	f000 f874 	bl	8007798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076b0:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <vPortFree+0xc0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <vPortFree+0xc0>)
 80076b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076ba:	f7fe fad5 	bl	8005c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	200018f0 	.word	0x200018f0
 80076cc:	200018e0 	.word	0x200018e0
 80076d0:	200018ec 	.word	0x200018ec

080076d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80076de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <prvHeapInit+0xac>)
 80076e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0307 	bic.w	r3, r3, #7
 80076fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <prvHeapInit+0xac>)
 8007704:	4413      	add	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <prvHeapInit+0xb0>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <prvHeapInit+0xb0>)
 8007714:	2200      	movs	r2, #0
 8007716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007720:	2208      	movs	r2, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <prvHeapInit+0xb4>)
 8007734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <prvHeapInit+0xb4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800773e:	4b12      	ldr	r3, [pc, #72]	; (8007788 <prvHeapInit+0xb4>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007754:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvHeapInit+0xb4>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a0a      	ldr	r2, [pc, #40]	; (800778c <prvHeapInit+0xb8>)
 8007762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <prvHeapInit+0xbc>)
 800776a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <prvHeapInit+0xc0>)
 800776e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	20000d1c 	.word	0x20000d1c
 8007784:	200018d4 	.word	0x200018d4
 8007788:	200018dc 	.word	0x200018dc
 800778c:	200018e4 	.word	0x200018e4
 8007790:	200018e0 	.word	0x200018e0
 8007794:	200018f0 	.word	0x200018f0

08007798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077a0:	4b28      	ldr	r3, [pc, #160]	; (8007844 <prvInsertBlockIntoFreeList+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e002      	b.n	80077ac <prvInsertBlockIntoFreeList+0x14>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d8f7      	bhi.n	80077a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d108      	bne.n	80077da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	441a      	add	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d118      	bne.n	8007820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d00d      	beq.n	8007816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvInsertBlockIntoFreeList+0xb0>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e003      	b.n	8007828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d002      	beq.n	8007836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	200018d4 	.word	0x200018d4
 8007848:	200018dc 	.word	0x200018dc

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4d0d      	ldr	r5, [pc, #52]	; (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007852:	1b64      	subs	r4, r4, r5
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2600      	movs	r6, #0
 8007858:	42a6      	cmp	r6, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4d0b      	ldr	r5, [pc, #44]	; (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	; (8007890 <__libc_init_array+0x44>)
 8007860:	f000 f82e 	bl	80078c0 <_init>
 8007864:	1b64      	subs	r4, r4, r5
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2600      	movs	r6, #0
 800786a:	42a6      	cmp	r6, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f855 3b04 	ldr.w	r3, [r5], #4
 8007874:	4798      	blx	r3
 8007876:	3601      	adds	r6, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f855 3b04 	ldr.w	r3, [r5], #4
 800787e:	4798      	blx	r3
 8007880:	3601      	adds	r6, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	08007a14 	.word	0x08007a14
 8007888:	08007a14 	.word	0x08007a14
 800788c:	08007a14 	.word	0x08007a14
 8007890:	08007a18 	.word	0x08007a18

08007894 <memcpy>:
 8007894:	440a      	add	r2, r1
 8007896:	4291      	cmp	r1, r2
 8007898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800789c:	d100      	bne.n	80078a0 <memcpy+0xc>
 800789e:	4770      	bx	lr
 80078a0:	b510      	push	{r4, lr}
 80078a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078aa:	4291      	cmp	r1, r2
 80078ac:	d1f9      	bne.n	80078a2 <memcpy+0xe>
 80078ae:	bd10      	pop	{r4, pc}

080078b0 <memset>:
 80078b0:	4402      	add	r2, r0
 80078b2:	4603      	mov	r3, r0
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d100      	bne.n	80078ba <memset+0xa>
 80078b8:	4770      	bx	lr
 80078ba:	f803 1b01 	strb.w	r1, [r3], #1
 80078be:	e7f9      	b.n	80078b4 <memset+0x4>

080078c0 <_init>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr

080078cc <_fini>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	bf00      	nop
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr
