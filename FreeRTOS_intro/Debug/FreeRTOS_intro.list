
FreeRTOS_intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005054  08005054  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005054  08005054  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800505c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  0800506c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  0800506c  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c1c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef5  00000000  00000000  00038c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dbe  00000000  00000000  0003e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013730  00000000  00000000  00040e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f44  00000000  00000000  000545ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c4f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  0014c548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f40 	.word	0x08004f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004f40 	.word	0x08004f40

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa67 	bl	80006a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f83c 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f88c 	bl	80002f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fefe 	bl	8001fe0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of protect */
  protectHandle = osMutexNew(&protect_attributes);
 80001e4:	4810      	ldr	r0, [pc, #64]	; (8000228 <main+0x58>)
 80001e6:	f001 fff2 	bl	80021ce <osMutexNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a0f      	ldr	r2, [pc, #60]	; (800022c <main+0x5c>)
 80001ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80001f0:	4a0f      	ldr	r2, [pc, #60]	; (8000230 <main+0x60>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	480f      	ldr	r0, [pc, #60]	; (8000234 <main+0x64>)
 80001f6:	f001 ff3d 	bl	8002074 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <main+0x68>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000200:	4a0e      	ldr	r2, [pc, #56]	; (800023c <main+0x6c>)
 8000202:	2100      	movs	r1, #0
 8000204:	480e      	ldr	r0, [pc, #56]	; (8000240 <main+0x70>)
 8000206:	f001 ff35 	bl	8002074 <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0x74>)
 800020e:	6013      	str	r3, [r2, #0]

  /* creation of button */
  buttonHandle = osThreadNew(StartTask03, NULL, &button_attributes);
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <main+0x78>)
 8000212:	2100      	movs	r1, #0
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <main+0x7c>)
 8000216:	f001 ff2d 	bl	8002074 <osThreadNew>
 800021a:	4603      	mov	r3, r0
 800021c:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <main+0x80>)
 800021e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000220:	f001 ff02 	bl	8002028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000224:	e7fe      	b.n	8000224 <main+0x54>
 8000226:	bf00      	nop
 8000228:	08004ffc 	.word	0x08004ffc
 800022c:	2000205c 	.word	0x2000205c
 8000230:	08004f90 	.word	0x08004f90
 8000234:	08000401 	.word	0x08000401
 8000238:	20002060 	.word	0x20002060
 800023c:	08004fb4 	.word	0x08004fb4
 8000240:	0800041d 	.word	0x0800041d
 8000244:	20002064 	.word	0x20002064
 8000248:	08004fd8 	.word	0x08004fd8
 800024c:	08000439 	.word	0x08000439
 8000250:	20001e58 	.word	0x20001e58

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b096      	sub	sp, #88	; 0x58
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	2244      	movs	r2, #68	; 0x44
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 fe64 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	463b      	mov	r3, r7
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000276:	2310      	movs	r3, #16
 8000278:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000282:	2360      	movs	r3, #96	; 0x60
 8000284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028a:	2301      	movs	r3, #1
 800028c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000292:	2328      	movs	r3, #40	; 0x28
 8000294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000296:	2307      	movs	r3, #7
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd7c 	bl	8000da4 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002b2:	f000 f8e5 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2303      	movs	r3, #3
 80002bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ca:	463b      	mov	r3, r7
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f94e 	bl	8001570 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002da:	f000 f8d1 	bl	8000480 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e2:	f000 fd09 	bl	8000cf8 <HAL_PWREx_ControlVoltageScaling>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002ec:	f000 f8c8 	bl	8000480 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	4a28      	ldr	r2, [pc, #160]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031a:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <MX_GPIO_Init+0xbc>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000326:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <MX_GPIO_Init+0xbc>)
 800032c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000332:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <MX_GPIO_Init+0xbc>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_GPIO_Init+0xbc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fc67 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_GPIO_Init+0xc0>)
 800036a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_GPIO_Init+0xc4>)
 8000378:	f000 fab0 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800037c:	2320      	movs	r3, #32
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	4619      	mov	r1, r3
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 faa1 	bl	80008dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2105      	movs	r1, #5
 800039e:	2028      	movs	r0, #40	; 0x28
 80003a0:	f000 fa72 	bl	8000888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a4:	2028      	movs	r0, #40	; 0x28
 80003a6:	f000 fa8b 	bl	80008c0 <HAL_NVIC_EnableIRQ>

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	10210000 	.word	0x10210000
 80003bc:	48000800 	.word	0x48000800

080003c0 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80003c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003ca:	f000 fc63 	bl	8000c94 <HAL_GPIO_EXTI_IRQHandler>
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(buttonHandle);
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <EXTI15_10_IRQHandler+0x38>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 f85a 	bl	800348c <xTaskResumeFromISR>
 80003d8:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d007      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x30>
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <EXTI15_10_IRQHandler+0x3c>)
 80003e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	f3bf 8f6f 	isb	sy
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20001e58 	.word	0x20001e58
 80003fc:	e000ed04 	.word	0xe000ed04

08000400 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000408:	2120      	movs	r1, #32
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fc27 	bl	8000c60 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000416:	f001 febf 	bl	8002198 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800041a:	e7f5      	b.n	8000408 <StartBlink01+0x8>

0800041c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000424:	2120      	movs	r1, #32
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 fc19 	bl	8000c60 <HAL_GPIO_TogglePin>
	  osDelay(600);
 800042e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000432:	f001 feb1 	bl	8002198 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000436:	e7f5      	b.n	8000424 <StartBlink02+0x8>

08000438 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL); //suspend task each time, wait for external signal
 8000440:	2000      	movs	r0, #0
 8000442:	f002 ff7b 	bl	800333c <vTaskSuspend>
	//set the pin value to 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2120      	movs	r1, #32
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f000 fbef 	bl	8000c30 <HAL_GPIO_WritePin>
	osDelay(2500);
 8000452:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000456:	f001 fe9f 	bl	8002198 <osDelay>
	vTaskSuspend(NULL); //suspend task each time, wait for external signal
 800045a:	e7f1      	b.n	8000440 <StartTask03+0x8>

0800045c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d101      	bne.n	8000472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800046e:	f000 f933 	bl	80006d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40001000 	.word	0x40001000

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6613      	str	r3, [r2, #96]	; 0x60
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	6593      	str	r3, [r2, #88]	; 0x58
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	210f      	movs	r1, #15
 80004c6:	f06f 0001 	mvn.w	r0, #1
 80004ca:	f000 f9dd 	bl	8000888 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2105      	movs	r1, #5
 80004d2:	2005      	movs	r0, #5
 80004d4:	f000 f9d8 	bl	8000888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80004d8:	2005      	movs	r0, #5
 80004da:	f000 f9f1 	bl	80008c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08c      	sub	sp, #48	; 0x30
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	2036      	movs	r0, #54	; 0x36
 8000502:	f000 f9c1 	bl	8000888 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000506:	2036      	movs	r0, #54	; 0x36
 8000508:	f000 f9da 	bl	80008c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <HAL_InitTick+0x9c>)
 800050e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <HAL_InitTick+0x9c>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6593      	str	r3, [r2, #88]	; 0x58
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <HAL_InitTick+0x9c>)
 800051a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000524:	f107 0210 	add.w	r2, r7, #16
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4611      	mov	r1, r2
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f9ae 	bl	8001890 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000534:	f001 f996 	bl	8001864 <HAL_RCC_GetPCLK1Freq>
 8000538:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <HAL_InitTick+0xa0>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	0c9b      	lsrs	r3, r3, #18
 8000544:	3b01      	subs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_InitTick+0xa4>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <HAL_InitTick+0xa8>)
 800054c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <HAL_InitTick+0xa4>)
 8000550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000554:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <HAL_InitTick+0xa4>)
 8000558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_InitTick+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <HAL_InitTick+0xa4>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <HAL_InitTick+0xa4>)
 800056a:	f001 fa23 	bl	80019b4 <HAL_TIM_Base_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d104      	bne.n	800057e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <HAL_InitTick+0xa4>)
 8000576:	f001 fa7f 	bl	8001a78 <HAL_TIM_Base_Start_IT>
 800057a:	4603      	mov	r3, r0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3730      	adds	r7, #48	; 0x30
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	431bde83 	.word	0x431bde83
 8000590:	20002068 	.word	0x20002068
 8000594:	40001000 	.word	0x40001000

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800059c:	e7fe      	b.n	800059c <NMI_Handler+0x4>

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <TIM6_DAC_IRQHandler+0x10>)
 80005da:	f001 fabd 	bl	8001b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20002068 	.word	0x20002068

080005e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <SystemInit+0x64>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <SystemInit+0x64>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <SystemInit+0x68>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a13      	ldr	r2, [pc, #76]	; (8000650 <SystemInit+0x68>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <SystemInit+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <SystemInit+0x68>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <SystemInit+0x68>)
 8000614:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000618:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800061c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <SystemInit+0x68>)
 8000620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000624:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <SystemInit+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <SystemInit+0x68>)
 800062c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000630:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <SystemInit+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <SystemInit+0x64>)
 800063a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800063e:	609a      	str	r2, [r3, #8]
#endif
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	40021000 	.word	0x40021000

08000654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800068c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff ffc6 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800065c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800065e:	e003      	b.n	8000668 <LoopCopyDataInit>

08000660 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000662:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000664:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000666:	3104      	adds	r1, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <LoopForever+0xa>)
	ldr	r3, =_edata
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <LoopForever+0xe>)
	adds	r2, r0, r1
 800066c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800066e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000670:	d3f6      	bcc.n	8000660 <CopyDataInit>
	ldr	r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000674:	e002      	b.n	800067c <LoopFillZerobss>

08000676 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000676:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000678:	f842 3b04 	str.w	r3, [r2], #4

0800067c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <LoopForever+0x16>)
	cmp	r2, r3
 800067e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000680:	d3f9      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f004 fc23 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000686:	f7ff fda3 	bl	80001d0 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800068c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000690:	0800505c 	.word	0x0800505c
	ldr	r0, =_sdata
 8000694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000698:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800069c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80006a0:	200020f8 	.word	0x200020f8

080006a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC1_2_IRQHandler>

080006a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f8de 	bl	8000872 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff ff18 	bl	80004ec <HAL_InitTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d002      	beq.n	80006c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	e001      	b.n	80006cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006c8:	f7ff fee0 	bl	800048c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_IncTick+0x20>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_IncTick+0x24>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_IncTick+0x24>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008
 80006fc:	200020b4 	.word	0x200020b4

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_GetTick+0x14>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200020b4 	.word	0x200020b4

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <__NVIC_EnableIRQ+0x38>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff4c 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800089a:	f7ff ff61 	bl	8000760 <__NVIC_GetPriorityGrouping>
 800089e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	6978      	ldr	r0, [r7, #20]
 80008a6:	f7ff ffb1 	bl	800080c <NVIC_EncodePriority>
 80008aa:	4602      	mov	r2, r0
 80008ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff80 	bl	80007b8 <__NVIC_SetPriority>
}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <__NVIC_EnableIRQ>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e17f      	b.n	8000bec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 8171 	beq.w	8000be6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d00b      	beq.n	8000924 <HAL_GPIO_Init+0x48>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d007      	beq.n	8000924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000918:	2b11      	cmp	r3, #17
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b12      	cmp	r3, #18
 8000922:	d130      	bne.n	8000986 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095a:	2201      	movs	r2, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	f003 0201 	and.w	r2, r3, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	2b03      	cmp	r3, #3
 8000990:	d118      	bne.n	80009c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000998:	2201      	movs	r2, #1
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	f003 0201 	and.w	r2, r3, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x128>
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b12      	cmp	r3, #18
 8000a02:	d123      	bne.n	8000a4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	08da      	lsrs	r2, r3, #3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3208      	adds	r2, #8
 8000a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	691a      	ldr	r2, [r3, #16]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	08da      	lsrs	r2, r3, #3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3208      	adds	r2, #8
 8000a46:	6939      	ldr	r1, [r7, #16]
 8000a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0203 	and.w	r2, r3, #3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 80ac 	beq.w	8000be6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b5f      	ldr	r3, [pc, #380]	; (8000c0c <HAL_GPIO_Init+0x330>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a5e      	ldr	r2, [pc, #376]	; (8000c0c <HAL_GPIO_Init+0x330>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b5c      	ldr	r3, [pc, #368]	; (8000c0c <HAL_GPIO_Init+0x330>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa6:	4a5a      	ldr	r2, [pc, #360]	; (8000c10 <HAL_GPIO_Init+0x334>)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	3302      	adds	r3, #2
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	220f      	movs	r2, #15
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad0:	d025      	beq.n	8000b1e <HAL_GPIO_Init+0x242>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4f      	ldr	r2, [pc, #316]	; (8000c14 <HAL_GPIO_Init+0x338>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d01f      	beq.n	8000b1a <HAL_GPIO_Init+0x23e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4e      	ldr	r2, [pc, #312]	; (8000c18 <HAL_GPIO_Init+0x33c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d019      	beq.n	8000b16 <HAL_GPIO_Init+0x23a>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4d      	ldr	r2, [pc, #308]	; (8000c1c <HAL_GPIO_Init+0x340>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0x236>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4c      	ldr	r2, [pc, #304]	; (8000c20 <HAL_GPIO_Init+0x344>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d00d      	beq.n	8000b0e <HAL_GPIO_Init+0x232>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <HAL_GPIO_Init+0x348>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d007      	beq.n	8000b0a <HAL_GPIO_Init+0x22e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4a      	ldr	r2, [pc, #296]	; (8000c28 <HAL_GPIO_Init+0x34c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_GPIO_Init+0x22a>
 8000b02:	2306      	movs	r3, #6
 8000b04:	e00c      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b06:	2307      	movs	r3, #7
 8000b08:	e00a      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	e008      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b0e:	2304      	movs	r3, #4
 8000b10:	e006      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e004      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e002      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <HAL_GPIO_Init+0x244>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	f002 0203 	and.w	r2, r2, #3
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	4093      	lsls	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b30:	4937      	ldr	r1, [pc, #220]	; (8000c10 <HAL_GPIO_Init+0x334>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b62:	4a32      	ldr	r2, [pc, #200]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f47f ae78 	bne.w	80008ec <HAL_GPIO_Init+0x10>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000c00 	.word	0x48000c00
 8000c20:	48001000 	.word	0x48001000
 8000c24:	48001400 	.word	0x48001400
 8000c28:	48001800 	.word	0x48001800
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c4c:	e002      	b.n	8000c54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43d9      	mvns	r1, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	400b      	ands	r3, r1
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f806 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d06:	d130      	bne.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d14:	d038      	beq.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2232      	movs	r2, #50	; 0x32
 8000d2c:	fb02 f303 	mul.w	r3, r2, r3
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d3c:	e002      	b.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d50:	d102      	bne.n	8000d58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f2      	bne.n	8000d3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d64:	d110      	bne.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e00f      	b.n	8000d8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d76:	d007      	beq.n	8000d88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40007000 	.word	0x40007000
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	431bde83 	.word	0x431bde83

08000da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e3d4      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000db6:	4ba1      	ldr	r3, [pc, #644]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc0:	4b9e      	ldr	r3, [pc, #632]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80e4 	beq.w	8000fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <HAL_RCC_OscConfig+0x4a>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b0c      	cmp	r3, #12
 8000de2:	f040 808b 	bne.w	8000efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	f040 8087 	bne.w	8000efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dee:	4b93      	ldr	r3, [pc, #588]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <HAL_RCC_OscConfig+0x62>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e3ac      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	4b8c      	ldr	r3, [pc, #560]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <HAL_RCC_OscConfig+0x7c>
 8000e16:	4b89      	ldr	r3, [pc, #548]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e1e:	e005      	b.n	8000e2c <HAL_RCC_OscConfig+0x88>
 8000e20:	4b86      	ldr	r3, [pc, #536]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d223      	bcs.n	8000e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fd5d 	bl	80018f4 <RCC_SetFlashLatencyFromMSIRange>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e38d      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e44:	4b7d      	ldr	r3, [pc, #500]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a7c      	ldr	r2, [pc, #496]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b7a      	ldr	r3, [pc, #488]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4977      	ldr	r1, [pc, #476]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e62:	4b76      	ldr	r3, [pc, #472]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	4972      	ldr	r1, [pc, #456]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	604b      	str	r3, [r1, #4]
 8000e76:	e025      	b.n	8000ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e78:	4b70      	ldr	r3, [pc, #448]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6f      	ldr	r2, [pc, #444]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b6d      	ldr	r3, [pc, #436]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	496a      	ldr	r1, [pc, #424]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e96:	4b69      	ldr	r3, [pc, #420]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	4965      	ldr	r1, [pc, #404]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d109      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fd1d 	bl	80018f4 <RCC_SetFlashLatencyFromMSIRange>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e34d      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ec4:	f000 fc36 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b5c      	ldr	r3, [pc, #368]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	495a      	ldr	r1, [pc, #360]	; (8001040 <HAL_RCC_OscConfig+0x29c>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	4a58      	ldr	r2, [pc, #352]	; (8001044 <HAL_RCC_OscConfig+0x2a0>)
 8000ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ee4:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_RCC_OscConfig+0x2a4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff faff 	bl	80004ec <HAL_InitTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d052      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	e331      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d032      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f04:	4b4d      	ldr	r3, [pc, #308]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a4c      	ldr	r2, [pc, #304]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fbf6 	bl	8000700 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f18:	f7ff fbf2 	bl	8000700 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e31a      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a40      	ldr	r2, [pc, #256]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	493b      	ldr	r1, [pc, #236]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	4936      	ldr	r1, [pc, #216]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
 8000f68:	e01a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a33      	ldr	r2, [pc, #204]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fbc3 	bl	8000700 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fbbf 	bl	8000700 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e2e7      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f0      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1da>
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d074      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x21a>
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b0c      	cmp	r3, #12
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d064      	beq.n	8001094 <HAL_RCC_OscConfig+0x2f0>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d160      	bne.n	8001094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e2c4      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x24a>
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a15      	ldr	r2, [pc, #84]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e01d      	b.n	800102a <HAL_RCC_OscConfig+0x286>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff6:	d10c      	bne.n	8001012 <HAL_RCC_OscConfig+0x26e>
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8000ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_RCC_OscConfig+0x298>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e00b      	b.n	800102a <HAL_RCC_OscConfig+0x286>
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_RCC_OscConfig+0x298>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fb65 	bl	8000700 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001038:	e011      	b.n	800105e <HAL_RCC_OscConfig+0x2ba>
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	0800500c 	.word	0x0800500c
 8001044:	20000000 	.word	0x20000000
 8001048:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fb58 	bl	8000700 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e280      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800105e:	4baf      	ldr	r3, [pc, #700]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x2a8>
 800106a:	e014      	b.n	8001096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fb48 	bl	8000700 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fb44 	bl	8000700 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e26c      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001086:	4ba5      	ldr	r3, [pc, #660]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x2d0>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d060      	beq.n	8001164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x310>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d119      	bne.n	80010e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d116      	bne.n	80010e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b4:	4b99      	ldr	r3, [pc, #612]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <HAL_RCC_OscConfig+0x328>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e249      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b93      	ldr	r3, [pc, #588]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	4990      	ldr	r1, [pc, #576]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e0:	e040      	b.n	8001164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d023      	beq.n	8001132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ea:	4b8c      	ldr	r3, [pc, #560]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a8b      	ldr	r2, [pc, #556]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb03 	bl	8000700 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff faff 	bl	8000700 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e227      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001110:	4b82      	ldr	r3, [pc, #520]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b7f      	ldr	r3, [pc, #508]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	497c      	ldr	r1, [pc, #496]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
 8001130:	e018      	b.n	8001164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001132:	4b7a      	ldr	r3, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a79      	ldr	r2, [pc, #484]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800113c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800113e:	f7ff fadf 	bl	8000700 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fadb 	bl	8000700 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e203      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001158:	4b70      	ldr	r3, [pc, #448]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d03c      	beq.n	80011ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800117a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117e:	4a67      	ldr	r2, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff faba 	bl	8000700 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fab6 	bl	8000700 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1de      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80011a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ef      	beq.n	8001190 <HAL_RCC_OscConfig+0x3ec>
 80011b0:	e01b      	b.n	80011ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b2:	4b5a      	ldr	r3, [pc, #360]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80011b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fa9d 	bl	8000700 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fa99 	bl	8000700 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1c1      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011dc:	4b4f      	ldr	r3, [pc, #316]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1ef      	bne.n	80011ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80a6 	beq.w	8001344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10d      	bne.n	8001224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b44      	ldr	r3, [pc, #272]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a43      	ldr	r2, [pc, #268]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001220:	2301      	movs	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_RCC_OscConfig+0x57c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d118      	bne.n	8001262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_RCC_OscConfig+0x57c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <HAL_RCC_OscConfig+0x57c>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123c:	f7ff fa60 	bl	8000700 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001244:	f7ff fa5c 	bl	8000700 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e184      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_RCC_OscConfig+0x57c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x4d8>
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127a:	e024      	b.n	80012c6 <HAL_RCC_OscConfig+0x522>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d110      	bne.n	80012a6 <HAL_RCC_OscConfig+0x502>
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_RCC_OscConfig+0x578>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <HAL_RCC_OscConfig+0x578>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a4:	e00f      	b.n	80012c6 <HAL_RCC_OscConfig+0x522>
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80012a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80012ae:	f023 0301 	bic.w	r3, r3, #1
 80012b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d016      	beq.n	80012fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ce:	f7ff fa17 	bl	8000700 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fa13 	bl	8000700 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e139      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x578>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0ed      	beq.n	80012d6 <HAL_RCC_OscConfig+0x532>
 80012fa:	e01a      	b.n	8001332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fa00 	bl	8000700 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001302:	e00f      	b.n	8001324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff f9fc 	bl	8000700 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d906      	bls.n	8001324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e122      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001324:	4b90      	ldr	r3, [pc, #576]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e8      	bne.n	8001304 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133c:	4a8a      	ldr	r2, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800133e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001342:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8108 	beq.w	800155e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	2b02      	cmp	r3, #2
 8001354:	f040 80d0 	bne.w	80014f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001358:	4b83      	ldr	r3, [pc, #524]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	429a      	cmp	r2, r3
 800136a:	d130      	bne.n	80013ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	3b01      	subs	r3, #1
 8001378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d127      	bne.n	80013ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d11f      	bne.n	80013ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001398:	2a07      	cmp	r2, #7
 800139a:	bf14      	ite	ne
 800139c:	2201      	movne	r2, #1
 800139e:	2200      	moveq	r2, #0
 80013a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d113      	bne.n	80013ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	3b01      	subs	r3, #1
 80013b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d109      	bne.n	80013ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d06e      	beq.n	80014ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d069      	beq.n	80014a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013d4:	4b64      	ldr	r3, [pc, #400]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013e0:	4b61      	ldr	r3, [pc, #388]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b7      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80013f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013fc:	f7ff f980 	bl	8000700 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff f97c 	bl	8000700 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0a4      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_RCC_OscConfig+0x7c8>)
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001432:	3a01      	subs	r2, #1
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	4311      	orrs	r1, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800143c:	0212      	lsls	r2, r2, #8
 800143e:	4311      	orrs	r1, r2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001444:	0852      	lsrs	r2, r2, #1
 8001446:	3a01      	subs	r2, #1
 8001448:	0552      	lsls	r2, r2, #21
 800144a:	4311      	orrs	r1, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001450:	0852      	lsrs	r2, r2, #1
 8001452:	3a01      	subs	r2, #1
 8001454:	0652      	lsls	r2, r2, #25
 8001456:	4311      	orrs	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800145c:	0912      	lsrs	r2, r2, #4
 800145e:	0452      	lsls	r2, r2, #17
 8001460:	430a      	orrs	r2, r1
 8001462:	4941      	ldr	r1, [pc, #260]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a3b      	ldr	r2, [pc, #236]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001480:	f7ff f93e 	bl	8000700 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff f93a 	bl	8000700 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e062      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a6:	e05a      	b.n	800155e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e059      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d152      	bne.n	800155e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014d0:	f7ff f916 	bl	8000700 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff f912 	bl	8000700 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e03a      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x734>
 80014f6:	e032      	b.n	800155e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	d02d      	beq.n	800155a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001508:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 8001528:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff f8e5 	bl	8000700 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff f8e1 	bl	8000700 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e009      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_OscConfig+0x7c4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x796>
 8001558:	e001      	b.n	800155e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	f99d808c 	.word	0xf99d808c

08001570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0c8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4961      	ldr	r1, [pc, #388]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b0      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d04c      	beq.n	800165a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c8:	4b56      	ldr	r3, [pc, #344]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d121      	bne.n	8001618 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e09e      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d115      	bne.n	8001618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e092      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e086      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e07e      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 0203 	bic.w	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	493f      	ldr	r1, [pc, #252]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162a:	f7ff f869 	bl	8000700 <HAL_GetTick>
 800162e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001630:	e00a      	b.n	8001648 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7ff f865 	bl	8000700 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e066      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 020c 	and.w	r2, r3, #12
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	429a      	cmp	r2, r3
 8001658:	d1eb      	bne.n	8001632 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	492c      	ldr	r1, [pc, #176]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d210      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4924      	ldr	r1, [pc, #144]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_RCC_ClockConfig+0x1b0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e036      	b.n	8001716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4918      	ldr	r1, [pc, #96]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4910      	ldr	r1, [pc, #64]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e6:	f000 f825 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <HAL_RCC_ClockConfig+0x1b4>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490c      	ldr	r1, [pc, #48]	; (8001728 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe feee 	bl	80004ec <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	72fb      	strb	r3, [r7, #11]

  return status;
 8001714:	7afb      	ldrb	r3, [r7, #11]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	40021000 	.word	0x40021000
 8001728:	0800500c 	.word	0x0800500c
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x34>
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d121      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d11e      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d107      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e005      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001790:	4a2b      	ldr	r2, [pc, #172]	; (8001840 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10d      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	e004      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d134      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0xa6>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d003      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0xac>
 80017d8:	e005      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_GetSysClockFreq+0x110>)
 80017dc:	617b      	str	r3, [r7, #20]
      break;
 80017de:	e005      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_GetSysClockFreq+0x114>)
 80017e2:	617b      	str	r3, [r7, #20]
      break;
 80017e4:	e002      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	617b      	str	r3, [r7, #20]
      break;
 80017ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	3301      	adds	r3, #1
 80017f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	fb02 f203 	mul.w	r2, r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	0e5b      	lsrs	r3, r3, #25
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	3301      	adds	r3, #1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800182c:	69bb      	ldr	r3, [r7, #24]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	08005024 	.word	0x08005024
 8001844:	00f42400 	.word	0x00f42400
 8001848:	007a1200 	.word	0x007a1200

0800184c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_RCC_GetHCLKFreq+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000

08001864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001868:	f7ff fff0 	bl	800184c <HAL_RCC_GetHCLKFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	4904      	ldr	r1, [pc, #16]	; (800188c <HAL_RCC_GetPCLK1Freq+0x28>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	0800501c 	.word	0x0800501c

08001890 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	220f      	movs	r2, #15
 800189e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RCC_GetClockConfig+0x60>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0207 	and.w	r2, r3, #7
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40022000 	.word	0x40022000

080018f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800190c:	f7ff f9e6 	bl	8000cdc <HAL_PWREx_GetVoltageRange>
 8001910:	6178      	str	r0, [r7, #20]
 8001912:	e014      	b.n	800193e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4a24      	ldr	r2, [pc, #144]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800192c:	f7ff f9d6 	bl	8000cdc <HAL_PWREx_GetVoltageRange>
 8001930:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d10b      	bne.n	800195e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b80      	cmp	r3, #128	; 0x80
 800194a:	d919      	bls.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2ba0      	cmp	r3, #160	; 0xa0
 8001950:	d902      	bls.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001952:	2302      	movs	r3, #2
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e013      	b.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001958:	2301      	movs	r3, #1
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e010      	b.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d902      	bls.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001964:	2303      	movs	r3, #3
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e00a      	b.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b80      	cmp	r3, #128	; 0x80
 800196e:	d102      	bne.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e004      	b.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b70      	cmp	r3, #112	; 0x70
 800197a:	d101      	bne.n	8001980 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800197c:	2301      	movs	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 0207 	bic.w	r2, r3, #7
 8001988:	4909      	ldr	r1, [pc, #36]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e049      	b.n	8001a5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f841 	bl	8001a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f000 f9f8 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d001      	beq.n	8001a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e04f      	b.n	8001b30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aba:	d018      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00e      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_TIM_Base_Start_IT+0x76>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d115      	bne.n	8001b1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d015      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0xb4>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d011      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	e008      	b.n	8001b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e000      	b.n	8001b2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40000800 	.word	0x40000800
 8001b48:	40000c00 	.word	0x40000c00
 8001b4c:	40013400 	.word	0x40013400
 8001b50:	40014000 	.word	0x40014000
 8001b54:	00010007 	.word	0x00010007

08001b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f905 	bl	8001daa <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8f7 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f908 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0204 	mvn.w	r2, #4
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8db 	bl	8001daa <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8cd 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8de 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0208 	mvn.w	r2, #8
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8b1 	bl	8001daa <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8a3 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8b4 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0210 	mvn.w	r2, #16
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2208      	movs	r2, #8
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f887 	bl	8001daa <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f879 	bl	8001d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f88a 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fbc0 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f914 	bl	8001f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d16:	d10e      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b80      	cmp	r3, #128	; 0x80
 8001d24:	d107      	bne.n	8001d36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f907 	bl	8001f44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d10e      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d107      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f838 	bl	8001dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0220 	mvn.w	r2, #32
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8c7 	bl	8001f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d00f      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00b      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <TIM_Base_SetConfig+0x118>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <TIM_Base_SetConfig+0x11c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <TIM_Base_SetConfig+0x120>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <TIM_Base_SetConfig+0x128>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x9a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <TIM_Base_SetConfig+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00f      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <TIM_Base_SetConfig+0x128>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <TIM_Base_SetConfig+0x12c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0xf8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <TIM_Base_SetConfig+0x130>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d103      	bne.n	8001ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40013400 	.word	0x40013400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40014400 	.word	0x40014400
 8001f18:	40014800 	.word	0x40014800

08001f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <__NVIC_SetPriority>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Handler+0x1c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001fb4:	f001 ff24 	bl	8003e00 <xTaskGetSchedulerState>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fbe:	f002 fd0b 	bl	80049d8 <xPortSysTickHandler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f06f 0004 	mvn.w	r0, #4
 8001fd6:	f7ff ffbf 	bl	8001f58 <__NVIC_SetPriority>
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe6:	f3ef 8305 	mrs	r3, IPSR
 8001fea:	603b      	str	r3, [r7, #0]
  return(result);
 8001fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ff2:	f06f 0305 	mvn.w	r3, #5
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	e00c      	b.n	8002014 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <osKernelInitialize+0x44>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <osKernelInitialize+0x44>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	e002      	b.n	8002014 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000002c 	.word	0x2000002c

08002028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800202e:	f3ef 8305 	mrs	r3, IPSR
 8002032:	603b      	str	r3, [r7, #0]
  return(result);
 8002034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800203a:	f06f 0305 	mvn.w	r3, #5
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e010      	b.n	8002064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <osKernelStart+0x48>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d109      	bne.n	800205e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800204a:	f7ff ffbf 	bl	8001fcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <osKernelStart+0x48>)
 8002050:	2202      	movs	r2, #2
 8002052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002054:	f001 fa8c 	bl	8003570 <vTaskStartScheduler>
      stat = osOK;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e002      	b.n	8002064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000002c 	.word	0x2000002c

08002074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af04      	add	r7, sp, #16
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002084:	f3ef 8305 	mrs	r3, IPSR
 8002088:	617b      	str	r3, [r7, #20]
  return(result);
 800208a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800208c:	2b00      	cmp	r3, #0
 800208e:	d17e      	bne.n	800218e <osThreadNew+0x11a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d07b      	beq.n	800218e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800209a:	2318      	movs	r3, #24
 800209c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d045      	beq.n	800213a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <osThreadNew+0x48>
        name = attr->name;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <osThreadNew+0x6e>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b38      	cmp	r3, #56	; 0x38
 80020d4:	d805      	bhi.n	80020e2 <osThreadNew+0x6e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <osThreadNew+0x72>
        return (NULL);
 80020e2:	2300      	movs	r3, #0
 80020e4:	e054      	b.n	8002190 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00e      	beq.n	800211c <osThreadNew+0xa8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b5b      	cmp	r3, #91	; 0x5b
 8002104:	d90a      	bls.n	800211c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <osThreadNew+0xa8>
        mem = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e010      	b.n	800213e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <osThreadNew+0xca>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <osThreadNew+0xca>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <osThreadNew+0xca>
          mem = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e001      	b.n	800213e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d110      	bne.n	8002166 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800214c:	9202      	str	r2, [sp, #8]
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6a3a      	ldr	r2, [r7, #32]
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 ff18 	bl	8002f90 <xTaskCreateStatic>
 8002160:	4603      	mov	r3, r0
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e013      	b.n	800218e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d110      	bne.n	800218e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	b29a      	uxth	r2, r3
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 ff63 	bl	800304a <xTaskCreate>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <osThreadNew+0x11a>
            hTask = NULL;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800218e:	693b      	ldr	r3, [r7, #16]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a0:	f3ef 8305 	mrs	r3, IPSR
 80021a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80021a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <osDelay+0x1c>
    stat = osErrorISR;
 80021ac:	f06f 0305 	mvn.w	r3, #5
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e007      	b.n	80021c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f001 f888 	bl	80032d4 <vTaskDelay>
    }
  }

  return (stat);
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021da:	f3ef 8305 	mrs	r3, IPSR
 80021de:	60bb      	str	r3, [r7, #8]
  return(result);
 80021e0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d174      	bne.n	80022d0 <osMutexNew+0x102>
    if (attr != NULL) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e001      	b.n	80021f8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <osMutexNew+0x3a>
      rmtx = 1U;
 8002202:	2301      	movs	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e001      	b.n	800220c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d15c      	bne.n	80022d0 <osMutexNew+0x102>
      mem = -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <osMutexNew+0x6a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b4f      	cmp	r3, #79	; 0x4f
 8002230:	d902      	bls.n	8002238 <osMutexNew+0x6a>
          mem = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e00c      	b.n	8002252 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <osMutexNew+0x84>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <osMutexNew+0x84>
            mem = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e001      	b.n	8002252 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d112      	bne.n	800227e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4619      	mov	r1, r3
 8002264:	2004      	movs	r0, #4
 8002266:	f000 fa90 	bl	800278a <xQueueCreateMutexStatic>
 800226a:	61f8      	str	r0, [r7, #28]
 800226c:	e016      	b.n	800229c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4619      	mov	r1, r3
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fa88 	bl	800278a <xQueueCreateMutexStatic>
 800227a:	61f8      	str	r0, [r7, #28]
 800227c:	e00e      	b.n	800229c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800228a:	2004      	movs	r0, #4
 800228c:	f000 fa65 	bl	800275a <xQueueCreateMutex>
 8002290:	61f8      	str	r0, [r7, #28]
 8002292:	e003      	b.n	800229c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fa60 	bl	800275a <xQueueCreateMutex>
 800229a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <osMutexNew+0xee>
        if (attr != NULL) {
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <osMutexNew+0xe2>
          name = attr->name;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e001      	b.n	80022b4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80022b4:	68f9      	ldr	r1, [r7, #12]
 80022b6:	69f8      	ldr	r0, [r7, #28]
 80022b8:	f000 fe0c 	bl	8002ed4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <osMutexNew+0x102>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80022d0:	69fb      	ldr	r3, [r7, #28]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <vApplicationGetIdleTaskMemory+0x2c>)
 80022ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <vApplicationGetIdleTaskMemory+0x30>)
 80022f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000030 	.word	0x20000030
 800230c:	2000008c 	.word	0x2000008c

08002310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <vApplicationGetTimerTaskMemory+0x2c>)
 8002320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <vApplicationGetTimerTaskMemory+0x30>)
 8002326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	2000028c 	.word	0x2000028c
 8002340:	200002e8 	.word	0x200002e8

08002344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f103 0208 	add.w	r2, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800235c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f103 0208 	add.w	r2, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f103 0208 	add.w	r2, r3, #8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fc:	d103      	bne.n	8002406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e00c      	b.n	8002420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3308      	adds	r3, #8
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e002      	b.n	8002414 <vListInsert+0x2e>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d2f6      	bcs.n	800240e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6852      	ldr	r2, [r2, #4]
 8002478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	d103      	bne.n	800248c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024d6:	f002 f9ed 	bl	80048b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	441a      	add	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	3b01      	subs	r3, #1
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	441a      	add	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	22ff      	movs	r2, #255	; 0xff
 800251a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	22ff      	movs	r2, #255	; 0xff
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d114      	bne.n	8002556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01a      	beq.n	800256a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3310      	adds	r3, #16
 8002538:	4618      	mov	r0, r3
 800253a:	f001 faa3 	bl	8003a84 <xTaskRemoveFromEventList>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d012      	beq.n	800256a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <xQueueGenericReset+0xcc>)
 8002546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	e009      	b.n	800256a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3310      	adds	r3, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fef2 	bl	8002344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3324      	adds	r3, #36	; 0x24
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff feed 	bl	8002344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800256a:	f002 f9d3 	bl	8004914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08e      	sub	sp, #56	; 0x38
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <xQueueGenericCreateStatic+0x52>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <xQueueGenericCreateStatic+0x56>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <xQueueGenericCreateStatic+0x58>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	623b      	str	r3, [r7, #32]
}
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <xQueueGenericCreateStatic+0x7e>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <xQueueGenericCreateStatic+0x82>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueGenericCreateStatic+0x84>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61fb      	str	r3, [r7, #28]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800261a:	2350      	movs	r3, #80	; 0x50
 800261c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b50      	cmp	r3, #80	; 0x50
 8002622:	d00a      	beq.n	800263a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	61bb      	str	r3, [r7, #24]
}
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800263a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800264e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f83f 	bl	80026e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002664:	4618      	mov	r0, r3
 8002666:	3730      	adds	r7, #48	; 0x30
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	4613      	mov	r3, r2
 8002678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	613b      	str	r3, [r7, #16]
}
 8002692:	bf00      	nop
 8002694:	e7fe      	b.n	8002694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fa27 	bl	8004af8 <pvPortMalloc>
 80026aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3350      	adds	r3, #80	; 0x50
 80026ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026c4:	79fa      	ldrb	r2, [r7, #7]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f805 	bl	80026e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026d6:	69bb      	ldr	r3, [r7, #24]
	}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e002      	b.n	8002702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800270e:	2101      	movs	r1, #1
 8002710:	69b8      	ldr	r0, [r7, #24]
 8002712:	f7ff fecb 	bl	80024ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002746:	2300      	movs	r3, #0
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f837 	bl	80027c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	461a      	mov	r2, r3
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff7a 	bl	800266c <xQueueGenericCreate>
 8002778:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff ffd3 	bl	8002726 <prvInitialiseMutex>

		return xNewQueue;
 8002780:	68fb      	ldr	r3, [r7, #12]
	}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af02      	add	r7, sp, #8
 8002790:	4603      	mov	r3, r0
 8002792:	6039      	str	r1, [r7, #0]
 8002794:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002796:	2301      	movs	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	6939      	ldr	r1, [r7, #16]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff fee7 	bl	800257c <xQueueGenericCreateStatic>
 80027ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff ffb8 	bl	8002726 <prvInitialiseMutex>

		return xNewQueue;
 80027b6:	68fb      	ldr	r3, [r7, #12]
	}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericSend+0x32>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <xQueueGenericSend+0x40>
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueGenericSend+0x44>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueGenericSend+0x46>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <xQueueGenericSend+0x60>
	__asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d103      	bne.n	800282e <xQueueGenericSend+0x6e>
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <xQueueGenericSend+0x72>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueGenericSend+0x74>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericSend+0x8e>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	623b      	str	r3, [r7, #32]
}
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800284e:	f001 fad7 	bl	8003e00 <xTaskGetSchedulerState>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <xQueueGenericSend+0x9e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <xQueueGenericSend+0xa2>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <xQueueGenericSend+0xa4>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericSend+0xbe>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fb      	str	r3, [r7, #28]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800287e:	f002 f819 	bl	80048b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <xQueueGenericSend+0xd4>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d129      	bne.n	80028e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800289a:	f000 fa0b 	bl	8002cb4 <prvCopyDataToQueue>
 800289e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d010      	beq.n	80028ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	3324      	adds	r3, #36	; 0x24
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f8e9 	bl	8003a84 <xTaskRemoveFromEventList>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <xQueueGenericSend+0x1f8>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	e00a      	b.n	80028e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028d0:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <xQueueGenericSend+0x1f8>)
 80028d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028e0:	f002 f818 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e063      	b.n	80029b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ee:	f002 f811 	bl	8004914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e05c      	b.n	80029b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4618      	mov	r0, r3
 8002902:	f001 f923 	bl	8003b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002906:	2301      	movs	r3, #1
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800290a:	f002 f803 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800290e:	f000 fe95 	bl	800363c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002912:	f001 ffcf 	bl	80048b4 <vPortEnterCritical>
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800291c:	b25b      	sxtb	r3, r3
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002922:	d103      	bne.n	800292c <xQueueGenericSend+0x16c>
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002938:	d103      	bne.n	8002942 <xQueueGenericSend+0x182>
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002942:	f001 ffe7 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002946:	1d3a      	adds	r2, r7, #4
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f912 	bl	8003b78 <xTaskCheckForTimeOut>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d124      	bne.n	80029a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800295a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800295c:	f000 faa2 	bl	8002ea4 <prvIsQueueFull>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	3310      	adds	r3, #16
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f001 f838 	bl	80039e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002976:	f000 fa2d 	bl	8002dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800297a:	f000 fe6d 	bl	8003658 <xTaskResumeAll>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af7c 	bne.w	800287e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <xQueueGenericSend+0x1f8>)
 8002988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	e772      	b.n	800287e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299a:	f000 fa1b 	bl	8002dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800299e:	f000 fe5b 	bl	8003658 <xTaskResumeAll>
 80029a2:	e76c      	b.n	800287e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a6:	f000 fa15 	bl	8002dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029aa:	f000 fe55 	bl	8003658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3738      	adds	r7, #56	; 0x38
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	e000ed04 	.word	0xe000ed04

080029bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b090      	sub	sp, #64	; 0x40
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <xQueueGenericSendFromISR+0x3c>
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <xQueueGenericSendFromISR+0x40>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <xQueueGenericSendFromISR+0x42>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a14:	bf00      	nop
 8002a16:	e7fe      	b.n	8002a16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d103      	bne.n	8002a26 <xQueueGenericSendFromISR+0x6a>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericSendFromISR+0x6e>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericSendFromISR+0x70>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a46:	f002 f817 	bl	8004a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	61fa      	str	r2, [r7, #28]
 8002a60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <xQueueGenericSendFromISR+0xbc>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d12f      	bne.n	8002ad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a8e:	f000 f911 	bl	8002cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9a:	d112      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d016      	beq.n	8002ad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ffeb 	bl	8003a84 <xTaskRemoveFromEventList>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e007      	b.n	8002ad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ac2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	b25a      	sxtb	r2, r3
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002ad6:	e001      	b.n	8002adc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3740      	adds	r7, #64	; 0x40
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <xQueueReceive+0x30>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	623b      	str	r3, [r7, #32]
}
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <xQueueReceive+0x3e>
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <xQueueReceive+0x42>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueReceive+0x44>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueReceive+0x5e>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	61fb      	str	r3, [r7, #28]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b52:	f001 f955 	bl	8003e00 <xTaskGetSchedulerState>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <xQueueReceive+0x6e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <xQueueReceive+0x72>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <xQueueReceive+0x74>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueReceive+0x8e>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	61bb      	str	r3, [r7, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b82:	f001 fe97 	bl	80048b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01f      	beq.n	8002bd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b96:	f000 f8f7 	bl	8002d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00f      	beq.n	8002bca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ff68 	bl	8003a84 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <xQueueReceive+0x1bc>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bca:	f001 fea3 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e069      	b.n	8002ca6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bd8:	f001 fe9c 	bl	8004914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e062      	b.n	8002ca6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be6:	f107 0310 	add.w	r3, r7, #16
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 ffae 	bl	8003b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bf4:	f001 fe8e 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bf8:	f000 fd20 	bl	800363c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bfc:	f001 fe5a 	bl	80048b4 <vPortEnterCritical>
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d103      	bne.n	8002c16 <xQueueReceive+0x122>
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1c:	b25b      	sxtb	r3, r3
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d103      	bne.n	8002c2c <xQueueReceive+0x138>
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2c:	f001 fe72 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c30:	1d3a      	adds	r2, r7, #4
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 ff9d 	bl	8003b78 <xTaskCheckForTimeOut>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d123      	bne.n	8002c8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c46:	f000 f917 	bl	8002e78 <prvIsQueueEmpty>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	3324      	adds	r3, #36	; 0x24
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fec3 	bl	80039e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c60:	f000 f8b8 	bl	8002dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c64:	f000 fcf8 	bl	8003658 <xTaskResumeAll>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d189      	bne.n	8002b82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <xQueueReceive+0x1bc>)
 8002c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	e780      	b.n	8002b82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c82:	f000 f8a7 	bl	8002dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c86:	f000 fce7 	bl	8003658 <xTaskResumeAll>
 8002c8a:	e77a      	b.n	8002b82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8e:	f000 f8a1 	bl	8002dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c92:	f000 fce1 	bl	8003658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c98:	f000 f8ee 	bl	8002e78 <prvIsQueueEmpty>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f43f af6f 	beq.w	8002b82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3730      	adds	r7, #48	; 0x30
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d14d      	bne.n	8002d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f8ac 	bl	8003e3c <xTaskPriorityDisinherit>
 8002ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e043      	b.n	8002d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d119      	bne.n	8002d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6858      	ldr	r0, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	f002 f908 	bl	8004f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	441a      	add	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d32b      	bcc.n	8002d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e026      	b.n	8002d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68d8      	ldr	r0, [r3, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	461a      	mov	r2, r3
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	f002 f8ee 	bl	8004f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	425b      	negs	r3, r3
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	441a      	add	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d105      	bne.n	8002d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d7e:	697b      	ldr	r3, [r7, #20]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	441a      	add	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d303      	bcc.n	8002dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6838      	ldr	r0, [r7, #0]
 8002dc8:	f002 f8a4 	bl	8004f14 <memcpy>
	}
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ddc:	f001 fd6a 	bl	80048b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002de8:	e011      	b.n	8002e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d012      	beq.n	8002e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3324      	adds	r3, #36	; 0x24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fe44 	bl	8003a84 <xTaskRemoveFromEventList>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e02:	f000 ff1b 	bl	8003c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dce9      	bgt.n	8002dea <prvUnlockQueue+0x16>
 8002e16:	e000      	b.n	8002e1a <prvUnlockQueue+0x46>
					break;
 8002e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e22:	f001 fd77 	bl	8004914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e26:	f001 fd45 	bl	80048b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e32:	e011      	b.n	8002e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3310      	adds	r3, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fe1f 	bl	8003a84 <xTaskRemoveFromEventList>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e4c:	f000 fef6 	bl	8003c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dce9      	bgt.n	8002e34 <prvUnlockQueue+0x60>
 8002e60:	e000      	b.n	8002e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e6c:	f001 fd52 	bl	8004914 <vPortExitCritical>
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e80:	f001 fd18 	bl	80048b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e96:	f001 fd3d 	bl	8004914 <vPortExitCritical>

	return xReturn;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eac:	f001 fd02 	bl	80048b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d102      	bne.n	8002ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e001      	b.n	8002ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ec6:	f001 fd25 	bl	8004914 <vPortExitCritical>

	return xReturn;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e014      	b.n	8002f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <vQueueAddToRegistry+0x50>)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <vQueueAddToRegistry+0x50>)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <vQueueAddToRegistry+0x50>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f06:	e006      	b.n	8002f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b07      	cmp	r3, #7
 8002f12:	d9e7      	bls.n	8002ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	200020b8 	.word	0x200020b8

08002f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f38:	f001 fcbc 	bl	80048b4 <vPortEnterCritical>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f48:	d103      	bne.n	8002f52 <vQueueWaitForMessageRestricted+0x2a>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f5e:	d103      	bne.n	8002f68 <vQueueWaitForMessageRestricted+0x40>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	f001 fcd4 	bl	8004914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fd55 	bl	8003a2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff26 	bl	8002dd4 <prvUnlockQueue>
	}
 8002f88:	bf00      	nop
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af04      	add	r7, sp, #16
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	61fb      	str	r3, [r7, #28]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fd6:	235c      	movs	r3, #92	; 0x5c
 8002fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b5c      	cmp	r3, #92	; 0x5c
 8002fde:	d00a      	beq.n	8002ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61bb      	str	r3, [r7, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ff6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01e      	beq.n	800303c <xTaskCreateStatic+0xac>
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003016:	2300      	movs	r3, #0
 8003018:	9303      	str	r3, [sp, #12]
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	9302      	str	r3, [sp, #8]
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f850 	bl	80030d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003036:	f000 f8dd 	bl	80031f4 <prvAddNewTaskToReadyList>
 800303a:	e001      	b.n	8003040 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003040:	697b      	ldr	r3, [r7, #20]
	}
 8003042:	4618      	mov	r0, r3
 8003044:	3728      	adds	r7, #40	; 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800304a:	b580      	push	{r7, lr}
 800304c:	b08c      	sub	sp, #48	; 0x30
 800304e:	af04      	add	r7, sp, #16
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fd4a 	bl	8004af8 <pvPortMalloc>
 8003064:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800306c:	205c      	movs	r0, #92	; 0x5c
 800306e:	f001 fd43 	bl	8004af8 <pvPortMalloc>
 8003072:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
 8003080:	e005      	b.n	800308e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f001 fe04 	bl	8004c90 <vPortFree>
 8003088:	e001      	b.n	800308e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	2300      	movs	r3, #0
 80030a0:	9303      	str	r3, [sp, #12]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f80e 	bl	80030d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030b8:	69f8      	ldr	r0, [r7, #28]
 80030ba:	f000 f89b 	bl	80031f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030be:	2301      	movs	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e002      	b.n	80030ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030ca:	69bb      	ldr	r3, [r7, #24]
	}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	21a5      	movs	r1, #165	; 0xa5
 80030ee:	f001 ff1f 	bl	8004f30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030fc:	3b01      	subs	r3, #1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f023 0307 	bic.w	r3, r3, #7
 800310a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	617b      	str	r3, [r7, #20]
}
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01f      	beq.n	8003172 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e012      	b.n	800315e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	7819      	ldrb	r1, [r3, #0]
 8003140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	3334      	adds	r3, #52	; 0x34
 8003148:	460a      	mov	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b0f      	cmp	r3, #15
 8003162:	d9e9      	bls.n	8003138 <prvInitialiseNewTask+0x64>
 8003164:	e000      	b.n	8003168 <prvInitialiseNewTask+0x94>
			{
				break;
 8003166:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003170:	e003      	b.n	800317a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	2b37      	cmp	r3, #55	; 0x37
 800317e:	d901      	bls.n	8003184 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003180:	2337      	movs	r3, #55	; 0x37
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800318e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2200      	movs	r2, #0
 8003194:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	3304      	adds	r3, #4
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f8f2 	bl	8002384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	3318      	adds	r3, #24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f8ed 	bl	8002384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	69b8      	ldr	r0, [r7, #24]
 80031d4:	f001 fa42 	bl	800465c <pxPortInitialiseStack>
 80031d8:	4602      	mov	r2, r0
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031fc:	f001 fb5a 	bl	80048b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <prvAddNewTaskToReadyList+0xc4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <prvAddNewTaskToReadyList+0xc4>)
 8003208:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800320a:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <prvAddNewTaskToReadyList+0xc8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003212:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <prvAddNewTaskToReadyList+0xc8>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <prvAddNewTaskToReadyList+0xc4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d110      	bne.n	8003242 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003220:	f000 fd30 	bl	8003c84 <prvInitialiseTaskLists>
 8003224:	e00d      	b.n	8003242 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <prvAddNewTaskToReadyList+0xcc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <prvAddNewTaskToReadyList+0xc8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	429a      	cmp	r2, r3
 800323a:	d802      	bhi.n	8003242 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <prvAddNewTaskToReadyList+0xc8>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <prvAddNewTaskToReadyList+0xd0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <prvAddNewTaskToReadyList+0xd0>)
 800324a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <prvAddNewTaskToReadyList+0xd0>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <prvAddNewTaskToReadyList+0xd4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d903      	bls.n	8003268 <prvAddNewTaskToReadyList+0x74>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <prvAddNewTaskToReadyList+0xd4>)
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <prvAddNewTaskToReadyList+0xd8>)
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7ff f88d 	bl	800239e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003284:	f001 fb46 	bl	8004914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <prvAddNewTaskToReadyList+0xcc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <prvAddNewTaskToReadyList+0xc8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	429a      	cmp	r2, r3
 800329c:	d207      	bcs.n	80032ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <prvAddNewTaskToReadyList+0xdc>)
 80032a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000bbc 	.word	0x20000bbc
 80032bc:	200006e8 	.word	0x200006e8
 80032c0:	20000bc8 	.word	0x20000bc8
 80032c4:	20000bd8 	.word	0x20000bd8
 80032c8:	20000bc4 	.word	0x20000bc4
 80032cc:	200006ec 	.word	0x200006ec
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d017      	beq.n	8003316 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <vTaskDelay+0x60>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <vTaskDelay+0x30>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	60bb      	str	r3, [r7, #8]
}
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003304:	f000 f99a 	bl	800363c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fe04 	bl	8003f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003310:	f000 f9a2 	bl	8003658 <xTaskResumeAll>
 8003314:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <vTaskDelay+0x64>)
 800331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000be4 	.word	0x20000be4
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003344:	f001 fab6 	bl	80048b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <vTaskSuspend+0x18>
 800334e:	4b30      	ldr	r3, [pc, #192]	; (8003410 <vTaskSuspend+0xd4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e000      	b.n	8003356 <vTaskSuspend+0x1a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3304      	adds	r3, #4
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f87b 	bl	8002458 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3318      	adds	r3, #24
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f872 	bl	8002458 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4826      	ldr	r0, [pc, #152]	; (8003414 <vTaskSuspend+0xd8>)
 800337c:	f7ff f80f 	bl	800239e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d103      	bne.n	8003394 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003394:	f001 fabe 	bl	8004914 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003398:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <vTaskSuspend+0xdc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80033a0:	f001 fa88 	bl	80048b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80033a4:	f000 fd0c 	bl	8003dc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80033a8:	f001 fab4 	bl	8004914 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <vTaskSuspend+0xd4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d127      	bne.n	8003406 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <vTaskSuspend+0xdc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <vTaskSuspend+0xe0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <vTaskSuspend+0xa0>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	60bb      	str	r3, [r7, #8]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <vTaskSuspend+0xe4>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033ec:	e00b      	b.n	8003406 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <vTaskSuspend+0xd8>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <vTaskSuspend+0xe8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d103      	bne.n	8003402 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <vTaskSuspend+0xd4>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
	}
 8003400:	e001      	b.n	8003406 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8003402:	f000 fa91 	bl	8003928 <vTaskSwitchContext>
	}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200006e8 	.word	0x200006e8
 8003414:	20000ba8 	.word	0x20000ba8
 8003418:	20000bc8 	.word	0x20000bc8
 800341c:	20000be4 	.word	0x20000be4
 8003420:	e000ed04 	.word	0xe000ed04
 8003424:	20000bbc 	.word	0x20000bbc

08003428 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
}
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <prvTaskIsTaskSuspended+0x5c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10a      	bne.n	8003474 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <prvTaskIsTaskSuspended+0x60>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d005      	beq.n	8003474 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003474:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003476:	4618      	mov	r0, r3
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000ba8 	.word	0x20000ba8
 8003488:	20000b7c 	.word	0x20000b7c

0800348c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	61bb      	str	r3, [r7, #24]
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b8:	f001 fade 	bl	8004a78 <vPortValidateInterruptPriority>
	__asm volatile
 80034bc:	f3ef 8211 	mrs	r2, BASEPRI
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	617a      	str	r2, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80034d4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034d6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80034d8:	6a38      	ldr	r0, [r7, #32]
 80034da:	f7ff ffa5 	bl	8003428 <prvTaskIsTaskSuspended>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d030      	beq.n	8003546 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <xTaskResumeFromISR+0xd0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d126      	bne.n	800353a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <xTaskResumeFromISR+0xd4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d301      	bcc.n	80034fe <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe ffa8 	bl	8002458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <xTaskResumeFromISR+0xd8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d903      	bls.n	800351c <xTaskResumeFromISR+0x90>
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a12      	ldr	r2, [pc, #72]	; (8003564 <xTaskResumeFromISR+0xd8>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <xTaskResumeFromISR+0xdc>)
 800352a:	441a      	add	r2, r3
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7fe ff33 	bl	800239e <vListInsertEnd>
 8003538:	e005      	b.n	8003546 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	3318      	adds	r3, #24
 800353e:	4619      	mov	r1, r3
 8003540:	480a      	ldr	r0, [pc, #40]	; (800356c <xTaskResumeFromISR+0xe0>)
 8003542:	f7fe ff2c 	bl	800239e <vListInsertEnd>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f383 8811 	msr	BASEPRI, r3
}
 8003550:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003554:	4618      	mov	r0, r3
 8003556:	3728      	adds	r7, #40	; 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000be4 	.word	0x20000be4
 8003560:	200006e8 	.word	0x200006e8
 8003564:	20000bc4 	.word	0x20000bc4
 8003568:	200006ec 	.word	0x200006ec
 800356c:	20000b7c 	.word	0x20000b7c

08003570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800357e:	463a      	mov	r2, r7
 8003580:	1d39      	adds	r1, r7, #4
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fea8 	bl	80022dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	9202      	str	r2, [sp, #8]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	460a      	mov	r2, r1
 800359e:	4921      	ldr	r1, [pc, #132]	; (8003624 <vTaskStartScheduler+0xb4>)
 80035a0:	4821      	ldr	r0, [pc, #132]	; (8003628 <vTaskStartScheduler+0xb8>)
 80035a2:	f7ff fcf5 	bl	8002f90 <xTaskCreateStatic>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a20      	ldr	r2, [pc, #128]	; (800362c <vTaskStartScheduler+0xbc>)
 80035aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <vTaskStartScheduler+0xbc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035b4:	2301      	movs	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e001      	b.n	80035be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035c4:	f000 fcfc 	bl	8003fc0 <xTimerCreateTimerTask>
 80035c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d116      	bne.n	80035fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	613b      	str	r3, [r7, #16]
}
 80035e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <vTaskStartScheduler+0xc0>)
 80035e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <vTaskStartScheduler+0xc4>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <vTaskStartScheduler+0xc8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035f8:	f001 f8ba 	bl	8004770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035fc:	e00e      	b.n	800361c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003604:	d10a      	bne.n	800361c <vTaskStartScheduler+0xac>
	__asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60fb      	str	r3, [r7, #12]
}
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <vTaskStartScheduler+0xaa>
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	08004f78 	.word	0x08004f78
 8003628:	08003c55 	.word	0x08003c55
 800362c:	20000be0 	.word	0x20000be0
 8003630:	20000bdc 	.word	0x20000bdc
 8003634:	20000bc8 	.word	0x20000bc8
 8003638:	20000bc0 	.word	0x20000bc0

0800363c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <vTaskSuspendAll+0x18>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	4a03      	ldr	r2, [pc, #12]	; (8003654 <vTaskSuspendAll+0x18>)
 8003648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000be4 	.word	0x20000be4

08003658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <xTaskResumeAll+0x118>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <xTaskResumeAll+0x2c>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	603b      	str	r3, [r7, #0]
}
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003684:	f001 f916 	bl	80048b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <xTaskResumeAll+0x118>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3b01      	subs	r3, #1
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <xTaskResumeAll+0x118>)
 8003690:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <xTaskResumeAll+0x118>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d162      	bne.n	8003760 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <xTaskResumeAll+0x11c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d05e      	beq.n	8003760 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a2:	e02f      	b.n	8003704 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <xTaskResumeAll+0x120>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3318      	adds	r3, #24
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fed1 	bl	8002458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fecc 	bl	8002458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4b2d      	ldr	r3, [pc, #180]	; (800377c <xTaskResumeAll+0x124>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d903      	bls.n	80036d4 <xTaskResumeAll+0x7c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	4a2a      	ldr	r2, [pc, #168]	; (800377c <xTaskResumeAll+0x124>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <xTaskResumeAll+0x128>)
 80036e2:	441a      	add	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7fe fe57 	bl	800239e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4b23      	ldr	r3, [pc, #140]	; (8003784 <xTaskResumeAll+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <xTaskResumeAll+0x130>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <xTaskResumeAll+0x120>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1cb      	bne.n	80036a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003712:	f000 fb55 	bl	8003dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <xTaskResumeAll+0x134>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d010      	beq.n	8003744 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003722:	f000 f847 	bl	80037b4 <xTaskIncrementTick>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <xTaskResumeAll+0x130>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3b01      	subs	r3, #1
 8003736:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f1      	bne.n	8003722 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800373e:	4b13      	ldr	r3, [pc, #76]	; (800378c <xTaskResumeAll+0x134>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <xTaskResumeAll+0x130>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <xTaskResumeAll+0x138>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003760:	f001 f8d8 	bl	8004914 <vPortExitCritical>

	return xAlreadyYielded;
 8003764:	68bb      	ldr	r3, [r7, #8]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000be4 	.word	0x20000be4
 8003774:	20000bbc 	.word	0x20000bbc
 8003778:	20000b7c 	.word	0x20000b7c
 800377c:	20000bc4 	.word	0x20000bc4
 8003780:	200006ec 	.word	0x200006ec
 8003784:	200006e8 	.word	0x200006e8
 8003788:	20000bd0 	.word	0x20000bd0
 800378c:	20000bcc 	.word	0x20000bcc
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <xTaskGetTickCount+0x1c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037a0:	687b      	ldr	r3, [r7, #4]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000bc0 	.word	0x20000bc0

080037b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037be:	4b4f      	ldr	r3, [pc, #316]	; (80038fc <xTaskIncrementTick+0x148>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 808f 	bne.w	80038e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <xTaskIncrementTick+0x14c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037d0:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <xTaskIncrementTick+0x14c>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d120      	bne.n	800381e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037dc:	4b49      	ldr	r3, [pc, #292]	; (8003904 <xTaskIncrementTick+0x150>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <xTaskIncrementTick+0x48>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	603b      	str	r3, [r7, #0]
}
 80037f8:	bf00      	nop
 80037fa:	e7fe      	b.n	80037fa <xTaskIncrementTick+0x46>
 80037fc:	4b41      	ldr	r3, [pc, #260]	; (8003904 <xTaskIncrementTick+0x150>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b41      	ldr	r3, [pc, #260]	; (8003908 <xTaskIncrementTick+0x154>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <xTaskIncrementTick+0x150>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <xTaskIncrementTick+0x154>)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <xTaskIncrementTick+0x158>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a3d      	ldr	r2, [pc, #244]	; (800390c <xTaskIncrementTick+0x158>)
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	f000 fad1 	bl	8003dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800381e:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <xTaskIncrementTick+0x15c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d349      	bcc.n	80038bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <xTaskIncrementTick+0x150>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <xTaskIncrementTick+0x15c>)
 8003834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003838:	601a      	str	r2, [r3, #0]
					break;
 800383a:	e03f      	b.n	80038bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800383c:	4b31      	ldr	r3, [pc, #196]	; (8003904 <xTaskIncrementTick+0x150>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d203      	bcs.n	800385c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <xTaskIncrementTick+0x15c>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800385a:	e02f      	b.n	80038bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fdf9 	bl	8002458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3318      	adds	r3, #24
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fdf0 	bl	8002458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <xTaskIncrementTick+0x160>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <xTaskIncrementTick+0xd8>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <xTaskIncrementTick+0x160>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <xTaskIncrementTick+0x164>)
 800389a:	441a      	add	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe fd7b 	bl	800239e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <xTaskIncrementTick+0x168>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3b8      	bcc.n	8003828 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ba:	e7b5      	b.n	8003828 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <xTaskIncrementTick+0x168>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	4915      	ldr	r1, [pc, #84]	; (8003918 <xTaskIncrementTick+0x164>)
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d901      	bls.n	80038d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <xTaskIncrementTick+0x16c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e004      	b.n	80038f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <xTaskIncrementTick+0x170>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3301      	adds	r3, #1
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <xTaskIncrementTick+0x170>)
 80038ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038f0:	697b      	ldr	r3, [r7, #20]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000be4 	.word	0x20000be4
 8003900:	20000bc0 	.word	0x20000bc0
 8003904:	20000b74 	.word	0x20000b74
 8003908:	20000b78 	.word	0x20000b78
 800390c:	20000bd4 	.word	0x20000bd4
 8003910:	20000bdc 	.word	0x20000bdc
 8003914:	20000bc4 	.word	0x20000bc4
 8003918:	200006ec 	.word	0x200006ec
 800391c:	200006e8 	.word	0x200006e8
 8003920:	20000bd0 	.word	0x20000bd0
 8003924:	20000bcc 	.word	0x20000bcc

08003928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <vTaskSwitchContext+0xa8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <vTaskSwitchContext+0xac>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800393c:	e041      	b.n	80039c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800393e:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <vTaskSwitchContext+0xac>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <vTaskSwitchContext+0xb0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e010      	b.n	800396e <vTaskSwitchContext+0x46>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <vTaskSwitchContext+0x40>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	607b      	str	r3, [r7, #4]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <vTaskSwitchContext+0x3e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3b01      	subs	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	491b      	ldr	r1, [pc, #108]	; (80039dc <vTaskSwitchContext+0xb4>)
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0e4      	beq.n	800394c <vTaskSwitchContext+0x24>
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <vTaskSwitchContext+0xb4>)
 800398e:	4413      	add	r3, r2
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3308      	adds	r3, #8
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d104      	bne.n	80039b2 <vTaskSwitchContext+0x8a>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <vTaskSwitchContext+0xb8>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <vTaskSwitchContext+0xb0>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6013      	str	r3, [r2, #0]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000be4 	.word	0x20000be4
 80039d4:	20000bd0 	.word	0x20000bd0
 80039d8:	20000bc4 	.word	0x20000bc4
 80039dc:	200006ec 	.word	0x200006ec
 80039e0:	200006e8 	.word	0x200006e8

080039e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	60fb      	str	r3, [r7, #12]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <vTaskPlaceOnEventList+0x44>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fce7 	bl	80023e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a18:	2101      	movs	r1, #1
 8003a1a:	6838      	ldr	r0, [r7, #0]
 8003a1c:	f000 fa7c 	bl	8003f18 <prvAddCurrentTaskToDelayedList>
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200006e8 	.word	0x200006e8

08003a2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	617b      	str	r3, [r7, #20]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3318      	adds	r3, #24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7fe fc9e 	bl	800239e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	68b8      	ldr	r0, [r7, #8]
 8003a72:	f000 fa51 	bl	8003f18 <prvAddCurrentTaskToDelayedList>
	}
 8003a76:	bf00      	nop
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200006e8 	.word	0x200006e8

08003a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60fb      	str	r3, [r7, #12]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fccf 	bl	8002458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <xTaskRemoveFromEventList+0xb0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11d      	bne.n	8003afe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fcc6 	bl	8002458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <xTaskRemoveFromEventList+0xb4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d903      	bls.n	8003ae0 <xTaskRemoveFromEventList+0x5c>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <xTaskRemoveFromEventList+0xb4>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <xTaskRemoveFromEventList+0xb8>)
 8003aee:	441a      	add	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fc51 	bl	800239e <vListInsertEnd>
 8003afc:	e005      	b.n	8003b0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3318      	adds	r3, #24
 8003b02:	4619      	mov	r1, r3
 8003b04:	480e      	ldr	r0, [pc, #56]	; (8003b40 <xTaskRemoveFromEventList+0xbc>)
 8003b06:	f7fe fc4a 	bl	800239e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <xTaskRemoveFromEventList+0xc0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d905      	bls.n	8003b24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <xTaskRemoveFromEventList+0xc4>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e001      	b.n	8003b28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b28:	697b      	ldr	r3, [r7, #20]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000be4 	.word	0x20000be4
 8003b38:	20000bc4 	.word	0x20000bc4
 8003b3c:	200006ec 	.word	0x200006ec
 8003b40:	20000b7c 	.word	0x20000b7c
 8003b44:	200006e8 	.word	0x200006e8
 8003b48:	20000bd0 	.word	0x20000bd0

08003b4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <vTaskInternalSetTimeOutState+0x24>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <vTaskInternalSetTimeOutState+0x28>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000bd4 	.word	0x20000bd4
 8003b74:	20000bc0 	.word	0x20000bc0

08003b78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	613b      	str	r3, [r7, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bba:	f000 fe7b 	bl	80048b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <xTaskCheckForTimeOut+0xbc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd6:	d102      	bne.n	8003bde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e023      	b.n	8003c26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <xTaskCheckForTimeOut+0xc0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d007      	beq.n	8003bfa <xTaskCheckForTimeOut+0x82>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d302      	bcc.n	8003bfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	e015      	b.n	8003c26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d20b      	bcs.n	8003c1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff9b 	bl	8003b4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e004      	b.n	8003c26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c26:	f000 fe75 	bl	8004914 <vPortExitCritical>

	return xReturn;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000bc0 	.word	0x20000bc0
 8003c38:	20000bd4 	.word	0x20000bd4

08003c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <vTaskMissedYield+0x14>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	20000bd0 	.word	0x20000bd0

08003c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c5c:	f000 f852 	bl	8003d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <prvIdleTask+0x28>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d9f9      	bls.n	8003c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <prvIdleTask+0x2c>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c78:	e7f0      	b.n	8003c5c <prvIdleTask+0x8>
 8003c7a:	bf00      	nop
 8003c7c:	200006ec 	.word	0x200006ec
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	e00c      	b.n	8003caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <prvInitialiseTaskLists+0x60>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fb50 	bl	8002344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b37      	cmp	r3, #55	; 0x37
 8003cae:	d9ef      	bls.n	8003c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <prvInitialiseTaskLists+0x64>)
 8003cb2:	f7fe fb47 	bl	8002344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cb6:	480d      	ldr	r0, [pc, #52]	; (8003cec <prvInitialiseTaskLists+0x68>)
 8003cb8:	f7fe fb44 	bl	8002344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cbc:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <prvInitialiseTaskLists+0x6c>)
 8003cbe:	f7fe fb41 	bl	8002344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cc2:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <prvInitialiseTaskLists+0x70>)
 8003cc4:	f7fe fb3e 	bl	8002344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cc8:	480b      	ldr	r0, [pc, #44]	; (8003cf8 <prvInitialiseTaskLists+0x74>)
 8003cca:	f7fe fb3b 	bl	8002344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <prvInitialiseTaskLists+0x78>)
 8003cd0:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <prvInitialiseTaskLists+0x64>)
 8003cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <prvInitialiseTaskLists+0x7c>)
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <prvInitialiseTaskLists+0x68>)
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200006ec 	.word	0x200006ec
 8003ce8:	20000b4c 	.word	0x20000b4c
 8003cec:	20000b60 	.word	0x20000b60
 8003cf0:	20000b7c 	.word	0x20000b7c
 8003cf4:	20000b90 	.word	0x20000b90
 8003cf8:	20000ba8 	.word	0x20000ba8
 8003cfc:	20000b74 	.word	0x20000b74
 8003d00:	20000b78 	.word	0x20000b78

08003d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d0a:	e019      	b.n	8003d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d0c:	f000 fdd2 	bl	80048b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <prvCheckTasksWaitingTermination+0x50>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fb9b 	bl	8002458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <prvCheckTasksWaitingTermination+0x54>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	4a0b      	ldr	r2, [pc, #44]	; (8003d58 <prvCheckTasksWaitingTermination+0x54>)
 8003d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <prvCheckTasksWaitingTermination+0x58>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <prvCheckTasksWaitingTermination+0x58>)
 8003d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d36:	f000 fded 	bl	8004914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f810 	bl	8003d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <prvCheckTasksWaitingTermination+0x58>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e1      	bne.n	8003d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000b90 	.word	0x20000b90
 8003d58:	20000bbc 	.word	0x20000bbc
 8003d5c:	20000ba4 	.word	0x20000ba4

08003d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 ff8a 	bl	8004c90 <vPortFree>
				vPortFree( pxTCB );
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 ff87 	bl	8004c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d82:	e018      	b.n	8003db6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d103      	bne.n	8003d96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 ff7e 	bl	8004c90 <vPortFree>
	}
 8003d94:	e00f      	b.n	8003db6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d00a      	beq.n	8003db6 <prvDeleteTCB+0x56>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <prvDeleteTCB+0x54>
	}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <prvResetNextTaskUnblockTime+0x38>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dd0:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <prvResetNextTaskUnblockTime+0x3c>)
 8003dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dd8:	e008      	b.n	8003dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <prvResetNextTaskUnblockTime+0x38>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <prvResetNextTaskUnblockTime+0x3c>)
 8003dea:	6013      	str	r3, [r2, #0]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000b74 	.word	0x20000b74
 8003dfc:	20000bdc 	.word	0x20000bdc

08003e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <xTaskGetSchedulerState+0x34>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	e008      	b.n	8003e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <xTaskGetSchedulerState+0x38>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	e001      	b.n	8003e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e26:	687b      	ldr	r3, [r7, #4]
	}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20000bc8 	.word	0x20000bc8
 8003e38:	20000be4 	.word	0x20000be4

08003e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d056      	beq.n	8003f00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e52:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <xTaskPriorityDisinherit+0xd0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d00a      	beq.n	8003e72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	1e5a      	subs	r2, r3, #1
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d02c      	beq.n	8003f00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d128      	bne.n	8003f00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fad0 	bl	8002458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <xTaskPriorityDisinherit+0xd4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d903      	bls.n	8003ee0 <xTaskPriorityDisinherit+0xa4>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <xTaskPriorityDisinherit+0xd4>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <xTaskPriorityDisinherit+0xd8>)
 8003eee:	441a      	add	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7fe fa51 	bl	800239e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f00:	697b      	ldr	r3, [r7, #20]
	}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200006e8 	.word	0x200006e8
 8003f10:	20000bc4 	.word	0x20000bc4
 8003f14:	200006ec 	.word	0x200006ec

08003f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe fa92 	bl	8002458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3a:	d10a      	bne.n	8003f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <prvAddCurrentTaskToDelayedList+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f4c:	f7fe fa27 	bl	800239e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f50:	e026      	b.n	8003fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d209      	bcs.n	8003f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <prvAddCurrentTaskToDelayedList+0x94>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7fe fa35 	bl	80023e6 <vListInsert>
}
 8003f7c:	e010      	b.n	8003fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <prvAddCurrentTaskToDelayedList+0x94>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f7fe fa2b 	bl	80023e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d202      	bcs.n	8003fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000bc0 	.word	0x20000bc0
 8003fac:	200006e8 	.word	0x200006e8
 8003fb0:	20000ba8 	.word	0x20000ba8
 8003fb4:	20000b78 	.word	0x20000b78
 8003fb8:	20000b74 	.word	0x20000b74
 8003fbc:	20000bdc 	.word	0x20000bdc

08003fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fca:	f000 fb07 	bl	80045dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <xTimerCreateTimerTask+0x80>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d021      	beq.n	800401a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fde:	1d3a      	adds	r2, r7, #4
 8003fe0:	f107 0108 	add.w	r1, r7, #8
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f991 	bl	8002310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	9202      	str	r2, [sp, #8]
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	460a      	mov	r2, r1
 8004000:	4910      	ldr	r1, [pc, #64]	; (8004044 <xTimerCreateTimerTask+0x84>)
 8004002:	4811      	ldr	r0, [pc, #68]	; (8004048 <xTimerCreateTimerTask+0x88>)
 8004004:	f7fe ffc4 	bl	8002f90 <xTaskCreateStatic>
 8004008:	4603      	mov	r3, r0
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <xTimerCreateTimerTask+0x8c>)
 800400c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <xTimerCreateTimerTask+0x8c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000c18 	.word	0x20000c18
 8004044:	08004f80 	.word	0x08004f80
 8004048:	08004185 	.word	0x08004185
 800404c:	20000c1c 	.word	0x20000c1c

08004050 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	623b      	str	r3, [r7, #32]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <xTimerGenericCommand+0x98>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02a      	beq.n	80040dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b05      	cmp	r3, #5
 8004096:	dc18      	bgt.n	80040ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004098:	f7ff feb2 	bl	8003e00 <xTaskGetSchedulerState>
 800409c:	4603      	mov	r3, r0
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d109      	bne.n	80040b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <xTimerGenericCommand+0x98>)
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f107 0110 	add.w	r1, r7, #16
 80040aa:	2300      	movs	r3, #0
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	f7fe fb87 	bl	80027c0 <xQueueGenericSend>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24
 80040b4:	e012      	b.n	80040dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <xTimerGenericCommand+0x98>)
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f107 0110 	add.w	r1, r7, #16
 80040be:	2300      	movs	r3, #0
 80040c0:	2200      	movs	r2, #0
 80040c2:	f7fe fb7d 	bl	80027c0 <xQueueGenericSend>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24
 80040c8:	e008      	b.n	80040dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <xTimerGenericCommand+0x98>)
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	f107 0110 	add.w	r1, r7, #16
 80040d2:	2300      	movs	r3, #0
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	f7fe fc71 	bl	80029bc <xQueueGenericSendFromISR>
 80040da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000c18 	.word	0x20000c18

080040ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <prvProcessExpiredTimer+0x94>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f9a7 	bl	8002458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d022      	beq.n	800415e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	18d1      	adds	r1, r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f000 f8d1 	bl	80042cc <prvInsertTimerInActiveList>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01f      	beq.n	8004170 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004130:	2300      	movs	r3, #0
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	2100      	movs	r1, #0
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	f7ff ff88 	bl	8004050 <xTimerGenericCommand>
 8004140:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	4798      	blx	r3
}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000c10 	.word	0x20000c10

08004184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800418c:	f107 0308 	add.w	r3, r7, #8
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f857 	bl	8004244 <prvGetNextExpireTime>
 8004196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4619      	mov	r1, r3
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f803 	bl	80041a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041a2:	f000 f8d5 	bl	8004350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041a6:	e7f1      	b.n	800418c <prvTimerTask+0x8>

080041a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041b2:	f7ff fa43 	bl	800363c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f866 	bl	800428c <prvSampleTimeNow>
 80041c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d130      	bne.n	800422a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <prvProcessTimerOrBlockTask+0x3c>
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d806      	bhi.n	80041e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041d6:	f7ff fa3f 	bl	8003658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff85 	bl	80040ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041e2:	e024      	b.n	800422e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ea:	4b13      	ldr	r3, [pc, #76]	; (8004238 <prvProcessTimerOrBlockTask+0x90>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <prvProcessTimerOrBlockTask+0x50>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <prvProcessTimerOrBlockTask+0x52>
 80041f8:	2300      	movs	r3, #0
 80041fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <prvProcessTimerOrBlockTask+0x94>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	f7fe fe8d 	bl	8002f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800420e:	f7ff fa23 	bl	8003658 <xTaskResumeAll>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvProcessTimerOrBlockTask+0x98>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
}
 8004228:	e001      	b.n	800422e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800422a:	f7ff fa15 	bl	8003658 <xTaskResumeAll>
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000c14 	.word	0x20000c14
 800423c:	20000c18 	.word	0x20000c18
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <prvGetNextExpireTime+0x44>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <prvGetNextExpireTime+0x16>
 8004256:	2201      	movs	r2, #1
 8004258:	e000      	b.n	800425c <prvGetNextExpireTime+0x18>
 800425a:	2200      	movs	r2, #0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <prvGetNextExpireTime+0x44>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e001      	b.n	8004278 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000c10 	.word	0x20000c10

0800428c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004294:	f7ff fa7e 	bl	8003794 <xTaskGetTickCount>
 8004298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <prvSampleTimeNow+0x3c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d205      	bcs.n	80042b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042a4:	f000 f936 	bl	8004514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <prvSampleTimeNow+0x3c>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000c20 	.word	0x20000c20

080042cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d812      	bhi.n	8004318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004300:	2301      	movs	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e01b      	b.n	800433e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <prvInsertTimerInActiveList+0x7c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fe f868 	bl	80023e6 <vListInsert>
 8004316:	e012      	b.n	800433e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d206      	bcs.n	800432e <prvInsertTimerInActiveList+0x62>
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e007      	b.n	800433e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <prvInsertTimerInActiveList+0x80>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe f854 	bl	80023e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800433e:	697b      	ldr	r3, [r7, #20]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000c14 	.word	0x20000c14
 800434c:	20000c10 	.word	0x20000c10

08004350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	; 0x38
 8004354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004356:	e0ca      	b.n	80044ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	da18      	bge.n	8004390 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	3304      	adds	r3, #4
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	61fb      	str	r3, [r7, #28]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004386:	6850      	ldr	r0, [r2, #4]
 8004388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	4611      	mov	r1, r2
 800438e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f2c0 80aa 	blt.w	80044ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f855 	bl	8002458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ae:	463b      	mov	r3, r7
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff6b 	bl	800428c <prvSampleTimeNow>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	f200 8097 	bhi.w	80044ee <prvProcessReceivedCommands+0x19e>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <prvProcessReceivedCommands+0x78>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f1 	.word	0x080043f1
 80043d4:	08004465 	.word	0x08004465
 80043d8:	08004479 	.word	0x08004479
 80043dc:	080044c3 	.word	0x080044c3
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043f1 	.word	0x080043f1
 80043e8:	08004465 	.word	0x08004465
 80043ec:	08004479 	.word	0x08004479
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	18d1      	adds	r1, r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004410:	f7ff ff5c 	bl	80042cc <prvInsertTimerInActiveList>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d069      	beq.n	80044ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05e      	beq.n	80044ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	441a      	add	r2, r3
 8004438:	2300      	movs	r3, #0
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2300      	movs	r3, #0
 800443e:	2100      	movs	r1, #0
 8004440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004442:	f7ff fe05 	bl	8004050 <xTimerGenericCommand>
 8004446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14f      	bne.n	80044ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61bb      	str	r3, [r7, #24]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004476:	e03a      	b.n	80044ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	617b      	str	r3, [r7, #20]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	18d1      	adds	r1, r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044bc:	f7ff ff06 	bl	80042cc <prvInsertTimerInActiveList>
					break;
 80044c0:	e015      	b.n	80044ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f000 fbdd 	bl	8004c90 <vPortFree>
 80044d6:	e00a      	b.n	80044ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044ea:	e000      	b.n	80044ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <prvProcessReceivedCommands+0x1c0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1d39      	adds	r1, r7, #4
 80044f4:	2200      	movs	r2, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fafc 	bl	8002af4 <xQueueReceive>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f47f af2a 	bne.w	8004358 <prvProcessReceivedCommands+0x8>
	}
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3730      	adds	r7, #48	; 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000c18 	.word	0x20000c18

08004514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800451a:	e048      	b.n	80045ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd ff8f 	bl	8002458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02e      	beq.n	80045ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	429a      	cmp	r2, r3
 8004560:	d90e      	bls.n	8004580 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800456e:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f7fd ff34 	bl	80023e6 <vListInsert>
 800457e:	e016      	b.n	80045ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004580:	2300      	movs	r3, #0
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	2100      	movs	r1, #0
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fd60 	bl	8004050 <xTimerGenericCommand>
 8004590:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	603b      	str	r3, [r7, #0]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1b1      	bne.n	800451c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <prvSwitchTimerLists+0xc4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <prvSwitchTimerLists+0xc0>)
 80045c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <prvSwitchTimerLists+0xc4>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000c10 	.word	0x20000c10
 80045d8:	20000c14 	.word	0x20000c14

080045dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045e2:	f000 f967 	bl	80048b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <prvCheckForValidListAndQueue+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d120      	bne.n	8004630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045ee:	4814      	ldr	r0, [pc, #80]	; (8004640 <prvCheckForValidListAndQueue+0x64>)
 80045f0:	f7fd fea8 	bl	8002344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045f4:	4813      	ldr	r0, [pc, #76]	; (8004644 <prvCheckForValidListAndQueue+0x68>)
 80045f6:	f7fd fea5 	bl	8002344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <prvCheckForValidListAndQueue+0x6c>)
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <prvCheckForValidListAndQueue+0x64>)
 80045fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <prvCheckForValidListAndQueue+0x70>)
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <prvCheckForValidListAndQueue+0x68>)
 8004604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <prvCheckForValidListAndQueue+0x74>)
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <prvCheckForValidListAndQueue+0x78>)
 800460e:	2110      	movs	r1, #16
 8004610:	200a      	movs	r0, #10
 8004612:	f7fd ffb3 	bl	800257c <xQueueGenericCreateStatic>
 8004616:	4603      	mov	r3, r0
 8004618:	4a08      	ldr	r2, [pc, #32]	; (800463c <prvCheckForValidListAndQueue+0x60>)
 800461a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvCheckForValidListAndQueue+0x60>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <prvCheckForValidListAndQueue+0x60>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	490b      	ldr	r1, [pc, #44]	; (8004658 <prvCheckForValidListAndQueue+0x7c>)
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fc52 	bl	8002ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004630:	f000 f970 	bl	8004914 <vPortExitCritical>
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000c18 	.word	0x20000c18
 8004640:	20000be8 	.word	0x20000be8
 8004644:	20000bfc 	.word	0x20000bfc
 8004648:	20000c10 	.word	0x20000c10
 800464c:	20000c14 	.word	0x20000c14
 8004650:	20000cc4 	.word	0x20000cc4
 8004654:	20000c24 	.word	0x20000c24
 8004658:	08004f88 	.word	0x08004f88

0800465c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b04      	subs	r3, #4
 800466c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b04      	subs	r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800468c:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <pxPortInitialiseStack+0x64>)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b14      	subs	r3, #20
 8004696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b04      	subs	r3, #4
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f06f 0202 	mvn.w	r2, #2
 80046aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3b20      	subs	r3, #32
 80046b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	080046c5 	.word	0x080046c5

080046c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <prvTaskExitError+0x54>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d6:	d00a      	beq.n	80046ee <prvTaskExitError+0x2a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <prvTaskExitError+0x28>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60bb      	str	r3, [r7, #8]
}
 8004700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004702:	bf00      	nop
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0fc      	beq.n	8004704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	2000000c 	.word	0x2000000c
 800471c:	00000000 	.word	0x00000000

08004720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <pxCurrentTCBConst2>)
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6808      	ldr	r0, [r1, #0]
 8004726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	f380 8809 	msr	PSP, r0
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8811 	msr	BASEPRI, r0
 800473a:	4770      	bx	lr
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst2>:
 8004740:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004748:	4808      	ldr	r0, [pc, #32]	; (800476c <prvPortStartFirstTask+0x24>)
 800474a:	6800      	ldr	r0, [r0, #0]
 800474c:	6800      	ldr	r0, [r0, #0]
 800474e:	f380 8808 	msr	MSP, r0
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8814 	msr	CONTROL, r0
 800475a:	b662      	cpsie	i
 800475c:	b661      	cpsie	f
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	df00      	svc	0
 8004768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800476a:	bf00      	nop
 800476c:	e000ed08 	.word	0xe000ed08

08004770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004776:	4b46      	ldr	r3, [pc, #280]	; (8004890 <xPortStartScheduler+0x120>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a46      	ldr	r2, [pc, #280]	; (8004894 <xPortStartScheduler+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10a      	bne.n	8004796 <xPortStartScheduler+0x26>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004796:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <xPortStartScheduler+0x120>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3f      	ldr	r2, [pc, #252]	; (8004898 <xPortStartScheduler+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d10a      	bne.n	80047b6 <xPortStartScheduler+0x46>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047b6:	4b39      	ldr	r3, [pc, #228]	; (800489c <xPortStartScheduler+0x12c>)
 80047b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	22ff      	movs	r2, #255	; 0xff
 80047c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <xPortStartScheduler+0x130>)
 80047dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xPortStartScheduler+0x134>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e4:	e009      	b.n	80047fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <xPortStartScheduler+0x134>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <xPortStartScheduler+0x134>)
 80047ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d0ef      	beq.n	80047e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004806:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <xPortStartScheduler+0x134>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	d00a      	beq.n	8004828 <xPortStartScheduler+0xb8>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	60bb      	str	r3, [r7, #8]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004828:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <xPortStartScheduler+0x134>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <xPortStartScheduler+0x134>)
 8004830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <xPortStartScheduler+0x134>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800483a:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <xPortStartScheduler+0x134>)
 800483c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004846:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <xPortStartScheduler+0x138>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a17      	ldr	r2, [pc, #92]	; (80048a8 <xPortStartScheduler+0x138>)
 800484c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <xPortStartScheduler+0x138>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <xPortStartScheduler+0x138>)
 8004858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800485c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800485e:	f000 f8dd 	bl	8004a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <xPortStartScheduler+0x13c>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004868:	f000 f8fc 	bl	8004a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xPortStartScheduler+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <xPortStartScheduler+0x140>)
 8004872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004878:	f7ff ff66 	bl	8004748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800487c:	f7ff f854 	bl	8003928 <vTaskSwitchContext>
	prvTaskExitError();
 8004880:	f7ff ff20 	bl	80046c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	e000ed00 	.word	0xe000ed00
 8004894:	410fc271 	.word	0x410fc271
 8004898:	410fc270 	.word	0x410fc270
 800489c:	e000e400 	.word	0xe000e400
 80048a0:	20000d14 	.word	0x20000d14
 80048a4:	20000d18 	.word	0x20000d18
 80048a8:	e000ed20 	.word	0xe000ed20
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	e000ef34 	.word	0xe000ef34

080048b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	607b      	str	r3, [r7, #4]
}
 80048cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <vPortEnterCritical+0x58>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a0d      	ldr	r2, [pc, #52]	; (800490c <vPortEnterCritical+0x58>)
 80048d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <vPortEnterCritical+0x58>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10f      	bne.n	8004900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortEnterCritical+0x5c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <vPortEnterCritical+0x4c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <vPortEnterCritical+0x4a>
	}
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	2000000c 	.word	0x2000000c
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <vPortExitCritical+0x50>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <vPortExitCritical+0x24>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <vPortExitCritical+0x50>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <vPortExitCritical+0x50>)
 8004940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <vPortExitCritical+0x50>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <vPortExitCritical+0x42>
 800494a:	2300      	movs	r3, #0
 800494c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f383 8811 	msr	BASEPRI, r3
}
 8004954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000000c 	.word	0x2000000c
	...

08004970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004970:	f3ef 8009 	mrs	r0, PSP
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pxCurrentTCBConst>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f01e 0f10 	tst.w	lr, #16
 8004980:	bf08      	it	eq
 8004982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	6010      	str	r0, [r2, #0]
 800498c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004994:	f380 8811 	msr	BASEPRI, r0
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f7fe ffc2 	bl	8003928 <vTaskSwitchContext>
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f380 8811 	msr	BASEPRI, r0
 80049ac:	bc09      	pop	{r0, r3}
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	6808      	ldr	r0, [r1, #0]
 80049b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b6:	f01e 0f10 	tst.w	lr, #16
 80049ba:	bf08      	it	eq
 80049bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049c0:	f380 8809 	msr	PSP, r0
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst>:
 80049d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049f2:	f7fe fedf 	bl	80037b4 <xTaskIncrementTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <xPortSysTickHandler+0x40>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
}
 8004a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <vPortSetupTimerInterrupt+0x38>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <vPortSetupTimerInterrupt+0x3c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <vPortSetupTimerInterrupt+0x40>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <vPortSetupTimerInterrupt+0x44>)
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <vPortSetupTimerInterrupt+0x34>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010
 8004a54:	e000e018 	.word	0xe000e018
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	10624dd3 	.word	0x10624dd3
 8004a60:	e000e014 	.word	0xe000e014

08004a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a74 <vPortEnableVFP+0x10>
 8004a68:	6801      	ldr	r1, [r0, #0]
 8004a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a6e:	6001      	str	r1, [r0, #0]
 8004a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a72:	bf00      	nop
 8004a74:	e000ed88 	.word	0xe000ed88

08004a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a7e:	f3ef 8305 	mrs	r3, IPSR
 8004a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d914      	bls.n	8004ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <vPortValidateInterruptPriority+0x70>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a94:	4b15      	ldr	r3, [pc, #84]	; (8004aec <vPortValidateInterruptPriority+0x74>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	7afa      	ldrb	r2, [r7, #11]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d20a      	bcs.n	8004ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <vPortValidateInterruptPriority+0x78>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <vPortValidateInterruptPriority+0x7c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d90a      	bls.n	8004ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	603b      	str	r3, [r7, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <vPortValidateInterruptPriority+0x60>
	}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000e3f0 	.word	0xe000e3f0
 8004aec:	20000d14 	.word	0x20000d14
 8004af0:	e000ed0c 	.word	0xe000ed0c
 8004af4:	20000d18 	.word	0x20000d18

08004af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b04:	f7fe fd9a 	bl	800363c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <pvPortMalloc+0x180>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b10:	f000 f920 	bl	8004d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <pvPortMalloc+0x184>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8093 	bne.w	8004c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b28:	2208      	movs	r2, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	3308      	adds	r3, #8
 8004b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <pvPortMalloc+0x6c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	617b      	str	r3, [r7, #20]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d06e      	beq.n	8004c48 <pvPortMalloc+0x150>
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <pvPortMalloc+0x188>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d869      	bhi.n	8004c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	e004      	b.n	8004b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <pvPortMalloc+0xa4>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f1      	bne.n	8004b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d050      	beq.n	8004c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2208      	movs	r2, #8
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d91f      	bls.n	8004c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	613b      	str	r3, [r7, #16]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f000 f908 	bl	8004e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <pvPortMalloc+0x188>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <pvPortMalloc+0x188>)
 8004c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <pvPortMalloc+0x188>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <pvPortMalloc+0x190>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d203      	bcs.n	8004c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <pvPortMalloc+0x188>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x190>)
 8004c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <pvPortMalloc+0x184>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0x194>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <pvPortMalloc+0x194>)
 8004c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c48:	f7fe fd06 	bl	8003658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <pvPortMalloc+0x174>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0x172>
	return pvReturn;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200018dc 	.word	0x200018dc
 8004c7c:	200018f0 	.word	0x200018f0
 8004c80:	200018e0 	.word	0x200018e0
 8004c84:	200018d4 	.word	0x200018d4
 8004c88:	200018e4 	.word	0x200018e4
 8004c8c:	200018e8 	.word	0x200018e8

08004c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04d      	beq.n	8004d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <vPortFree+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vPortFree+0x44>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <vPortFree+0x62>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60bb      	str	r3, [r7, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <vPortFree+0xb8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11a      	bne.n	8004d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <vPortFree+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7fe fc90 	bl	800363c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortFree+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <vPortFree+0xbc>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f874 	bl	8004e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <vPortFree+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <vPortFree+0xc0>)
 8004d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d3a:	f7fe fc8d 	bl	8003658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200018f0 	.word	0x200018f0
 8004d4c:	200018e0 	.word	0x200018e0
 8004d50:	200018ec 	.word	0x200018ec

08004d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvHeapInit+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3307      	adds	r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <prvHeapInit+0xac>)
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <prvHeapInit+0xb0>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <prvHeapInit+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <prvHeapInit+0xb4>)
 8004db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <prvHeapInit+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvHeapInit+0xb4>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <prvHeapInit+0xb8>)
 8004de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <prvHeapInit+0xbc>)
 8004dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvHeapInit+0xc0>)
 8004dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000d1c 	.word	0x20000d1c
 8004e04:	200018d4 	.word	0x200018d4
 8004e08:	200018dc 	.word	0x200018dc
 8004e0c:	200018e4 	.word	0x200018e4
 8004e10:	200018e0 	.word	0x200018e0
 8004e14:	200018f0 	.word	0x200018f0

08004e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <prvInsertBlockIntoFreeList+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x14>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d8f7      	bhi.n	8004e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d108      	bne.n	8004e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d118      	bne.n	8004ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d00d      	beq.n	8004e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e003      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d002      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	200018d4 	.word	0x200018d4
 8004ec8:	200018dc 	.word	0x200018dc

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 f82e 	bl	8004f40 <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08005054 	.word	0x08005054
 8004f08:	08005054 	.word	0x08005054
 8004f0c:	08005054 	.word	0x08005054
 8004f10:	08005058 	.word	0x08005058

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
