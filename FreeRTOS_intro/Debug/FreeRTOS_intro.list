
FreeRTOS_intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000722c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007654  08007654  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800765c  0800765c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a08  200001e0  08007844  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001be8  08007844  00021be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbb7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034c9  00000000  00000000  0003cdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  00040290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d8  00000000  00000000  000418f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000049e3  00000000  00000000  00042dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125b1  00000000  00000000  000477ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fecf5  00000000  00000000  00059d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000660c  00000000  00000000  00158acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073a4 	.word	0x080073a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080073a4 	.word	0x080073a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb67 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f834 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8da 	bl	8000734 <MX_GPIO_Init>
  MX_UART4_Init();
 8000580:	f000 f8a8 	bl	80006d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f003 f9f8 	bl	8003978 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <main+0x50>)
 800058a:	2100      	movs	r1, #0
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <main+0x54>)
 800058e:	f003 fa5d 	bl	8003a4c <osThreadNew>
 8000592:	4602      	mov	r2, r0
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <main+0x58>)
 8000596:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <main+0x5c>)
 800059a:	2100      	movs	r1, #0
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <main+0x60>)
 800059e:	f003 fa55 	bl	8003a4c <osThreadNew>
 80005a2:	4602      	mov	r2, r0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <main+0x64>)
 80005a6:	601a      	str	r2, [r3, #0]

  /* creation of distance */
  distanceHandle = osThreadNew(checkDist, NULL, &distance_attributes);
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <main+0x68>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0x6c>)
 80005ae:	f003 fa4d 	bl	8003a4c <osThreadNew>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <main+0x70>)
 80005b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f003 fa12 	bl	80039e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x4c>
 80005be:	bf00      	nop
 80005c0:	080073fc 	.word	0x080073fc
 80005c4:	08000795 	.word	0x08000795
 80005c8:	20001b4c 	.word	0x20001b4c
 80005cc:	08007420 	.word	0x08007420
 80005d0:	080007b1 	.word	0x080007b1
 80005d4:	20001b50 	.word	0x20001b50
 80005d8:	08007444 	.word	0x08007444
 80005dc:	080007cd 	.word	0x080007cd
 80005e0:	20001ac8 	.word	0x20001ac8

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b8      	sub	sp, #224	; 0xe0
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 ff33 	bl	800645e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2288      	movs	r2, #136	; 0x88
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 ff25 	bl	800645e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000614:	2310      	movs	r3, #16
 8000616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000632:	2301      	movs	r3, #1
 8000634:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800063e:	2328      	movs	r3, #40	; 0x28
 8000640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fe4c 	bl	80012f8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000666:	f000 f8e3 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000688:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa18 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800069a:	f000 f8c9 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800069e:	2308      	movs	r3, #8
 80006a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fc41 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b4:	f000 f8bc 	bl	8000830 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006bc:	f000 fdc6 	bl	800124c <HAL_PWREx_ControlVoltageScaling>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006c6:	f000 f8b3 	bl	8000830 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	37e0      	adds	r7, #224	; 0xe0
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_UART4_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <MX_UART4_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_UART4_Init+0x58>)
 80006e0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80006e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_UART4_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_UART4_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_UART4_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_UART4_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_UART4_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_UART4_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_UART4_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_UART4_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_UART4_Init+0x58>)
 8000718:	f002 fb8c 	bl	8002e34 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f885 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20001acc 	.word	0x20001acc
 8000730:	40004c00 	.word	0x40004c00

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_GPIO_Init+0x5c>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <MX_GPIO_Init+0x5c>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_GPIO_Init+0x5c>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2120      	movs	r1, #32
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fd30 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f000 fb7a 	bl	8000e7c <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800079c:	2120      	movs	r1, #32
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f000 fd2b 	bl	80011fc <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f003 f9f5 	bl	8003b98 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007ae:	e7f5      	b.n	800079c <StartBlink01+0x8>

080007b0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f000 fd1d 	bl	80011fc <HAL_GPIO_TogglePin>
	  osDelay(200);
 80007c2:	20c8      	movs	r0, #200	; 0xc8
 80007c4:	f003 f9e8 	bl	8003b98 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c8:	e7f6      	b.n	80007b8 <StartBlink02+0x8>
	...

080007cc <checkDist>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkDist */
void checkDist(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN checkDist */
	/* Infinite loop */
	char retval = '0';
 80007d4:	2330      	movs	r3, #48	; 0x30
 80007d6:	73fb      	strb	r3, [r7, #15]
	uint8_t dec = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73bb      	strb	r3, [r7, #14]

	for(;;)
	{
		retval = measure_distance(&huart4);
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <checkDist+0x38>)
 80007de:	f000 f9e5 	bl	8000bac <measure_distance>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
		dec = atoi(retval);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fdff 	bl	80063ec <atoi>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73bb      	strb	r3, [r7, #14]
		printf("%d", dec);
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <checkDist+0x3c>)
 80007f8:	f005 fe3a 	bl	8006470 <iprintf>
		osDelay(100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f003 f9cb 	bl	8003b98 <osDelay>
	{
 8000802:	e7eb      	b.n	80007dc <checkDist+0x10>
 8000804:	20001acc 	.word	0x20001acc
 8000808:	080073d8 	.word	0x080073d8

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fa2b 	bl	8000c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40001000 	.word	0x40001000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000836:	e7fe      	b.n	8000836 <Error_Handler+0x6>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_MspInit+0x4c>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x4c>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x4c>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f000 fad7 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x7c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d128      	bne.n	80008fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008b4:	6593      	str	r3, [r2, #88]	; 0x58
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_UART_MspInit+0x80>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008da:	2303      	movs	r3, #3
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008ea:	2308      	movs	r3, #8
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 fac0 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40004c00 	.word	0x40004c00
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2036      	movs	r0, #54	; 0x36
 8000922:	f000 fa81 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000926:	2036      	movs	r0, #54	; 0x36
 8000928:	f000 fa9a 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_InitTick+0x9c>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_InitTick+0x9c>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6593      	str	r3, [r2, #88]	; 0x58
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_InitTick+0x9c>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000944:	f107 0210 	add.w	r2, r7, #16
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fa5c 	bl	8001e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000954:	f001 fa2e 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8000958:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <HAL_InitTick+0xa0>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0c9b      	lsrs	r3, r3, #18
 8000964:	3b01      	subs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_InitTick+0xa4>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <HAL_InitTick+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_InitTick+0xa4>)
 8000970:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000974:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_InitTick+0xa4>)
 8000978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_InitTick+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_InitTick+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_InitTick+0xa4>)
 800098a:	f001 ff81 	bl	8002890 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d104      	bne.n	800099e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_InitTick+0xa4>)
 8000996:	f001 ffdd 	bl	8002954 <HAL_TIM_Base_Start_IT>
 800099a:	4603      	mov	r3, r0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	20001b54 	.word	0x20001b54
 80009b4:	40001000 	.word	0x40001000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM6_DAC_IRQHandler+0x10>)
 80009ea:	f002 f823 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001b54 	.word	0x20001b54

080009f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e00a      	b.n	8000a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a0a:	f3af 8000 	nop.w
 8000a0e:	4601      	mov	r1, r0
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	60ba      	str	r2, [r7, #8]
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf0      	blt.n	8000a0a <_read+0x12>
	}

return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	e009      	b.n	8000a58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf1      	blt.n	8000a44 <_write+0x12>
	}
	return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a92:	605a      	str	r2, [r3, #4]
	return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f005 fc76 	bl	80063f4 <__errno>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20018000 	.word	0x20018000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	200001fc 	.word	0x200001fc
 8000b3c:	20001be8 	.word	0x20001be8

08000b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <SystemInit+0x64>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <SystemInit+0x64>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <SystemInit+0x68>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <SystemInit+0x68>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SystemInit+0x68>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <SystemInit+0x68>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <SystemInit+0x68>)
 8000b6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <SystemInit+0x68>)
 8000b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SystemInit+0x68>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <SystemInit+0x68>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <SystemInit+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SystemInit+0x64>)
 8000b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b96:	609a      	str	r2, [r3, #8]
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00
 8000ba8:	40021000 	.word	0x40021000

08000bac <measure_distance>:
 *      Author: andrew
 */

#include "ultrasonic.h"

char measure_distance(UART_HandleTypeDef *huart4) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	//query sensor
	char send_buffer[] = {header1, header2, ultra_address,
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <measure_distance+0x44>)
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	8019      	strh	r1, [r3, #0]
					data_length_read, read_distance, checksum};

	char recv_buffer[8];

	HAL_UART_Transmit(huart4, (uint8_t*)send_buffer, sizeof(send_buffer), HAL_MAX_DELAY);
 8000bc4:	f107 0110 	add.w	r1, r7, #16
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bcc:	2206      	movs	r2, #6
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 f97e 	bl	8002ed0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart4, (uint8_t*)recv_buffer, sizeof(recv_buffer), HAL_MAX_DELAY);
 8000bd4:	f107 0108 	add.w	r1, r7, #8
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bdc:	2208      	movs	r2, #8
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f002 fa09 	bl	8002ff6 <HAL_UART_Receive>

	//returns the acquired value
	return recv_buffer[6];
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	080073dc 	.word	0x080073dc

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffa2 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
	ldr	r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c18:	f842 3b04 	str.w	r3, [r2], #4

08000c1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LoopForever+0x16>)
	cmp	r2, r3
 8000c1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f005 fbed 	bl	8006400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fca3 	bl	8000570 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c30:	08007664 	.word	0x08007664
	ldr	r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c38:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8000c3c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8000c40:	20001be8 	.word	0x20001be8

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8de 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fe58 	bl	800090c <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fde6 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20001ba0 	.word	0x20001ba0

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20001ba0 	.word	0x20001ba0

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e17f      	b.n	800118c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8171 	beq.w	8001186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_GPIO_Init+0x48>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb8:	2b11      	cmp	r3, #17
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b12      	cmp	r3, #18
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 0201 	and.w	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d118      	bne.n	8000f64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x128>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b12      	cmp	r3, #18
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	6939      	ldr	r1, [r7, #16]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ac 	beq.w	8001186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <HAL_GPIO_Init+0x32c>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a5d      	ldr	r2, [pc, #372]	; (80011a8 <HAL_GPIO_Init+0x32c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x32c>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001046:	4a59      	ldr	r2, [pc, #356]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x242>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_GPIO_Init+0x334>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x23e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_GPIO_Init+0x338>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x23a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x33c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x236>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x340>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x232>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x344>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x22e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x348>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x22a>
 80010a2:	2306      	movs	r3, #6
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x244>
 80010be:	2300      	movs	r3, #0
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d0:	4936      	ldr	r1, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x330>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112c:	4a26      	ldr	r2, [pc, #152]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <HAL_GPIO_Init+0x34c>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae78 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48001400 	.word	0x48001400
 80011c4:	48001800 	.word	0x48001800
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43d9      	mvns	r1, r3
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	400b      	ands	r3, r1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_PWREx_GetVoltageRange+0x18>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40007000 	.word	0x40007000

0800124c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125a:	d130      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001268:	d038      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2232      	movs	r2, #50	; 0x32
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001290:	e002      	b.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3b01      	subs	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a4:	d102      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f2      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b8:	d110      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e00f      	b.n	80012de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ca:	d007      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000
 80012f0:	20000000 	.word	0x20000000
 80012f4:	431bde83 	.word	0x431bde83

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e3d4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130a:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001314:	4b9e      	ldr	r3, [pc, #632]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80e4 	beq.w	80014f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_RCC_OscConfig+0x4a>
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	f040 808b 	bne.w	8001450 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 8087 	bne.w	8001450 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001342:	4b93      	ldr	r3, [pc, #588]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x62>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3ac      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_RCC_OscConfig+0x7c>
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001372:	e005      	b.n	8001380 <HAL_RCC_OscConfig+0x88>
 8001374:	4b86      	ldr	r3, [pc, #536]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001380:	4293      	cmp	r3, r2
 8001382:	d223      	bcs.n	80013cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fd71 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e38d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a7c      	ldr	r2, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4977      	ldr	r1, [pc, #476]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4972      	ldr	r1, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
 80013ca:	e025      	b.n	8001418 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013cc:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	496a      	ldr	r1, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4965      	ldr	r1, [pc, #404]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fd31 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e34d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001418:	f000 fc36 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800141c:	4601      	mov	r1, r0
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4a5a      	ldr	r2, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x29c>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa21 f303 	lsr.w	r3, r1, r3
 8001434:	4a58      	ldr	r2, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x2a0>)
 8001436:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x2a4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fa65 	bl	800090c <HAL_InitTick>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d052      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	e331      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d032      	beq.n	80014be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc1c 	bl	8000ca0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146c:	f7ff fc18 	bl	8000ca0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e31a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	493b      	ldr	r1, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
 80014bc:	e01a      	b.n	80014f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fbe9 	bl	8000ca0 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbe5 	bl	8000ca0 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e2e7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x1da>
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d074      	beq.n	80015ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b08      	cmp	r3, #8
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x21a>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d10e      	bne.n	800152a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d10b      	bne.n	800152a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d064      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d160      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e2c4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x24a>
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800153a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	e01d      	b.n	800157e <HAL_RCC_OscConfig+0x286>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x26e>
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x286>
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fb8b 	bl	8000ca0 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158c:	e011      	b.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	08007468 	.word	0x08007468
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fb7e 	bl	8000ca0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e280      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b2:	4baf      	ldr	r3, [pc, #700]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2a8>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb6e 	bl	8000ca0 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb6a 	bl	8000ca0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e26c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015da:	4ba5      	ldr	r3, [pc, #660]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d0>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d060      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x310>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d119      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d116      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x328>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e249      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	4990      	ldr	r1, [pc, #576]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	e040      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d023      	beq.n	8001686 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163e:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a8b      	ldr	r2, [pc, #556]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fb29 	bl	8000ca0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fb25 	bl	8000ca0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e227      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001664:	4b82      	ldr	r3, [pc, #520]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	497c      	ldr	r1, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b7a      	ldr	r3, [pc, #488]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800168c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb05 	bl	8000ca0 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fb01 	bl	8000ca0 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e203      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	4a67      	ldr	r2, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fae0 	bl	8000ca0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fadc 	bl	8000ca0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1de      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f6:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3ec>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fac3 	bl	8000ca0 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fabf 	bl	8000ca0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1c1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a6 	beq.w	8001898 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001774:	2301      	movs	r3, #1
 8001776:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d118      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001790:	f7ff fa86 	bl	8000ca0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001798:	f7ff fa82 	bl	8000ca0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e184      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4d8>
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ce:	e024      	b.n	800181a <HAL_RCC_OscConfig+0x522>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d110      	bne.n	80017fa <HAL_RCC_OscConfig+0x502>
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f8:	e00f      	b.n	800181a <HAL_RCC_OscConfig+0x522>
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d016      	beq.n	8001850 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa3d 	bl	8000ca0 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fa39 	bl	8000ca0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e139      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ed      	beq.n	800182a <HAL_RCC_OscConfig+0x532>
 800184e:	e01a      	b.n	8001886 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa26 	bl	8000ca0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001856:	e00f      	b.n	8001878 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fa22 	bl	8000ca0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d906      	bls.n	8001878 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e122      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	4b90      	ldr	r3, [pc, #576]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e8      	bne.n	8001858 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a8a      	ldr	r2, [pc, #552]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 8108 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	f040 80d0 	bne.w	8001a4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ac:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	429a      	cmp	r2, r3
 80018be:	d130      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	3b01      	subs	r3, #1
 80018cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d127      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11f      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ec:	2a07      	cmp	r2, #7
 80018ee:	bf14      	ite	ne
 80018f0:	2201      	movne	r2, #1
 80018f2:	2200      	moveq	r2, #0
 80018f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d113      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d06e      	beq.n	8001a00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d069      	beq.n	80019fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800194a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001950:	f7ff f9a6 	bl	8000ca0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f9a2 	bl	8000ca0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0a4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_RCC_OscConfig+0x7c8>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001986:	3a01      	subs	r2, #1
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001990:	0212      	lsls	r2, r2, #8
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0552      	lsls	r2, r2, #21
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a4:	0852      	lsrs	r2, r2, #1
 80019a6:	3a01      	subs	r2, #1
 80019a8:	0652      	lsls	r2, r2, #25
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b0:	0912      	lsrs	r2, r2, #4
 80019b2:	0452      	lsls	r2, r2, #17
 80019b4:	430a      	orrs	r2, r1
 80019b6:	4941      	ldr	r1, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c8:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d4:	f7ff f964 	bl	8000ca0 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f960 	bl	8000ca0 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e062      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fa:	e05a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e059      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d152      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2a      	ldr	r2, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a24:	f7ff f93c 	bl	8000ca0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f938 	bl	8000ca0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e03a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x734>
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d02d      	beq.n	8001aae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f90b 	bl	8000ca0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f907 	bl	8000ca0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x796>
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	f99d808c 	.word	0xf99d808c

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0c8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4961      	ldr	r1, [pc, #388]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d04c      	beq.n	8001bae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d121      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e09e      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e092      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e086      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e07e      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0203 	bic.w	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	493f      	ldr	r1, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7e:	f7ff f88f 	bl	8000ca0 <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f88b 	bl	8000ca0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e066      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 020c 	and.w	r2, r3, #12
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d1eb      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d210      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4924      	ldr	r1, [pc, #144]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e036      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4910      	ldr	r1, [pc, #64]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c3a:	f000 f825 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4601      	mov	r1, r0
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	fa21 f303 	lsr.w	r3, r1, r3
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fe54 	bl	800090c <HAL_InitTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c68:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08007468 	.word	0x08007468
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d121      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11e      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cbc:	4b33      	ldr	r3, [pc, #204]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e004      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d133      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0xa4>
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2e:	617b      	str	r3, [r7, #20]
      break;
 8001d30:	e005      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	617b      	str	r3, [r7, #20]
      break;
 8001d3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	3301      	adds	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	fb02 f203 	mul.w	r2, r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0e5b      	lsrs	r3, r3, #25
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3724      	adds	r7, #36	; 0x24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08007480 	.word	0x08007480
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08007478 	.word	0x08007478

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de4:	f7ff ffda 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de8:	4601      	mov	r1, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08007478 	.word	0x08007478

08001e0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	220f      	movs	r2, #15
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_RCC_GetClockConfig+0x60>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0207 	and.w	r2, r3, #7
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	601a      	str	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40022000 	.word	0x40022000

08001e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9d2 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
 8001e8e:	e014      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff f9c2 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d10b      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d919      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2ba0      	cmp	r3, #160	; 0xa0
 8001ecc:	d902      	bls.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e013      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e010      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d902      	bls.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e00a      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d102      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e004      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b70      	cmp	r3, #112	; 0x70
 8001ef6:	d101      	bne.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 0207 	bic.w	r2, r3, #7
 8001f04:	4909      	ldr	r1, [pc, #36]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d03f      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f54:	d01c      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5a:	d802      	bhi.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001f60:	e01f      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f66:	d003      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001f68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f6c:	d01c      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001f6e:	e018      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f70:	4b85      	ldr	r3, [pc, #532]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a84      	ldr	r2, [pc, #528]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7c:	e015      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fab9 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8e:	e00c      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3320      	adds	r3, #32
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fba0 	bl	80026dc <RCCEx_PLLSAI2_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa0:	e003      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001faa:	7cfb      	ldrb	r3, [r7, #19]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb0:	4b75      	ldr	r3, [pc, #468]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	4972      	ldr	r1, [pc, #456]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fc6:	e001      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d03f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d01c      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe6:	d802      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001fec:	e01f      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff8:	d01c      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001ffa:	e018      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ffc:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a61      	ldr	r2, [pc, #388]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002008:	e015      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fa73 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201a:	e00c      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3320      	adds	r3, #32
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fb5a 	bl	80026dc <RCCEx_PLLSAI2_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202c:	e003      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	74fb      	strb	r3, [r7, #19]
      break;
 8002032:	e000      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10b      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800203c:	4b52      	ldr	r3, [pc, #328]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800204a:	494f      	ldr	r1, [pc, #316]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002052:	e001      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a0 	beq.w	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800207a:	2300      	movs	r3, #0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00d      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002098:	2301      	movs	r3, #1
 800209a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fdfa 	bl	8000ca0 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ae:	e009      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7fe fdf6 	bl	8000ca0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d902      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	74fb      	strb	r3, [r7, #19]
        break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ef      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d15c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01f      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d019      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fdb5 	bl	8000ca0 <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002138:	e00b      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fdb1 	bl	8000ca0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d902      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	74fb      	strb	r3, [r7, #19]
            break;
 8002150:	e006      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ec      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002176:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800217e:	e009      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
 8002184:	e006      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002194:	7c7b      	ldrb	r3, [r7, #17]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b9e      	ldr	r3, [pc, #632]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	4a9d      	ldr	r2, [pc, #628]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b2:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f023 0203 	bic.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	4994      	ldr	r1, [pc, #592]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d4:	4b8f      	ldr	r3, [pc, #572]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f023 020c 	bic.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	498c      	ldr	r1, [pc, #560]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f6:	4b87      	ldr	r3, [pc, #540]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4983      	ldr	r1, [pc, #524]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002218:	4b7e      	ldr	r3, [pc, #504]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	497b      	ldr	r1, [pc, #492]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	4972      	ldr	r1, [pc, #456]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	496a      	ldr	r1, [pc, #424]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	4961      	ldr	r1, [pc, #388]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	4959      	ldr	r1, [pc, #356]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d0:	4950      	ldr	r1, [pc, #320]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	4948      	ldr	r1, [pc, #288]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	493f      	ldr	r1, [pc, #252]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d028      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002328:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002336:	4937      	ldr	r1, [pc, #220]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d106      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	e011      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800235e:	d10c      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f8c8 	bl	80024fc <RCCEx_PLLSAI1_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d028      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	491f      	ldr	r1, [pc, #124]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	e011      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f899 	bl	80024fc <RCCEx_PLLSAI1_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02b      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002402:	d109      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a02      	ldr	r2, [pc, #8]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240e:	60d3      	str	r3, [r2, #12]
 8002410:	e014      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002420:	d10c      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f867 	bl	80024fc <RCCEx_PLLSAI1_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002456:	4928      	ldr	r1, [pc, #160]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002466:	d10d      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	2102      	movs	r1, #2
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f844 	bl	80024fc <RCCEx_PLLSAI1_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d014      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	74bb      	strb	r3, [r7, #18]
 8002482:	e011      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3320      	adds	r3, #32
 8002492:	2102      	movs	r1, #2
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f921 	bl	80026dc <RCCEx_PLLSAI2_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e6:	4904      	ldr	r1, [pc, #16]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000

080024fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800250a:	4b73      	ldr	r3, [pc, #460]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002516:	4b70      	ldr	r3, [pc, #448]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d10d      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
       ||
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
       ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d044      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e041      	b.n	80025cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d00c      	beq.n	800256a <RCCEx_PLLSAI1_Config+0x6e>
 8002550:	2b03      	cmp	r3, #3
 8002552:	d013      	beq.n	800257c <RCCEx_PLLSAI1_Config+0x80>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d120      	bne.n	800259a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002558:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11d      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e01a      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257a:	e013      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257c:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10f      	bne.n	80025a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002598:	e006      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      break;
 800259e:	e004      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025a0:	bf00      	nop
 80025a2:	e002      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10d      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	430b      	orrs	r3, r1
 80025c6:	4944      	ldr	r1, [pc, #272]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d17d      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025de:	f7fe fb5f 	bl	8000ca0 <HAL_GetTick>
 80025e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e4:	e009      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e6:	f7fe fb5b 	bl	8000ca0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d902      	bls.n	80025fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	73fb      	strb	r3, [r7, #15]
        break;
 80025f8:	e005      	b.n	8002606 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ef      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d160      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d111      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800261a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	0912      	lsrs	r2, r2, #4
 800262a:	0452      	lsls	r2, r2, #17
 800262c:	430a      	orrs	r2, r1
 800262e:	492a      	ldr	r1, [pc, #168]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	610b      	str	r3, [r1, #16]
 8002634:	e027      	b.n	8002686 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d112      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6892      	ldr	r2, [r2, #8]
 800264c:	0211      	lsls	r1, r2, #8
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6912      	ldr	r2, [r2, #16]
 8002652:	0852      	lsrs	r2, r2, #1
 8002654:	3a01      	subs	r2, #1
 8002656:	0552      	lsls	r2, r2, #21
 8002658:	430a      	orrs	r2, r1
 800265a:	491f      	ldr	r1, [pc, #124]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	610b      	str	r3, [r1, #16]
 8002660:	e011      	b.n	8002686 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800266a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	0211      	lsls	r1, r2, #8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6952      	ldr	r2, [r2, #20]
 8002678:	0852      	lsrs	r2, r2, #1
 800267a:	3a01      	subs	r2, #1
 800267c:	0652      	lsls	r2, r2, #25
 800267e:	430a      	orrs	r2, r1
 8002680:	4915      	ldr	r1, [pc, #84]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800268c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002690:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7fe fb05 	bl	8000ca0 <HAL_GetTick>
 8002696:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002698:	e009      	b.n	80026ae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800269a:	f7fe fb01 	bl	8000ca0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d902      	bls.n	80026ae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	73fb      	strb	r3, [r7, #15]
          break;
 80026ac:	e005      	b.n	80026ba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ef      	beq.n	800269a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ea:	4b68      	ldr	r3, [pc, #416]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d018      	beq.n	8002728 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026f6:	4b65      	ldr	r3, [pc, #404]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0203 	and.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d10d      	bne.n	8002722 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
       ||
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
       ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d044      	beq.n	80027ac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e041      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d00c      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x6e>
 8002730:	2b03      	cmp	r3, #3
 8002732:	d013      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x80>
 8002734:	2b01      	cmp	r3, #1
 8002736:	d120      	bne.n	800277a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002738:	4b54      	ldr	r3, [pc, #336]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11d      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002748:	e01a      	b.n	8002780 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275a:	e013      	b.n	8002784 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002768:	4b48      	ldr	r3, [pc, #288]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002778:	e006      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      break;
 800277e:	e004      	b.n	800278a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002780:	bf00      	nop
 8002782:	e002      	b.n	800278a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002784:	bf00      	nop
 8002786:	e000      	b.n	800278a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002788:	bf00      	nop
    }

    if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002790:	4b3e      	ldr	r3, [pc, #248]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	430b      	orrs	r3, r1
 80027a6:	4939      	ldr	r1, [pc, #228]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d167      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a35      	ldr	r2, [pc, #212]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe fa6f 	bl	8000ca0 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c4:	e009      	b.n	80027da <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c6:	f7fe fa6b 	bl	8000ca0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	73fb      	strb	r3, [r7, #15]
        break;
 80027d8:	e005      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d14a      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d111      	bne.n	8002816 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	0211      	lsls	r1, r2, #8
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68d2      	ldr	r2, [r2, #12]
 8002808:	0912      	lsrs	r2, r2, #4
 800280a:	0452      	lsls	r2, r2, #17
 800280c:	430a      	orrs	r2, r1
 800280e:	491f      	ldr	r1, [pc, #124]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	614b      	str	r3, [r1, #20]
 8002814:	e011      	b.n	800283a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800281e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	0211      	lsls	r1, r2, #8
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6912      	ldr	r2, [r2, #16]
 800282c:	0852      	lsrs	r2, r2, #1
 800282e:	3a01      	subs	r2, #1
 8002830:	0652      	lsls	r2, r2, #25
 8002832:	430a      	orrs	r2, r1
 8002834:	4915      	ldr	r1, [pc, #84]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fa2b 	bl	8000ca0 <HAL_GetTick>
 800284a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284c:	e009      	b.n	8002862 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800284e:	f7fe fa27 	bl	8000ca0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d902      	bls.n	8002862 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	73fb      	strb	r3, [r7, #15]
          break;
 8002860:	e005      	b.n	800286e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ef      	beq.n	800284e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <RCCEx_PLLSAI2_Config+0x1b0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e049      	b.n	8002936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f841 	bl	800293e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f9f8 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d018      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d015      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d011      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	e008      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40013400 	.word	0x40013400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	00010007 	.word	0x00010007

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0202 	mvn.w	r2, #2
 8002a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f905 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8f7 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f908 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8db 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8cd 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8de 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8b1 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8a3 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8b4 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f887 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f879 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f88a 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0201 	mvn.w	r2, #1
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fe2a 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f914 	bl	8002e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d10e      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d107      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f907 	bl	8002e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d10e      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f838 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0220 	mvn.w	r2, #32
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8c7 	bl	8002df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d00f      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2f      	ldr	r2, [pc, #188]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d01b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d017      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00f      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e040      	b.n	8002ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fd16 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f98c 	bl	8003190 <UART_SetConfig>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fc0a 	bl	80036a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fc91 	bl	80037e8 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	f040 8081 	bne.w	8002fec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_Transmit+0x26>
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e079      	b.n	8002fee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x38>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e072      	b.n	8002fee <HAL_UART_Transmit+0x11e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd fec0 	bl	8000ca0 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3a:	d108      	bne.n	8002f4e <HAL_UART_Transmit+0x7e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e003      	b.n	8002f56 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002f5e:	e02d      	b.n	8002fbc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fc81 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e039      	b.n	8002fee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	3302      	adds	r3, #2
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	e008      	b.n	8002faa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1cb      	bne.n	8002f60 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fc4d 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e005      	b.n	8002fee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b08a      	sub	sp, #40	; 0x28
 8002ffa:	af02      	add	r7, sp, #8
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 80bb 	bne.w	8003186 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_UART_Receive+0x26>
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b3      	b.n	8003188 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_UART_Receive+0x38>
 800302a:	2302      	movs	r3, #2
 800302c:	e0ac      	b.n	8003188 <HAL_UART_Receive+0x192>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2222      	movs	r2, #34	; 0x22
 8003040:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003042:	f7fd fe2d 	bl	8000ca0 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003060:	d10e      	bne.n	8003080 <HAL_UART_Receive+0x8a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_UART_Receive+0x80>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003074:	e02d      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800307e:	e028      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_UART_Receive+0xae>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_UART_Receive+0xa4>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	22ff      	movs	r2, #255	; 0xff
 8003094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003098:	e01b      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	227f      	movs	r2, #127	; 0x7f
 800309e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030a2:	e016      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ac:	d10d      	bne.n	80030ca <HAL_UART_Receive+0xd4>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Receive+0xca>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	227f      	movs	r2, #127	; 0x7f
 80030ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030be:	e008      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	223f      	movs	r2, #63	; 0x3f
 80030c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030c8:	e003      	b.n	80030d2 <HAL_UART_Receive+0xdc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d108      	bne.n	80030f6 <HAL_UART_Receive+0x100>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e003      	b.n	80030fe <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003106:	e033      	b.n	8003170 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	2120      	movs	r1, #32
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fbad 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e032      	b.n	8003188 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10c      	bne.n	8003142 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800312e:	b29a      	uxth	r2, r3
 8003130:	8a7b      	ldrh	r3, [r7, #18]
 8003132:	4013      	ands	r3, r2
 8003134:	b29a      	uxth	r2, r3
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	3302      	adds	r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	e00d      	b.n	800315e <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003148:	b29b      	uxth	r3, r3
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8a7b      	ldrh	r3, [r7, #18]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4013      	ands	r3, r2
 8003152:	b2da      	uxtb	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1c5      	bne.n	8003108 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4bac      	ldr	r3, [pc, #688]	; (8003470 <UART_SetConfig+0x2e0>)
 80031be:	4013      	ands	r3, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	69f9      	ldr	r1, [r7, #28]
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4aa2      	ldr	r2, [pc, #648]	; (8003474 <UART_SetConfig+0x2e4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a99      	ldr	r2, [pc, #612]	; (8003478 <UART_SetConfig+0x2e8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d121      	bne.n	800325c <UART_SetConfig+0xcc>
 8003218:	4b98      	ldr	r3, [pc, #608]	; (800347c <UART_SetConfig+0x2ec>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b03      	cmp	r3, #3
 8003224:	d816      	bhi.n	8003254 <UART_SetConfig+0xc4>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <UART_SetConfig+0x9c>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003249 	.word	0x08003249
 8003234:	08003243 	.word	0x08003243
 8003238:	0800324f 	.word	0x0800324f
 800323c:	2301      	movs	r3, #1
 800323e:	76fb      	strb	r3, [r7, #27]
 8003240:	e0e8      	b.n	8003414 <UART_SetConfig+0x284>
 8003242:	2302      	movs	r3, #2
 8003244:	76fb      	strb	r3, [r7, #27]
 8003246:	e0e5      	b.n	8003414 <UART_SetConfig+0x284>
 8003248:	2304      	movs	r3, #4
 800324a:	76fb      	strb	r3, [r7, #27]
 800324c:	e0e2      	b.n	8003414 <UART_SetConfig+0x284>
 800324e:	2308      	movs	r3, #8
 8003250:	76fb      	strb	r3, [r7, #27]
 8003252:	e0df      	b.n	8003414 <UART_SetConfig+0x284>
 8003254:	2310      	movs	r3, #16
 8003256:	76fb      	strb	r3, [r7, #27]
 8003258:	bf00      	nop
 800325a:	e0db      	b.n	8003414 <UART_SetConfig+0x284>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a87      	ldr	r2, [pc, #540]	; (8003480 <UART_SetConfig+0x2f0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d134      	bne.n	80032d0 <UART_SetConfig+0x140>
 8003266:	4b85      	ldr	r3, [pc, #532]	; (800347c <UART_SetConfig+0x2ec>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d829      	bhi.n	80032c8 <UART_SetConfig+0x138>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_SetConfig+0xec>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032c9 	.word	0x080032c9
 8003284:	080032c9 	.word	0x080032c9
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032c9 	.word	0x080032c9
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032b7 	.word	0x080032b7
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032c9 	.word	0x080032c9
 80032ac:	080032c3 	.word	0x080032c3
 80032b0:	2300      	movs	r3, #0
 80032b2:	76fb      	strb	r3, [r7, #27]
 80032b4:	e0ae      	b.n	8003414 <UART_SetConfig+0x284>
 80032b6:	2302      	movs	r3, #2
 80032b8:	76fb      	strb	r3, [r7, #27]
 80032ba:	e0ab      	b.n	8003414 <UART_SetConfig+0x284>
 80032bc:	2304      	movs	r3, #4
 80032be:	76fb      	strb	r3, [r7, #27]
 80032c0:	e0a8      	b.n	8003414 <UART_SetConfig+0x284>
 80032c2:	2308      	movs	r3, #8
 80032c4:	76fb      	strb	r3, [r7, #27]
 80032c6:	e0a5      	b.n	8003414 <UART_SetConfig+0x284>
 80032c8:	2310      	movs	r3, #16
 80032ca:	76fb      	strb	r3, [r7, #27]
 80032cc:	bf00      	nop
 80032ce:	e0a1      	b.n	8003414 <UART_SetConfig+0x284>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6b      	ldr	r2, [pc, #428]	; (8003484 <UART_SetConfig+0x2f4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d120      	bne.n	800331c <UART_SetConfig+0x18c>
 80032da:	4b68      	ldr	r3, [pc, #416]	; (800347c <UART_SetConfig+0x2ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d00f      	beq.n	8003308 <UART_SetConfig+0x178>
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d802      	bhi.n	80032f2 <UART_SetConfig+0x162>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <UART_SetConfig+0x16c>
 80032f0:	e010      	b.n	8003314 <UART_SetConfig+0x184>
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d005      	beq.n	8003302 <UART_SetConfig+0x172>
 80032f6:	2b30      	cmp	r3, #48	; 0x30
 80032f8:	d009      	beq.n	800330e <UART_SetConfig+0x17e>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x184>
 80032fc:	2300      	movs	r3, #0
 80032fe:	76fb      	strb	r3, [r7, #27]
 8003300:	e088      	b.n	8003414 <UART_SetConfig+0x284>
 8003302:	2302      	movs	r3, #2
 8003304:	76fb      	strb	r3, [r7, #27]
 8003306:	e085      	b.n	8003414 <UART_SetConfig+0x284>
 8003308:	2304      	movs	r3, #4
 800330a:	76fb      	strb	r3, [r7, #27]
 800330c:	e082      	b.n	8003414 <UART_SetConfig+0x284>
 800330e:	2308      	movs	r3, #8
 8003310:	76fb      	strb	r3, [r7, #27]
 8003312:	e07f      	b.n	8003414 <UART_SetConfig+0x284>
 8003314:	2310      	movs	r3, #16
 8003316:	76fb      	strb	r3, [r7, #27]
 8003318:	bf00      	nop
 800331a:	e07b      	b.n	8003414 <UART_SetConfig+0x284>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a59      	ldr	r2, [pc, #356]	; (8003488 <UART_SetConfig+0x2f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d120      	bne.n	8003368 <UART_SetConfig+0x1d8>
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <UART_SetConfig+0x2ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d00f      	beq.n	8003354 <UART_SetConfig+0x1c4>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d802      	bhi.n	800333e <UART_SetConfig+0x1ae>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <UART_SetConfig+0x1b8>
 800333c:	e010      	b.n	8003360 <UART_SetConfig+0x1d0>
 800333e:	2b80      	cmp	r3, #128	; 0x80
 8003340:	d005      	beq.n	800334e <UART_SetConfig+0x1be>
 8003342:	2bc0      	cmp	r3, #192	; 0xc0
 8003344:	d009      	beq.n	800335a <UART_SetConfig+0x1ca>
 8003346:	e00b      	b.n	8003360 <UART_SetConfig+0x1d0>
 8003348:	2300      	movs	r3, #0
 800334a:	76fb      	strb	r3, [r7, #27]
 800334c:	e062      	b.n	8003414 <UART_SetConfig+0x284>
 800334e:	2302      	movs	r3, #2
 8003350:	76fb      	strb	r3, [r7, #27]
 8003352:	e05f      	b.n	8003414 <UART_SetConfig+0x284>
 8003354:	2304      	movs	r3, #4
 8003356:	76fb      	strb	r3, [r7, #27]
 8003358:	e05c      	b.n	8003414 <UART_SetConfig+0x284>
 800335a:	2308      	movs	r3, #8
 800335c:	76fb      	strb	r3, [r7, #27]
 800335e:	e059      	b.n	8003414 <UART_SetConfig+0x284>
 8003360:	2310      	movs	r3, #16
 8003362:	76fb      	strb	r3, [r7, #27]
 8003364:	bf00      	nop
 8003366:	e055      	b.n	8003414 <UART_SetConfig+0x284>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a47      	ldr	r2, [pc, #284]	; (800348c <UART_SetConfig+0x2fc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d124      	bne.n	80033bc <UART_SetConfig+0x22c>
 8003372:	4b42      	ldr	r3, [pc, #264]	; (800347c <UART_SetConfig+0x2ec>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003380:	d012      	beq.n	80033a8 <UART_SetConfig+0x218>
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	d802      	bhi.n	800338e <UART_SetConfig+0x1fe>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <UART_SetConfig+0x20c>
 800338c:	e012      	b.n	80033b4 <UART_SetConfig+0x224>
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d006      	beq.n	80033a2 <UART_SetConfig+0x212>
 8003394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003398:	d009      	beq.n	80033ae <UART_SetConfig+0x21e>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x224>
 800339c:	2300      	movs	r3, #0
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e038      	b.n	8003414 <UART_SetConfig+0x284>
 80033a2:	2302      	movs	r3, #2
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e035      	b.n	8003414 <UART_SetConfig+0x284>
 80033a8:	2304      	movs	r3, #4
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e032      	b.n	8003414 <UART_SetConfig+0x284>
 80033ae:	2308      	movs	r3, #8
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e02f      	b.n	8003414 <UART_SetConfig+0x284>
 80033b4:	2310      	movs	r3, #16
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	bf00      	nop
 80033ba:	e02b      	b.n	8003414 <UART_SetConfig+0x284>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <UART_SetConfig+0x2e4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d124      	bne.n	8003410 <UART_SetConfig+0x280>
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <UART_SetConfig+0x2ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d012      	beq.n	80033fc <UART_SetConfig+0x26c>
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d802      	bhi.n	80033e2 <UART_SetConfig+0x252>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <UART_SetConfig+0x260>
 80033e0:	e012      	b.n	8003408 <UART_SetConfig+0x278>
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e6:	d006      	beq.n	80033f6 <UART_SetConfig+0x266>
 80033e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ec:	d009      	beq.n	8003402 <UART_SetConfig+0x272>
 80033ee:	e00b      	b.n	8003408 <UART_SetConfig+0x278>
 80033f0:	2300      	movs	r3, #0
 80033f2:	76fb      	strb	r3, [r7, #27]
 80033f4:	e00e      	b.n	8003414 <UART_SetConfig+0x284>
 80033f6:	2302      	movs	r3, #2
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e00b      	b.n	8003414 <UART_SetConfig+0x284>
 80033fc:	2304      	movs	r3, #4
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	e008      	b.n	8003414 <UART_SetConfig+0x284>
 8003402:	2308      	movs	r3, #8
 8003404:	76fb      	strb	r3, [r7, #27]
 8003406:	e005      	b.n	8003414 <UART_SetConfig+0x284>
 8003408:	2310      	movs	r3, #16
 800340a:	76fb      	strb	r3, [r7, #27]
 800340c:	bf00      	nop
 800340e:	e001      	b.n	8003414 <UART_SetConfig+0x284>
 8003410:	2310      	movs	r3, #16
 8003412:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a16      	ldr	r2, [pc, #88]	; (8003474 <UART_SetConfig+0x2e4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	f040 8087 	bne.w	800352e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003420:	7efb      	ldrb	r3, [r7, #27]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d836      	bhi.n	8003494 <UART_SetConfig+0x304>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0x29c>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003451 	.word	0x08003451
 8003430:	08003495 	.word	0x08003495
 8003434:	08003459 	.word	0x08003459
 8003438:	08003495 	.word	0x08003495
 800343c:	0800345f 	.word	0x0800345f
 8003440:	08003495 	.word	0x08003495
 8003444:	08003495 	.word	0x08003495
 8003448:	08003495 	.word	0x08003495
 800344c:	08003467 	.word	0x08003467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe fcb0 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003454:	6178      	str	r0, [r7, #20]
        break;
 8003456:	e022      	b.n	800349e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <UART_SetConfig+0x300>)
 800345a:	617b      	str	r3, [r7, #20]
        break;
 800345c:	e01f      	b.n	800349e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7fe fc13 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8003462:	6178      	str	r0, [r7, #20]
        break;
 8003464:	e01b      	b.n	800349e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346a:	617b      	str	r3, [r7, #20]
        break;
 800346c:	e017      	b.n	800349e <UART_SetConfig+0x30e>
 800346e:	bf00      	nop
 8003470:	efff69f3 	.word	0xefff69f3
 8003474:	40008000 	.word	0x40008000
 8003478:	40013800 	.word	0x40013800
 800347c:	40021000 	.word	0x40021000
 8003480:	40004400 	.word	0x40004400
 8003484:	40004800 	.word	0x40004800
 8003488:	40004c00 	.word	0x40004c00
 800348c:	40005000 	.word	0x40005000
 8003490:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	76bb      	strb	r3, [r7, #26]
        break;
 800349c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80f1 	beq.w	8003688 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d305      	bcc.n	80034c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d902      	bls.n	80034c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	76bb      	strb	r3, [r7, #26]
 80034c6:	e0df      	b.n	8003688 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	0214      	lsls	r4, r2, #8
 80034da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80034de:	020b      	lsls	r3, r1, #8
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6852      	ldr	r2, [r2, #4]
 80034e4:	0852      	lsrs	r2, r2, #1
 80034e6:	4611      	mov	r1, r2
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	eb13 0b01 	adds.w	fp, r3, r1
 80034f0:	eb44 0c02 	adc.w	ip, r4, r2
 80034f4:	4658      	mov	r0, fp
 80034f6:	4661      	mov	r1, ip
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f04f 0400 	mov.w	r4, #0
 8003500:	461a      	mov	r2, r3
 8003502:	4623      	mov	r3, r4
 8003504:	f7fc feb4 	bl	8000270 <__aeabi_uldivmod>
 8003508:	4603      	mov	r3, r0
 800350a:	460c      	mov	r4, r1
 800350c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003514:	d308      	bcc.n	8003528 <UART_SetConfig+0x398>
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d204      	bcs.n	8003528 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	e0af      	b.n	8003688 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	76bb      	strb	r3, [r7, #26]
 800352c:	e0ac      	b.n	8003688 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003536:	d15b      	bne.n	80035f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003538:	7efb      	ldrb	r3, [r7, #27]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d827      	bhi.n	800358e <UART_SetConfig+0x3fe>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0x3b4>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7fe fc24 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 800356c:	6178      	str	r0, [r7, #20]
        break;
 800356e:	e013      	b.n	8003598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fc36 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8003574:	6178      	str	r0, [r7, #20]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <UART_SetConfig+0x510>)
 800357a:	617b      	str	r3, [r7, #20]
        break;
 800357c:	e00c      	b.n	8003598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fb83 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8003582:	6178      	str	r0, [r7, #20]
        break;
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	617b      	str	r3, [r7, #20]
        break;
 800358c:	e004      	b.n	8003598 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	76bb      	strb	r3, [r7, #26]
        break;
 8003596:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d074      	beq.n	8003688 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005a      	lsls	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d916      	bls.n	80035ea <UART_SetConfig+0x45a>
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c2:	d212      	bcs.n	80035ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	b29a      	uxth	r2, r3
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	4313      	orrs	r3, r2
 80035de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	89fa      	ldrh	r2, [r7, #14]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	e04e      	b.n	8003688 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	76bb      	strb	r3, [r7, #26]
 80035ee:	e04b      	b.n	8003688 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f0:	7efb      	ldrb	r3, [r7, #27]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d827      	bhi.n	8003646 <UART_SetConfig+0x4b6>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x46c>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003629 	.word	0x08003629
 8003604:	08003631 	.word	0x08003631
 8003608:	08003647 	.word	0x08003647
 800360c:	08003637 	.word	0x08003637
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
 800361c:	0800363f 	.word	0x0800363f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7fe fbc8 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003624:	6178      	str	r0, [r7, #20]
        break;
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003628:	f7fe fbda 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 800362c:	6178      	str	r0, [r7, #20]
        break;
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <UART_SetConfig+0x510>)
 8003632:	617b      	str	r3, [r7, #20]
        break;
 8003634:	e00c      	b.n	8003650 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003636:	f7fe fb27 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800363a:	6178      	str	r0, [r7, #20]
        break;
 800363c:	e008      	b.n	8003650 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003642:	617b      	str	r3, [r7, #20]
        break;
 8003644:	e004      	b.n	8003650 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	76bb      	strb	r3, [r7, #26]
        break;
 800364e:	bf00      	nop
    }

    if (pclk != 0U)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	085a      	lsrs	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0f      	cmp	r3, #15
 8003670:	d908      	bls.n	8003684 <UART_SetConfig+0x4f4>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d204      	bcs.n	8003684 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e001      	b.n	8003688 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003694:	7ebb      	ldrb	r3, [r7, #26]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80036a0:	00f42400 	.word	0x00f42400

080036a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01a      	beq.n	80037ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d10a      	bne.n	80037ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037f6:	f7fd fa53 	bl	8000ca0 <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b08      	cmp	r3, #8
 8003808:	d10e      	bne.n	8003828 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f82a 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e020      	b.n	800386a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d10e      	bne.n	8003854 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f814 	bl	8003872 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e00a      	b.n	800386a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	e05d      	b.n	8003940 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388a:	d059      	beq.n	8003940 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fd fa08 	bl	8000ca0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11b      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e042      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02b      	beq.n	8003940 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d123      	bne.n	8003940 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e00f      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	429a      	cmp	r2, r3
 800395c:	d092      	beq.n	8003884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	60bb      	str	r3, [r7, #8]
  return(result);
 8003984:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398a:	f3ef 8310 	mrs	r3, PRIMASK
 800398e:	607b      	str	r3, [r7, #4]
  return(result);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d105      	bne.n	80039a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003996:	f3ef 8311 	mrs	r3, BASEPRI
 800399a:	603b      	str	r3, [r7, #0]
  return(result);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <osKernelInitialize+0x3a>
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <osKernelInitialize+0x64>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d103      	bne.n	80039b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80039aa:	f06f 0305 	mvn.w	r3, #5
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e00c      	b.n	80039cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <osKernelInitialize+0x64>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d105      	bne.n	80039c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <osKernelInitialize+0x64>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e002      	b.n	80039cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000200 	.word	0x20000200

080039e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e6:	f3ef 8305 	mrs	r3, IPSR
 80039ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	607b      	str	r3, [r7, #4]
  return(result);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003a02:	603b      	str	r3, [r7, #0]
  return(result);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <osKernelStart+0x3a>
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <osKernelStart+0x68>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d103      	bne.n	8003a1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a12:	f06f 0305 	mvn.w	r3, #5
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e010      	b.n	8003a3c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <osKernelStart+0x68>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d109      	bne.n	8003a36 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a22:	f7ff ffa1 	bl	8003968 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <osKernelStart+0x68>)
 8003a28:	2202      	movs	r2, #2
 8003a2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a2c:	f001 f870 	bl	8004b10 <vTaskStartScheduler>
      stat = osOK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e002      	b.n	8003a3c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000200 	.word	0x20000200

08003a4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b090      	sub	sp, #64	; 0x40
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a5c:	f3ef 8305 	mrs	r3, IPSR
 8003a60:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 808f 	bne.w	8003b88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a76:	f3ef 8311 	mrs	r3, BASEPRI
 8003a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <osThreadNew+0x3e>
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <osThreadNew+0x148>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d07e      	beq.n	8003b88 <osThreadNew+0x13c>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d07b      	beq.n	8003b88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003a94:	2318      	movs	r3, #24
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d045      	beq.n	8003b34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <osThreadNew+0x6a>
        name = attr->name;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <osThreadNew+0x90>
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	2b38      	cmp	r3, #56	; 0x38
 8003ace:	d805      	bhi.n	8003adc <osThreadNew+0x90>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <osThreadNew+0x94>
        return (NULL);
 8003adc:	2300      	movs	r3, #0
 8003ade:	e054      	b.n	8003b8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00e      	beq.n	8003b16 <osThreadNew+0xca>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b5b      	cmp	r3, #91	; 0x5b
 8003afe:	d90a      	bls.n	8003b16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <osThreadNew+0xca>
        mem = 1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	e010      	b.n	8003b38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <osThreadNew+0xec>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <osThreadNew+0xec>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <osThreadNew+0xec>
          mem = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e001      	b.n	8003b38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d110      	bne.n	8003b60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b46:	9202      	str	r2, [sp, #8]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fe09 	bl	800476c <xTaskCreateStatic>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e013      	b.n	8003b88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d110      	bne.n	8003b88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fe51 	bl	8004820 <xTaskCreate>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <osThreadNew+0x13c>
          hTask = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b88:	693b      	ldr	r3, [r7, #16]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3730      	adds	r7, #48	; 0x30
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000200 	.word	0x20000200

08003b98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ba0:	f3ef 8305 	mrs	r3, IPSR
 8003ba4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ba6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <osDelay+0x3c>
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <osDelay+0x58>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d103      	bne.n	8003bd4 <osDelay+0x3c>
    stat = osErrorISR;
 8003bcc:	f06f 0305 	mvn.w	r3, #5
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e007      	b.n	8003be4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 ff62 	bl	8004aa8 <vTaskDelay>
    }
  }

  return (stat);
 8003be4:	697b      	ldr	r3, [r7, #20]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000200 	.word	0x20000200

08003bf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <vApplicationGetIdleTaskMemory+0x30>)
 8003c0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	601a      	str	r2, [r3, #0]
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000204 	.word	0x20000204
 8003c24:	20000260 	.word	0x20000260

08003c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <vApplicationGetTimerTaskMemory+0x30>)
 8003c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000460 	.word	0x20000460
 8003c58:	200004bc 	.word	0x200004bc

08003c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f103 0208 	add.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f103 0208 	add.w	r2, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f103 0208 	add.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d103      	bne.n	8003d1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e00c      	b.n	8003d38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3308      	adds	r3, #8
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e002      	b.n	8003d2c <vListInsert+0x2e>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d2f6      	bcs.n	8003d26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6892      	ldr	r2, [r2, #8]
 8003d86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d103      	bne.n	8003da4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	e7fe      	b.n	8003dea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003dec:	f002 f80e 	bl	8005e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	441a      	add	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	441a      	add	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	22ff      	movs	r2, #255	; 0xff
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	22ff      	movs	r2, #255	; 0xff
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d114      	bne.n	8003e6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01a      	beq.n	8003e80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 f8de 	bl	8005010 <xTaskRemoveFromEventList>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <xQueueGenericReset+0xcc>)
 8003e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	e009      	b.n	8003e80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fef3 	bl	8003c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3324      	adds	r3, #36	; 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff feee 	bl	8003c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e80:	f001 fff2 	bl	8005e68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e84:	2301      	movs	r3, #1
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08e      	sub	sp, #56	; 0x38
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <xQueueGenericCreateStatic+0x28>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eba:	e7fe      	b.n	8003eba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <xQueueGenericCreateStatic+0x42>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e7fe      	b.n	8003ed4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <xQueueGenericCreateStatic+0x4e>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <xQueueGenericCreateStatic+0x52>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <xQueueGenericCreateStatic+0x54>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <xQueueGenericCreateStatic+0x6c>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xQueueGenericCreateStatic+0x78>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericCreateStatic+0x7c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericCreateStatic+0x7e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xQueueGenericCreateStatic+0x96>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f2a:	2350      	movs	r3, #80	; 0x50
 8003f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b50      	cmp	r3, #80	; 0x50
 8003f32:	d009      	beq.n	8003f48 <xQueueGenericCreateStatic+0xb4>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e7fe      	b.n	8003f46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f805 	bl	8003f7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3730      	adds	r7, #48	; 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e002      	b.n	8003f9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa8:	2101      	movs	r1, #1
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	f7ff ff0a 	bl	8003dc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	; 0x38
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <xQueueGenericSend+0x30>
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <xQueueGenericSend+0x3e>
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericSend+0x42>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericSend+0x44>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <xQueueGenericSend+0x5c>
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e7fe      	b.n	800401a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d103      	bne.n	800402a <xQueueGenericSend+0x6a>
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <xQueueGenericSend+0x6e>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <xQueueGenericSend+0x70>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <xQueueGenericSend+0x88>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	e7fe      	b.n	8004046 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004048:	f001 f998 	bl	800537c <xTaskGetSchedulerState>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <xQueueGenericSend+0x98>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <xQueueGenericSend+0x9c>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <xQueueGenericSend+0x9e>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <xQueueGenericSend+0xb6>
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e7fe      	b.n	8004074 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004076:	f001 fec9 	bl	8005e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <xQueueGenericSend+0xcc>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d129      	bne.n	80040e0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004092:	f000 f9ff 	bl	8004494 <prvCopyDataToQueue>
 8004096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	3324      	adds	r3, #36	; 0x24
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 ffb3 	bl	8005010 <xTaskRemoveFromEventList>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040b0:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <xQueueGenericSend+0x1f0>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	e00a      	b.n	80040d8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040c8:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <xQueueGenericSend+0x1f0>)
 80040ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040d8:	f001 fec6 	bl	8005e68 <vPortExitCritical>
				return pdPASS;
 80040dc:	2301      	movs	r3, #1
 80040de:	e063      	b.n	80041a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040e6:	f001 febf 	bl	8005e68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e05c      	b.n	80041a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 ffeb 	bl	80050d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040fe:	2301      	movs	r3, #1
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004102:	f001 feb1 	bl	8005e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004106:	f000 fd67 	bl	8004bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800410a:	f001 fe7f 	bl	8005e0c <vPortEnterCritical>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004114:	b25b      	sxtb	r3, r3
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411a:	d103      	bne.n	8004124 <xQueueGenericSend+0x164>
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800412a:	b25b      	sxtb	r3, r3
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004130:	d103      	bne.n	800413a <xQueueGenericSend+0x17a>
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800413a:	f001 fe95 	bl	8005e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800413e:	1d3a      	adds	r2, r7, #4
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ffda 	bl	8005100 <xTaskCheckForTimeOut>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d124      	bne.n	800419c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004154:	f000 fa96 	bl	8004684 <prvIsQueueFull>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d018      	beq.n	8004190 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	3310      	adds	r3, #16
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ff04 	bl	8004f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800416c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800416e:	f000 fa21 	bl	80045b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004172:	f000 fd3f 	bl	8004bf4 <xTaskResumeAll>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af7c 	bne.w	8004076 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <xQueueGenericSend+0x1f0>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	e772      	b.n	8004076 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004192:	f000 fa0f 	bl	80045b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004196:	f000 fd2d 	bl	8004bf4 <xTaskResumeAll>
 800419a:	e76c      	b.n	8004076 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800419c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800419e:	f000 fa09 	bl	80045b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041a2:	f000 fd27 	bl	8004bf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3738      	adds	r7, #56	; 0x38
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08e      	sub	sp, #56	; 0x38
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <xQueueGenericSendFromISR+0x2c>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	e7fe      	b.n	80041de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSendFromISR+0x3a>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSendFromISR+0x3e>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSendFromISR+0x40>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <xQueueGenericSendFromISR+0x58>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	e7fe      	b.n	800420a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d103      	bne.n	800421a <xQueueGenericSendFromISR+0x66>
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <xQueueGenericSendFromISR+0x6a>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueGenericSendFromISR+0x6c>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <xQueueGenericSendFromISR+0x84>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e7fe      	b.n	8004236 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004238:	f001 fec4 	bl	8005fc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800423c:	f3ef 8211 	mrs	r2, BASEPRI
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	61ba      	str	r2, [r7, #24]
 8004252:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004254:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <xQueueGenericSendFromISR+0xb6>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d12c      	bne.n	80042c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800427a:	f000 f90b 	bl	8004494 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800427e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	d112      	bne.n	80042ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f000 febb 	bl	8005010 <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e007      	b.n	80042be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b25a      	sxtb	r2, r3
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042c2:	e001      	b.n	80042c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3738      	adds	r7, #56	; 0x38
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	; 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <xQueueReceive+0x2e>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	e7fe      	b.n	8004308 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <xQueueReceive+0x3c>
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <xQueueReceive+0x40>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <xQueueReceive+0x42>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <xQueueReceive+0x5a>
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e7fe      	b.n	8004334 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004336:	f001 f821 	bl	800537c <xTaskGetSchedulerState>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <xQueueReceive+0x6a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <xQueueReceive+0x6e>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <xQueueReceive+0x70>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <xQueueReceive+0x88>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e7fe      	b.n	8004362 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004364:	f001 fd52 	bl	8005e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01f      	beq.n	80043b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004378:	f000 f8f6 	bl	8004568 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00f      	beq.n	80043ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	3310      	adds	r3, #16
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fe3d 	bl	8005010 <xTaskRemoveFromEventList>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800439c:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <xQueueReceive+0x1b4>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043ac:	f001 fd5c 	bl	8005e68 <vPortExitCritical>
				return pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e069      	b.n	8004488 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ba:	f001 fd55 	bl	8005e68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043be:	2300      	movs	r3, #0
 80043c0:	e062      	b.n	8004488 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fe81 	bl	80050d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043d6:	f001 fd47 	bl	8005e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043da:	f000 fbfd 	bl	8004bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043de:	f001 fd15 	bl	8005e0c <vPortEnterCritical>
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ee:	d103      	bne.n	80043f8 <xQueueReceive+0x11c>
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004404:	d103      	bne.n	800440e <xQueueReceive+0x132>
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800440e:	f001 fd2b 	bl	8005e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004412:	1d3a      	adds	r2, r7, #4
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fe70 	bl	8005100 <xTaskCheckForTimeOut>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d123      	bne.n	800446e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004428:	f000 f916 	bl	8004658 <prvIsQueueEmpty>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd9a 	bl	8004f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004442:	f000 f8b7 	bl	80045b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004446:	f000 fbd5 	bl	8004bf4 <xTaskResumeAll>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d189      	bne.n	8004364 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <xQueueReceive+0x1b4>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	e780      	b.n	8004364 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004464:	f000 f8a6 	bl	80045b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004468:	f000 fbc4 	bl	8004bf4 <xTaskResumeAll>
 800446c:	e77a      	b.n	8004364 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800446e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004470:	f000 f8a0 	bl	80045b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004474:	f000 fbbe 	bl	8004bf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447a:	f000 f8ed 	bl	8004658 <prvIsQueueEmpty>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f43f af6f 	beq.w	8004364 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004486:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004488:	4618      	mov	r0, r3
 800448a:	3730      	adds	r7, #48	; 0x30
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d14d      	bne.n	8004556 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 ff7a 	bl	80053b8 <xTaskPriorityDisinherit>
 80044c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	e043      	b.n	8004556 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d119      	bne.n	8004508 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6858      	ldr	r0, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	461a      	mov	r2, r3
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	f001 ffb2 	bl	8006448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d32b      	bcc.n	8004556 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	e026      	b.n	8004556 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68d8      	ldr	r0, [r3, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	461a      	mov	r2, r3
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	f001 ff98 	bl	8006448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	425b      	negs	r3, r3
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	425b      	negs	r3, r3
 800453e:	441a      	add	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d105      	bne.n	8004556 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3b01      	subs	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d018      	beq.n	80045ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	441a      	add	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d303      	bcc.n	800459c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68d9      	ldr	r1, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	461a      	mov	r2, r3
 80045a6:	6838      	ldr	r0, [r7, #0]
 80045a8:	f001 ff4e 	bl	8006448 <memcpy>
	}
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045bc:	f001 fc26 	bl	8005e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045c8:	e011      	b.n	80045ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fd1a 	bl	8005010 <xTaskRemoveFromEventList>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045e2:	f000 fded 	bl	80051c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	dce9      	bgt.n	80045ca <prvUnlockQueue+0x16>
 80045f6:	e000      	b.n	80045fa <prvUnlockQueue+0x46>
					break;
 80045f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004602:	f001 fc31 	bl	8005e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004606:	f001 fc01 	bl	8005e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004610:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004612:	e011      	b.n	8004638 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3310      	adds	r3, #16
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fcf5 	bl	8005010 <xTaskRemoveFromEventList>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800462c:	f000 fdc8 	bl	80051c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	3b01      	subs	r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800463c:	2b00      	cmp	r3, #0
 800463e:	dce9      	bgt.n	8004614 <prvUnlockQueue+0x60>
 8004640:	e000      	b.n	8004644 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004642:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	22ff      	movs	r2, #255	; 0xff
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800464c:	f001 fc0c 	bl	8005e68 <vPortExitCritical>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004660:	f001 fbd4 	bl	8005e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e001      	b.n	8004676 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004676:	f001 fbf7 	bl	8005e68 <vPortExitCritical>

	return xReturn;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800468c:	f001 fbbe 	bl	8005e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	429a      	cmp	r2, r3
 800469a:	d102      	bne.n	80046a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e001      	b.n	80046a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046a6:	f001 fbdf 	bl	8005e68 <vPortExitCritical>

	return xReturn;
 80046aa:	68fb      	ldr	r3, [r7, #12]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e014      	b.n	80046ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <vQueueAddToRegistry+0x4c>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046d0:	490b      	ldr	r1, [pc, #44]	; (8004700 <vQueueAddToRegistry+0x4c>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046da:	4a09      	ldr	r2, [pc, #36]	; (8004700 <vQueueAddToRegistry+0x4c>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046e6:	e005      	b.n	80046f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b07      	cmp	r3, #7
 80046f2:	d9e7      	bls.n	80046c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20001ba4 	.word	0x20001ba4

08004704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004714:	f001 fb7a 	bl	8005e0c <vPortEnterCritical>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800471e:	b25b      	sxtb	r3, r3
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004724:	d103      	bne.n	800472e <vQueueWaitForMessageRestricted+0x2a>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004734:	b25b      	sxtb	r3, r3
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473a:	d103      	bne.n	8004744 <vQueueWaitForMessageRestricted+0x40>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004744:	f001 fb90 	bl	8005e68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fc2f 	bl	8004fbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff28 	bl	80045b4 <prvUnlockQueue>
	}
 8004764:	bf00      	nop
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08e      	sub	sp, #56	; 0x38
 8004770:	af04      	add	r7, sp, #16
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <xTaskCreateStatic+0x28>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	623b      	str	r3, [r7, #32]
 8004792:	e7fe      	b.n	8004792 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <xTaskCreateStatic+0x42>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e7fe      	b.n	80047ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ae:	235c      	movs	r3, #92	; 0x5c
 80047b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b5c      	cmp	r3, #92	; 0x5c
 80047b6:	d009      	beq.n	80047cc <xTaskCreateStatic+0x60>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e7fe      	b.n	80047ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80047cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01e      	beq.n	8004812 <xTaskCreateStatic+0xa6>
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01b      	beq.n	8004812 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047ec:	2300      	movs	r3, #0
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	f107 0314 	add.w	r3, r7, #20
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f850 	bl	80048aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480c:	f000 f8dc 	bl	80049c8 <prvAddNewTaskToReadyList>
 8004810:	e001      	b.n	8004816 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004816:	697b      	ldr	r3, [r7, #20]
	}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08c      	sub	sp, #48	; 0x30
 8004824:	af04      	add	r7, sp, #16
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4618      	mov	r0, r3
 8004836:	f001 fc03 	bl	8006040 <pvPortMalloc>
 800483a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004842:	205c      	movs	r0, #92	; 0x5c
 8004844:	f001 fbfc 	bl	8006040 <pvPortMalloc>
 8004848:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
 8004856:	e005      	b.n	8004864 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004858:	6978      	ldr	r0, [r7, #20]
 800485a:	f001 fcb3 	bl	80061c4 <vPortFree>
 800485e:	e001      	b.n	8004864 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d017      	beq.n	800489a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	2300      	movs	r3, #0
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f80e 	bl	80048aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800488e:	69f8      	ldr	r0, [r7, #28]
 8004890:	f000 f89a 	bl	80049c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004894:	2301      	movs	r3, #1
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e002      	b.n	80048a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048a0:	69bb      	ldr	r3, [r7, #24]
	}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	461a      	mov	r2, r3
 80048c2:	21a5      	movs	r1, #165	; 0xa5
 80048c4:	f001 fdcb 	bl	800645e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048d2:	3b01      	subs	r3, #1
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <prvInitialiseNewTask+0x56>
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e7fe      	b.n	80048fe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01f      	beq.n	8004946 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e012      	b.n	8004932 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	7819      	ldrb	r1, [r3, #0]
 8004914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	3334      	adds	r3, #52	; 0x34
 800491c:	460a      	mov	r2, r1
 800491e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3301      	adds	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d9e9      	bls.n	800490c <prvInitialiseNewTask+0x62>
 8004938:	e000      	b.n	800493c <prvInitialiseNewTask+0x92>
			{
				break;
 800493a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004944:	e003      	b.n	800494e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	2b37      	cmp	r3, #55	; 0x37
 8004952:	d901      	bls.n	8004958 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004954:	2337      	movs	r3, #55	; 0x37
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2200      	movs	r2, #0
 8004968:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	3304      	adds	r3, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff f994 	bl	8003c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	3318      	adds	r3, #24
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff f98f 	bl	8003c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004982:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	68f9      	ldr	r1, [r7, #12]
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	f001 f90c 	bl	8005bc4 <pxPortInitialiseStack>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049d0:	f001 fa1c 	bl	8005e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049d4:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <prvAddNewTaskToReadyList+0xc4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <prvAddNewTaskToReadyList+0xc4>)
 80049dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049de:	4b2c      	ldr	r3, [pc, #176]	; (8004a90 <prvAddNewTaskToReadyList+0xc8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <prvAddNewTaskToReadyList+0xc8>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <prvAddNewTaskToReadyList+0xc4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d110      	bne.n	8004a16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049f4:	f000 fc08 	bl	8005208 <prvInitialiseTaskLists>
 80049f8:	e00d      	b.n	8004a16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <prvAddNewTaskToReadyList+0xcc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <prvAddNewTaskToReadyList+0xc8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d802      	bhi.n	8004a16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <prvAddNewTaskToReadyList+0xc8>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <prvAddNewTaskToReadyList+0xd0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <prvAddNewTaskToReadyList+0xd0>)
 8004a1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <prvAddNewTaskToReadyList+0xd0>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <prvAddNewTaskToReadyList+0xd4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <prvAddNewTaskToReadyList+0x74>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <prvAddNewTaskToReadyList+0xd4>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <prvAddNewTaskToReadyList+0xd8>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7ff f92f 	bl	8003cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a58:	f001 fa06 	bl	8005e68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <prvAddNewTaskToReadyList+0xcc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <prvAddNewTaskToReadyList+0xc8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d207      	bcs.n	8004a82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <prvAddNewTaskToReadyList+0xdc>)
 8004a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000d90 	.word	0x20000d90
 8004a90:	200008bc 	.word	0x200008bc
 8004a94:	20000d9c 	.word	0x20000d9c
 8004a98:	20000dac 	.word	0x20000dac
 8004a9c:	20000d98 	.word	0x20000d98
 8004aa0:	200008c0 	.word	0x200008c0
 8004aa4:	e000ed04 	.word	0xe000ed04

08004aa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004aba:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <vTaskDelay+0x60>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <vTaskDelay+0x2e>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	e7fe      	b.n	8004ad4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004ad6:	f000 f87f 	bl	8004bd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ada:	2100      	movs	r1, #0
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fcd7 	bl	8005490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ae2:	f000 f887 	bl	8004bf4 <xTaskResumeAll>
 8004ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <vTaskDelay+0x64>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000db8 	.word	0x20000db8
 8004b0c:	e000ed04 	.word	0xe000ed04

08004b10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b1e:	463a      	mov	r2, r7
 8004b20:	1d39      	adds	r1, r7, #4
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f864 	bl	8003bf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	9202      	str	r2, [sp, #8]
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	4920      	ldr	r1, [pc, #128]	; (8004bc0 <vTaskStartScheduler+0xb0>)
 8004b40:	4820      	ldr	r0, [pc, #128]	; (8004bc4 <vTaskStartScheduler+0xb4>)
 8004b42:	f7ff fe13 	bl	800476c <xTaskCreateStatic>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <vTaskStartScheduler+0xb8>)
 8004b4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <vTaskStartScheduler+0xb8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e001      	b.n	8004b5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b64:	f000 fce8 	bl	8005538 <xTimerCreateTimerTask>
 8004b68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d115      	bne.n	8004b9c <vTaskStartScheduler+0x8c>
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <vTaskStartScheduler+0xbc>)
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <vTaskStartScheduler+0xc0>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <vTaskStartScheduler+0xc4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b96:	f001 f89b 	bl	8005cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b9a:	e00d      	b.n	8004bb8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba2:	d109      	bne.n	8004bb8 <vTaskStartScheduler+0xa8>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e7fe      	b.n	8004bb6 <vTaskStartScheduler+0xa6>
}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	080073e4 	.word	0x080073e4
 8004bc4:	080051d9 	.word	0x080051d9
 8004bc8:	20000db4 	.word	0x20000db4
 8004bcc:	20000db0 	.word	0x20000db0
 8004bd0:	20000d9c 	.word	0x20000d9c
 8004bd4:	20000d94 	.word	0x20000d94

08004bd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <vTaskSuspendAll+0x18>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a03      	ldr	r2, [pc, #12]	; (8004bf0 <vTaskSuspendAll+0x18>)
 8004be4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000db8 	.word	0x20000db8

08004bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <xTaskResumeAll+0x114>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <xTaskResumeAll+0x2a>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	e7fe      	b.n	8004c1c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c1e:	f001 f8f5 	bl	8005e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <xTaskResumeAll+0x114>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <xTaskResumeAll+0x114>)
 8004c2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c2c:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <xTaskResumeAll+0x114>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d162      	bne.n	8004cfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c34:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <xTaskResumeAll+0x118>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05e      	beq.n	8004cfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c3c:	e02f      	b.n	8004c9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3e:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <xTaskResumeAll+0x11c>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3318      	adds	r3, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f890 	bl	8003d70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff f88b 	bl	8003d70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <xTaskResumeAll+0x120>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d903      	bls.n	8004c6e <xTaskResumeAll+0x7a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <xTaskResumeAll+0x120>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <xTaskResumeAll+0x124>)
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7ff f816 	bl	8003cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <xTaskResumeAll+0x128>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d302      	bcc.n	8004c9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <xTaskResumeAll+0x12c>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <xTaskResumeAll+0x11c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1cb      	bne.n	8004c3e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cac:	f000 fb46 	bl	800533c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xTaskResumeAll+0x130>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cbc:	f000 f846 	bl	8004d4c <xTaskIncrementTick>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <xTaskResumeAll+0x12c>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f1      	bne.n	8004cbc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <xTaskResumeAll+0x130>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xTaskResumeAll+0x12c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <xTaskResumeAll+0x134>)
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cfa:	f001 f8b5 	bl	8005e68 <vPortExitCritical>

	return xAlreadyYielded;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000db8 	.word	0x20000db8
 8004d0c:	20000d90 	.word	0x20000d90
 8004d10:	20000d50 	.word	0x20000d50
 8004d14:	20000d98 	.word	0x20000d98
 8004d18:	200008c0 	.word	0x200008c0
 8004d1c:	200008bc 	.word	0x200008bc
 8004d20:	20000da4 	.word	0x20000da4
 8004d24:	20000da0 	.word	0x20000da0
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <xTaskGetTickCount+0x1c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d38:	687b      	ldr	r3, [r7, #4]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000d94 	.word	0x20000d94

08004d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d56:	4b4e      	ldr	r3, [pc, #312]	; (8004e90 <xTaskIncrementTick+0x144>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 8088 	bne.w	8004e70 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d60:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <xTaskIncrementTick+0x148>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <xTaskIncrementTick+0x148>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11f      	bne.n	8004db4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d74:	4b48      	ldr	r3, [pc, #288]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <xTaskIncrementTick+0x46>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	e7fe      	b.n	8004d90 <xTaskIncrementTick+0x44>
 8004d92:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3e      	ldr	r2, [pc, #248]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4a3e      	ldr	r2, [pc, #248]	; (8004e9c <xTaskIncrementTick+0x150>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <xTaskIncrementTick+0x154>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	4a3c      	ldr	r2, [pc, #240]	; (8004ea0 <xTaskIncrementTick+0x154>)
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	f000 fac4 	bl	800533c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004db4:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <xTaskIncrementTick+0x158>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d349      	bcc.n	8004e52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <xTaskIncrementTick+0x158>)
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dce:	601a      	str	r2, [r3, #0]
					break;
 8004dd0:	e03f      	b.n	8004e52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <xTaskIncrementTick+0x14c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d203      	bcs.n	8004df2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dea:	4a2e      	ldr	r2, [pc, #184]	; (8004ea4 <xTaskIncrementTick+0x158>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004df0:	e02f      	b.n	8004e52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe ffba 	bl	8003d70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3318      	adds	r3, #24
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe ffb1 	bl	8003d70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <xTaskIncrementTick+0x15c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d903      	bls.n	8004e22 <xTaskIncrementTick+0xd6>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <xTaskIncrementTick+0x15c>)
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <xTaskIncrementTick+0x160>)
 8004e30:	441a      	add	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe ff3c 	bl	8003cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <xTaskIncrementTick+0x164>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d3b8      	bcc.n	8004dbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e50:	e7b5      	b.n	8004dbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <xTaskIncrementTick+0x164>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4914      	ldr	r1, [pc, #80]	; (8004eac <xTaskIncrementTick+0x160>)
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d907      	bls.n	8004e7a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e004      	b.n	8004e7a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e70:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <xTaskIncrementTick+0x168>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <xTaskIncrementTick+0x168>)
 8004e78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <xTaskIncrementTick+0x16c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e86:	697b      	ldr	r3, [r7, #20]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000db8 	.word	0x20000db8
 8004e94:	20000d94 	.word	0x20000d94
 8004e98:	20000d48 	.word	0x20000d48
 8004e9c:	20000d4c 	.word	0x20000d4c
 8004ea0:	20000da8 	.word	0x20000da8
 8004ea4:	20000db0 	.word	0x20000db0
 8004ea8:	20000d98 	.word	0x20000d98
 8004eac:	200008c0 	.word	0x200008c0
 8004eb0:	200008bc 	.word	0x200008bc
 8004eb4:	20000da0 	.word	0x20000da0
 8004eb8:	20000da4 	.word	0x20000da4

08004ebc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ec2:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <vTaskSwitchContext+0xa4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <vTaskSwitchContext+0xa8>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ed0:	e040      	b.n	8004f54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <vTaskSwitchContext+0xa8>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed8:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <vTaskSwitchContext+0xac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e00f      	b.n	8004f00 <vTaskSwitchContext+0x44>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <vTaskSwitchContext+0x3e>
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	e7fe      	b.n	8004ef8 <vTaskSwitchContext+0x3c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	491a      	ldr	r1, [pc, #104]	; (8004f6c <vTaskSwitchContext+0xb0>)
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0e5      	beq.n	8004ee0 <vTaskSwitchContext+0x24>
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <vTaskSwitchContext+0xb0>)
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3308      	adds	r3, #8
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d104      	bne.n	8004f44 <vTaskSwitchContext+0x88>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <vTaskSwitchContext+0xb4>)
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4a06      	ldr	r2, [pc, #24]	; (8004f68 <vTaskSwitchContext+0xac>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000db8 	.word	0x20000db8
 8004f64:	20000da4 	.word	0x20000da4
 8004f68:	20000d98 	.word	0x20000d98
 8004f6c:	200008c0 	.word	0x200008c0
 8004f70:	200008bc 	.word	0x200008bc

08004f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <vTaskPlaceOnEventList+0x24>
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e7fe      	b.n	8004f96 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <vTaskPlaceOnEventList+0x44>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fe feac 	bl	8003cfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	6838      	ldr	r0, [r7, #0]
 8004faa:	f000 fa71 	bl	8005490 <prvAddCurrentTaskToDelayedList>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200008bc 	.word	0x200008bc

08004fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <vTaskPlaceOnEventListRestricted+0x26>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e7fe      	b.n	8004fe0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <vTaskPlaceOnEventListRestricted+0x50>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4619      	mov	r1, r3
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7fe fe63 	bl	8003cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ffa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	68b8      	ldr	r0, [r7, #8]
 8005000:	f000 fa46 	bl	8005490 <prvAddCurrentTaskToDelayedList>
	}
 8005004:	bf00      	nop
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200008bc 	.word	0x200008bc

08005010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <xTaskRemoveFromEventList+0x2a>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e7fe      	b.n	8005038 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3318      	adds	r3, #24
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe fe96 	bl	8003d70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <xTaskRemoveFromEventList+0xac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d11d      	bne.n	8005088 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fe8d 	bl	8003d70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <xTaskRemoveFromEventList+0xb0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d903      	bls.n	800506a <xTaskRemoveFromEventList+0x5a>
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <xTaskRemoveFromEventList+0xb0>)
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <xTaskRemoveFromEventList+0xb4>)
 8005078:	441a      	add	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7fe fe18 	bl	8003cb6 <vListInsertEnd>
 8005086:	e005      	b.n	8005094 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3318      	adds	r3, #24
 800508c:	4619      	mov	r1, r3
 800508e:	480e      	ldr	r0, [pc, #56]	; (80050c8 <xTaskRemoveFromEventList+0xb8>)
 8005090:	f7fe fe11 	bl	8003cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <xTaskRemoveFromEventList+0xbc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	429a      	cmp	r2, r3
 80050a0:	d905      	bls.n	80050ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <xTaskRemoveFromEventList+0xc0>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e001      	b.n	80050b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050b2:	697b      	ldr	r3, [r7, #20]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000db8 	.word	0x20000db8
 80050c0:	20000d98 	.word	0x20000d98
 80050c4:	200008c0 	.word	0x200008c0
 80050c8:	20000d50 	.word	0x20000d50
 80050cc:	200008bc 	.word	0x200008bc
 80050d0:	20000da4 	.word	0x20000da4

080050d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <vTaskInternalSetTimeOutState+0x24>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <vTaskInternalSetTimeOutState+0x28>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	20000da8 	.word	0x20000da8
 80050fc:	20000d94 	.word	0x20000d94

08005100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <xTaskCheckForTimeOut+0x24>
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e7fe      	b.n	8005122 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <xTaskCheckForTimeOut+0x3e>
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e7fe      	b.n	800513c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800513e:	f000 fe65 	bl	8005e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <xTaskCheckForTimeOut+0xb8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515a:	d102      	bne.n	8005162 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e023      	b.n	80051aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <xTaskCheckForTimeOut+0xbc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d007      	beq.n	800517e <xTaskCheckForTimeOut+0x7e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d302      	bcc.n	800517e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005178:	2301      	movs	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e015      	b.n	80051aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d20b      	bcs.n	80051a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff9d 	bl	80050d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e004      	b.n	80051aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051aa:	f000 fe5d 	bl	8005e68 <vPortExitCritical>

	return xReturn;
 80051ae:	69fb      	ldr	r3, [r7, #28]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000d94 	.word	0x20000d94
 80051bc:	20000da8 	.word	0x20000da8

080051c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <vTaskMissedYield+0x14>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20000da4 	.word	0x20000da4

080051d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051e0:	f000 f852 	bl	8005288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <prvIdleTask+0x28>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d9f9      	bls.n	80051e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <prvIdleTask+0x2c>)
 80051ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051fc:	e7f0      	b.n	80051e0 <prvIdleTask+0x8>
 80051fe:	bf00      	nop
 8005200:	200008c0 	.word	0x200008c0
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e00c      	b.n	800522e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <prvInitialiseTaskLists+0x60>)
 8005220:	4413      	add	r3, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fd1a 	bl	8003c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3301      	adds	r3, #1
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b37      	cmp	r3, #55	; 0x37
 8005232:	d9ef      	bls.n	8005214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005234:	480d      	ldr	r0, [pc, #52]	; (800526c <prvInitialiseTaskLists+0x64>)
 8005236:	f7fe fd11 	bl	8003c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800523a:	480d      	ldr	r0, [pc, #52]	; (8005270 <prvInitialiseTaskLists+0x68>)
 800523c:	f7fe fd0e 	bl	8003c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005240:	480c      	ldr	r0, [pc, #48]	; (8005274 <prvInitialiseTaskLists+0x6c>)
 8005242:	f7fe fd0b 	bl	8003c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005246:	480c      	ldr	r0, [pc, #48]	; (8005278 <prvInitialiseTaskLists+0x70>)
 8005248:	f7fe fd08 	bl	8003c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800524c:	480b      	ldr	r0, [pc, #44]	; (800527c <prvInitialiseTaskLists+0x74>)
 800524e:	f7fe fd05 	bl	8003c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <prvInitialiseTaskLists+0x78>)
 8005254:	4a05      	ldr	r2, [pc, #20]	; (800526c <prvInitialiseTaskLists+0x64>)
 8005256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <prvInitialiseTaskLists+0x7c>)
 800525a:	4a05      	ldr	r2, [pc, #20]	; (8005270 <prvInitialiseTaskLists+0x68>)
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200008c0 	.word	0x200008c0
 800526c:	20000d20 	.word	0x20000d20
 8005270:	20000d34 	.word	0x20000d34
 8005274:	20000d50 	.word	0x20000d50
 8005278:	20000d64 	.word	0x20000d64
 800527c:	20000d7c 	.word	0x20000d7c
 8005280:	20000d48 	.word	0x20000d48
 8005284:	20000d4c 	.word	0x20000d4c

08005288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800528e:	e019      	b.n	80052c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005290:	f000 fdbc 	bl	8005e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <prvCheckTasksWaitingTermination+0x4c>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe fd65 	bl	8003d70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvCheckTasksWaitingTermination+0x50>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <prvCheckTasksWaitingTermination+0x50>)
 80052ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <prvCheckTasksWaitingTermination+0x54>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <prvCheckTasksWaitingTermination+0x54>)
 80052b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052ba:	f000 fdd5 	bl	8005e68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f80e 	bl	80052e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <prvCheckTasksWaitingTermination+0x54>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e1      	bne.n	8005290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000d64 	.word	0x20000d64
 80052d8:	20000d90 	.word	0x20000d90
 80052dc:	20000d78 	.word	0x20000d78

080052e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ff64 	bl	80061c4 <vPortFree>
				vPortFree( pxTCB );
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 ff61 	bl	80061c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005302:	e017      	b.n	8005334 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800530a:	2b01      	cmp	r3, #1
 800530c:	d103      	bne.n	8005316 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 ff58 	bl	80061c4 <vPortFree>
	}
 8005314:	e00e      	b.n	8005334 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800531c:	2b02      	cmp	r3, #2
 800531e:	d009      	beq.n	8005334 <prvDeleteTCB+0x54>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	e7fe      	b.n	8005332 <prvDeleteTCB+0x52>
	}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <prvResetNextTaskUnblockTime+0x38>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <prvResetNextTaskUnblockTime+0x3c>)
 800534e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005354:	e008      	b.n	8005368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <prvResetNextTaskUnblockTime+0x38>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <prvResetNextTaskUnblockTime+0x3c>)
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000d48 	.word	0x20000d48
 8005378:	20000db0 	.word	0x20000db0

0800537c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <xTaskGetSchedulerState+0x34>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800538a:	2301      	movs	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	e008      	b.n	80053a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <xTaskGetSchedulerState+0x38>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005398:	2302      	movs	r3, #2
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e001      	b.n	80053a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053a2:	687b      	ldr	r3, [r7, #4]
	}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000d9c 	.word	0x20000d9c
 80053b4:	20000db8 	.word	0x20000db8

080053b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d054      	beq.n	8005478 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053ce:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <xTaskPriorityDisinherit+0xcc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d009      	beq.n	80053ec <xTaskPriorityDisinherit+0x34>
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e7fe      	b.n	80053ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <xTaskPriorityDisinherit+0x50>
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	e7fe      	b.n	8005406 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	1e5a      	subs	r2, r3, #1
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	429a      	cmp	r2, r3
 800541c:	d02c      	beq.n	8005478 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	2b00      	cmp	r3, #0
 8005424:	d128      	bne.n	8005478 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3304      	adds	r3, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fca0 	bl	8003d70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <xTaskPriorityDisinherit+0xd0>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d903      	bls.n	8005458 <xTaskPriorityDisinherit+0xa0>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <xTaskPriorityDisinherit+0xd0>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <xTaskPriorityDisinherit+0xd4>)
 8005466:	441a      	add	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fc21 	bl	8003cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005478:	697b      	ldr	r3, [r7, #20]
	}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200008bc 	.word	0x200008bc
 8005488:	20000d98 	.word	0x20000d98
 800548c:	200008c0 	.word	0x200008c0

08005490 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800549a:	4b21      	ldr	r3, [pc, #132]	; (8005520 <prvAddCurrentTaskToDelayedList+0x90>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fc62 	bl	8003d70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d10a      	bne.n	80054ca <prvAddCurrentTaskToDelayedList+0x3a>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ba:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4819      	ldr	r0, [pc, #100]	; (8005528 <prvAddCurrentTaskToDelayedList+0x98>)
 80054c4:	f7fe fbf7 	bl	8003cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054c8:	e026      	b.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d209      	bcs.n	80054f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <prvAddCurrentTaskToDelayedList+0x9c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f7fe fc05 	bl	8003cfe <vListInsert>
}
 80054f4:	e010      	b.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7fe fbfb 	bl	8003cfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	429a      	cmp	r2, r3
 8005510:	d202      	bcs.n	8005518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6013      	str	r3, [r2, #0]
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000d94 	.word	0x20000d94
 8005524:	200008bc 	.word	0x200008bc
 8005528:	20000d7c 	.word	0x20000d7c
 800552c:	20000d4c 	.word	0x20000d4c
 8005530:	20000d48 	.word	0x20000d48
 8005534:	20000db0 	.word	0x20000db0

08005538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005542:	f000 faff 	bl	8005b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005546:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <xTimerCreateTimerTask+0x80>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d021      	beq.n	8005592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005556:	1d3a      	adds	r2, r7, #4
 8005558:	f107 0108 	add.w	r1, r7, #8
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe fb61 	bl	8003c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	9202      	str	r2, [sp, #8]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	2302      	movs	r3, #2
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	460a      	mov	r2, r1
 8005578:	4910      	ldr	r1, [pc, #64]	; (80055bc <xTimerCreateTimerTask+0x84>)
 800557a:	4811      	ldr	r0, [pc, #68]	; (80055c0 <xTimerCreateTimerTask+0x88>)
 800557c:	f7ff f8f6 	bl	800476c <xTaskCreateStatic>
 8005580:	4602      	mov	r2, r0
 8005582:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <xTimerCreateTimerTask+0x8c>)
 8005584:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <xTimerCreateTimerTask+0x8c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <xTimerCreateTimerTask+0x74>
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e7fe      	b.n	80055aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000dec 	.word	0x20000dec
 80055bc:	080073ec 	.word	0x080073ec
 80055c0:	080056f9 	.word	0x080056f9
 80055c4:	20000df0 	.word	0x20000df0

080055c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <xTimerGenericCommand+0x2c>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	e7fe      	b.n	80055f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <xTimerGenericCommand+0x94>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02a      	beq.n	8005652 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b05      	cmp	r3, #5
 800560c:	dc18      	bgt.n	8005640 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800560e:	f7ff feb5 	bl	800537c <xTaskGetSchedulerState>
 8005612:	4603      	mov	r3, r0
 8005614:	2b02      	cmp	r3, #2
 8005616:	d109      	bne.n	800562c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <xTimerGenericCommand+0x94>)
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	f107 0110 	add.w	r1, r7, #16
 8005620:	2300      	movs	r3, #0
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	f7fe fccc 	bl	8003fc0 <xQueueGenericSend>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24
 800562a:	e012      	b.n	8005652 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <xTimerGenericCommand+0x94>)
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	f107 0110 	add.w	r1, r7, #16
 8005634:	2300      	movs	r3, #0
 8005636:	2200      	movs	r2, #0
 8005638:	f7fe fcc2 	bl	8003fc0 <xQueueGenericSend>
 800563c:	6278      	str	r0, [r7, #36]	; 0x24
 800563e:	e008      	b.n	8005652 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <xTimerGenericCommand+0x94>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	f107 0110 	add.w	r1, r7, #16
 8005648:	2300      	movs	r3, #0
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	f7fe fdb2 	bl	80041b4 <xQueueGenericSendFromISR>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000dec 	.word	0x20000dec

08005660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <prvProcessExpiredTimer+0x94>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fb79 	bl	8003d70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d021      	beq.n	80056d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	18d1      	adds	r1, r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f000 f8d1 	bl	8005840 <prvInsertTimerInActiveList>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01e      	beq.n	80056e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	2100      	movs	r1, #0
 80056ae:	6978      	ldr	r0, [r7, #20]
 80056b0:	f7ff ff8a 	bl	80055c8 <xTimerGenericCommand>
 80056b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d112      	bne.n	80056e2 <prvProcessExpiredTimer+0x82>
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e7fe      	b.n	80056ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	4798      	blx	r3
}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000de4 	.word	0x20000de4

080056f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f857 	bl	80057b8 <prvGetNextExpireTime>
 800570a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4619      	mov	r1, r3
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f803 	bl	800571c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005716:	f000 f8d5 	bl	80058c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800571a:	e7f1      	b.n	8005700 <prvTimerTask+0x8>

0800571c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005726:	f7ff fa57 	bl	8004bd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f866 	bl	8005800 <prvSampleTimeNow>
 8005734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d130      	bne.n	800579e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <prvProcessTimerOrBlockTask+0x3c>
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	429a      	cmp	r2, r3
 8005748:	d806      	bhi.n	8005758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800574a:	f7ff fa53 	bl	8004bf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff85 	bl	8005660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005756:	e024      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800575e:	4b13      	ldr	r3, [pc, #76]	; (80057ac <prvProcessTimerOrBlockTask+0x90>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <prvProcessTimerOrBlockTask+0x50>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <prvProcessTimerOrBlockTask+0x52>
 800576c:	2300      	movs	r3, #0
 800576e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <prvProcessTimerOrBlockTask+0x94>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	f7fe ffc1 	bl	8004704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005782:	f7ff fa37 	bl	8004bf4 <xTaskResumeAll>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvProcessTimerOrBlockTask+0x98>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
}
 800579c:	e001      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800579e:	f7ff fa29 	bl	8004bf4 <xTaskResumeAll>
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000de8 	.word	0x20000de8
 80057b0:	20000dec 	.word	0x20000dec
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <prvGetNextExpireTime+0x44>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <prvGetNextExpireTime+0x16>
 80057ca:	2201      	movs	r2, #1
 80057cc:	e000      	b.n	80057d0 <prvGetNextExpireTime+0x18>
 80057ce:	2200      	movs	r2, #0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <prvGetNextExpireTime+0x44>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e001      	b.n	80057ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000de4 	.word	0x20000de4

08005800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005808:	f7ff fa90 	bl	8004d2c <xTaskGetTickCount>
 800580c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <prvSampleTimeNow+0x3c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d205      	bcs.n	8005824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005818:	f000 f930 	bl	8005a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e002      	b.n	800582a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800582a:	4a04      	ldr	r2, [pc, #16]	; (800583c <prvSampleTimeNow+0x3c>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005830:	68fb      	ldr	r3, [r7, #12]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000df4 	.word	0x20000df4

08005840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d812      	bhi.n	800588c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e01b      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <prvInsertTimerInActiveList+0x7c>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7fe fa3a 	bl	8003cfe <vListInsert>
 800588a:	e012      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d206      	bcs.n	80058a2 <prvInsertTimerInActiveList+0x62>
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e007      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <prvInsertTimerInActiveList+0x80>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe fa26 	bl	8003cfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058b2:	697b      	ldr	r3, [r7, #20]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000de8 	.word	0x20000de8
 80058c0:	20000de4 	.word	0x20000de4

080058c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ca:	e0c6      	b.n	8005a5a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da17      	bge.n	8005902 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	3304      	adds	r3, #4
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <prvProcessReceivedCommands+0x2e>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e7fe      	b.n	80058f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	6850      	ldr	r0, [r2, #4]
 80058fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fc:	6892      	ldr	r2, [r2, #8]
 80058fe:	4611      	mov	r1, r2
 8005900:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f2c0 80a7 	blt.w	8005a58 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fa28 	bl	8003d70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005920:	463b      	mov	r3, r7
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff6c 	bl	8005800 <prvSampleTimeNow>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b09      	cmp	r3, #9
 800592e:	f200 8094 	bhi.w	8005a5a <prvProcessReceivedCommands+0x196>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <prvProcessReceivedCommands+0x74>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005961 	.word	0x08005961
 800593c:	08005961 	.word	0x08005961
 8005940:	08005961 	.word	0x08005961
 8005944:	080059d3 	.word	0x080059d3
 8005948:	080059e7 	.word	0x080059e7
 800594c:	08005a2f 	.word	0x08005a2f
 8005950:	08005961 	.word	0x08005961
 8005954:	08005961 	.word	0x08005961
 8005958:	080059d3 	.word	0x080059d3
 800595c:	080059e7 	.word	0x080059e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	18d1      	adds	r1, r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005980:	f7ff ff5e 	bl	8005840 <prvInsertTimerInActiveList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d067      	beq.n	8005a5a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d05c      	beq.n	8005a5a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	441a      	add	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b2:	f7ff fe09 	bl	80055c8 <xTimerGenericCommand>
 80059b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d14d      	bne.n	8005a5a <prvProcessReceivedCommands+0x196>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e7fe      	b.n	80059d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059e4:	e039      	b.n	8005a5a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <prvProcessReceivedCommands+0x156>
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e7fe      	b.n	8005a18 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	18d1      	adds	r1, r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a28:	f7ff ff0a 	bl	8005840 <prvInsertTimerInActiveList>
					break;
 8005a2c:	e015      	b.n	8005a5a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3e:	f000 fbc1 	bl	80061c4 <vPortFree>
 8005a42:	e00a      	b.n	8005a5a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a56:	e000      	b.n	8005a5a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <prvProcessReceivedCommands+0x1b4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1d39      	adds	r1, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fc3a 	bl	80042dc <xQueueReceive>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f47f af2e 	bne.w	80058cc <prvProcessReceivedCommands+0x8>
	}
}
 8005a70:	bf00      	nop
 8005a72:	3730      	adds	r7, #48	; 0x30
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000dec 	.word	0x20000dec

08005a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a82:	e047      	b.n	8005b14 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe f967 	bl	8003d70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02d      	beq.n	8005b14 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4413      	add	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d90e      	bls.n	8005ae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe f90c 	bl	8003cfe <vListInsert>
 8005ae6:	e015      	b.n	8005b14 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	2100      	movs	r1, #0
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff fd68 	bl	80055c8 <xTimerGenericCommand>
 8005af8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <prvSwitchTimerLists+0x98>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	e7fe      	b.n	8005b12 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1b2      	bne.n	8005a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvSwitchTimerLists+0xc4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <prvSwitchTimerLists+0xc0>)
 8005b2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <prvSwitchTimerLists+0xc4>)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	6013      	str	r3, [r2, #0]
}
 8005b32:	bf00      	nop
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000de4 	.word	0x20000de4
 8005b40:	20000de8 	.word	0x20000de8

08005b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b4a:	f000 f95f 	bl	8005e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <prvCheckForValidListAndQueue+0x60>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d120      	bne.n	8005b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b56:	4814      	ldr	r0, [pc, #80]	; (8005ba8 <prvCheckForValidListAndQueue+0x64>)
 8005b58:	f7fe f880 	bl	8003c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b5c:	4813      	ldr	r0, [pc, #76]	; (8005bac <prvCheckForValidListAndQueue+0x68>)
 8005b5e:	f7fe f87d 	bl	8003c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <prvCheckForValidListAndQueue+0x6c>)
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <prvCheckForValidListAndQueue+0x64>)
 8005b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <prvCheckForValidListAndQueue+0x70>)
 8005b6a:	4a10      	ldr	r2, [pc, #64]	; (8005bac <prvCheckForValidListAndQueue+0x68>)
 8005b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <prvCheckForValidListAndQueue+0x74>)
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <prvCheckForValidListAndQueue+0x78>)
 8005b76:	2110      	movs	r1, #16
 8005b78:	200a      	movs	r0, #10
 8005b7a:	f7fe f98b 	bl	8003e94 <xQueueGenericCreateStatic>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <prvCheckForValidListAndQueue+0x60>)
 8005b82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <prvCheckForValidListAndQueue+0x60>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <prvCheckForValidListAndQueue+0x60>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	490b      	ldr	r1, [pc, #44]	; (8005bc0 <prvCheckForValidListAndQueue+0x7c>)
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fd8e 	bl	80046b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b98:	f000 f966 	bl	8005e68 <vPortExitCritical>
}
 8005b9c:	bf00      	nop
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000dec 	.word	0x20000dec
 8005ba8:	20000dbc 	.word	0x20000dbc
 8005bac:	20000dd0 	.word	0x20000dd0
 8005bb0:	20000de4 	.word	0x20000de4
 8005bb4:	20000de8 	.word	0x20000de8
 8005bb8:	20000e98 	.word	0x20000e98
 8005bbc:	20000df8 	.word	0x20000df8
 8005bc0:	080073f4 	.word	0x080073f4

08005bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f023 0201 	bic.w	r2, r3, #1
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3b04      	subs	r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <pxPortInitialiseStack+0x64>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3b14      	subs	r3, #20
 8005bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b04      	subs	r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f06f 0202 	mvn.w	r2, #2
 8005c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3b20      	subs	r3, #32
 8005c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	08005c2d 	.word	0x08005c2d

08005c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <prvTaskExitError+0x50>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3e:	d009      	beq.n	8005c54 <prvTaskExitError+0x28>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e7fe      	b.n	8005c52 <prvTaskExitError+0x26>
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c66:	bf00      	nop
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0fc      	beq.n	8005c68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <pxCurrentTCBConst2>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8a:	f380 8809 	msr	PSP, r0
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	4770      	bx	lr
 8005c9c:	f3af 8000 	nop.w

08005ca0 <pxCurrentTCBConst2>:
 8005ca0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <prvPortStartFirstTask+0x24>)
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	6800      	ldr	r0, [r0, #0]
 8005cae:	f380 8808 	msr	MSP, r0
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8814 	msr	CONTROL, r0
 8005cba:	b662      	cpsie	i
 8005cbc:	b661      	cpsie	f
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	df00      	svc	0
 8005cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cca:	bf00      	nop
 8005ccc:	e000ed08 	.word	0xe000ed08

08005cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cd6:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <xPortStartScheduler+0x118>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a44      	ldr	r2, [pc, #272]	; (8005dec <xPortStartScheduler+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d109      	bne.n	8005cf4 <xPortStartScheduler+0x24>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e7fe      	b.n	8005cf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cf4:	4b3c      	ldr	r3, [pc, #240]	; (8005de8 <xPortStartScheduler+0x118>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3d      	ldr	r2, [pc, #244]	; (8005df0 <xPortStartScheduler+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d109      	bne.n	8005d12 <xPortStartScheduler+0x42>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e7fe      	b.n	8005d10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d12:	4b38      	ldr	r3, [pc, #224]	; (8005df4 <xPortStartScheduler+0x124>)
 8005d14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <xPortStartScheduler+0x128>)
 8005d38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d40:	e009      	b.n	8005d56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d0ef      	beq.n	8005d42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d62:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f1c3 0307 	rsb	r3, r3, #7
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d009      	beq.n	8005d82 <xPortStartScheduler+0xb2>
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	e7fe      	b.n	8005d80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <xPortStartScheduler+0x12c>)
 8005d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xPortStartScheduler+0x130>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <xPortStartScheduler+0x130>)
 8005da6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dac:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <xPortStartScheduler+0x130>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <xPortStartScheduler+0x130>)
 8005db2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005db8:	f000 f8d6 	bl	8005f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xPortStartScheduler+0x134>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dc2:	f000 f8f5 	bl	8005fb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <xPortStartScheduler+0x138>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <xPortStartScheduler+0x138>)
 8005dcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005dd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dd2:	f7ff ff69 	bl	8005ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dd6:	f7ff f871 	bl	8004ebc <vTaskSwitchContext>
	prvTaskExitError();
 8005dda:	f7ff ff27 	bl	8005c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed00 	.word	0xe000ed00
 8005dec:	410fc271 	.word	0x410fc271
 8005df0:	410fc270 	.word	0x410fc270
 8005df4:	e000e400 	.word	0xe000e400
 8005df8:	20000ee8 	.word	0x20000ee8
 8005dfc:	20000eec 	.word	0x20000eec
 8005e00:	e000ed20 	.word	0xe000ed20
 8005e04:	2000000c 	.word	0x2000000c
 8005e08:	e000ef34 	.word	0xe000ef34

08005e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <vPortEnterCritical+0x54>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10e      	bne.n	8005e54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <vPortEnterCritical+0x48>
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	e7fe      	b.n	8005e52 <vPortEnterCritical+0x46>
	}
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000000c 	.word	0x2000000c
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <vPortExitCritical+0x22>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e7fe      	b.n	8005e88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <vPortExitCritical+0x4c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <vPortExitCritical+0x3e>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	2000000c 	.word	0x2000000c
	...

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ee4:	f380 8811 	msr	BASEPRI, r0
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f7fe ffe4 	bl	8004ebc <vTaskSwitchContext>
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f380 8811 	msr	BASEPRI, r0
 8005efc:	bc09      	pop	{r0, r3}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	f01e 0f10 	tst.w	lr, #16
 8005f0a:	bf08      	it	eq
 8005f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f10:	f380 8809 	msr	PSP, r0
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst>:
 8005f20:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f40:	f7fe ff04 	bl	8004d4c <xTaskIncrementTick>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <SysTick_Handler+0x3c>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <vPortSetupTimerInterrupt+0x34>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vPortSetupTimerInterrupt+0x38>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortSetupTimerInterrupt+0x3c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <vPortSetupTimerInterrupt+0x40>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	4a09      	ldr	r2, [pc, #36]	; (8005fac <vPortSetupTimerInterrupt+0x44>)
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <vPortSetupTimerInterrupt+0x34>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000e010 	.word	0xe000e010
 8005fa0:	e000e018 	.word	0xe000e018
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	10624dd3 	.word	0x10624dd3
 8005fac:	e000e014 	.word	0xe000e014

08005fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fc0 <vPortEnableVFP+0x10>
 8005fb4:	6801      	ldr	r1, [r0, #0]
 8005fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fba:	6001      	str	r1, [r0, #0]
 8005fbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed88 	.word	0xe000ed88

08005fc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fca:	f3ef 8305 	mrs	r3, IPSR
 8005fce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b0f      	cmp	r3, #15
 8005fd4:	d913      	bls.n	8005ffe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fd6:	4a16      	ldr	r2, [pc, #88]	; (8006030 <vPortValidateInterruptPriority+0x6c>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fe0:	4b14      	ldr	r3, [pc, #80]	; (8006034 <vPortValidateInterruptPriority+0x70>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	7afa      	ldrb	r2, [r7, #11]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d209      	bcs.n	8005ffe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	e7fe      	b.n	8005ffc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <vPortValidateInterruptPriority+0x74>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006006:	4b0d      	ldr	r3, [pc, #52]	; (800603c <vPortValidateInterruptPriority+0x78>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d909      	bls.n	8006022 <vPortValidateInterruptPriority+0x5e>
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	e7fe      	b.n	8006020 <vPortValidateInterruptPriority+0x5c>
	}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e3f0 	.word	0xe000e3f0
 8006034:	20000ee8 	.word	0x20000ee8
 8006038:	e000ed0c 	.word	0xe000ed0c
 800603c:	20000eec 	.word	0x20000eec

08006040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800604c:	f7fe fdc4 	bl	8004bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006050:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <pvPortMalloc+0x170>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006058:	f000 f90c 	bl	8006274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800605c:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <pvPortMalloc+0x174>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 808c 	bne.w	8006182 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01c      	beq.n	80060aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006070:	2208      	movs	r2, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b00      	cmp	r3, #0
 8006080:	d013      	beq.n	80060aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f023 0307 	bic.w	r3, r3, #7
 8006088:	3308      	adds	r3, #8
 800608a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <pvPortMalloc+0x6a>
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e7fe      	b.n	80060a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d068      	beq.n	8006182 <pvPortMalloc+0x142>
 80060b0:	4b41      	ldr	r3, [pc, #260]	; (80061b8 <pvPortMalloc+0x178>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d863      	bhi.n	8006182 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060ba:	4b40      	ldr	r3, [pc, #256]	; (80061bc <pvPortMalloc+0x17c>)
 80060bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060be:	4b3f      	ldr	r3, [pc, #252]	; (80061bc <pvPortMalloc+0x17c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c4:	e004      	b.n	80060d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <pvPortMalloc+0xa2>
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f1      	bne.n	80060c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060e2:	4b33      	ldr	r3, [pc, #204]	; (80061b0 <pvPortMalloc+0x170>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d04a      	beq.n	8006182 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	4413      	add	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	2308      	movs	r3, #8
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	429a      	cmp	r2, r3
 800610c:	d91e      	bls.n	800614c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <pvPortMalloc+0xf4>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	e7fe      	b.n	8006132 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006146:	69b8      	ldr	r0, [r7, #24]
 8006148:	f000 f8f6 	bl	8006338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800614c:	4b1a      	ldr	r3, [pc, #104]	; (80061b8 <pvPortMalloc+0x178>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <pvPortMalloc+0x178>)
 8006158:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <pvPortMalloc+0x178>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <pvPortMalloc+0x180>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d203      	bcs.n	800616e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <pvPortMalloc+0x178>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <pvPortMalloc+0x180>)
 800616c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <pvPortMalloc+0x174>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	431a      	orrs	r2, r3
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006182:	f7fe fd37 	bl	8004bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <pvPortMalloc+0x164>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e7fe      	b.n	80061a2 <pvPortMalloc+0x162>
	return pvReturn;
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3728      	adds	r7, #40	; 0x28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20001ab0 	.word	0x20001ab0
 80061b4:	20001abc 	.word	0x20001abc
 80061b8:	20001ab4 	.word	0x20001ab4
 80061bc:	20001aa8 	.word	0x20001aa8
 80061c0:	20001ab8 	.word	0x20001ab8

080061c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d046      	beq.n	8006264 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061d6:	2308      	movs	r3, #8
 80061d8:	425b      	negs	r3, r3
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <vPortFree+0xa8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <vPortFree+0x42>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e7fe      	b.n	8006204 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <vPortFree+0x5e>
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	e7fe      	b.n	8006220 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	4b11      	ldr	r3, [pc, #68]	; (800626c <vPortFree+0xa8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4013      	ands	r3, r2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d019      	beq.n	8006264 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d115      	bne.n	8006264 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <vPortFree+0xa8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006248:	f7fe fcc6 	bl	8004bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <vPortFree+0xac>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4413      	add	r3, r2
 8006256:	4a06      	ldr	r2, [pc, #24]	; (8006270 <vPortFree+0xac>)
 8006258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800625a:	6938      	ldr	r0, [r7, #16]
 800625c:	f000 f86c 	bl	8006338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006260:	f7fe fcc8 	bl	8004bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006264:	bf00      	nop
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20001abc 	.word	0x20001abc
 8006270:	20001ab4 	.word	0x20001ab4

08006274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800627a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800627e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006280:	4b27      	ldr	r3, [pc, #156]	; (8006320 <prvHeapInit+0xac>)
 8006282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3307      	adds	r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0307 	bic.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <prvHeapInit+0xac>)
 80062a4:	4413      	add	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062ac:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <prvHeapInit+0xb0>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <prvHeapInit+0xb0>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062c0:	2208      	movs	r2, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0307 	bic.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <prvHeapInit+0xb4>)
 80062d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <prvHeapInit+0xb4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <prvHeapInit+0xb4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <prvHeapInit+0xb4>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a0a      	ldr	r2, [pc, #40]	; (800632c <prvHeapInit+0xb8>)
 8006302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a09      	ldr	r2, [pc, #36]	; (8006330 <prvHeapInit+0xbc>)
 800630a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <prvHeapInit+0xc0>)
 800630e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006312:	601a      	str	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000ef0 	.word	0x20000ef0
 8006324:	20001aa8 	.word	0x20001aa8
 8006328:	20001ab0 	.word	0x20001ab0
 800632c:	20001ab8 	.word	0x20001ab8
 8006330:	20001ab4 	.word	0x20001ab4
 8006334:	20001abc 	.word	0x20001abc

08006338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006340:	4b28      	ldr	r3, [pc, #160]	; (80063e4 <prvInsertBlockIntoFreeList+0xac>)
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	e002      	b.n	800634c <prvInsertBlockIntoFreeList+0x14>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d8f7      	bhi.n	8006346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d108      	bne.n	800637a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	441a      	add	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	441a      	add	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d118      	bne.n	80063c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d00d      	beq.n	80063b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e008      	b.n	80063c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <prvInsertBlockIntoFreeList+0xb0>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e003      	b.n	80063c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d002      	beq.n	80063d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20001aa8 	.word	0x20001aa8
 80063e8:	20001ab0 	.word	0x20001ab0

080063ec <atoi>:
 80063ec:	220a      	movs	r2, #10
 80063ee:	2100      	movs	r1, #0
 80063f0:	f000 b8d2 	b.w	8006598 <strtol>

080063f4 <__errno>:
 80063f4:	4b01      	ldr	r3, [pc, #4]	; (80063fc <__errno+0x8>)
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000010 	.word	0x20000010

08006400 <__libc_init_array>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	4e0d      	ldr	r6, [pc, #52]	; (8006438 <__libc_init_array+0x38>)
 8006404:	4c0d      	ldr	r4, [pc, #52]	; (800643c <__libc_init_array+0x3c>)
 8006406:	1ba4      	subs	r4, r4, r6
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	2500      	movs	r5, #0
 800640c:	42a5      	cmp	r5, r4
 800640e:	d109      	bne.n	8006424 <__libc_init_array+0x24>
 8006410:	4e0b      	ldr	r6, [pc, #44]	; (8006440 <__libc_init_array+0x40>)
 8006412:	4c0c      	ldr	r4, [pc, #48]	; (8006444 <__libc_init_array+0x44>)
 8006414:	f000 ffc6 	bl	80073a4 <_init>
 8006418:	1ba4      	subs	r4, r4, r6
 800641a:	10a4      	asrs	r4, r4, #2
 800641c:	2500      	movs	r5, #0
 800641e:	42a5      	cmp	r5, r4
 8006420:	d105      	bne.n	800642e <__libc_init_array+0x2e>
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006428:	4798      	blx	r3
 800642a:	3501      	adds	r5, #1
 800642c:	e7ee      	b.n	800640c <__libc_init_array+0xc>
 800642e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006432:	4798      	blx	r3
 8006434:	3501      	adds	r5, #1
 8006436:	e7f2      	b.n	800641e <__libc_init_array+0x1e>
 8006438:	0800765c 	.word	0x0800765c
 800643c:	0800765c 	.word	0x0800765c
 8006440:	0800765c 	.word	0x0800765c
 8006444:	08007660 	.word	0x08007660

08006448 <memcpy>:
 8006448:	b510      	push	{r4, lr}
 800644a:	1e43      	subs	r3, r0, #1
 800644c:	440a      	add	r2, r1
 800644e:	4291      	cmp	r1, r2
 8006450:	d100      	bne.n	8006454 <memcpy+0xc>
 8006452:	bd10      	pop	{r4, pc}
 8006454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645c:	e7f7      	b.n	800644e <memcpy+0x6>

0800645e <memset>:
 800645e:	4402      	add	r2, r0
 8006460:	4603      	mov	r3, r0
 8006462:	4293      	cmp	r3, r2
 8006464:	d100      	bne.n	8006468 <memset+0xa>
 8006466:	4770      	bx	lr
 8006468:	f803 1b01 	strb.w	r1, [r3], #1
 800646c:	e7f9      	b.n	8006462 <memset+0x4>
	...

08006470 <iprintf>:
 8006470:	b40f      	push	{r0, r1, r2, r3}
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <iprintf+0x2c>)
 8006474:	b513      	push	{r0, r1, r4, lr}
 8006476:	681c      	ldr	r4, [r3, #0]
 8006478:	b124      	cbz	r4, 8006484 <iprintf+0x14>
 800647a:	69a3      	ldr	r3, [r4, #24]
 800647c:	b913      	cbnz	r3, 8006484 <iprintf+0x14>
 800647e:	4620      	mov	r0, r4
 8006480:	f000 f8e0 	bl	8006644 <__sinit>
 8006484:	ab05      	add	r3, sp, #20
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	68a1      	ldr	r1, [r4, #8]
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	4620      	mov	r0, r4
 800648e:	f000 f9fd 	bl	800688c <_vfiprintf_r>
 8006492:	b002      	add	sp, #8
 8006494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006498:	b004      	add	sp, #16
 800649a:	4770      	bx	lr
 800649c:	20000010 	.word	0x20000010

080064a0 <_strtol_l.isra.0>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	4680      	mov	r8, r0
 80064a6:	4689      	mov	r9, r1
 80064a8:	4692      	mov	sl, r2
 80064aa:	461e      	mov	r6, r3
 80064ac:	460f      	mov	r7, r1
 80064ae:	463d      	mov	r5, r7
 80064b0:	9808      	ldr	r0, [sp, #32]
 80064b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064b6:	f000 f94f 	bl	8006758 <__locale_ctype_ptr_l>
 80064ba:	4420      	add	r0, r4
 80064bc:	7843      	ldrb	r3, [r0, #1]
 80064be:	f013 0308 	ands.w	r3, r3, #8
 80064c2:	d132      	bne.n	800652a <_strtol_l.isra.0+0x8a>
 80064c4:	2c2d      	cmp	r4, #45	; 0x2d
 80064c6:	d132      	bne.n	800652e <_strtol_l.isra.0+0x8e>
 80064c8:	787c      	ldrb	r4, [r7, #1]
 80064ca:	1cbd      	adds	r5, r7, #2
 80064cc:	2201      	movs	r2, #1
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d05d      	beq.n	800658e <_strtol_l.isra.0+0xee>
 80064d2:	2e10      	cmp	r6, #16
 80064d4:	d109      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 80064d6:	2c30      	cmp	r4, #48	; 0x30
 80064d8:	d107      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 80064da:	782b      	ldrb	r3, [r5, #0]
 80064dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064e0:	2b58      	cmp	r3, #88	; 0x58
 80064e2:	d14f      	bne.n	8006584 <_strtol_l.isra.0+0xe4>
 80064e4:	786c      	ldrb	r4, [r5, #1]
 80064e6:	2610      	movs	r6, #16
 80064e8:	3502      	adds	r5, #2
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	bf14      	ite	ne
 80064ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80064f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80064f6:	2700      	movs	r7, #0
 80064f8:	fbb1 fcf6 	udiv	ip, r1, r6
 80064fc:	4638      	mov	r0, r7
 80064fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006502:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006506:	2b09      	cmp	r3, #9
 8006508:	d817      	bhi.n	800653a <_strtol_l.isra.0+0x9a>
 800650a:	461c      	mov	r4, r3
 800650c:	42a6      	cmp	r6, r4
 800650e:	dd23      	ble.n	8006558 <_strtol_l.isra.0+0xb8>
 8006510:	1c7b      	adds	r3, r7, #1
 8006512:	d007      	beq.n	8006524 <_strtol_l.isra.0+0x84>
 8006514:	4584      	cmp	ip, r0
 8006516:	d31c      	bcc.n	8006552 <_strtol_l.isra.0+0xb2>
 8006518:	d101      	bne.n	800651e <_strtol_l.isra.0+0x7e>
 800651a:	45a6      	cmp	lr, r4
 800651c:	db19      	blt.n	8006552 <_strtol_l.isra.0+0xb2>
 800651e:	fb00 4006 	mla	r0, r0, r6, r4
 8006522:	2701      	movs	r7, #1
 8006524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006528:	e7eb      	b.n	8006502 <_strtol_l.isra.0+0x62>
 800652a:	462f      	mov	r7, r5
 800652c:	e7bf      	b.n	80064ae <_strtol_l.isra.0+0xe>
 800652e:	2c2b      	cmp	r4, #43	; 0x2b
 8006530:	bf04      	itt	eq
 8006532:	1cbd      	addeq	r5, r7, #2
 8006534:	787c      	ldrbeq	r4, [r7, #1]
 8006536:	461a      	mov	r2, r3
 8006538:	e7c9      	b.n	80064ce <_strtol_l.isra.0+0x2e>
 800653a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800653e:	2b19      	cmp	r3, #25
 8006540:	d801      	bhi.n	8006546 <_strtol_l.isra.0+0xa6>
 8006542:	3c37      	subs	r4, #55	; 0x37
 8006544:	e7e2      	b.n	800650c <_strtol_l.isra.0+0x6c>
 8006546:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800654a:	2b19      	cmp	r3, #25
 800654c:	d804      	bhi.n	8006558 <_strtol_l.isra.0+0xb8>
 800654e:	3c57      	subs	r4, #87	; 0x57
 8006550:	e7dc      	b.n	800650c <_strtol_l.isra.0+0x6c>
 8006552:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006556:	e7e5      	b.n	8006524 <_strtol_l.isra.0+0x84>
 8006558:	1c7b      	adds	r3, r7, #1
 800655a:	d108      	bne.n	800656e <_strtol_l.isra.0+0xce>
 800655c:	2322      	movs	r3, #34	; 0x22
 800655e:	f8c8 3000 	str.w	r3, [r8]
 8006562:	4608      	mov	r0, r1
 8006564:	f1ba 0f00 	cmp.w	sl, #0
 8006568:	d107      	bne.n	800657a <_strtol_l.isra.0+0xda>
 800656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656e:	b102      	cbz	r2, 8006572 <_strtol_l.isra.0+0xd2>
 8006570:	4240      	negs	r0, r0
 8006572:	f1ba 0f00 	cmp.w	sl, #0
 8006576:	d0f8      	beq.n	800656a <_strtol_l.isra.0+0xca>
 8006578:	b10f      	cbz	r7, 800657e <_strtol_l.isra.0+0xde>
 800657a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800657e:	f8ca 9000 	str.w	r9, [sl]
 8006582:	e7f2      	b.n	800656a <_strtol_l.isra.0+0xca>
 8006584:	2430      	movs	r4, #48	; 0x30
 8006586:	2e00      	cmp	r6, #0
 8006588:	d1af      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 800658a:	2608      	movs	r6, #8
 800658c:	e7ad      	b.n	80064ea <_strtol_l.isra.0+0x4a>
 800658e:	2c30      	cmp	r4, #48	; 0x30
 8006590:	d0a3      	beq.n	80064da <_strtol_l.isra.0+0x3a>
 8006592:	260a      	movs	r6, #10
 8006594:	e7a9      	b.n	80064ea <_strtol_l.isra.0+0x4a>
	...

08006598 <strtol>:
 8006598:	4b08      	ldr	r3, [pc, #32]	; (80065bc <strtol+0x24>)
 800659a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659c:	681c      	ldr	r4, [r3, #0]
 800659e:	4d08      	ldr	r5, [pc, #32]	; (80065c0 <strtol+0x28>)
 80065a0:	6a23      	ldr	r3, [r4, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf08      	it	eq
 80065a6:	462b      	moveq	r3, r5
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	460a      	mov	r2, r1
 80065ae:	4601      	mov	r1, r0
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7ff ff75 	bl	80064a0 <_strtol_l.isra.0>
 80065b6:	b003      	add	sp, #12
 80065b8:	bd30      	pop	{r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20000010 	.word	0x20000010
 80065c0:	20000074 	.word	0x20000074

080065c4 <std>:
 80065c4:	2300      	movs	r3, #0
 80065c6:	b510      	push	{r4, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	e9c0 3300 	strd	r3, r3, [r0]
 80065ce:	6083      	str	r3, [r0, #8]
 80065d0:	8181      	strh	r1, [r0, #12]
 80065d2:	6643      	str	r3, [r0, #100]	; 0x64
 80065d4:	81c2      	strh	r2, [r0, #14]
 80065d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065da:	6183      	str	r3, [r0, #24]
 80065dc:	4619      	mov	r1, r3
 80065de:	2208      	movs	r2, #8
 80065e0:	305c      	adds	r0, #92	; 0x5c
 80065e2:	f7ff ff3c 	bl	800645e <memset>
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x38>)
 80065e8:	6263      	str	r3, [r4, #36]	; 0x24
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <std+0x3c>)
 80065ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x40>)
 80065f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <std+0x44>)
 80065f4:	6224      	str	r4, [r4, #32]
 80065f6:	6323      	str	r3, [r4, #48]	; 0x30
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	bf00      	nop
 80065fc:	08006de9 	.word	0x08006de9
 8006600:	08006e0b 	.word	0x08006e0b
 8006604:	08006e43 	.word	0x08006e43
 8006608:	08006e67 	.word	0x08006e67

0800660c <_cleanup_r>:
 800660c:	4901      	ldr	r1, [pc, #4]	; (8006614 <_cleanup_r+0x8>)
 800660e:	f000 b885 	b.w	800671c <_fwalk_reent>
 8006612:	bf00      	nop
 8006614:	0800715d 	.word	0x0800715d

08006618 <__sfmoreglue>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	1e4a      	subs	r2, r1, #1
 800661c:	2568      	movs	r5, #104	; 0x68
 800661e:	4355      	muls	r5, r2
 8006620:	460e      	mov	r6, r1
 8006622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006626:	f000 f8ad 	bl	8006784 <_malloc_r>
 800662a:	4604      	mov	r4, r0
 800662c:	b140      	cbz	r0, 8006640 <__sfmoreglue+0x28>
 800662e:	2100      	movs	r1, #0
 8006630:	e9c0 1600 	strd	r1, r6, [r0]
 8006634:	300c      	adds	r0, #12
 8006636:	60a0      	str	r0, [r4, #8]
 8006638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800663c:	f7ff ff0f 	bl	800645e <memset>
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}

08006644 <__sinit>:
 8006644:	6983      	ldr	r3, [r0, #24]
 8006646:	b510      	push	{r4, lr}
 8006648:	4604      	mov	r4, r0
 800664a:	bb33      	cbnz	r3, 800669a <__sinit+0x56>
 800664c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006650:	6503      	str	r3, [r0, #80]	; 0x50
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <__sinit+0x58>)
 8006654:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <__sinit+0x5c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6282      	str	r2, [r0, #40]	; 0x28
 800665a:	4298      	cmp	r0, r3
 800665c:	bf04      	itt	eq
 800665e:	2301      	moveq	r3, #1
 8006660:	6183      	streq	r3, [r0, #24]
 8006662:	f000 f81f 	bl	80066a4 <__sfp>
 8006666:	6060      	str	r0, [r4, #4]
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f81b 	bl	80066a4 <__sfp>
 800666e:	60a0      	str	r0, [r4, #8]
 8006670:	4620      	mov	r0, r4
 8006672:	f000 f817 	bl	80066a4 <__sfp>
 8006676:	2200      	movs	r2, #0
 8006678:	60e0      	str	r0, [r4, #12]
 800667a:	2104      	movs	r1, #4
 800667c:	6860      	ldr	r0, [r4, #4]
 800667e:	f7ff ffa1 	bl	80065c4 <std>
 8006682:	2201      	movs	r2, #1
 8006684:	2109      	movs	r1, #9
 8006686:	68a0      	ldr	r0, [r4, #8]
 8006688:	f7ff ff9c 	bl	80065c4 <std>
 800668c:	2202      	movs	r2, #2
 800668e:	2112      	movs	r1, #18
 8006690:	68e0      	ldr	r0, [r4, #12]
 8006692:	f7ff ff97 	bl	80065c4 <std>
 8006696:	2301      	movs	r3, #1
 8006698:	61a3      	str	r3, [r4, #24]
 800669a:	bd10      	pop	{r4, pc}
 800669c:	080074b0 	.word	0x080074b0
 80066a0:	0800660d 	.word	0x0800660d

080066a4 <__sfp>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <__sfp+0x70>)
 80066a8:	681e      	ldr	r6, [r3, #0]
 80066aa:	69b3      	ldr	r3, [r6, #24]
 80066ac:	4607      	mov	r7, r0
 80066ae:	b913      	cbnz	r3, 80066b6 <__sfp+0x12>
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff ffc7 	bl	8006644 <__sinit>
 80066b6:	3648      	adds	r6, #72	; 0x48
 80066b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	d503      	bpl.n	80066c8 <__sfp+0x24>
 80066c0:	6833      	ldr	r3, [r6, #0]
 80066c2:	b133      	cbz	r3, 80066d2 <__sfp+0x2e>
 80066c4:	6836      	ldr	r6, [r6, #0]
 80066c6:	e7f7      	b.n	80066b8 <__sfp+0x14>
 80066c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066cc:	b16d      	cbz	r5, 80066ea <__sfp+0x46>
 80066ce:	3468      	adds	r4, #104	; 0x68
 80066d0:	e7f4      	b.n	80066bc <__sfp+0x18>
 80066d2:	2104      	movs	r1, #4
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ff9f 	bl	8006618 <__sfmoreglue>
 80066da:	6030      	str	r0, [r6, #0]
 80066dc:	2800      	cmp	r0, #0
 80066de:	d1f1      	bne.n	80066c4 <__sfp+0x20>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4604      	mov	r4, r0
 80066e6:	4620      	mov	r0, r4
 80066e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <__sfp+0x74>)
 80066ec:	6665      	str	r5, [r4, #100]	; 0x64
 80066ee:	e9c4 5500 	strd	r5, r5, [r4]
 80066f2:	60a5      	str	r5, [r4, #8]
 80066f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80066f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80066fc:	2208      	movs	r2, #8
 80066fe:	4629      	mov	r1, r5
 8006700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006704:	f7ff feab 	bl	800645e <memset>
 8006708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800670c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006710:	e7e9      	b.n	80066e6 <__sfp+0x42>
 8006712:	bf00      	nop
 8006714:	080074b0 	.word	0x080074b0
 8006718:	ffff0001 	.word	0xffff0001

0800671c <_fwalk_reent>:
 800671c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006720:	4680      	mov	r8, r0
 8006722:	4689      	mov	r9, r1
 8006724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006728:	2600      	movs	r6, #0
 800672a:	b914      	cbnz	r4, 8006732 <_fwalk_reent+0x16>
 800672c:	4630      	mov	r0, r6
 800672e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006732:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006736:	3f01      	subs	r7, #1
 8006738:	d501      	bpl.n	800673e <_fwalk_reent+0x22>
 800673a:	6824      	ldr	r4, [r4, #0]
 800673c:	e7f5      	b.n	800672a <_fwalk_reent+0xe>
 800673e:	89ab      	ldrh	r3, [r5, #12]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d907      	bls.n	8006754 <_fwalk_reent+0x38>
 8006744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006748:	3301      	adds	r3, #1
 800674a:	d003      	beq.n	8006754 <_fwalk_reent+0x38>
 800674c:	4629      	mov	r1, r5
 800674e:	4640      	mov	r0, r8
 8006750:	47c8      	blx	r9
 8006752:	4306      	orrs	r6, r0
 8006754:	3568      	adds	r5, #104	; 0x68
 8006756:	e7ee      	b.n	8006736 <_fwalk_reent+0x1a>

08006758 <__locale_ctype_ptr_l>:
 8006758:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800675c:	4770      	bx	lr

0800675e <__ascii_mbtowc>:
 800675e:	b082      	sub	sp, #8
 8006760:	b901      	cbnz	r1, 8006764 <__ascii_mbtowc+0x6>
 8006762:	a901      	add	r1, sp, #4
 8006764:	b142      	cbz	r2, 8006778 <__ascii_mbtowc+0x1a>
 8006766:	b14b      	cbz	r3, 800677c <__ascii_mbtowc+0x1e>
 8006768:	7813      	ldrb	r3, [r2, #0]
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	1c10      	adds	r0, r2, #0
 8006770:	bf18      	it	ne
 8006772:	2001      	movne	r0, #1
 8006774:	b002      	add	sp, #8
 8006776:	4770      	bx	lr
 8006778:	4610      	mov	r0, r2
 800677a:	e7fb      	b.n	8006774 <__ascii_mbtowc+0x16>
 800677c:	f06f 0001 	mvn.w	r0, #1
 8006780:	e7f8      	b.n	8006774 <__ascii_mbtowc+0x16>
	...

08006784 <_malloc_r>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	1ccd      	adds	r5, r1, #3
 8006788:	f025 0503 	bic.w	r5, r5, #3
 800678c:	3508      	adds	r5, #8
 800678e:	2d0c      	cmp	r5, #12
 8006790:	bf38      	it	cc
 8006792:	250c      	movcc	r5, #12
 8006794:	2d00      	cmp	r5, #0
 8006796:	4606      	mov	r6, r0
 8006798:	db01      	blt.n	800679e <_malloc_r+0x1a>
 800679a:	42a9      	cmp	r1, r5
 800679c:	d903      	bls.n	80067a6 <_malloc_r+0x22>
 800679e:	230c      	movs	r3, #12
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	bd70      	pop	{r4, r5, r6, pc}
 80067a6:	f000 fd79 	bl	800729c <__malloc_lock>
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <_malloc_r+0xac>)
 80067ac:	6814      	ldr	r4, [r2, #0]
 80067ae:	4621      	mov	r1, r4
 80067b0:	b991      	cbnz	r1, 80067d8 <_malloc_r+0x54>
 80067b2:	4c20      	ldr	r4, [pc, #128]	; (8006834 <_malloc_r+0xb0>)
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	b91b      	cbnz	r3, 80067c0 <_malloc_r+0x3c>
 80067b8:	4630      	mov	r0, r6
 80067ba:	f000 fb05 	bl	8006dc8 <_sbrk_r>
 80067be:	6020      	str	r0, [r4, #0]
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 fb00 	bl	8006dc8 <_sbrk_r>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d124      	bne.n	8006816 <_malloc_r+0x92>
 80067cc:	230c      	movs	r3, #12
 80067ce:	6033      	str	r3, [r6, #0]
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 fd64 	bl	800729e <__malloc_unlock>
 80067d6:	e7e4      	b.n	80067a2 <_malloc_r+0x1e>
 80067d8:	680b      	ldr	r3, [r1, #0]
 80067da:	1b5b      	subs	r3, r3, r5
 80067dc:	d418      	bmi.n	8006810 <_malloc_r+0x8c>
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	d90f      	bls.n	8006802 <_malloc_r+0x7e>
 80067e2:	600b      	str	r3, [r1, #0]
 80067e4:	50cd      	str	r5, [r1, r3]
 80067e6:	18cc      	adds	r4, r1, r3
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 fd58 	bl	800729e <__malloc_unlock>
 80067ee:	f104 000b 	add.w	r0, r4, #11
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	f020 0007 	bic.w	r0, r0, #7
 80067f8:	1ac3      	subs	r3, r0, r3
 80067fa:	d0d3      	beq.n	80067a4 <_malloc_r+0x20>
 80067fc:	425a      	negs	r2, r3
 80067fe:	50e2      	str	r2, [r4, r3]
 8006800:	e7d0      	b.n	80067a4 <_malloc_r+0x20>
 8006802:	428c      	cmp	r4, r1
 8006804:	684b      	ldr	r3, [r1, #4]
 8006806:	bf16      	itet	ne
 8006808:	6063      	strne	r3, [r4, #4]
 800680a:	6013      	streq	r3, [r2, #0]
 800680c:	460c      	movne	r4, r1
 800680e:	e7eb      	b.n	80067e8 <_malloc_r+0x64>
 8006810:	460c      	mov	r4, r1
 8006812:	6849      	ldr	r1, [r1, #4]
 8006814:	e7cc      	b.n	80067b0 <_malloc_r+0x2c>
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d005      	beq.n	800682c <_malloc_r+0xa8>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4630      	mov	r0, r6
 8006824:	f000 fad0 	bl	8006dc8 <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d0cf      	beq.n	80067cc <_malloc_r+0x48>
 800682c:	6025      	str	r5, [r4, #0]
 800682e:	e7db      	b.n	80067e8 <_malloc_r+0x64>
 8006830:	20001ac0 	.word	0x20001ac0
 8006834:	20001ac4 	.word	0x20001ac4

08006838 <__sfputc_r>:
 8006838:	6893      	ldr	r3, [r2, #8]
 800683a:	3b01      	subs	r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	b410      	push	{r4}
 8006840:	6093      	str	r3, [r2, #8]
 8006842:	da08      	bge.n	8006856 <__sfputc_r+0x1e>
 8006844:	6994      	ldr	r4, [r2, #24]
 8006846:	42a3      	cmp	r3, r4
 8006848:	db01      	blt.n	800684e <__sfputc_r+0x16>
 800684a:	290a      	cmp	r1, #10
 800684c:	d103      	bne.n	8006856 <__sfputc_r+0x1e>
 800684e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006852:	f000 bb0d 	b.w	8006e70 <__swbuf_r>
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	1c58      	adds	r0, r3, #1
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	7019      	strb	r1, [r3, #0]
 800685e:	4608      	mov	r0, r1
 8006860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006864:	4770      	bx	lr

08006866 <__sfputs_r>:
 8006866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006868:	4606      	mov	r6, r0
 800686a:	460f      	mov	r7, r1
 800686c:	4614      	mov	r4, r2
 800686e:	18d5      	adds	r5, r2, r3
 8006870:	42ac      	cmp	r4, r5
 8006872:	d101      	bne.n	8006878 <__sfputs_r+0x12>
 8006874:	2000      	movs	r0, #0
 8006876:	e007      	b.n	8006888 <__sfputs_r+0x22>
 8006878:	463a      	mov	r2, r7
 800687a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ffda 	bl	8006838 <__sfputc_r>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d1f3      	bne.n	8006870 <__sfputs_r+0xa>
 8006888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800688c <_vfiprintf_r>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	b09d      	sub	sp, #116	; 0x74
 8006894:	4617      	mov	r7, r2
 8006896:	461d      	mov	r5, r3
 8006898:	4606      	mov	r6, r0
 800689a:	b118      	cbz	r0, 80068a4 <_vfiprintf_r+0x18>
 800689c:	6983      	ldr	r3, [r0, #24]
 800689e:	b90b      	cbnz	r3, 80068a4 <_vfiprintf_r+0x18>
 80068a0:	f7ff fed0 	bl	8006644 <__sinit>
 80068a4:	4b7c      	ldr	r3, [pc, #496]	; (8006a98 <_vfiprintf_r+0x20c>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d158      	bne.n	800695c <_vfiprintf_r+0xd0>
 80068aa:	6874      	ldr	r4, [r6, #4]
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	0718      	lsls	r0, r3, #28
 80068b0:	d55e      	bpl.n	8006970 <_vfiprintf_r+0xe4>
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d05b      	beq.n	8006970 <_vfiprintf_r+0xe4>
 80068b8:	2300      	movs	r3, #0
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	2320      	movs	r3, #32
 80068be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c2:	2330      	movs	r3, #48	; 0x30
 80068c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c8:	9503      	str	r5, [sp, #12]
 80068ca:	f04f 0b01 	mov.w	fp, #1
 80068ce:	46b8      	mov	r8, r7
 80068d0:	4645      	mov	r5, r8
 80068d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068d6:	b10b      	cbz	r3, 80068dc <_vfiprintf_r+0x50>
 80068d8:	2b25      	cmp	r3, #37	; 0x25
 80068da:	d154      	bne.n	8006986 <_vfiprintf_r+0xfa>
 80068dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80068e0:	d00b      	beq.n	80068fa <_vfiprintf_r+0x6e>
 80068e2:	4653      	mov	r3, sl
 80068e4:	463a      	mov	r2, r7
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ffbc 	bl	8006866 <__sfputs_r>
 80068ee:	3001      	adds	r0, #1
 80068f0:	f000 80c2 	beq.w	8006a78 <_vfiprintf_r+0x1ec>
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	4453      	add	r3, sl
 80068f8:	9309      	str	r3, [sp, #36]	; 0x24
 80068fa:	f898 3000 	ldrb.w	r3, [r8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80ba 	beq.w	8006a78 <_vfiprintf_r+0x1ec>
 8006904:	2300      	movs	r3, #0
 8006906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800690a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	9307      	str	r3, [sp, #28]
 8006912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006916:	931a      	str	r3, [sp, #104]	; 0x68
 8006918:	46a8      	mov	r8, r5
 800691a:	2205      	movs	r2, #5
 800691c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006920:	485e      	ldr	r0, [pc, #376]	; (8006a9c <_vfiprintf_r+0x210>)
 8006922:	f7f9 fc55 	bl	80001d0 <memchr>
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	bb78      	cbnz	r0, 800698a <_vfiprintf_r+0xfe>
 800692a:	06d9      	lsls	r1, r3, #27
 800692c:	bf44      	itt	mi
 800692e:	2220      	movmi	r2, #32
 8006930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006934:	071a      	lsls	r2, r3, #28
 8006936:	bf44      	itt	mi
 8006938:	222b      	movmi	r2, #43	; 0x2b
 800693a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800693e:	782a      	ldrb	r2, [r5, #0]
 8006940:	2a2a      	cmp	r2, #42	; 0x2a
 8006942:	d02a      	beq.n	800699a <_vfiprintf_r+0x10e>
 8006944:	9a07      	ldr	r2, [sp, #28]
 8006946:	46a8      	mov	r8, r5
 8006948:	2000      	movs	r0, #0
 800694a:	250a      	movs	r5, #10
 800694c:	4641      	mov	r1, r8
 800694e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006952:	3b30      	subs	r3, #48	; 0x30
 8006954:	2b09      	cmp	r3, #9
 8006956:	d969      	bls.n	8006a2c <_vfiprintf_r+0x1a0>
 8006958:	b360      	cbz	r0, 80069b4 <_vfiprintf_r+0x128>
 800695a:	e024      	b.n	80069a6 <_vfiprintf_r+0x11a>
 800695c:	4b50      	ldr	r3, [pc, #320]	; (8006aa0 <_vfiprintf_r+0x214>)
 800695e:	429c      	cmp	r4, r3
 8006960:	d101      	bne.n	8006966 <_vfiprintf_r+0xda>
 8006962:	68b4      	ldr	r4, [r6, #8]
 8006964:	e7a2      	b.n	80068ac <_vfiprintf_r+0x20>
 8006966:	4b4f      	ldr	r3, [pc, #316]	; (8006aa4 <_vfiprintf_r+0x218>)
 8006968:	429c      	cmp	r4, r3
 800696a:	bf08      	it	eq
 800696c:	68f4      	ldreq	r4, [r6, #12]
 800696e:	e79d      	b.n	80068ac <_vfiprintf_r+0x20>
 8006970:	4621      	mov	r1, r4
 8006972:	4630      	mov	r0, r6
 8006974:	f000 faee 	bl	8006f54 <__swsetup_r>
 8006978:	2800      	cmp	r0, #0
 800697a:	d09d      	beq.n	80068b8 <_vfiprintf_r+0x2c>
 800697c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006980:	b01d      	add	sp, #116	; 0x74
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006986:	46a8      	mov	r8, r5
 8006988:	e7a2      	b.n	80068d0 <_vfiprintf_r+0x44>
 800698a:	4a44      	ldr	r2, [pc, #272]	; (8006a9c <_vfiprintf_r+0x210>)
 800698c:	1a80      	subs	r0, r0, r2
 800698e:	fa0b f000 	lsl.w	r0, fp, r0
 8006992:	4318      	orrs	r0, r3
 8006994:	9004      	str	r0, [sp, #16]
 8006996:	4645      	mov	r5, r8
 8006998:	e7be      	b.n	8006918 <_vfiprintf_r+0x8c>
 800699a:	9a03      	ldr	r2, [sp, #12]
 800699c:	1d11      	adds	r1, r2, #4
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	9103      	str	r1, [sp, #12]
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	db01      	blt.n	80069aa <_vfiprintf_r+0x11e>
 80069a6:	9207      	str	r2, [sp, #28]
 80069a8:	e004      	b.n	80069b4 <_vfiprintf_r+0x128>
 80069aa:	4252      	negs	r2, r2
 80069ac:	f043 0302 	orr.w	r3, r3, #2
 80069b0:	9207      	str	r2, [sp, #28]
 80069b2:	9304      	str	r3, [sp, #16]
 80069b4:	f898 3000 	ldrb.w	r3, [r8]
 80069b8:	2b2e      	cmp	r3, #46	; 0x2e
 80069ba:	d10e      	bne.n	80069da <_vfiprintf_r+0x14e>
 80069bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069c0:	2b2a      	cmp	r3, #42	; 0x2a
 80069c2:	d138      	bne.n	8006a36 <_vfiprintf_r+0x1aa>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	1d1a      	adds	r2, r3, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb8      	it	lt
 80069d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069d4:	f108 0802 	add.w	r8, r8, #2
 80069d8:	9305      	str	r3, [sp, #20]
 80069da:	4d33      	ldr	r5, [pc, #204]	; (8006aa8 <_vfiprintf_r+0x21c>)
 80069dc:	f898 1000 	ldrb.w	r1, [r8]
 80069e0:	2203      	movs	r2, #3
 80069e2:	4628      	mov	r0, r5
 80069e4:	f7f9 fbf4 	bl	80001d0 <memchr>
 80069e8:	b140      	cbz	r0, 80069fc <_vfiprintf_r+0x170>
 80069ea:	2340      	movs	r3, #64	; 0x40
 80069ec:	1b40      	subs	r0, r0, r5
 80069ee:	fa03 f000 	lsl.w	r0, r3, r0
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	4303      	orrs	r3, r0
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	f898 1000 	ldrb.w	r1, [r8]
 8006a00:	482a      	ldr	r0, [pc, #168]	; (8006aac <_vfiprintf_r+0x220>)
 8006a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a06:	2206      	movs	r2, #6
 8006a08:	f108 0701 	add.w	r7, r8, #1
 8006a0c:	f7f9 fbe0 	bl	80001d0 <memchr>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d037      	beq.n	8006a84 <_vfiprintf_r+0x1f8>
 8006a14:	4b26      	ldr	r3, [pc, #152]	; (8006ab0 <_vfiprintf_r+0x224>)
 8006a16:	bb1b      	cbnz	r3, 8006a60 <_vfiprintf_r+0x1d4>
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	3307      	adds	r3, #7
 8006a1c:	f023 0307 	bic.w	r3, r3, #7
 8006a20:	3308      	adds	r3, #8
 8006a22:	9303      	str	r3, [sp, #12]
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	444b      	add	r3, r9
 8006a28:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2a:	e750      	b.n	80068ce <_vfiprintf_r+0x42>
 8006a2c:	fb05 3202 	mla	r2, r5, r2, r3
 8006a30:	2001      	movs	r0, #1
 8006a32:	4688      	mov	r8, r1
 8006a34:	e78a      	b.n	800694c <_vfiprintf_r+0xc0>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f108 0801 	add.w	r8, r8, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	250a      	movs	r5, #10
 8006a42:	4640      	mov	r0, r8
 8006a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a48:	3a30      	subs	r2, #48	; 0x30
 8006a4a:	2a09      	cmp	r2, #9
 8006a4c:	d903      	bls.n	8006a56 <_vfiprintf_r+0x1ca>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c3      	beq.n	80069da <_vfiprintf_r+0x14e>
 8006a52:	9105      	str	r1, [sp, #20]
 8006a54:	e7c1      	b.n	80069da <_vfiprintf_r+0x14e>
 8006a56:	fb05 2101 	mla	r1, r5, r1, r2
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	e7f0      	b.n	8006a42 <_vfiprintf_r+0x1b6>
 8006a60:	ab03      	add	r3, sp, #12
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4622      	mov	r2, r4
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <_vfiprintf_r+0x228>)
 8006a68:	a904      	add	r1, sp, #16
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f3af 8000 	nop.w
 8006a70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006a74:	4681      	mov	r9, r0
 8006a76:	d1d5      	bne.n	8006a24 <_vfiprintf_r+0x198>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	065b      	lsls	r3, r3, #25
 8006a7c:	f53f af7e 	bmi.w	800697c <_vfiprintf_r+0xf0>
 8006a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a82:	e77d      	b.n	8006980 <_vfiprintf_r+0xf4>
 8006a84:	ab03      	add	r3, sp, #12
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4622      	mov	r2, r4
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <_vfiprintf_r+0x228>)
 8006a8c:	a904      	add	r1, sp, #16
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f000 f888 	bl	8006ba4 <_printf_i>
 8006a94:	e7ec      	b.n	8006a70 <_vfiprintf_r+0x1e4>
 8006a96:	bf00      	nop
 8006a98:	080074d4 	.word	0x080074d4
 8006a9c:	0800751e 	.word	0x0800751e
 8006aa0:	080074f4 	.word	0x080074f4
 8006aa4:	080074b4 	.word	0x080074b4
 8006aa8:	08007524 	.word	0x08007524
 8006aac:	08007528 	.word	0x08007528
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	08006867 	.word	0x08006867

08006ab8 <_printf_common>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	4691      	mov	r9, r2
 8006abe:	461f      	mov	r7, r3
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	bfb8      	it	lt
 8006acc:	4613      	movlt	r3, r2
 8006ace:	f8c9 3000 	str.w	r3, [r9]
 8006ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	b112      	cbz	r2, 8006ae2 <_printf_common+0x2a>
 8006adc:	3301      	adds	r3, #1
 8006ade:	f8c9 3000 	str.w	r3, [r9]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0699      	lsls	r1, r3, #26
 8006ae6:	bf42      	ittt	mi
 8006ae8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006aec:	3302      	addmi	r3, #2
 8006aee:	f8c9 3000 	strmi.w	r3, [r9]
 8006af2:	6825      	ldr	r5, [r4, #0]
 8006af4:	f015 0506 	ands.w	r5, r5, #6
 8006af8:	d107      	bne.n	8006b0a <_printf_common+0x52>
 8006afa:	f104 0a19 	add.w	sl, r4, #25
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	f8d9 2000 	ldr.w	r2, [r9]
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dc28      	bgt.n	8006b5c <_printf_common+0xa4>
 8006b0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	3300      	adds	r3, #0
 8006b12:	bf18      	it	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	0692      	lsls	r2, r2, #26
 8006b18:	d42d      	bmi.n	8006b76 <_printf_common+0xbe>
 8006b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b1e:	4639      	mov	r1, r7
 8006b20:	4630      	mov	r0, r6
 8006b22:	47c0      	blx	r8
 8006b24:	3001      	adds	r0, #1
 8006b26:	d020      	beq.n	8006b6a <_printf_common+0xb2>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	68e5      	ldr	r5, [r4, #12]
 8006b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b30:	f003 0306 	and.w	r3, r3, #6
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	bf08      	it	eq
 8006b38:	1aad      	subeq	r5, r5, r2
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	6922      	ldr	r2, [r4, #16]
 8006b3e:	bf0c      	ite	eq
 8006b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b44:	2500      	movne	r5, #0
 8006b46:	4293      	cmp	r3, r2
 8006b48:	bfc4      	itt	gt
 8006b4a:	1a9b      	subgt	r3, r3, r2
 8006b4c:	18ed      	addgt	r5, r5, r3
 8006b4e:	f04f 0900 	mov.w	r9, #0
 8006b52:	341a      	adds	r4, #26
 8006b54:	454d      	cmp	r5, r9
 8006b56:	d11a      	bne.n	8006b8e <_printf_common+0xd6>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e008      	b.n	8006b6e <_printf_common+0xb6>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4652      	mov	r2, sl
 8006b60:	4639      	mov	r1, r7
 8006b62:	4630      	mov	r0, r6
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d103      	bne.n	8006b72 <_printf_common+0xba>
 8006b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	3501      	adds	r5, #1
 8006b74:	e7c3      	b.n	8006afe <_printf_common+0x46>
 8006b76:	18e1      	adds	r1, r4, r3
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	2030      	movs	r0, #48	; 0x30
 8006b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b80:	4422      	add	r2, r4
 8006b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	e7c5      	b.n	8006b1a <_printf_common+0x62>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4622      	mov	r2, r4
 8006b92:	4639      	mov	r1, r7
 8006b94:	4630      	mov	r0, r6
 8006b96:	47c0      	blx	r8
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0e6      	beq.n	8006b6a <_printf_common+0xb2>
 8006b9c:	f109 0901 	add.w	r9, r9, #1
 8006ba0:	e7d8      	b.n	8006b54 <_printf_common+0x9c>
	...

08006ba4 <_printf_i>:
 8006ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bac:	460c      	mov	r4, r1
 8006bae:	7e09      	ldrb	r1, [r1, #24]
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	296e      	cmp	r1, #110	; 0x6e
 8006bb4:	4617      	mov	r7, r2
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	4698      	mov	r8, r3
 8006bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bbc:	f000 80b3 	beq.w	8006d26 <_printf_i+0x182>
 8006bc0:	d822      	bhi.n	8006c08 <_printf_i+0x64>
 8006bc2:	2963      	cmp	r1, #99	; 0x63
 8006bc4:	d036      	beq.n	8006c34 <_printf_i+0x90>
 8006bc6:	d80a      	bhi.n	8006bde <_printf_i+0x3a>
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	f000 80b9 	beq.w	8006d40 <_printf_i+0x19c>
 8006bce:	2958      	cmp	r1, #88	; 0x58
 8006bd0:	f000 8083 	beq.w	8006cda <_printf_i+0x136>
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bdc:	e032      	b.n	8006c44 <_printf_i+0xa0>
 8006bde:	2964      	cmp	r1, #100	; 0x64
 8006be0:	d001      	beq.n	8006be6 <_printf_i+0x42>
 8006be2:	2969      	cmp	r1, #105	; 0x69
 8006be4:	d1f6      	bne.n	8006bd4 <_printf_i+0x30>
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	6813      	ldr	r3, [r2, #0]
 8006bea:	0605      	lsls	r5, r0, #24
 8006bec:	f103 0104 	add.w	r1, r3, #4
 8006bf0:	d52a      	bpl.n	8006c48 <_printf_i+0xa4>
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6011      	str	r1, [r2, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da03      	bge.n	8006c02 <_printf_i+0x5e>
 8006bfa:	222d      	movs	r2, #45	; 0x2d
 8006bfc:	425b      	negs	r3, r3
 8006bfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c02:	486f      	ldr	r0, [pc, #444]	; (8006dc0 <_printf_i+0x21c>)
 8006c04:	220a      	movs	r2, #10
 8006c06:	e039      	b.n	8006c7c <_printf_i+0xd8>
 8006c08:	2973      	cmp	r1, #115	; 0x73
 8006c0a:	f000 809d 	beq.w	8006d48 <_printf_i+0x1a4>
 8006c0e:	d808      	bhi.n	8006c22 <_printf_i+0x7e>
 8006c10:	296f      	cmp	r1, #111	; 0x6f
 8006c12:	d020      	beq.n	8006c56 <_printf_i+0xb2>
 8006c14:	2970      	cmp	r1, #112	; 0x70
 8006c16:	d1dd      	bne.n	8006bd4 <_printf_i+0x30>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	f043 0320 	orr.w	r3, r3, #32
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	e003      	b.n	8006c2a <_printf_i+0x86>
 8006c22:	2975      	cmp	r1, #117	; 0x75
 8006c24:	d017      	beq.n	8006c56 <_printf_i+0xb2>
 8006c26:	2978      	cmp	r1, #120	; 0x78
 8006c28:	d1d4      	bne.n	8006bd4 <_printf_i+0x30>
 8006c2a:	2378      	movs	r3, #120	; 0x78
 8006c2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c30:	4864      	ldr	r0, [pc, #400]	; (8006dc4 <_printf_i+0x220>)
 8006c32:	e055      	b.n	8006ce0 <_printf_i+0x13c>
 8006c34:	6813      	ldr	r3, [r2, #0]
 8006c36:	1d19      	adds	r1, r3, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6011      	str	r1, [r2, #0]
 8006c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c44:	2301      	movs	r3, #1
 8006c46:	e08c      	b.n	8006d62 <_printf_i+0x1be>
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6011      	str	r1, [r2, #0]
 8006c4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c50:	bf18      	it	ne
 8006c52:	b21b      	sxthne	r3, r3
 8006c54:	e7cf      	b.n	8006bf6 <_printf_i+0x52>
 8006c56:	6813      	ldr	r3, [r2, #0]
 8006c58:	6825      	ldr	r5, [r4, #0]
 8006c5a:	1d18      	adds	r0, r3, #4
 8006c5c:	6010      	str	r0, [r2, #0]
 8006c5e:	0628      	lsls	r0, r5, #24
 8006c60:	d501      	bpl.n	8006c66 <_printf_i+0xc2>
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	e002      	b.n	8006c6c <_printf_i+0xc8>
 8006c66:	0668      	lsls	r0, r5, #25
 8006c68:	d5fb      	bpl.n	8006c62 <_printf_i+0xbe>
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	4854      	ldr	r0, [pc, #336]	; (8006dc0 <_printf_i+0x21c>)
 8006c6e:	296f      	cmp	r1, #111	; 0x6f
 8006c70:	bf14      	ite	ne
 8006c72:	220a      	movne	r2, #10
 8006c74:	2208      	moveq	r2, #8
 8006c76:	2100      	movs	r1, #0
 8006c78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c7c:	6865      	ldr	r5, [r4, #4]
 8006c7e:	60a5      	str	r5, [r4, #8]
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	f2c0 8095 	blt.w	8006db0 <_printf_i+0x20c>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	f021 0104 	bic.w	r1, r1, #4
 8006c8c:	6021      	str	r1, [r4, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d13d      	bne.n	8006d0e <_printf_i+0x16a>
 8006c92:	2d00      	cmp	r5, #0
 8006c94:	f040 808e 	bne.w	8006db4 <_printf_i+0x210>
 8006c98:	4665      	mov	r5, ip
 8006c9a:	2a08      	cmp	r2, #8
 8006c9c:	d10b      	bne.n	8006cb6 <_printf_i+0x112>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	07db      	lsls	r3, r3, #31
 8006ca2:	d508      	bpl.n	8006cb6 <_printf_i+0x112>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6862      	ldr	r2, [r4, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	bfde      	ittt	le
 8006cac:	2330      	movle	r3, #48	; 0x30
 8006cae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cb6:	ebac 0305 	sub.w	r3, ip, r5
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	f8cd 8000 	str.w	r8, [sp]
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	aa03      	add	r2, sp, #12
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff fef6 	bl	8006ab8 <_printf_common>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d14d      	bne.n	8006d6c <_printf_i+0x1c8>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd4:	b005      	add	sp, #20
 8006cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cda:	4839      	ldr	r0, [pc, #228]	; (8006dc0 <_printf_i+0x21c>)
 8006cdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	1d1d      	adds	r5, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6015      	str	r5, [r2, #0]
 8006cea:	060a      	lsls	r2, r1, #24
 8006cec:	d50b      	bpl.n	8006d06 <_printf_i+0x162>
 8006cee:	07ca      	lsls	r2, r1, #31
 8006cf0:	bf44      	itt	mi
 8006cf2:	f041 0120 	orrmi.w	r1, r1, #32
 8006cf6:	6021      	strmi	r1, [r4, #0]
 8006cf8:	b91b      	cbnz	r3, 8006d02 <_printf_i+0x15e>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	f022 0220 	bic.w	r2, r2, #32
 8006d00:	6022      	str	r2, [r4, #0]
 8006d02:	2210      	movs	r2, #16
 8006d04:	e7b7      	b.n	8006c76 <_printf_i+0xd2>
 8006d06:	064d      	lsls	r5, r1, #25
 8006d08:	bf48      	it	mi
 8006d0a:	b29b      	uxthmi	r3, r3
 8006d0c:	e7ef      	b.n	8006cee <_printf_i+0x14a>
 8006d0e:	4665      	mov	r5, ip
 8006d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d14:	fb02 3311 	mls	r3, r2, r1, r3
 8006d18:	5cc3      	ldrb	r3, [r0, r3]
 8006d1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d1e:	460b      	mov	r3, r1
 8006d20:	2900      	cmp	r1, #0
 8006d22:	d1f5      	bne.n	8006d10 <_printf_i+0x16c>
 8006d24:	e7b9      	b.n	8006c9a <_printf_i+0xf6>
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	6961      	ldr	r1, [r4, #20]
 8006d2c:	1d18      	adds	r0, r3, #4
 8006d2e:	6010      	str	r0, [r2, #0]
 8006d30:	0628      	lsls	r0, r5, #24
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	d501      	bpl.n	8006d3a <_printf_i+0x196>
 8006d36:	6019      	str	r1, [r3, #0]
 8006d38:	e002      	b.n	8006d40 <_printf_i+0x19c>
 8006d3a:	066a      	lsls	r2, r5, #25
 8006d3c:	d5fb      	bpl.n	8006d36 <_printf_i+0x192>
 8006d3e:	8019      	strh	r1, [r3, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	4665      	mov	r5, ip
 8006d46:	e7b9      	b.n	8006cbc <_printf_i+0x118>
 8006d48:	6813      	ldr	r3, [r2, #0]
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	6011      	str	r1, [r2, #0]
 8006d4e:	681d      	ldr	r5, [r3, #0]
 8006d50:	6862      	ldr	r2, [r4, #4]
 8006d52:	2100      	movs	r1, #0
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7f9 fa3b 	bl	80001d0 <memchr>
 8006d5a:	b108      	cbz	r0, 8006d60 <_printf_i+0x1bc>
 8006d5c:	1b40      	subs	r0, r0, r5
 8006d5e:	6060      	str	r0, [r4, #4]
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	2300      	movs	r3, #0
 8006d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6a:	e7a7      	b.n	8006cbc <_printf_i+0x118>
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	462a      	mov	r2, r5
 8006d70:	4639      	mov	r1, r7
 8006d72:	4630      	mov	r0, r6
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0aa      	beq.n	8006cd0 <_printf_i+0x12c>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	079b      	lsls	r3, r3, #30
 8006d7e:	d413      	bmi.n	8006da8 <_printf_i+0x204>
 8006d80:	68e0      	ldr	r0, [r4, #12]
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	4298      	cmp	r0, r3
 8006d86:	bfb8      	it	lt
 8006d88:	4618      	movlt	r0, r3
 8006d8a:	e7a3      	b.n	8006cd4 <_printf_i+0x130>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	464a      	mov	r2, r9
 8006d90:	4639      	mov	r1, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d09a      	beq.n	8006cd0 <_printf_i+0x12c>
 8006d9a:	3501      	adds	r5, #1
 8006d9c:	68e3      	ldr	r3, [r4, #12]
 8006d9e:	9a03      	ldr	r2, [sp, #12]
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	dcf2      	bgt.n	8006d8c <_printf_i+0x1e8>
 8006da6:	e7eb      	b.n	8006d80 <_printf_i+0x1dc>
 8006da8:	2500      	movs	r5, #0
 8006daa:	f104 0919 	add.w	r9, r4, #25
 8006dae:	e7f5      	b.n	8006d9c <_printf_i+0x1f8>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1ac      	bne.n	8006d0e <_printf_i+0x16a>
 8006db4:	7803      	ldrb	r3, [r0, #0]
 8006db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dbe:	e76c      	b.n	8006c9a <_printf_i+0xf6>
 8006dc0:	0800752f 	.word	0x0800752f
 8006dc4:	08007540 	.word	0x08007540

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4c06      	ldr	r4, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	f7f9 fe7e 	bl	8000ad4 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20001be4 	.word	0x20001be4

08006de8 <__sread>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	460c      	mov	r4, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	f000 faa4 	bl	800733c <_read_r>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	bfab      	itete	ge
 8006df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8006dfc:	181b      	addge	r3, r3, r0
 8006dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e02:	bfac      	ite	ge
 8006e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e06:	81a3      	strhlt	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__swrite>:
 8006e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	461f      	mov	r7, r3
 8006e10:	898b      	ldrh	r3, [r1, #12]
 8006e12:	05db      	lsls	r3, r3, #23
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4616      	mov	r6, r2
 8006e1a:	d505      	bpl.n	8006e28 <__swrite+0x1e>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e24:	f000 f9c4 	bl	80071b0 <_lseek_r>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e32:	81a3      	strh	r3, [r4, #12]
 8006e34:	4632      	mov	r2, r6
 8006e36:	463b      	mov	r3, r7
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3e:	f000 b877 	b.w	8006f30 <_write_r>

08006e42 <__sseek>:
 8006e42:	b510      	push	{r4, lr}
 8006e44:	460c      	mov	r4, r1
 8006e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4a:	f000 f9b1 	bl	80071b0 <_lseek_r>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	bf15      	itete	ne
 8006e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e5e:	81a3      	strheq	r3, [r4, #12]
 8006e60:	bf18      	it	ne
 8006e62:	81a3      	strhne	r3, [r4, #12]
 8006e64:	bd10      	pop	{r4, pc}

08006e66 <__sclose>:
 8006e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6a:	f000 b8e1 	b.w	8007030 <_close_r>
	...

08006e70 <__swbuf_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	460e      	mov	r6, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	4605      	mov	r5, r0
 8006e78:	b118      	cbz	r0, 8006e82 <__swbuf_r+0x12>
 8006e7a:	6983      	ldr	r3, [r0, #24]
 8006e7c:	b90b      	cbnz	r3, 8006e82 <__swbuf_r+0x12>
 8006e7e:	f7ff fbe1 	bl	8006644 <__sinit>
 8006e82:	4b21      	ldr	r3, [pc, #132]	; (8006f08 <__swbuf_r+0x98>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	d12a      	bne.n	8006ede <__swbuf_r+0x6e>
 8006e88:	686c      	ldr	r4, [r5, #4]
 8006e8a:	69a3      	ldr	r3, [r4, #24]
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	071a      	lsls	r2, r3, #28
 8006e92:	d52e      	bpl.n	8006ef2 <__swbuf_r+0x82>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b363      	cbz	r3, 8006ef2 <__swbuf_r+0x82>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	1ac0      	subs	r0, r0, r3
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	b2f6      	uxtb	r6, r6
 8006ea2:	4283      	cmp	r3, r0
 8006ea4:	4637      	mov	r7, r6
 8006ea6:	dc04      	bgt.n	8006eb2 <__swbuf_r+0x42>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f956 	bl	800715c <_fflush_r>
 8006eb0:	bb28      	cbnz	r0, 8006efe <__swbuf_r+0x8e>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	60a3      	str	r3, [r4, #8]
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	701e      	strb	r6, [r3, #0]
 8006ec0:	6963      	ldr	r3, [r4, #20]
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	4283      	cmp	r3, r0
 8006ec6:	d004      	beq.n	8006ed2 <__swbuf_r+0x62>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	07db      	lsls	r3, r3, #31
 8006ecc:	d519      	bpl.n	8006f02 <__swbuf_r+0x92>
 8006ece:	2e0a      	cmp	r6, #10
 8006ed0:	d117      	bne.n	8006f02 <__swbuf_r+0x92>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 f941 	bl	800715c <_fflush_r>
 8006eda:	b190      	cbz	r0, 8006f02 <__swbuf_r+0x92>
 8006edc:	e00f      	b.n	8006efe <__swbuf_r+0x8e>
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <__swbuf_r+0x9c>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d101      	bne.n	8006ee8 <__swbuf_r+0x78>
 8006ee4:	68ac      	ldr	r4, [r5, #8]
 8006ee6:	e7d0      	b.n	8006e8a <__swbuf_r+0x1a>
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <__swbuf_r+0xa0>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	bf08      	it	eq
 8006eee:	68ec      	ldreq	r4, [r5, #12]
 8006ef0:	e7cb      	b.n	8006e8a <__swbuf_r+0x1a>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 f82d 	bl	8006f54 <__swsetup_r>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0cc      	beq.n	8006e98 <__swbuf_r+0x28>
 8006efe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f02:	4638      	mov	r0, r7
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	bf00      	nop
 8006f08:	080074d4 	.word	0x080074d4
 8006f0c:	080074f4 	.word	0x080074f4
 8006f10:	080074b4 	.word	0x080074b4

08006f14 <__ascii_wctomb>:
 8006f14:	b149      	cbz	r1, 8006f2a <__ascii_wctomb+0x16>
 8006f16:	2aff      	cmp	r2, #255	; 0xff
 8006f18:	bf85      	ittet	hi
 8006f1a:	238a      	movhi	r3, #138	; 0x8a
 8006f1c:	6003      	strhi	r3, [r0, #0]
 8006f1e:	700a      	strbls	r2, [r1, #0]
 8006f20:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006f24:	bf98      	it	ls
 8006f26:	2001      	movls	r0, #1
 8006f28:	4770      	bx	lr
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4770      	bx	lr
	...

08006f30 <_write_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4c07      	ldr	r4, [pc, #28]	; (8006f50 <_write_r+0x20>)
 8006f34:	4605      	mov	r5, r0
 8006f36:	4608      	mov	r0, r1
 8006f38:	4611      	mov	r1, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	6022      	str	r2, [r4, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f7f9 fd77 	bl	8000a32 <_write>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_write_r+0x1e>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_write_r+0x1e>
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20001be4 	.word	0x20001be4

08006f54 <__swsetup_r>:
 8006f54:	4b32      	ldr	r3, [pc, #200]	; (8007020 <__swsetup_r+0xcc>)
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	b125      	cbz	r5, 8006f6a <__swsetup_r+0x16>
 8006f60:	69ab      	ldr	r3, [r5, #24]
 8006f62:	b913      	cbnz	r3, 8006f6a <__swsetup_r+0x16>
 8006f64:	4628      	mov	r0, r5
 8006f66:	f7ff fb6d 	bl	8006644 <__sinit>
 8006f6a:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <__swsetup_r+0xd0>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	d10f      	bne.n	8006f90 <__swsetup_r+0x3c>
 8006f70:	686c      	ldr	r4, [r5, #4]
 8006f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	0715      	lsls	r5, r2, #28
 8006f7a:	d42c      	bmi.n	8006fd6 <__swsetup_r+0x82>
 8006f7c:	06d0      	lsls	r0, r2, #27
 8006f7e:	d411      	bmi.n	8006fa4 <__swsetup_r+0x50>
 8006f80:	2209      	movs	r2, #9
 8006f82:	6032      	str	r2, [r6, #0]
 8006f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f8e:	e03e      	b.n	800700e <__swsetup_r+0xba>
 8006f90:	4b25      	ldr	r3, [pc, #148]	; (8007028 <__swsetup_r+0xd4>)
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d101      	bne.n	8006f9a <__swsetup_r+0x46>
 8006f96:	68ac      	ldr	r4, [r5, #8]
 8006f98:	e7eb      	b.n	8006f72 <__swsetup_r+0x1e>
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <__swsetup_r+0xd8>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	bf08      	it	eq
 8006fa0:	68ec      	ldreq	r4, [r5, #12]
 8006fa2:	e7e6      	b.n	8006f72 <__swsetup_r+0x1e>
 8006fa4:	0751      	lsls	r1, r2, #29
 8006fa6:	d512      	bpl.n	8006fce <__swsetup_r+0x7a>
 8006fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006faa:	b141      	cbz	r1, 8006fbe <__swsetup_r+0x6a>
 8006fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fb0:	4299      	cmp	r1, r3
 8006fb2:	d002      	beq.n	8006fba <__swsetup_r+0x66>
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 f973 	bl	80072a0 <_free_r>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f043 0308 	orr.w	r3, r3, #8
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	b94b      	cbnz	r3, 8006fee <__swsetup_r+0x9a>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d003      	beq.n	8006fee <__swsetup_r+0x9a>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4630      	mov	r0, r6
 8006fea:	f000 f917 	bl	800721c <__smakebuf_r>
 8006fee:	89a2      	ldrh	r2, [r4, #12]
 8006ff0:	f012 0301 	ands.w	r3, r2, #1
 8006ff4:	d00c      	beq.n	8007010 <__swsetup_r+0xbc>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60a3      	str	r3, [r4, #8]
 8006ffa:	6963      	ldr	r3, [r4, #20]
 8006ffc:	425b      	negs	r3, r3
 8006ffe:	61a3      	str	r3, [r4, #24]
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	b953      	cbnz	r3, 800701a <__swsetup_r+0xc6>
 8007004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007008:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800700c:	d1ba      	bne.n	8006f84 <__swsetup_r+0x30>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	0792      	lsls	r2, r2, #30
 8007012:	bf58      	it	pl
 8007014:	6963      	ldrpl	r3, [r4, #20]
 8007016:	60a3      	str	r3, [r4, #8]
 8007018:	e7f2      	b.n	8007000 <__swsetup_r+0xac>
 800701a:	2000      	movs	r0, #0
 800701c:	e7f7      	b.n	800700e <__swsetup_r+0xba>
 800701e:	bf00      	nop
 8007020:	20000010 	.word	0x20000010
 8007024:	080074d4 	.word	0x080074d4
 8007028:	080074f4 	.word	0x080074f4
 800702c:	080074b4 	.word	0x080074b4

08007030 <_close_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4c06      	ldr	r4, [pc, #24]	; (800704c <_close_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4605      	mov	r5, r0
 8007038:	4608      	mov	r0, r1
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	f7f9 fd15 	bl	8000a6a <_close>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_close_r+0x1a>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	b103      	cbz	r3, 800704a <_close_r+0x1a>
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20001be4 	.word	0x20001be4

08007050 <__sflush_r>:
 8007050:	898a      	ldrh	r2, [r1, #12]
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	4605      	mov	r5, r0
 8007058:	0710      	lsls	r0, r2, #28
 800705a:	460c      	mov	r4, r1
 800705c:	d458      	bmi.n	8007110 <__sflush_r+0xc0>
 800705e:	684b      	ldr	r3, [r1, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc05      	bgt.n	8007070 <__sflush_r+0x20>
 8007064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	dc02      	bgt.n	8007070 <__sflush_r+0x20>
 800706a:	2000      	movs	r0, #0
 800706c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007072:	2e00      	cmp	r6, #0
 8007074:	d0f9      	beq.n	800706a <__sflush_r+0x1a>
 8007076:	2300      	movs	r3, #0
 8007078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800707c:	682f      	ldr	r7, [r5, #0]
 800707e:	6a21      	ldr	r1, [r4, #32]
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	d032      	beq.n	80070ea <__sflush_r+0x9a>
 8007084:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	075a      	lsls	r2, r3, #29
 800708a:	d505      	bpl.n	8007098 <__sflush_r+0x48>
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	1ac0      	subs	r0, r0, r3
 8007090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007092:	b10b      	cbz	r3, 8007098 <__sflush_r+0x48>
 8007094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007096:	1ac0      	subs	r0, r0, r3
 8007098:	2300      	movs	r3, #0
 800709a:	4602      	mov	r2, r0
 800709c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800709e:	6a21      	ldr	r1, [r4, #32]
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	d106      	bne.n	80070b8 <__sflush_r+0x68>
 80070aa:	6829      	ldr	r1, [r5, #0]
 80070ac:	291d      	cmp	r1, #29
 80070ae:	d848      	bhi.n	8007142 <__sflush_r+0xf2>
 80070b0:	4a29      	ldr	r2, [pc, #164]	; (8007158 <__sflush_r+0x108>)
 80070b2:	40ca      	lsrs	r2, r1
 80070b4:	07d6      	lsls	r6, r2, #31
 80070b6:	d544      	bpl.n	8007142 <__sflush_r+0xf2>
 80070b8:	2200      	movs	r2, #0
 80070ba:	6062      	str	r2, [r4, #4]
 80070bc:	04d9      	lsls	r1, r3, #19
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	d504      	bpl.n	80070ce <__sflush_r+0x7e>
 80070c4:	1c42      	adds	r2, r0, #1
 80070c6:	d101      	bne.n	80070cc <__sflush_r+0x7c>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b903      	cbnz	r3, 80070ce <__sflush_r+0x7e>
 80070cc:	6560      	str	r0, [r4, #84]	; 0x54
 80070ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070d0:	602f      	str	r7, [r5, #0]
 80070d2:	2900      	cmp	r1, #0
 80070d4:	d0c9      	beq.n	800706a <__sflush_r+0x1a>
 80070d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070da:	4299      	cmp	r1, r3
 80070dc:	d002      	beq.n	80070e4 <__sflush_r+0x94>
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 f8de 	bl	80072a0 <_free_r>
 80070e4:	2000      	movs	r0, #0
 80070e6:	6360      	str	r0, [r4, #52]	; 0x34
 80070e8:	e7c0      	b.n	800706c <__sflush_r+0x1c>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b0      	blx	r6
 80070f0:	1c41      	adds	r1, r0, #1
 80070f2:	d1c8      	bne.n	8007086 <__sflush_r+0x36>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0c5      	beq.n	8007086 <__sflush_r+0x36>
 80070fa:	2b1d      	cmp	r3, #29
 80070fc:	d001      	beq.n	8007102 <__sflush_r+0xb2>
 80070fe:	2b16      	cmp	r3, #22
 8007100:	d101      	bne.n	8007106 <__sflush_r+0xb6>
 8007102:	602f      	str	r7, [r5, #0]
 8007104:	e7b1      	b.n	800706a <__sflush_r+0x1a>
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	e7ad      	b.n	800706c <__sflush_r+0x1c>
 8007110:	690f      	ldr	r7, [r1, #16]
 8007112:	2f00      	cmp	r7, #0
 8007114:	d0a9      	beq.n	800706a <__sflush_r+0x1a>
 8007116:	0793      	lsls	r3, r2, #30
 8007118:	680e      	ldr	r6, [r1, #0]
 800711a:	bf08      	it	eq
 800711c:	694b      	ldreq	r3, [r1, #20]
 800711e:	600f      	str	r7, [r1, #0]
 8007120:	bf18      	it	ne
 8007122:	2300      	movne	r3, #0
 8007124:	eba6 0807 	sub.w	r8, r6, r7
 8007128:	608b      	str	r3, [r1, #8]
 800712a:	f1b8 0f00 	cmp.w	r8, #0
 800712e:	dd9c      	ble.n	800706a <__sflush_r+0x1a>
 8007130:	4643      	mov	r3, r8
 8007132:	463a      	mov	r2, r7
 8007134:	6a21      	ldr	r1, [r4, #32]
 8007136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007138:	4628      	mov	r0, r5
 800713a:	47b0      	blx	r6
 800713c:	2800      	cmp	r0, #0
 800713e:	dc06      	bgt.n	800714e <__sflush_r+0xfe>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007146:	81a3      	strh	r3, [r4, #12]
 8007148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800714c:	e78e      	b.n	800706c <__sflush_r+0x1c>
 800714e:	4407      	add	r7, r0
 8007150:	eba8 0800 	sub.w	r8, r8, r0
 8007154:	e7e9      	b.n	800712a <__sflush_r+0xda>
 8007156:	bf00      	nop
 8007158:	20400001 	.word	0x20400001

0800715c <_fflush_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	4605      	mov	r5, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b1db      	cbz	r3, 800719e <_fflush_r+0x42>
 8007166:	b118      	cbz	r0, 8007170 <_fflush_r+0x14>
 8007168:	6983      	ldr	r3, [r0, #24]
 800716a:	b90b      	cbnz	r3, 8007170 <_fflush_r+0x14>
 800716c:	f7ff fa6a 	bl	8006644 <__sinit>
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <_fflush_r+0x48>)
 8007172:	429c      	cmp	r4, r3
 8007174:	d109      	bne.n	800718a <_fflush_r+0x2e>
 8007176:	686c      	ldr	r4, [r5, #4]
 8007178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717c:	b17b      	cbz	r3, 800719e <_fflush_r+0x42>
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007186:	f7ff bf63 	b.w	8007050 <__sflush_r>
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <_fflush_r+0x4c>)
 800718c:	429c      	cmp	r4, r3
 800718e:	d101      	bne.n	8007194 <_fflush_r+0x38>
 8007190:	68ac      	ldr	r4, [r5, #8]
 8007192:	e7f1      	b.n	8007178 <_fflush_r+0x1c>
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <_fflush_r+0x50>)
 8007196:	429c      	cmp	r4, r3
 8007198:	bf08      	it	eq
 800719a:	68ec      	ldreq	r4, [r5, #12]
 800719c:	e7ec      	b.n	8007178 <_fflush_r+0x1c>
 800719e:	2000      	movs	r0, #0
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	080074d4 	.word	0x080074d4
 80071a8:	080074f4 	.word	0x080074f4
 80071ac:	080074b4 	.word	0x080074b4

080071b0 <_lseek_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4c07      	ldr	r4, [pc, #28]	; (80071d0 <_lseek_r+0x20>)
 80071b4:	4605      	mov	r5, r0
 80071b6:	4608      	mov	r0, r1
 80071b8:	4611      	mov	r1, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	f7f9 fc7a 	bl	8000ab8 <_lseek>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_lseek_r+0x1e>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_lseek_r+0x1e>
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20001be4 	.word	0x20001be4

080071d4 <__swhatbuf_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	2900      	cmp	r1, #0
 80071de:	b096      	sub	sp, #88	; 0x58
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	da07      	bge.n	80071f6 <__swhatbuf_r+0x22>
 80071e6:	2300      	movs	r3, #0
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	89b3      	ldrh	r3, [r6, #12]
 80071ec:	061a      	lsls	r2, r3, #24
 80071ee:	d410      	bmi.n	8007212 <__swhatbuf_r+0x3e>
 80071f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f4:	e00e      	b.n	8007214 <__swhatbuf_r+0x40>
 80071f6:	466a      	mov	r2, sp
 80071f8:	f000 f8b2 	bl	8007360 <_fstat_r>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	dbf2      	blt.n	80071e6 <__swhatbuf_r+0x12>
 8007200:	9a01      	ldr	r2, [sp, #4]
 8007202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800720a:	425a      	negs	r2, r3
 800720c:	415a      	adcs	r2, r3
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	e7ee      	b.n	80071f0 <__swhatbuf_r+0x1c>
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	2000      	movs	r0, #0
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	b016      	add	sp, #88	; 0x58
 800721a:	bd70      	pop	{r4, r5, r6, pc}

0800721c <__smakebuf_r>:
 800721c:	898b      	ldrh	r3, [r1, #12]
 800721e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007220:	079d      	lsls	r5, r3, #30
 8007222:	4606      	mov	r6, r0
 8007224:	460c      	mov	r4, r1
 8007226:	d507      	bpl.n	8007238 <__smakebuf_r+0x1c>
 8007228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2301      	movs	r3, #1
 8007232:	6163      	str	r3, [r4, #20]
 8007234:	b002      	add	sp, #8
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	ab01      	add	r3, sp, #4
 800723a:	466a      	mov	r2, sp
 800723c:	f7ff ffca 	bl	80071d4 <__swhatbuf_r>
 8007240:	9900      	ldr	r1, [sp, #0]
 8007242:	4605      	mov	r5, r0
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff fa9d 	bl	8006784 <_malloc_r>
 800724a:	b948      	cbnz	r0, 8007260 <__smakebuf_r+0x44>
 800724c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007250:	059a      	lsls	r2, r3, #22
 8007252:	d4ef      	bmi.n	8007234 <__smakebuf_r+0x18>
 8007254:	f023 0303 	bic.w	r3, r3, #3
 8007258:	f043 0302 	orr.w	r3, r3, #2
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	e7e3      	b.n	8007228 <__smakebuf_r+0xc>
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <__smakebuf_r+0x7c>)
 8007262:	62b3      	str	r3, [r6, #40]	; 0x28
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	6163      	str	r3, [r4, #20]
 8007272:	9b01      	ldr	r3, [sp, #4]
 8007274:	6120      	str	r0, [r4, #16]
 8007276:	b15b      	cbz	r3, 8007290 <__smakebuf_r+0x74>
 8007278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f881 	bl	8007384 <_isatty_r>
 8007282:	b128      	cbz	r0, 8007290 <__smakebuf_r+0x74>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	431d      	orrs	r5, r3
 8007294:	81a5      	strh	r5, [r4, #12]
 8007296:	e7cd      	b.n	8007234 <__smakebuf_r+0x18>
 8007298:	0800660d 	.word	0x0800660d

0800729c <__malloc_lock>:
 800729c:	4770      	bx	lr

0800729e <__malloc_unlock>:
 800729e:	4770      	bx	lr

080072a0 <_free_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4605      	mov	r5, r0
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d045      	beq.n	8007334 <_free_r+0x94>
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f0c      	subs	r4, r1, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb8      	it	lt
 80072b2:	18e4      	addlt	r4, r4, r3
 80072b4:	f7ff fff2 	bl	800729c <__malloc_lock>
 80072b8:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <_free_r+0x98>)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	4610      	mov	r0, r2
 80072be:	b933      	cbnz	r3, 80072ce <_free_r+0x2e>
 80072c0:	6063      	str	r3, [r4, #4]
 80072c2:	6014      	str	r4, [r2, #0]
 80072c4:	4628      	mov	r0, r5
 80072c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ca:	f7ff bfe8 	b.w	800729e <__malloc_unlock>
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	d90c      	bls.n	80072ec <_free_r+0x4c>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	1862      	adds	r2, r4, r1
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bf04      	itt	eq
 80072da:	681a      	ldreq	r2, [r3, #0]
 80072dc:	685b      	ldreq	r3, [r3, #4]
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	bf04      	itt	eq
 80072e2:	1852      	addeq	r2, r2, r1
 80072e4:	6022      	streq	r2, [r4, #0]
 80072e6:	6004      	str	r4, [r0, #0]
 80072e8:	e7ec      	b.n	80072c4 <_free_r+0x24>
 80072ea:	4613      	mov	r3, r2
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	b10a      	cbz	r2, 80072f4 <_free_r+0x54>
 80072f0:	42a2      	cmp	r2, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x4a>
 80072f4:	6819      	ldr	r1, [r3, #0]
 80072f6:	1858      	adds	r0, r3, r1
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x74>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	4401      	add	r1, r0
 8007300:	1858      	adds	r0, r3, r1
 8007302:	4282      	cmp	r2, r0
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	d1dd      	bne.n	80072c4 <_free_r+0x24>
 8007308:	6810      	ldr	r0, [r2, #0]
 800730a:	6852      	ldr	r2, [r2, #4]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	4401      	add	r1, r0
 8007310:	6019      	str	r1, [r3, #0]
 8007312:	e7d7      	b.n	80072c4 <_free_r+0x24>
 8007314:	d902      	bls.n	800731c <_free_r+0x7c>
 8007316:	230c      	movs	r3, #12
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	e7d3      	b.n	80072c4 <_free_r+0x24>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	1821      	adds	r1, r4, r0
 8007320:	428a      	cmp	r2, r1
 8007322:	bf04      	itt	eq
 8007324:	6811      	ldreq	r1, [r2, #0]
 8007326:	6852      	ldreq	r2, [r2, #4]
 8007328:	6062      	str	r2, [r4, #4]
 800732a:	bf04      	itt	eq
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	605c      	str	r4, [r3, #4]
 8007332:	e7c7      	b.n	80072c4 <_free_r+0x24>
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	20001ac0 	.word	0x20001ac0

0800733c <_read_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4c07      	ldr	r4, [pc, #28]	; (800735c <_read_r+0x20>)
 8007340:	4605      	mov	r5, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	6022      	str	r2, [r4, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7f9 fb54 	bl	80009f8 <_read>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_read_r+0x1e>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	b103      	cbz	r3, 800735a <_read_r+0x1e>
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20001be4 	.word	0x20001be4

08007360 <_fstat_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4c07      	ldr	r4, [pc, #28]	; (8007380 <_fstat_r+0x20>)
 8007364:	2300      	movs	r3, #0
 8007366:	4605      	mov	r5, r0
 8007368:	4608      	mov	r0, r1
 800736a:	4611      	mov	r1, r2
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	f7f9 fb88 	bl	8000a82 <_fstat>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d102      	bne.n	800737c <_fstat_r+0x1c>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	b103      	cbz	r3, 800737c <_fstat_r+0x1c>
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	20001be4 	.word	0x20001be4

08007384 <_isatty_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4c06      	ldr	r4, [pc, #24]	; (80073a0 <_isatty_r+0x1c>)
 8007388:	2300      	movs	r3, #0
 800738a:	4605      	mov	r5, r0
 800738c:	4608      	mov	r0, r1
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	f7f9 fb87 	bl	8000aa2 <_isatty>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_isatty_r+0x1a>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	b103      	cbz	r3, 800739e <_isatty_r+0x1a>
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	20001be4 	.word	0x20001be4

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
