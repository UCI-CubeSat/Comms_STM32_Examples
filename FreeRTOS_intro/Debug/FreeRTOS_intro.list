
FreeRTOS_intro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ac  080049ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080049ac  080049ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ac  080049ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ac  080049ac  000149ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  20000010  080049c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  080049c4  00021984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017775  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a7f  00000000  00000000  000377b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  0003a238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b51  00000000  00000000  0003c610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f139  00000000  00000000  0003f161  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7468  00000000  00000000  0004e29a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  00145780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048dc 	.word	0x080048dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080048dc 	.word	0x080048dc

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9d7 	bl	8000586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f824 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f874 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fe0a 	bl	8001df8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80001e4:	4a09      	ldr	r2, [pc, #36]	; (800020c <main+0x3c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x40>)
 80001ea:	f001 fe6f 	bl	8001ecc <osThreadNew>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <main+0x44>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <main+0x48>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0x4c>)
 80001fa:	f001 fe67 	bl	8001ecc <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <main+0x50>)
 8000202:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f001 fe2c 	bl	8001e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x38>
 800020a:	bf00      	nop
 800020c:	0800491c 	.word	0x0800491c
 8000210:	08000329 	.word	0x08000329
 8000214:	200018ec 	.word	0x200018ec
 8000218:	08004940 	.word	0x08004940
 800021c:	08000345 	.word	0x08000345
 8000220:	200018f0 	.word	0x200018f0

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b096      	sub	sp, #88	; 0x58
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0314 	add.w	r3, r7, #20
 800022e:	2244      	movs	r2, #68	; 0x44
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 fb49 	bl	80048ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000246:	2310      	movs	r3, #16
 8000248:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000252:	2360      	movs	r3, #96	; 0x60
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800025a:	2301      	movs	r3, #1
 800025c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800025e:	2301      	movs	r3, #1
 8000260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000262:	2328      	movs	r3, #40	; 0x28
 8000264:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000266:	2307      	movs	r3, #7
 8000268:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fcde 	bl	8000c38 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000282:	f000 f87f 	bl	8000384 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2303      	movs	r3, #3
 800028c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	2104      	movs	r1, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 f8b0 	bl	8001404 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002aa:	f000 f86b 	bl	8000384 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b2:	f000 fc6b 	bl	8000b8c <HAL_PWREx_ControlVoltageScaling>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002bc:	f000 f862 	bl	8000384 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_GPIO_Init+0x5c>)
 80002de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <MX_GPIO_Init+0x5c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_GPIO_Init+0x5c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	603b      	str	r3, [r7, #0]
 80002f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2120      	movs	r1, #32
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f000 fc06 	bl	8000b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000300:	2320      	movs	r3, #32
 8000302:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 fa50 	bl	80007bc <HAL_GPIO_Init>

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40021000 	.word	0x40021000

08000328 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000330:	2120      	movs	r1, #32
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fc01 	bl	8000b3c <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033e:	f001 fe6b 	bl	8002018 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000342:	e7f5      	b.n	8000330 <StartBlink01+0x8>

08000344 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fbf3 	bl	8000b3c <HAL_GPIO_TogglePin>
	  osDelay(200);
 8000356:	20c8      	movs	r0, #200	; 0xc8
 8000358:	f001 fe5e 	bl	8002018 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800035c:	e7f6      	b.n	800034c <StartBlink02+0x8>
	...

08000360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d101      	bne.n	8000376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000372:	f000 f921 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40001000 	.word	0x40001000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038a:	e7fe      	b.n	800038a <Error_Handler+0x6>

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <HAL_MspInit+0x4c>)
 8000394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <HAL_MspInit+0x4c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6613      	str	r3, [r2, #96]	; 0x60
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <HAL_MspInit+0x4c>)
 80003a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_MspInit+0x4c>)
 80003ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <HAL_MspInit+0x4c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	6593      	str	r3, [r2, #88]	; 0x58
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <HAL_MspInit+0x4c>)
 80003b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	210f      	movs	r1, #15
 80003c6:	f06f 0001 	mvn.w	r0, #1
 80003ca:	f000 f9cd 	bl	8000768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	6879      	ldr	r1, [r7, #4]
 80003f0:	2036      	movs	r0, #54	; 0x36
 80003f2:	f000 f9b9 	bl	8000768 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003f6:	2036      	movs	r0, #54	; 0x36
 80003f8:	f000 f9d2 	bl	80007a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <HAL_InitTick+0x9c>)
 80003fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000400:	4a1d      	ldr	r2, [pc, #116]	; (8000478 <HAL_InitTick+0x9c>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6593      	str	r3, [r2, #88]	; 0x58
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <HAL_InitTick+0x9c>)
 800040a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000414:	f107 0210 	add.w	r2, r7, #16
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 f97e 	bl	8001720 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000424:	f001 f966 	bl	80016f4 <HAL_RCC_GetPCLK1Freq>
 8000428:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <HAL_InitTick+0xa0>)
 800042e:	fba2 2303 	umull	r2, r3, r2, r3
 8000432:	0c9b      	lsrs	r3, r3, #18
 8000434:	3b01      	subs	r3, #1
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_InitTick+0xa4>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <HAL_InitTick+0xa8>)
 800043c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <HAL_InitTick+0xa4>)
 8000440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000444:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_InitTick+0xa4>)
 8000448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800044a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_InitTick+0xa4>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_InitTick+0xa4>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <HAL_InitTick+0xa4>)
 800045a:	f001 f9f3 	bl	8001844 <HAL_TIM_Base_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d104      	bne.n	800046e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <HAL_InitTick+0xa4>)
 8000466:	f001 fa4f 	bl	8001908 <HAL_TIM_Base_Start_IT>
 800046a:	4603      	mov	r3, r0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3730      	adds	r7, #48	; 0x30
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	431bde83 	.word	0x431bde83
 8000480:	200018f4 	.word	0x200018f4
 8000484:	40001000 	.word	0x40001000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <TIM6_DAC_IRQHandler+0x10>)
 80004ba:	f001 fa95 	bl	80019e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200018f4 	.word	0x200018f4

080004c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <SystemInit+0x64>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <SystemInit+0x64>)
 80004d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <SystemInit+0x68>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <SystemInit+0x68>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <SystemInit+0x68>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <SystemInit+0x68>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <SystemInit+0x68>)
 80004f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <SystemInit+0x68>)
 8000500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000504:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <SystemInit+0x68>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <SystemInit+0x68>)
 800050c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000510:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <SystemInit+0x68>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <SystemInit+0x64>)
 800051a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800051e:	609a      	str	r2, [r3, #8]
#endif
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	40021000 	.word	0x40021000

08000534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800056c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000538:	f7ff ffc6 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800053c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800053e:	e003      	b.n	8000548 <LoopCopyDataInit>

08000540 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000542:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000544:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000546:	3104      	adds	r1, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <LoopForever+0xa>)
	ldr	r3, =_edata
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <LoopForever+0xe>)
	adds	r2, r0, r1
 800054c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800054e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000550:	d3f6      	bcc.n	8000540 <CopyDataInit>
	ldr	r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000554:	e002      	b.n	800055c <LoopFillZerobss>

08000556 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000556:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000558:	f842 3b04 	str.w	r3, [r2], #4

0800055c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LoopForever+0x16>)
	cmp	r2, r3
 800055e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000560:	d3f9      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000562:	f004 f983 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000566:	f7ff fe33 	bl	80001d0 <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800056c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000570:	080049b4 	.word	0x080049b4
	ldr	r0, =_sdata
 8000574:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000578:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800057c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000580:	20001984 	.word	0x20001984

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>

08000586 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f8de 	bl	8000752 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff20 	bl	80003dc <HAL_InitTick>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	e001      	b.n	80005ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a8:	f7ff fef0 	bl	800038c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20001940 	.word	0x20001940

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20001940 	.word	0x20001940

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff4c 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800077a:	f7ff ff61 	bl	8000640 <__NVIC_GetPriorityGrouping>
 800077e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	68b9      	ldr	r1, [r7, #8]
 8000784:	6978      	ldr	r0, [r7, #20]
 8000786:	f7ff ffb1 	bl	80006ec <NVIC_EncodePriority>
 800078a:	4602      	mov	r2, r0
 800078c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff80 	bl	8000698 <__NVIC_SetPriority>
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff54 	bl	800065c <__NVIC_EnableIRQ>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e17f      	b.n	8000acc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 8171 	beq.w	8000ac6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d00b      	beq.n	8000804 <HAL_GPIO_Init+0x48>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d007      	beq.n	8000804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	2b11      	cmp	r3, #17
 80007fa:	d003      	beq.n	8000804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b12      	cmp	r3, #18
 8000802:	d130      	bne.n	8000866 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2203      	movs	r2, #3
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4313      	orrs	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800083a:	2201      	movs	r2, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	091b      	lsrs	r3, r3, #4
 8000850:	f003 0201 	and.w	r2, r3, #1
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0303 	and.w	r3, r3, #3
 800086e:	2b03      	cmp	r3, #3
 8000870:	d118      	bne.n	80008a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000878:	2201      	movs	r2, #1
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	f003 0201 	and.w	r2, r3, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d003      	beq.n	80008e4 <HAL_GPIO_Init+0x128>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b12      	cmp	r3, #18
 80008e2:	d123      	bne.n	800092c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	08da      	lsrs	r2, r3, #3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	220f      	movs	r2, #15
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	691a      	ldr	r2, [r3, #16]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	08da      	lsrs	r2, r3, #3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3208      	adds	r2, #8
 8000926:	6939      	ldr	r1, [r7, #16]
 8000928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f003 0203 	and.w	r2, r3, #3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	2b00      	cmp	r3, #0
 800096a:	f000 80ac 	beq.w	8000ac6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a5d      	ldr	r2, [pc, #372]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000986:	4a59      	ldr	r2, [pc, #356]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	220f      	movs	r2, #15
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009b0:	d025      	beq.n	80009fe <HAL_GPIO_Init+0x242>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <HAL_GPIO_Init+0x334>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d01f      	beq.n	80009fa <HAL_GPIO_Init+0x23e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4d      	ldr	r2, [pc, #308]	; (8000af4 <HAL_GPIO_Init+0x338>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d019      	beq.n	80009f6 <HAL_GPIO_Init+0x23a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4c      	ldr	r2, [pc, #304]	; (8000af8 <HAL_GPIO_Init+0x33c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x236>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4b      	ldr	r2, [pc, #300]	; (8000afc <HAL_GPIO_Init+0x340>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x232>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4a      	ldr	r2, [pc, #296]	; (8000b00 <HAL_GPIO_Init+0x344>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x22e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a49      	ldr	r2, [pc, #292]	; (8000b04 <HAL_GPIO_Init+0x348>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x22a>
 80009e2:	2306      	movs	r3, #6
 80009e4:	e00c      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009e6:	2307      	movs	r3, #7
 80009e8:	e00a      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009ea:	2305      	movs	r3, #5
 80009ec:	e008      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009ee:	2304      	movs	r3, #4
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e004      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x244>
 80009fe:	2300      	movs	r3, #0
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	f002 0203 	and.w	r2, r2, #3
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a10:	4936      	ldr	r1, [pc, #216]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_GPIO_Init+0x34c>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f47f ae78 	bne.w	80007cc <HAL_GPIO_Init+0x10>
  }
}
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	48000400 	.word	0x48000400
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000c00 	.word	0x48000c00
 8000afc:	48001000 	.word	0x48001000
 8000b00:	48001400 	.word	0x48001400
 8000b04:	48001800 	.word	0x48001800
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b1c:	787b      	ldrb	r3, [r7, #1]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b28:	e002      	b.n	8000b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43d9      	mvns	r1, r3
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	400b      	ands	r3, r1
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40007000 	.word	0x40007000

08000b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9a:	d130      	bne.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba8:	d038      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2232      	movs	r2, #50	; 0x32
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd0:	e002      	b.n	8000bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be4:	d102      	bne.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f2      	bne.n	8000bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf8:	d110      	bne.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e00f      	b.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0a:	d007      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c14:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40007000 	.word	0x40007000
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e3d4      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4a:	4ba1      	ldr	r3, [pc, #644]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c54:	4b9e      	ldr	r3, [pc, #632]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80e4 	beq.w	8000e34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <HAL_RCC_OscConfig+0x4a>
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	f040 808b 	bne.w	8000d90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	f040 8087 	bne.w	8000d90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c82:	4b93      	ldr	r3, [pc, #588]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <HAL_RCC_OscConfig+0x62>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e3ac      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1a      	ldr	r2, [r3, #32]
 8000c9e:	4b8c      	ldr	r3, [pc, #560]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x7c>
 8000caa:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb2:	e005      	b.n	8000cc0 <HAL_RCC_OscConfig+0x88>
 8000cb4:	4b86      	ldr	r3, [pc, #536]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d223      	bcs.n	8000d0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fd5b 	bl	8001784 <RCC_SetFlashLatencyFromMSIRange>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e38d      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd8:	4b7d      	ldr	r3, [pc, #500]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a7c      	ldr	r2, [pc, #496]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b7a      	ldr	r3, [pc, #488]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4977      	ldr	r1, [pc, #476]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf6:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	4972      	ldr	r1, [pc, #456]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	604b      	str	r3, [r1, #4]
 8000d0a:	e025      	b.n	8000d58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0c:	4b70      	ldr	r3, [pc, #448]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a6f      	ldr	r2, [pc, #444]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b6d      	ldr	r3, [pc, #436]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	496a      	ldr	r1, [pc, #424]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2a:	4b69      	ldr	r3, [pc, #420]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	4965      	ldr	r1, [pc, #404]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d109      	bne.n	8000d58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd1b 	bl	8001784 <RCC_SetFlashLatencyFromMSIRange>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e34d      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d58:	f000 fc36 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	4a5a      	ldr	r2, [pc, #360]	; (8000ed4 <HAL_RCC_OscConfig+0x29c>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_RCC_OscConfig+0x2a0>)
 8000d76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <HAL_RCC_OscConfig+0x2a4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb2d 	bl	80003dc <HAL_InitTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d052      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	e331      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d032      	beq.n	8000dfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc1c 	bl	80005e0 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc18 	bl	80005e0 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e31a      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dbe:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	493b      	ldr	r1, [pc, #236]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	4936      	ldr	r1, [pc, #216]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	e01a      	b.n	8000e34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fbe9 	bl	80005e0 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e12:	f7ff fbe5 	bl	80005e0 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e2e7      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1da>
 8000e30:	e000      	b.n	8000e34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d074      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_OscConfig+0x21a>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d10e      	bne.n	8000e6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d10b      	bne.n	8000e6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d064      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d160      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e2c4      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x24a>
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e01d      	b.n	8000ebe <HAL_RCC_OscConfig+0x286>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e8a:	d10c      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x26e>
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e00b      	b.n	8000ebe <HAL_RCC_OscConfig+0x286>
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_RCC_OscConfig+0x298>)
 8000eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d01c      	beq.n	8000f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fb8b 	bl	80005e0 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ecc:	e011      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	08004964 	.word	0x08004964
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fb7e 	bl	80005e0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	; 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e280      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef2:	4baf      	ldr	r3, [pc, #700]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2a8>
 8000efe:	e014      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb6e 	bl	80005e0 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fb6a 	bl	80005e0 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e26c      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1a:	4ba5      	ldr	r3, [pc, #660]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2d0>
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d060      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x310>
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d119      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d116      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f48:	4b99      	ldr	r3, [pc, #612]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_OscConfig+0x328>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e249      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	4990      	ldr	r1, [pc, #576]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f74:	e040      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d023      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a8b      	ldr	r2, [pc, #556]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb29 	bl	80005e0 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb25 	bl	80005e0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e227      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa4:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	497c      	ldr	r1, [pc, #496]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e018      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a79      	ldr	r2, [pc, #484]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb05 	bl	80005e0 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb01 	bl	80005e0 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e203      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d03c      	beq.n	800107e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01c      	beq.n	8001046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001012:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101c:	f7ff fae0 	bl	80005e0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fadc 	bl	80005e0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1de      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001036:	4b5e      	ldr	r3, [pc, #376]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ef      	beq.n	8001024 <HAL_RCC_OscConfig+0x3ec>
 8001044:	e01b      	b.n	800107e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001056:	f7ff fac3 	bl	80005e0 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fabf 	bl	80005e0 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1c1      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ef      	bne.n	800105e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a6 	beq.w	80011d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001090:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10d      	bne.n	80010b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6593      	str	r3, [r2, #88]	; 0x58
 80010a8:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b8:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_RCC_OscConfig+0x57c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d118      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <HAL_RCC_OscConfig+0x57c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3a      	ldr	r2, [pc, #232]	; (80011b4 <HAL_RCC_OscConfig+0x57c>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fa86 	bl	80005e0 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff fa82 	bl	80005e0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e184      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_RCC_OscConfig+0x57c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d8>
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800110e:	e024      	b.n	800115a <HAL_RCC_OscConfig+0x522>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d110      	bne.n	800113a <HAL_RCC_OscConfig+0x502>
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800111e:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001138:	e00f      	b.n	800115a <HAL_RCC_OscConfig+0x522>
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001142:	f023 0301 	bic.w	r3, r3, #1
 8001146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 800114c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001152:	f023 0304 	bic.w	r3, r3, #4
 8001156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fa3d 	bl	80005e0 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001168:	e00a      	b.n	8001180 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f7ff fa39 	bl	80005e0 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e139      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x578>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0ed      	beq.n	800116a <HAL_RCC_OscConfig+0x532>
 800118e:	e01a      	b.n	80011c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fa26 	bl	80005e0 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001196:	e00f      	b.n	80011b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001198:	f7ff fa22 	bl	80005e0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d906      	bls.n	80011b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e122      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b8:	4b90      	ldr	r3, [pc, #576]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1e8      	bne.n	8001198 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	4b8b      	ldr	r3, [pc, #556]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a8a      	ldr	r2, [pc, #552]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80011d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8108 	beq.w	80013f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	f040 80d0 	bne.w	800138c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011ec:	4b83      	ldr	r3, [pc, #524]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d130      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	3b01      	subs	r3, #1
 800120c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d127      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d11f      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800122c:	2a07      	cmp	r2, #7
 800122e:	bf14      	ite	ne
 8001230:	2201      	movne	r2, #1
 8001232:	2200      	moveq	r2, #0
 8001234:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001236:	4293      	cmp	r3, r2
 8001238:	d113      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	3b01      	subs	r3, #1
 8001248:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d109      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	3b01      	subs	r3, #1
 800125c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800125e:	429a      	cmp	r2, r3
 8001260:	d06e      	beq.n	8001340 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d069      	beq.n	800133c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001268:	4b64      	ldr	r3, [pc, #400]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001274:	4b61      	ldr	r3, [pc, #388]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b7      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800128a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800128e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001290:	f7ff f9a6 	bl	80005e0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff f9a2 	bl	80005e0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e0a4      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b6:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x7c8>)
 80012bc:	4013      	ands	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012c6:	3a01      	subs	r2, #1
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	4311      	orrs	r1, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012d0:	0212      	lsls	r2, r2, #8
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012d8:	0852      	lsrs	r2, r2, #1
 80012da:	3a01      	subs	r2, #1
 80012dc:	0552      	lsls	r2, r2, #21
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012e4:	0852      	lsrs	r2, r2, #1
 80012e6:	3a01      	subs	r2, #1
 80012e8:	0652      	lsls	r2, r2, #25
 80012ea:	4311      	orrs	r1, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012f0:	0912      	lsrs	r2, r2, #4
 80012f2:	0452      	lsls	r2, r2, #17
 80012f4:	430a      	orrs	r2, r1
 80012f6:	4941      	ldr	r1, [pc, #260]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a3b      	ldr	r2, [pc, #236]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001314:	f7ff f964 	bl	80005e0 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff f960 	bl	80005e0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e062      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133a:	e05a      	b.n	80013f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e059      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d152      	bne.n	80013f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001364:	f7ff f93c 	bl	80005e0 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f938 	bl	80005e0 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e03a      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x734>
 800138a:	e032      	b.n	80013f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d02d      	beq.n	80013ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 8001398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800139c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d105      	bne.n	80013b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013b0:	f023 0303 	bic.w	r3, r3, #3
 80013b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff f90b 	bl	80005e0 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff f907 	bl	80005e0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e009      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x7c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x796>
 80013ec:	e001      	b.n	80013f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	f99d808c 	.word	0xf99d808c

08001404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0c8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d910      	bls.n	8001448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 0207 	bic.w	r2, r3, #7
 800142e:	4961      	ldr	r1, [pc, #388]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0b0      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d04c      	beq.n	80014ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d107      	bne.n	800146c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d121      	bne.n	80014ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e09e      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d107      	bne.n	8001484 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d115      	bne.n	80014ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e092      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e086      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e07e      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 0203 	bic.w	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	493f      	ldr	r1, [pc, #252]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014be:	f7ff f88f 	bl	80005e0 <HAL_GetTick>
 80014c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c6:	f7ff f88b 	bl	80005e0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e066      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 020c 	and.w	r2, r3, #12
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d1eb      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	492c      	ldr	r1, [pc, #176]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d210      	bcs.n	800153c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 0207 	bic.w	r2, r3, #7
 8001522:	4924      	ldr	r1, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1b0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e036      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4918      	ldr	r1, [pc, #96]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4910      	ldr	r1, [pc, #64]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800157a:	f000 f825 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 800157e:	4601      	mov	r1, r0
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa21 f303 	lsr.w	r3, r1, r3
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff1c 	bl	80003dc <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80015a8:	7afb      	ldrb	r3, [r7, #11]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08004964 	.word	0x08004964
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x34>
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d121      	bne.n	800163a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11e      	bne.n	800163a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015fc:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e005      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001624:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d102      	bne.n	8001646 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	e004      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d101      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800164e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d133      	bne.n	80016be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0xa4>
 8001666:	2b03      	cmp	r3, #3
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0xaa>
 800166a:	e005      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800166e:	617b      	str	r3, [r7, #20]
      break;
 8001670:	e005      	b.n	800167e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001674:	617b      	str	r3, [r7, #20]
      break;
 8001676:	e002      	b.n	800167e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	617b      	str	r3, [r7, #20]
      break;
 800167c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	fb02 f203 	mul.w	r2, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_GetSysClockFreq+0x104>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0e5b      	lsrs	r3, r3, #25
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	3301      	adds	r3, #1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016be:	69bb      	ldr	r3, [r7, #24]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3724      	adds	r7, #36	; 0x24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	0800497c 	.word	0x0800497c
 80016d4:	00f42400 	.word	0x00f42400
 80016d8:	007a1200 	.word	0x007a1200

080016dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000

080016f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016f8:	f7ff fff0 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 80016fc:	4601      	mov	r1, r0
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_RCC_GetPCLK1Freq+0x28>)
 800170a:	5cd3      	ldrb	r3, [r2, r3]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	08004974 	.word	0x08004974

08001720 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220f      	movs	r2, #15
 800172e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_RCC_GetClockConfig+0x5c>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_RCC_GetClockConfig+0x60>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0207 	and.w	r2, r3, #7
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40022000 	.word	0x40022000

08001784 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800179c:	f7ff f9e8 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 80017a0:	6178      	str	r0, [r7, #20]
 80017a2:	e014      	b.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	4a24      	ldr	r2, [pc, #144]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6593      	str	r3, [r2, #88]	; 0x58
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017bc:	f7ff f9d8 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 80017c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d4:	d10b      	bne.n	80017ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d919      	bls.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2ba0      	cmp	r3, #160	; 0xa0
 80017e0:	d902      	bls.n	80017e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e2:	2302      	movs	r3, #2
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e013      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e8:	2301      	movs	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e010      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d902      	bls.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017f4:	2303      	movs	r3, #3
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	e00a      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b80      	cmp	r3, #128	; 0x80
 80017fe:	d102      	bne.n	8001806 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e004      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b70      	cmp	r3, #112	; 0x70
 800180a:	d101      	bne.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800180c:	2301      	movs	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 0207 	bic.w	r2, r3, #7
 8001818:	4909      	ldr	r1, [pc, #36]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	40022000 	.word	0x40022000

08001844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e049      	b.n	80018ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f841 	bl	80018f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f000 f9f8 	bl	8001c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d001      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e04f      	b.n	80019c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_TIM_Base_Start_IT+0xc4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01d      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d018      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00e      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d009      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_TIM_Base_Start_IT+0xd4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d004      	beq.n	800197e <HAL_TIM_Base_Start_IT+0x76>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d115      	bne.n	80019aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b06      	cmp	r3, #6
 800198e:	d015      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0xb4>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d011      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a8:	e008      	b.n	80019bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e000      	b.n	80019be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40000c00 	.word	0x40000c00
 80019dc:	40013400 	.word	0x40013400
 80019e0:	40014000 	.word	0x40014000
 80019e4:	00010007 	.word	0x00010007

080019e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d122      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d11b      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 0202 	mvn.w	r2, #2
 8001a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f905 	bl	8001c3a <HAL_TIM_IC_CaptureCallback>
 8001a30:	e005      	b.n	8001a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8f7 	bl	8001c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f908 	bl	8001c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d122      	bne.n	8001a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d11b      	bne.n	8001a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0204 	mvn.w	r2, #4
 8001a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8db 	bl	8001c3a <HAL_TIM_IC_CaptureCallback>
 8001a84:	e005      	b.n	8001a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8cd 	bl	8001c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f8de 	bl	8001c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d122      	bne.n	8001aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d11b      	bne.n	8001aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0208 	mvn.w	r2, #8
 8001abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f8b1 	bl	8001c3a <HAL_TIM_IC_CaptureCallback>
 8001ad8:	e005      	b.n	8001ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f8a3 	bl	8001c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8b4 	bl	8001c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d122      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d11b      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0210 	mvn.w	r2, #16
 8001b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2208      	movs	r2, #8
 8001b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f887 	bl	8001c3a <HAL_TIM_IC_CaptureCallback>
 8001b2c:	e005      	b.n	8001b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f879 	bl	8001c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f88a 	bl	8001c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0201 	mvn.w	r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fbfa 	bl	8000360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	2b80      	cmp	r3, #128	; 0x80
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b80      	cmp	r3, #128	; 0x80
 8001b86:	d107      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f914 	bl	8001dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba6:	d10e      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d107      	bne.n	8001bc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f907 	bl	8001dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d10e      	bne.n	8001bf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d107      	bne.n	8001bf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f838 	bl	8001c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d10e      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d107      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f06f 0220 	mvn.w	r2, #32
 8001c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8c7 	bl	8001dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <TIM_Base_SetConfig+0x114>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <TIM_Base_SetConfig+0x40>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d00f      	beq.n	8001cb8 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <TIM_Base_SetConfig+0x118>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00b      	beq.n	8001cb8 <TIM_Base_SetConfig+0x40>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3c      	ldr	r2, [pc, #240]	; (8001d94 <TIM_Base_SetConfig+0x11c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <TIM_Base_SetConfig+0x40>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3b      	ldr	r2, [pc, #236]	; (8001d98 <TIM_Base_SetConfig+0x120>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <TIM_Base_SetConfig+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <TIM_Base_SetConfig+0x124>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <TIM_Base_SetConfig+0x114>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d01b      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <TIM_Base_SetConfig+0x118>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d017      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <TIM_Base_SetConfig+0x11c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <TIM_Base_SetConfig+0x120>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00f      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <TIM_Base_SetConfig+0x124>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00b      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <TIM_Base_SetConfig+0x128>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <TIM_Base_SetConfig+0x12c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d003      	beq.n	8001d12 <TIM_Base_SetConfig+0x9a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <TIM_Base_SetConfig+0x130>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <TIM_Base_SetConfig+0x114>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00f      	beq.n	8001d70 <TIM_Base_SetConfig+0xf8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <TIM_Base_SetConfig+0x124>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0xf8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <TIM_Base_SetConfig+0x128>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0xf8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <TIM_Base_SetConfig+0x12c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0xf8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <TIM_Base_SetConfig+0x130>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	615a      	str	r2, [r3, #20]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40000800 	.word	0x40000800
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	40013400 	.word	0x40013400
 8001da0:	40014000 	.word	0x40014000
 8001da4:	40014400 	.word	0x40014400
 8001da8:	40014800 	.word	0x40014800

08001dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dfe:	f3ef 8305 	mrs	r3, IPSR
 8001e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e16:	f3ef 8311 	mrs	r3, BASEPRI
 8001e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <osKernelInitialize+0x3a>
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <osKernelInitialize+0x64>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e2a:	f06f 0305 	mvn.w	r3, #5
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e00c      	b.n	8001e4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <osKernelInitialize+0x64>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <osKernelInitialize+0x64>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e002      	b.n	8001e4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000002c 	.word	0x2000002c

08001e60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e66:	f3ef 8305 	mrs	r3, IPSR
 8001e6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e72:	f3ef 8310 	mrs	r3, PRIMASK
 8001e76:	607b      	str	r3, [r7, #4]
  return(result);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e82:	603b      	str	r3, [r7, #0]
  return(result);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <osKernelStart+0x3a>
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <osKernelStart+0x68>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d103      	bne.n	8001e9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e92:	f06f 0305 	mvn.w	r3, #5
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e010      	b.n	8001ebc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <osKernelStart+0x68>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d109      	bne.n	8001eb6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001ea2:	f7ff ffa1 	bl	8001de8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <osKernelStart+0x68>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001eac:	f001 f870 	bl	8002f90 <vTaskStartScheduler>
      stat = osOK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e002      	b.n	8001ebc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000002c 	.word	0x2000002c

08001ecc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b090      	sub	sp, #64	; 0x40
 8001ed0:	af04      	add	r7, sp, #16
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001edc:	f3ef 8305 	mrs	r3, IPSR
 8001ee0:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ee2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 808f 	bne.w	8002008 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eea:	f3ef 8310 	mrs	r3, PRIMASK
 8001eee:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8001efa:	617b      	str	r3, [r7, #20]
  return(result);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <osThreadNew+0x3e>
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <osThreadNew+0x148>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d07e      	beq.n	8002008 <osThreadNew+0x13c>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d07b      	beq.n	8002008 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001f14:	2318      	movs	r3, #24
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d045      	beq.n	8001fb4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <osThreadNew+0x6a>
        name = attr->name;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <osThreadNew+0x90>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	2b38      	cmp	r3, #56	; 0x38
 8001f4e:	d805      	bhi.n	8001f5c <osThreadNew+0x90>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <osThreadNew+0x94>
        return (NULL);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e054      	b.n	800200a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <osThreadNew+0xca>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b5b      	cmp	r3, #91	; 0x5b
 8001f7e:	d90a      	bls.n	8001f96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <osThreadNew+0xca>
        mem = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	e010      	b.n	8001fb8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <osThreadNew+0xec>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <osThreadNew+0xec>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <osThreadNew+0xec>
          mem = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	e001      	b.n	8001fb8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d110      	bne.n	8001fe0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fe09 	bl	8002bec <xTaskCreateStatic>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e013      	b.n	8002008 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d110      	bne.n	8002008 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 fe51 	bl	8002ca0 <xTaskCreate>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <osThreadNew+0x13c>
          hTask = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002008:	693b      	ldr	r3, [r7, #16]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3730      	adds	r7, #48	; 0x30
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000002c 	.word	0x2000002c

08002018 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002020:	f3ef 8305 	mrs	r3, IPSR
 8002024:	613b      	str	r3, [r7, #16]
  return(result);
 8002026:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10f      	bne.n	800204c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202c:	f3ef 8310 	mrs	r3, PRIMASK
 8002030:	60fb      	str	r3, [r7, #12]
  return(result);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002038:	f3ef 8311 	mrs	r3, BASEPRI
 800203c:	60bb      	str	r3, [r7, #8]
  return(result);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <osDelay+0x3c>
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <osDelay+0x58>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d103      	bne.n	8002054 <osDelay+0x3c>
    stat = osErrorISR;
 800204c:	f06f 0305 	mvn.w	r3, #5
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e007      	b.n	8002064 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <osDelay+0x4c>
      vTaskDelay(ticks);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 ff62 	bl	8002f28 <vTaskDelay>
    }
  }

  return (stat);
 8002064:	697b      	ldr	r3, [r7, #20]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000002c 	.word	0x2000002c

08002074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <vApplicationGetIdleTaskMemory+0x30>)
 800208a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000030 	.word	0x20000030
 80020a4:	2000008c 	.word	0x2000008c

080020a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80020b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <vApplicationGetTimerTaskMemory+0x30>)
 80020be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	2000028c 	.word	0x2000028c
 80020d8:	200002e8 	.word	0x200002e8

080020dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f103 0208 	add.w	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d103      	bne.n	800219e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e00c      	b.n	80021b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3308      	adds	r3, #8
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e002      	b.n	80021ac <vListInsert+0x2e>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d2f6      	bcs.n	80021a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6892      	ldr	r2, [r2, #8]
 8002206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6852      	ldr	r2, [r2, #4]
 8002210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d103      	bne.n	8002224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	e7fe      	b.n	800226a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800226c:	f002 f80e 	bl	800428c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	441a      	add	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	3b01      	subs	r3, #1
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	441a      	add	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	22ff      	movs	r2, #255	; 0xff
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d114      	bne.n	80022ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3310      	adds	r3, #16
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f8de 	bl	8003490 <xTaskRemoveFromEventList>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <xQueueGenericReset+0xcc>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	e009      	b.n	8002300 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3310      	adds	r3, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fef3 	bl	80020dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3324      	adds	r3, #36	; 0x24
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff feee 	bl	80020dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002300:	f001 fff2 	bl	80042e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <xQueueGenericCreateStatic+0x28>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	e7fe      	b.n	800233a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <xQueueGenericCreateStatic+0x42>
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <xQueueGenericCreateStatic+0x4e>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <xQueueGenericCreateStatic+0x52>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <xQueueGenericCreateStatic+0x54>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <xQueueGenericCreateStatic+0x6c>
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	e7fe      	b.n	800237e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <xQueueGenericCreateStatic+0x78>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <xQueueGenericCreateStatic+0x7c>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <xQueueGenericCreateStatic+0x7e>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <xQueueGenericCreateStatic+0x96>
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023aa:	2350      	movs	r3, #80	; 0x50
 80023ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b50      	cmp	r3, #80	; 0x50
 80023b2:	d009      	beq.n	80023c8 <xQueueGenericCreateStatic+0xb4>
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	e7fe      	b.n	80023c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f805 	bl	80023fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3730      	adds	r7, #48	; 0x30
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e002      	b.n	800241c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002428:	2101      	movs	r1, #1
 800242a:	69b8      	ldr	r0, [r7, #24]
 800242c:	f7ff ff0a 	bl	8002244 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08e      	sub	sp, #56	; 0x38
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <xQueueGenericSend+0x30>
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
 800246e:	e7fe      	b.n	800246e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <xQueueGenericSend+0x3e>
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <xQueueGenericSend+0x42>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <xQueueGenericSend+0x44>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <xQueueGenericSend+0x5c>
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	e7fe      	b.n	800249a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d103      	bne.n	80024aa <xQueueGenericSend+0x6a>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <xQueueGenericSend+0x6e>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericSend+0x70>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <xQueueGenericSend+0x88>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024c8:	f001 f998 	bl	80037fc <xTaskGetSchedulerState>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <xQueueGenericSend+0x98>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xQueueGenericSend+0x9c>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <xQueueGenericSend+0x9e>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <xQueueGenericSend+0xb6>
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024f6:	f001 fec9 	bl	800428c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <xQueueGenericSend+0xcc>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d129      	bne.n	8002560 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002512:	f000 f9ff 	bl	8002914 <prvCopyDataToQueue>
 8002516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	3324      	adds	r3, #36	; 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f000 ffb3 	bl	8003490 <xTaskRemoveFromEventList>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <xQueueGenericSend+0x1f0>)
 8002532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	e00a      	b.n	8002558 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <xQueueGenericSend+0x1f0>)
 800254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002558:	f001 fec6 	bl	80042e8 <vPortExitCritical>
				return pdPASS;
 800255c:	2301      	movs	r3, #1
 800255e:	e063      	b.n	8002628 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002566:	f001 febf 	bl	80042e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800256a:	2300      	movs	r3, #0
 800256c:	e05c      	b.n	8002628 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4618      	mov	r0, r3
 800257a:	f000 ffeb 	bl	8003554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800257e:	2301      	movs	r3, #1
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002582:	f001 feb1 	bl	80042e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002586:	f000 fd67 	bl	8003058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800258a:	f001 fe7f 	bl	800428c <vPortEnterCritical>
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002594:	b25b      	sxtb	r3, r3
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259a:	d103      	bne.n	80025a4 <xQueueGenericSend+0x164>
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b0:	d103      	bne.n	80025ba <xQueueGenericSend+0x17a>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ba:	f001 fe95 	bl	80042e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025be:	1d3a      	adds	r2, r7, #4
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 ffda 	bl	8003580 <xTaskCheckForTimeOut>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d124      	bne.n	800261c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d4:	f000 fa96 	bl	8002b04 <prvIsQueueFull>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	3310      	adds	r3, #16
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 ff04 	bl	80033f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ee:	f000 fa21 	bl	8002a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025f2:	f000 fd3f 	bl	8003074 <xTaskResumeAll>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af7c 	bne.w	80024f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <xQueueGenericSend+0x1f0>)
 8002600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	e772      	b.n	80024f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002612:	f000 fa0f 	bl	8002a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002616:	f000 fd2d 	bl	8003074 <xTaskResumeAll>
 800261a:	e76c      	b.n	80024f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800261c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800261e:	f000 fa09 	bl	8002a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002622:	f000 fd27 	bl	8003074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002628:	4618      	mov	r0, r3
 800262a:	3738      	adds	r7, #56	; 0x38
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <xQueueGenericSendFromISR+0x2c>
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	e7fe      	b.n	800265e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <xQueueGenericSendFromISR+0x3a>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <xQueueGenericSendFromISR+0x3e>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <xQueueGenericSendFromISR+0x40>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <xQueueGenericSendFromISR+0x58>
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	e7fe      	b.n	800268a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d103      	bne.n	800269a <xQueueGenericSendFromISR+0x66>
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <xQueueGenericSendFromISR+0x6a>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueGenericSendFromISR+0x6c>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <xQueueGenericSendFromISR+0x84>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e7fe      	b.n	80026b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026b8:	f001 fec4 	bl	8004444 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026bc:	f3ef 8211 	mrs	r2, BASEPRI
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61ba      	str	r2, [r7, #24]
 80026d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <xQueueGenericSendFromISR+0xb6>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d12c      	bne.n	8002744 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026fa:	f000 f90b 	bl	8002914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002706:	d112      	bne.n	800272e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	3324      	adds	r3, #36	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f000 febb 	bl	8003490 <xTaskRemoveFromEventList>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e007      	b.n	800273e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800272e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002732:	3301      	adds	r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	b25a      	sxtb	r2, r3
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800273e:	2301      	movs	r3, #1
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002742:	e001      	b.n	8002748 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002754:	4618      	mov	r0, r3
 8002756:	3738      	adds	r7, #56	; 0x38
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <xQueueReceive+0x2e>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	e7fe      	b.n	8002788 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <xQueueReceive+0x3c>
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <xQueueReceive+0x40>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <xQueueReceive+0x42>
 800279c:	2300      	movs	r3, #0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <xQueueReceive+0x5a>
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e7fe      	b.n	80027b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027b6:	f001 f821 	bl	80037fc <xTaskGetSchedulerState>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <xQueueReceive+0x6a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueReceive+0x6e>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueReceive+0x70>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <xQueueReceive+0x88>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e7fe      	b.n	80027e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027e4:	f001 fd52 	bl	800428c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01f      	beq.n	8002834 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f8:	f000 f8f6 	bl	80029e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00f      	beq.n	800282c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	3310      	adds	r3, #16
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fe3d 	bl	8003490 <xTaskRemoveFromEventList>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800281c:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <xQueueReceive+0x1b4>)
 800281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800282c:	f001 fd5c 	bl	80042e8 <vPortExitCritical>
				return pdPASS;
 8002830:	2301      	movs	r3, #1
 8002832:	e069      	b.n	8002908 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800283a:	f001 fd55 	bl	80042e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800283e:	2300      	movs	r3, #0
 8002840:	e062      	b.n	8002908 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fe81 	bl	8003554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002852:	2301      	movs	r3, #1
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002856:	f001 fd47 	bl	80042e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800285a:	f000 fbfd 	bl	8003058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800285e:	f001 fd15 	bl	800428c <vPortEnterCritical>
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002868:	b25b      	sxtb	r3, r3
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286e:	d103      	bne.n	8002878 <xQueueReceive+0x11c>
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800287e:	b25b      	sxtb	r3, r3
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002884:	d103      	bne.n	800288e <xQueueReceive+0x132>
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800288e:	f001 fd2b 	bl	80042e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002892:	1d3a      	adds	r2, r7, #4
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fe70 	bl	8003580 <xTaskCheckForTimeOut>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d123      	bne.n	80028ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a8:	f000 f916 	bl	8002ad8 <prvIsQueueEmpty>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	3324      	adds	r3, #36	; 0x24
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd9a 	bl	80033f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c2:	f000 f8b7 	bl	8002a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028c6:	f000 fbd5 	bl	8003074 <xTaskResumeAll>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d189      	bne.n	80027e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <xQueueReceive+0x1b4>)
 80028d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	e780      	b.n	80027e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e4:	f000 f8a6 	bl	8002a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e8:	f000 fbc4 	bl	8003074 <xTaskResumeAll>
 80028ec:	e77a      	b.n	80027e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f0:	f000 f8a0 	bl	8002a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028f4:	f000 fbbe 	bl	8003074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fa:	f000 f8ed 	bl	8002ad8 <prvIsQueueEmpty>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	f43f af6f 	beq.w	80027e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002908:	4618      	mov	r0, r3
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	e000ed04 	.word	0xe000ed04

08002914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d14d      	bne.n	80029d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 ff7a 	bl	8003838 <xTaskPriorityDisinherit>
 8002944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e043      	b.n	80029d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d119      	bne.n	8002988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6858      	ldr	r0, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	461a      	mov	r2, r3
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	f001 ffa8 	bl	80048b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	441a      	add	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d32b      	bcc.n	80029d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	e026      	b.n	80029d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68d8      	ldr	r0, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	461a      	mov	r2, r3
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	f001 ff8e 	bl	80048b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	425b      	negs	r3, r3
 80029a2:	441a      	add	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	425b      	negs	r3, r3
 80029be:	441a      	add	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d105      	bne.n	80029d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029de:	697b      	ldr	r3, [r7, #20]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d018      	beq.n	8002a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	441a      	add	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d303      	bcc.n	8002a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	461a      	mov	r2, r3
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f001 ff44 	bl	80048b4 <memcpy>
	}
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a3c:	f001 fc26 	bl	800428c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a48:	e011      	b.n	8002a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3324      	adds	r3, #36	; 0x24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fd1a 	bl	8003490 <xTaskRemoveFromEventList>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a62:	f000 fded 	bl	8003640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	dce9      	bgt.n	8002a4a <prvUnlockQueue+0x16>
 8002a76:	e000      	b.n	8002a7a <prvUnlockQueue+0x46>
					break;
 8002a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a82:	f001 fc31 	bl	80042e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a86:	f001 fc01 	bl	800428c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a92:	e011      	b.n	8002ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fcf5 	bl	8003490 <xTaskRemoveFromEventList>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002aac:	f000 fdc8 	bl	8003640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	dce9      	bgt.n	8002a94 <prvUnlockQueue+0x60>
 8002ac0:	e000      	b.n	8002ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002acc:	f001 fc0c 	bl	80042e8 <vPortExitCritical>
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ae0:	f001 fbd4 	bl	800428c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e001      	b.n	8002af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002af6:	f001 fbf7 	bl	80042e8 <vPortExitCritical>

	return xReturn;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b0c:	f001 fbbe 	bl	800428c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d102      	bne.n	8002b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e001      	b.n	8002b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fbdf 	bl	80042e8 <vPortExitCritical>

	return xReturn;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e014      	b.n	8002b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <vQueueAddToRegistry+0x4c>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10b      	bne.n	8002b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b50:	490b      	ldr	r1, [pc, #44]	; (8002b80 <vQueueAddToRegistry+0x4c>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <vQueueAddToRegistry+0x4c>)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b66:	e005      	b.n	8002b74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b07      	cmp	r3, #7
 8002b72:	d9e7      	bls.n	8002b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20001944 	.word	0x20001944

08002b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b94:	f001 fb7a 	bl	800428c <vPortEnterCritical>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba4:	d103      	bne.n	8002bae <vQueueWaitForMessageRestricted+0x2a>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bba:	d103      	bne.n	8002bc4 <vQueueWaitForMessageRestricted+0x40>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bc4:	f001 fb90 	bl	80042e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3324      	adds	r3, #36	; 0x24
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fc2f 	bl	800343c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff28 	bl	8002a34 <prvUnlockQueue>
	}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <xTaskCreateStatic+0x28>
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	e7fe      	b.n	8002c12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <xTaskCreateStatic+0x42>
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e7fe      	b.n	8002c2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c2e:	235c      	movs	r3, #92	; 0x5c
 8002c30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b5c      	cmp	r3, #92	; 0x5c
 8002c36:	d009      	beq.n	8002c4c <xTaskCreateStatic+0x60>
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e7fe      	b.n	8002c4a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01e      	beq.n	8002c92 <xTaskCreateStatic+0xa6>
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01b      	beq.n	8002c92 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f850 	bl	8002d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c8c:	f000 f8dc 	bl	8002e48 <prvAddNewTaskToReadyList>
 8002c90:	e001      	b.n	8002c96 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c96:	697b      	ldr	r3, [r7, #20]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fc03 	bl	80044c0 <pvPortMalloc>
 8002cba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc2:	205c      	movs	r0, #92	; 0x5c
 8002cc4:	f001 fbfc 	bl	80044c0 <pvPortMalloc>
 8002cc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd6:	e005      	b.n	8002ce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f001 fcb3 	bl	8004644 <vPortFree>
 8002cde:	e001      	b.n	8002ce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9303      	str	r3, [sp, #12]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f80e 	bl	8002d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d0e:	69f8      	ldr	r0, [r7, #28]
 8002d10:	f000 f89a 	bl	8002e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e002      	b.n	8002d20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d20:	69bb      	ldr	r3, [r7, #24]
	}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b088      	sub	sp, #32
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	21a5      	movs	r1, #165	; 0xa5
 8002d44:	f001 fdc1 	bl	80048ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d52:	3b01      	subs	r3, #1
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f023 0307 	bic.w	r3, r3, #7
 8002d60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <prvInitialiseNewTask+0x56>
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e7fe      	b.n	8002d7e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01f      	beq.n	8002dc6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e012      	b.n	8002db2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	7819      	ldrb	r1, [r3, #0]
 8002d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3334      	adds	r3, #52	; 0x34
 8002d9c:	460a      	mov	r2, r1
 8002d9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4413      	add	r3, r2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d9e9      	bls.n	8002d8c <prvInitialiseNewTask+0x62>
 8002db8:	e000      	b.n	8002dbc <prvInitialiseNewTask+0x92>
			{
				break;
 8002dba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dc4:	e003      	b.n	8002dce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2b37      	cmp	r3, #55	; 0x37
 8002dd2:	d901      	bls.n	8002dd8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dd4:	2337      	movs	r3, #55	; 0x37
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	3304      	adds	r3, #4
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f994 	bl	800211c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	3318      	adds	r3, #24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f98f 	bl	800211c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	69b8      	ldr	r0, [r7, #24]
 8002e28:	f001 f90c 	bl	8004044 <pxPortInitialiseStack>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e3e:	bf00      	nop
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e50:	f001 fa1c 	bl	800428c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <prvAddNewTaskToReadyList+0xc4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <prvAddNewTaskToReadyList+0xc4>)
 8002e5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e66:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <prvAddNewTaskToReadyList+0xc8>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <prvAddNewTaskToReadyList+0xc4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d110      	bne.n	8002e96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e74:	f000 fc08 	bl	8003688 <prvInitialiseTaskLists>
 8002e78:	e00d      	b.n	8002e96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <prvAddNewTaskToReadyList+0xcc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <prvAddNewTaskToReadyList+0xc8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d802      	bhi.n	8002e96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <prvAddNewTaskToReadyList+0xc8>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <prvAddNewTaskToReadyList+0xd0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <prvAddNewTaskToReadyList+0xd0>)
 8002e9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <prvAddNewTaskToReadyList+0xd0>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <prvAddNewTaskToReadyList+0xd4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d903      	bls.n	8002ebc <prvAddNewTaskToReadyList+0x74>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <prvAddNewTaskToReadyList+0xd4>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <prvAddNewTaskToReadyList+0xd8>)
 8002eca:	441a      	add	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7ff f92f 	bl	8002136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ed8:	f001 fa06 	bl	80042e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <prvAddNewTaskToReadyList+0xcc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <prvAddNewTaskToReadyList+0xc8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d207      	bcs.n	8002f02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <prvAddNewTaskToReadyList+0xdc>)
 8002ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000bbc 	.word	0x20000bbc
 8002f10:	200006e8 	.word	0x200006e8
 8002f14:	20000bc8 	.word	0x20000bc8
 8002f18:	20000bd8 	.word	0x20000bd8
 8002f1c:	20000bc4 	.word	0x20000bc4
 8002f20:	200006ec 	.word	0x200006ec
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <vTaskDelay+0x60>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <vTaskDelay+0x2e>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	e7fe      	b.n	8002f54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f56:	f000 f87f 	bl	8003058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fcd7 	bl	8003910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f62:	f000 f887 	bl	8003074 <xTaskResumeAll>
 8002f66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <vTaskDelay+0x64>)
 8002f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000be4 	.word	0x20000be4
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f9e:	463a      	mov	r2, r7
 8002fa0:	1d39      	adds	r1, r7, #4
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f864 	bl	8002074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fac:	6839      	ldr	r1, [r7, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	9202      	str	r2, [sp, #8]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	4920      	ldr	r1, [pc, #128]	; (8003040 <vTaskStartScheduler+0xb0>)
 8002fc0:	4820      	ldr	r0, [pc, #128]	; (8003044 <vTaskStartScheduler+0xb4>)
 8002fc2:	f7ff fe13 	bl	8002bec <xTaskCreateStatic>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <vTaskStartScheduler+0xb8>)
 8002fca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <vTaskStartScheduler+0xb8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e001      	b.n	8002fde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d102      	bne.n	8002fea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fe4:	f000 fce8 	bl	80039b8 <xTimerCreateTimerTask>
 8002fe8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d115      	bne.n	800301c <vTaskStartScheduler+0x8c>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <vTaskStartScheduler+0xbc>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <vTaskStartScheduler+0xc0>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <vTaskStartScheduler+0xc4>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003016:	f001 f89b 	bl	8004150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800301a:	e00d      	b.n	8003038 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003022:	d109      	bne.n	8003038 <vTaskStartScheduler+0xa8>
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e7fe      	b.n	8003036 <vTaskStartScheduler+0xa6>
}
 8003038:	bf00      	nop
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	08004904 	.word	0x08004904
 8003044:	08003659 	.word	0x08003659
 8003048:	20000be0 	.word	0x20000be0
 800304c:	20000bdc 	.word	0x20000bdc
 8003050:	20000bc8 	.word	0x20000bc8
 8003054:	20000bc0 	.word	0x20000bc0

08003058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <vTaskSuspendAll+0x18>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	4a03      	ldr	r2, [pc, #12]	; (8003070 <vTaskSuspendAll+0x18>)
 8003064:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20000be4 	.word	0x20000be4

08003074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <xTaskResumeAll+0x114>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <xTaskResumeAll+0x2a>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	e7fe      	b.n	800309c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800309e:	f001 f8f5 	bl	800428c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <xTaskResumeAll+0x114>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	4a37      	ldr	r2, [pc, #220]	; (8003188 <xTaskResumeAll+0x114>)
 80030aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ac:	4b36      	ldr	r3, [pc, #216]	; (8003188 <xTaskResumeAll+0x114>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d162      	bne.n	800317a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <xTaskResumeAll+0x118>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05e      	beq.n	800317a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030bc:	e02f      	b.n	800311e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <xTaskResumeAll+0x11c>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3318      	adds	r3, #24
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f890 	bl	80021f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f88b 	bl	80021f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <xTaskResumeAll+0x120>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d903      	bls.n	80030ee <xTaskResumeAll+0x7a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <xTaskResumeAll+0x120>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a27      	ldr	r2, [pc, #156]	; (8003198 <xTaskResumeAll+0x124>)
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7ff f816 	bl	8002136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <xTaskResumeAll+0x128>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <xTaskResumeAll+0x12c>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <xTaskResumeAll+0x11c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1cb      	bne.n	80030be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800312c:	f000 fb46 	bl	80037bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <xTaskResumeAll+0x130>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800313c:	f000 f846 	bl	80031cc <xTaskIncrementTick>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <xTaskResumeAll+0x12c>)
 8003148:	2201      	movs	r2, #1
 800314a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f1      	bne.n	800313c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <xTaskResumeAll+0x130>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <xTaskResumeAll+0x12c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003166:	2301      	movs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <xTaskResumeAll+0x134>)
 800316c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f001 f8b5 	bl	80042e8 <vPortExitCritical>

	return xAlreadyYielded;
 800317e:	68bb      	ldr	r3, [r7, #8]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000be4 	.word	0x20000be4
 800318c:	20000bbc 	.word	0x20000bbc
 8003190:	20000b7c 	.word	0x20000b7c
 8003194:	20000bc4 	.word	0x20000bc4
 8003198:	200006ec 	.word	0x200006ec
 800319c:	200006e8 	.word	0x200006e8
 80031a0:	20000bd0 	.word	0x20000bd0
 80031a4:	20000bcc 	.word	0x20000bcc
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <xTaskGetTickCount+0x1c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031b8:	687b      	ldr	r3, [r7, #4]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000bc0 	.word	0x20000bc0

080031cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <xTaskIncrementTick+0x144>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 8088 	bne.w	80032f0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031e0:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <xTaskIncrementTick+0x148>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031e8:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <xTaskIncrementTick+0x148>)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11f      	bne.n	8003234 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031f4:	4b48      	ldr	r3, [pc, #288]	; (8003318 <xTaskIncrementTick+0x14c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <xTaskIncrementTick+0x46>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	e7fe      	b.n	8003210 <xTaskIncrementTick+0x44>
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <xTaskIncrementTick+0x14c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <xTaskIncrementTick+0x150>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3e      	ldr	r2, [pc, #248]	; (8003318 <xTaskIncrementTick+0x14c>)
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4a3e      	ldr	r2, [pc, #248]	; (800331c <xTaskIncrementTick+0x150>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <xTaskIncrementTick+0x154>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <xTaskIncrementTick+0x154>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	f000 fac4 	bl	80037bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <xTaskIncrementTick+0x158>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	429a      	cmp	r2, r3
 800323c:	d349      	bcc.n	80032d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <xTaskIncrementTick+0x14c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <xTaskIncrementTick+0x158>)
 800324a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324e:	601a      	str	r2, [r3, #0]
					break;
 8003250:	e03f      	b.n	80032d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <xTaskIncrementTick+0x14c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d203      	bcs.n	8003272 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800326a:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <xTaskIncrementTick+0x158>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003270:	e02f      	b.n	80032d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3304      	adds	r3, #4
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe ffba 	bl	80021f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3318      	adds	r3, #24
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe ffb1 	bl	80021f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <xTaskIncrementTick+0x15c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d903      	bls.n	80032a2 <xTaskIncrementTick+0xd6>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a22      	ldr	r2, [pc, #136]	; (8003328 <xTaskIncrementTick+0x15c>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <xTaskIncrementTick+0x160>)
 80032b0:	441a      	add	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7fe ff3c 	bl	8002136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <xTaskIncrementTick+0x164>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3b8      	bcc.n	800323e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d0:	e7b5      	b.n	800323e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <xTaskIncrementTick+0x164>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	4914      	ldr	r1, [pc, #80]	; (800332c <xTaskIncrementTick+0x160>)
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d907      	bls.n	80032fa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e004      	b.n	80032fa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xTaskIncrementTick+0x168>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <xTaskIncrementTick+0x168>)
 80032f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <xTaskIncrementTick+0x16c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003306:	697b      	ldr	r3, [r7, #20]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000be4 	.word	0x20000be4
 8003314:	20000bc0 	.word	0x20000bc0
 8003318:	20000b74 	.word	0x20000b74
 800331c:	20000b78 	.word	0x20000b78
 8003320:	20000bd4 	.word	0x20000bd4
 8003324:	20000bdc 	.word	0x20000bdc
 8003328:	20000bc4 	.word	0x20000bc4
 800332c:	200006ec 	.word	0x200006ec
 8003330:	200006e8 	.word	0x200006e8
 8003334:	20000bcc 	.word	0x20000bcc
 8003338:	20000bd0 	.word	0x20000bd0

0800333c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <vTaskSwitchContext+0xa4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <vTaskSwitchContext+0xa8>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003350:	e040      	b.n	80033d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <vTaskSwitchContext+0xa8>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <vTaskSwitchContext+0xac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e00f      	b.n	8003380 <vTaskSwitchContext+0x44>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <vTaskSwitchContext+0x3e>
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	e7fe      	b.n	8003378 <vTaskSwitchContext+0x3c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b01      	subs	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	491a      	ldr	r1, [pc, #104]	; (80033ec <vTaskSwitchContext+0xb0>)
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0e5      	beq.n	8003360 <vTaskSwitchContext+0x24>
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4a13      	ldr	r2, [pc, #76]	; (80033ec <vTaskSwitchContext+0xb0>)
 80033a0:	4413      	add	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3308      	adds	r3, #8
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d104      	bne.n	80033c4 <vTaskSwitchContext+0x88>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <vTaskSwitchContext+0xb4>)
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4a06      	ldr	r2, [pc, #24]	; (80033e8 <vTaskSwitchContext+0xac>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	20000be4 	.word	0x20000be4
 80033e4:	20000bd0 	.word	0x20000bd0
 80033e8:	20000bc4 	.word	0x20000bc4
 80033ec:	200006ec 	.word	0x200006ec
 80033f0:	200006e8 	.word	0x200006e8

080033f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <vTaskPlaceOnEventList+0x24>
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e7fe      	b.n	8003416 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <vTaskPlaceOnEventList+0x44>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3318      	adds	r3, #24
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe feac 	bl	800217e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003426:	2101      	movs	r1, #1
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f000 fa71 	bl	8003910 <prvAddCurrentTaskToDelayedList>
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200006e8 	.word	0x200006e8

0800343c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <vTaskPlaceOnEventListRestricted+0x26>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e7fe      	b.n	8003460 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <vTaskPlaceOnEventListRestricted+0x50>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3318      	adds	r3, #24
 8003468:	4619      	mov	r1, r3
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7fe fe63 	bl	8002136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800347a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f000 fa46 	bl	8003910 <prvAddCurrentTaskToDelayedList>
	}
 8003484:	bf00      	nop
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200006e8 	.word	0x200006e8

08003490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <xTaskRemoveFromEventList+0x2a>
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e7fe      	b.n	80034b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	3318      	adds	r3, #24
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fe96 	bl	80021f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <xTaskRemoveFromEventList+0xac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fe8d 	bl	80021f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b19      	ldr	r3, [pc, #100]	; (8003540 <xTaskRemoveFromEventList+0xb0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d903      	bls.n	80034ea <xTaskRemoveFromEventList+0x5a>
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	4a16      	ldr	r2, [pc, #88]	; (8003540 <xTaskRemoveFromEventList+0xb0>)
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <xTaskRemoveFromEventList+0xb4>)
 80034f8:	441a      	add	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f7fe fe18 	bl	8002136 <vListInsertEnd>
 8003506:	e005      	b.n	8003514 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3318      	adds	r3, #24
 800350c:	4619      	mov	r1, r3
 800350e:	480e      	ldr	r0, [pc, #56]	; (8003548 <xTaskRemoveFromEventList+0xb8>)
 8003510:	f7fe fe11 	bl	8002136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <xTaskRemoveFromEventList+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d905      	bls.n	800352e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <xTaskRemoveFromEventList+0xc0>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e001      	b.n	8003532 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003532:	697b      	ldr	r3, [r7, #20]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000be4 	.word	0x20000be4
 8003540:	20000bc4 	.word	0x20000bc4
 8003544:	200006ec 	.word	0x200006ec
 8003548:	20000b7c 	.word	0x20000b7c
 800354c:	200006e8 	.word	0x200006e8
 8003550:	20000bd0 	.word	0x20000bd0

08003554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <vTaskInternalSetTimeOutState+0x24>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <vTaskInternalSetTimeOutState+0x28>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	605a      	str	r2, [r3, #4]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	20000bd4 	.word	0x20000bd4
 800357c:	20000bc0 	.word	0x20000bc0

08003580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <xTaskCheckForTimeOut+0x24>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e7fe      	b.n	80035a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <xTaskCheckForTimeOut+0x3e>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e7fe      	b.n	80035bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80035be:	f000 fe65 	bl	800428c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <xTaskCheckForTimeOut+0xb8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035da:	d102      	bne.n	80035e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e023      	b.n	800362a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <xTaskCheckForTimeOut+0xbc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d007      	beq.n	80035fe <xTaskCheckForTimeOut+0x7e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e015      	b.n	800362a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d20b      	bcs.n	8003620 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff9d 	bl	8003554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e004      	b.n	800362a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800362a:	f000 fe5d 	bl	80042e8 <vPortExitCritical>

	return xReturn;
 800362e:	69fb      	ldr	r3, [r7, #28]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000bc0 	.word	0x20000bc0
 800363c:	20000bd4 	.word	0x20000bd4

08003640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <vTaskMissedYield+0x14>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000bd0 	.word	0x20000bd0

08003658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003660:	f000 f852 	bl	8003708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <prvIdleTask+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d9f9      	bls.n	8003660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <prvIdleTask+0x2c>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800367c:	e7f0      	b.n	8003660 <prvIdleTask+0x8>
 800367e:	bf00      	nop
 8003680:	200006ec 	.word	0x200006ec
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e00c      	b.n	80036ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <prvInitialiseTaskLists+0x60>)
 80036a0:	4413      	add	r3, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fd1a 	bl	80020dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b37      	cmp	r3, #55	; 0x37
 80036b2:	d9ef      	bls.n	8003694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036b6:	f7fe fd11 	bl	80020dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036ba:	480d      	ldr	r0, [pc, #52]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036bc:	f7fe fd0e 	bl	80020dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <prvInitialiseTaskLists+0x6c>)
 80036c2:	f7fe fd0b 	bl	80020dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036c6:	480c      	ldr	r0, [pc, #48]	; (80036f8 <prvInitialiseTaskLists+0x70>)
 80036c8:	f7fe fd08 	bl	80020dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <prvInitialiseTaskLists+0x74>)
 80036ce:	f7fe fd05 	bl	80020dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <prvInitialiseTaskLists+0x78>)
 80036d4:	4a05      	ldr	r2, [pc, #20]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvInitialiseTaskLists+0x7c>)
 80036da:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200006ec 	.word	0x200006ec
 80036ec:	20000b4c 	.word	0x20000b4c
 80036f0:	20000b60 	.word	0x20000b60
 80036f4:	20000b7c 	.word	0x20000b7c
 80036f8:	20000b90 	.word	0x20000b90
 80036fc:	20000ba8 	.word	0x20000ba8
 8003700:	20000b74 	.word	0x20000b74
 8003704:	20000b78 	.word	0x20000b78

08003708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370e:	e019      	b.n	8003744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003710:	f000 fdbc 	bl	800428c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <prvCheckTasksWaitingTermination+0x4c>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fd65 	bl	80021f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <prvCheckTasksWaitingTermination+0x50>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <prvCheckTasksWaitingTermination+0x50>)
 800372e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800373a:	f000 fdd5 	bl	80042e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f80e 	bl	8003760 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e1      	bne.n	8003710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000b90 	.word	0x20000b90
 8003758:	20000bbc 	.word	0x20000bbc
 800375c:	20000ba4 	.word	0x20000ba4

08003760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ff64 	bl	8004644 <vPortFree>
				vPortFree( pxTCB );
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 ff61 	bl	8004644 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003782:	e017      	b.n	80037b4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800378a:	2b01      	cmp	r3, #1
 800378c:	d103      	bne.n	8003796 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 ff58 	bl	8004644 <vPortFree>
	}
 8003794:	e00e      	b.n	80037b4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800379c:	2b02      	cmp	r3, #2
 800379e:	d009      	beq.n	80037b4 <prvDeleteTCB+0x54>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e7fe      	b.n	80037b2 <prvDeleteTCB+0x52>
	}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037d4:	e008      	b.n	80037e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <prvResetNextTaskUnblockTime+0x38>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <prvResetNextTaskUnblockTime+0x3c>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000b74 	.word	0x20000b74
 80037f8:	20000bdc 	.word	0x20000bdc

080037fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <xTaskGetSchedulerState+0x34>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800380a:	2301      	movs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	e008      	b.n	8003822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <xTaskGetSchedulerState+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003818:	2302      	movs	r3, #2
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e001      	b.n	8003822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003822:	687b      	ldr	r3, [r7, #4]
	}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000bc8 	.word	0x20000bc8
 8003834:	20000be4 	.word	0x20000be4

08003838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d054      	beq.n	80038f8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800384e:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <xTaskPriorityDisinherit+0xcc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d009      	beq.n	800386c <xTaskPriorityDisinherit+0x34>
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e7fe      	b.n	800386a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <xTaskPriorityDisinherit+0x50>
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	e7fe      	b.n	8003886 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	429a      	cmp	r2, r3
 800389c:	d02c      	beq.n	80038f8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d128      	bne.n	80038f8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fca0 	bl	80021f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <xTaskPriorityDisinherit+0xd0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d903      	bls.n	80038d8 <xTaskPriorityDisinherit+0xa0>
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <xTaskPriorityDisinherit+0xd0>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <xTaskPriorityDisinherit+0xd4>)
 80038e6:	441a      	add	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4610      	mov	r0, r2
 80038f0:	f7fe fc21 	bl	8002136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038f8:	697b      	ldr	r3, [r7, #20]
	}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200006e8 	.word	0x200006e8
 8003908:	20000bc4 	.word	0x20000bc4
 800390c:	200006ec 	.word	0x200006ec

08003910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800391a:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003920:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3304      	adds	r3, #4
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fc62 	bl	80021f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d10a      	bne.n	800394a <prvAddCurrentTaskToDelayedList+0x3a>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393a:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4819      	ldr	r0, [pc, #100]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003944:	f7fe fbf7 	bl	8002136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003948:	e026      	b.n	8003998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	429a      	cmp	r2, r3
 8003960:	d209      	bcs.n	8003976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7fe fc05 	bl	800217e <vListInsert>
}
 8003974:	e010      	b.n	8003998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7fe fbfb 	bl	800217e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d202      	bcs.n	8003998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003992:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000bc0 	.word	0x20000bc0
 80039a4:	200006e8 	.word	0x200006e8
 80039a8:	20000ba8 	.word	0x20000ba8
 80039ac:	20000b78 	.word	0x20000b78
 80039b0:	20000b74 	.word	0x20000b74
 80039b4:	20000bdc 	.word	0x20000bdc

080039b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039c2:	f000 faff 	bl	8003fc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <xTimerCreateTimerTask+0x80>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039d6:	1d3a      	adds	r2, r7, #4
 80039d8:	f107 0108 	add.w	r1, r7, #8
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fb61 	bl	80020a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	9202      	str	r2, [sp, #8]
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2302      	movs	r3, #2
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	460a      	mov	r2, r1
 80039f8:	4910      	ldr	r1, [pc, #64]	; (8003a3c <xTimerCreateTimerTask+0x84>)
 80039fa:	4811      	ldr	r0, [pc, #68]	; (8003a40 <xTimerCreateTimerTask+0x88>)
 80039fc:	f7ff f8f6 	bl	8002bec <xTaskCreateStatic>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <xTimerCreateTimerTask+0x8c>)
 8003a04:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <xTimerCreateTimerTask+0x8c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <xTimerCreateTimerTask+0x74>
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e7fe      	b.n	8003a2a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003a2c:	697b      	ldr	r3, [r7, #20]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000c18 	.word	0x20000c18
 8003a3c:	0800490c 	.word	0x0800490c
 8003a40:	08003b79 	.word	0x08003b79
 8003a44:	20000c1c 	.word	0x20000c1c

08003a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <xTimerGenericCommand+0x2c>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	e7fe      	b.n	8003a72 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <xTimerGenericCommand+0x94>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02a      	beq.n	8003ad2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	dc18      	bgt.n	8003ac0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a8e:	f7ff feb5 	bl	80037fc <xTaskGetSchedulerState>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d109      	bne.n	8003aac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <xTimerGenericCommand+0x94>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	f107 0110 	add.w	r1, r7, #16
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	f7fe fccc 	bl	8002440 <xQueueGenericSend>
 8003aa8:	6278      	str	r0, [r7, #36]	; 0x24
 8003aaa:	e012      	b.n	8003ad2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <xTimerGenericCommand+0x94>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f107 0110 	add.w	r1, r7, #16
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f7fe fcc2 	bl	8002440 <xQueueGenericSend>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
 8003abe:	e008      	b.n	8003ad2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <xTimerGenericCommand+0x94>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	f107 0110 	add.w	r1, r7, #16
 8003ac8:	2300      	movs	r3, #0
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	f7fe fdb2 	bl	8002634 <xQueueGenericSendFromISR>
 8003ad0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000c18 	.word	0x20000c18

08003ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <prvProcessExpiredTimer+0x94>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fb79 	bl	80021f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d021      	beq.n	8003b50 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	18d1      	adds	r1, r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	6978      	ldr	r0, [r7, #20]
 8003b1a:	f000 f8d1 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01e      	beq.n	8003b62 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b24:	2300      	movs	r3, #0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff8a 	bl	8003a48 <xTimerGenericCommand>
 8003b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d112      	bne.n	8003b62 <prvProcessExpiredTimer+0x82>
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e7fe      	b.n	8003b4e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	4798      	blx	r3
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000c10 	.word	0x20000c10

08003b78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f857 	bl	8003c38 <prvGetNextExpireTime>
 8003b8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f803 	bl	8003b9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b96:	f000 f8d5 	bl	8003d44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b9a:	e7f1      	b.n	8003b80 <prvTimerTask+0x8>

08003b9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ba6:	f7ff fa57 	bl	8003058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f866 	bl	8003c80 <prvSampleTimeNow>
 8003bb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d130      	bne.n	8003c1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d806      	bhi.n	8003bd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bca:	f7ff fa53 	bl	8003074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff85 	bl	8003ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bd6:	e024      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <prvProcessTimerOrBlockTask+0x90>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <prvProcessTimerOrBlockTask+0x50>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <prvProcessTimerOrBlockTask+0x52>
 8003bec:	2300      	movs	r3, #0
 8003bee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <prvProcessTimerOrBlockTask+0x94>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f7fe ffc1 	bl	8002b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c02:	f7ff fa37 	bl	8003074 <xTaskResumeAll>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <prvProcessTimerOrBlockTask+0x98>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
}
 8003c1c:	e001      	b.n	8003c22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c1e:	f7ff fa29 	bl	8003074 <xTaskResumeAll>
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000c14 	.word	0x20000c14
 8003c30:	20000c18 	.word	0x20000c18
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <prvGetNextExpireTime+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <prvGetNextExpireTime+0x16>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	e000      	b.n	8003c50 <prvGetNextExpireTime+0x18>
 8003c4e:	2200      	movs	r2, #0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <prvGetNextExpireTime+0x44>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e001      	b.n	8003c6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000c10 	.word	0x20000c10

08003c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c88:	f7ff fa90 	bl	80031ac <xTaskGetTickCount>
 8003c8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvSampleTimeNow+0x3c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d205      	bcs.n	8003ca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c98:	f000 f930 	bl	8003efc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <prvSampleTimeNow+0x3c>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000c20 	.word	0x20000c20

08003cc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d812      	bhi.n	8003d0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e01b      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <prvInsertTimerInActiveList+0x7c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fa3a 	bl	800217e <vListInsert>
 8003d0a:	e012      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d206      	bcs.n	8003d22 <prvInsertTimerInActiveList+0x62>
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e007      	b.n	8003d32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <prvInsertTimerInActiveList+0x80>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fa26 	bl	800217e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000c14 	.word	0x20000c14
 8003d40:	20000c10 	.word	0x20000c10

08003d44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d4a:	e0c6      	b.n	8003eda <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da17      	bge.n	8003d82 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	3304      	adds	r3, #4
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <prvProcessReceivedCommands+0x2e>
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	e7fe      	b.n	8003d70 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d78:	6850      	ldr	r0, [r2, #4]
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	6892      	ldr	r2, [r2, #8]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f2c0 80a7 	blt.w	8003ed8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fa28 	bl	80021f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003da0:	463b      	mov	r3, r7
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff6c 	bl	8003c80 <prvSampleTimeNow>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	f200 8094 	bhi.w	8003eda <prvProcessReceivedCommands+0x196>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <prvProcessReceivedCommands+0x74>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de1 	.word	0x08003de1
 8003dc4:	08003e53 	.word	0x08003e53
 8003dc8:	08003e67 	.word	0x08003e67
 8003dcc:	08003eaf 	.word	0x08003eaf
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003de1 	.word	0x08003de1
 8003dd8:	08003e53 	.word	0x08003e53
 8003ddc:	08003e67 	.word	0x08003e67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	18d1      	adds	r1, r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e00:	f7ff ff5e 	bl	8003cc0 <prvInsertTimerInActiveList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d067      	beq.n	8003eda <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05c      	beq.n	8003eda <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	441a      	add	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f7ff fe09 	bl	8003a48 <xTimerGenericCommand>
 8003e36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d14d      	bne.n	8003eda <prvProcessReceivedCommands+0x196>
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e7fe      	b.n	8003e50 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e64:	e039      	b.n	8003eda <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <prvProcessReceivedCommands+0x156>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e7fe      	b.n	8003e98 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea8:	f7ff ff0a 	bl	8003cc0 <prvInsertTimerInActiveList>
					break;
 8003eac:	e015      	b.n	8003eda <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebe:	f000 fbc1 	bl	8004644 <vPortFree>
 8003ec2:	e00a      	b.n	8003eda <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ed6:	e000      	b.n	8003eda <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003ed8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <prvProcessReceivedCommands+0x1b4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1d39      	adds	r1, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fc3a 	bl	800275c <xQueueReceive>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f47f af2e 	bne.w	8003d4c <prvProcessReceivedCommands+0x8>
	}
}
 8003ef0:	bf00      	nop
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000c18 	.word	0x20000c18

08003efc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f02:	e047      	b.n	8003f94 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe f967 	bl	80021f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02d      	beq.n	8003f94 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d90e      	bls.n	8003f68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f56:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fe f90c 	bl	800217e <vListInsert>
 8003f66:	e015      	b.n	8003f94 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	2100      	movs	r1, #0
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fd68 	bl	8003a48 <xTimerGenericCommand>
 8003f78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <prvSwitchTimerLists+0x98>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	e7fe      	b.n	8003f92 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1b2      	bne.n	8003f04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvSwitchTimerLists+0xc4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <prvSwitchTimerLists+0xc0>)
 8003faa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvSwitchTimerLists+0xc4>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000c10 	.word	0x20000c10
 8003fc0:	20000c14 	.word	0x20000c14

08003fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fca:	f000 f95f 	bl	800428c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d120      	bne.n	8004018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fd6:	4814      	ldr	r0, [pc, #80]	; (8004028 <prvCheckForValidListAndQueue+0x64>)
 8003fd8:	f7fe f880 	bl	80020dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fdc:	4813      	ldr	r0, [pc, #76]	; (800402c <prvCheckForValidListAndQueue+0x68>)
 8003fde:	f7fe f87d 	bl	80020dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <prvCheckForValidListAndQueue+0x6c>)
 8003fe4:	4a10      	ldr	r2, [pc, #64]	; (8004028 <prvCheckForValidListAndQueue+0x64>)
 8003fe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <prvCheckForValidListAndQueue+0x70>)
 8003fea:	4a10      	ldr	r2, [pc, #64]	; (800402c <prvCheckForValidListAndQueue+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <prvCheckForValidListAndQueue+0x74>)
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <prvCheckForValidListAndQueue+0x78>)
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f7fe f98b 	bl	8002314 <xQueueGenericCreateStatic>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8004002:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	490b      	ldr	r1, [pc, #44]	; (8004040 <prvCheckForValidListAndQueue+0x7c>)
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fd8e 	bl	8002b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004018:	f000 f966 	bl	80042e8 <vPortExitCritical>
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000c18 	.word	0x20000c18
 8004028:	20000be8 	.word	0x20000be8
 800402c:	20000bfc 	.word	0x20000bfc
 8004030:	20000c10 	.word	0x20000c10
 8004034:	20000c14 	.word	0x20000c14
 8004038:	20000cc4 	.word	0x20000cc4
 800403c:	20000c24 	.word	0x20000c24
 8004040:	08004914 	.word	0x08004914

08004044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b04      	subs	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <pxPortInitialiseStack+0x64>)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b14      	subs	r3, #20
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b04      	subs	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f06f 0202 	mvn.w	r2, #2
 8004092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b20      	subs	r3, #32
 8004098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	080040ad 	.word	0x080040ad

080040ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <prvTaskExitError+0x50>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	d009      	beq.n	80040d4 <prvTaskExitError+0x28>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e7fe      	b.n	80040d2 <prvTaskExitError+0x26>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040e6:	bf00      	nop
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0fc      	beq.n	80040e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004128:	4808      	ldr	r0, [pc, #32]	; (800414c <prvPortStartFirstTask+0x24>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8814 	msr	CONTROL, r0
 800413a:	b662      	cpsie	i
 800413c:	b661      	cpsie	f
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	df00      	svc	0
 8004148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800414a:	bf00      	nop
 800414c:	e000ed08 	.word	0xe000ed08

08004150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004156:	4b44      	ldr	r3, [pc, #272]	; (8004268 <xPortStartScheduler+0x118>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a44      	ldr	r2, [pc, #272]	; (800426c <xPortStartScheduler+0x11c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d109      	bne.n	8004174 <xPortStartScheduler+0x24>
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	e7fe      	b.n	8004172 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004174:	4b3c      	ldr	r3, [pc, #240]	; (8004268 <xPortStartScheduler+0x118>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3d      	ldr	r2, [pc, #244]	; (8004270 <xPortStartScheduler+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d109      	bne.n	8004192 <xPortStartScheduler+0x42>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e7fe      	b.n	8004190 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <xPortStartScheduler+0x124>)
 8004194:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	22ff      	movs	r2, #255	; 0xff
 80041a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <xPortStartScheduler+0x128>)
 80041b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <xPortStartScheduler+0x12c>)
 80041bc:	2207      	movs	r2, #7
 80041be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041c0:	e009      	b.n	80041d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80041c2:	4b2e      	ldr	r3, [pc, #184]	; (800427c <xPortStartScheduler+0x12c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a2c      	ldr	r2, [pc, #176]	; (800427c <xPortStartScheduler+0x12c>)
 80041ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d0ef      	beq.n	80041c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041e2:	4b26      	ldr	r3, [pc, #152]	; (800427c <xPortStartScheduler+0x12c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d009      	beq.n	8004202 <xPortStartScheduler+0xb2>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	e7fe      	b.n	8004200 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <xPortStartScheduler+0x12c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <xPortStartScheduler+0x12c>)
 800420a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <xPortStartScheduler+0x12c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <xPortStartScheduler+0x12c>)
 8004216:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <xPortStartScheduler+0x130>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <xPortStartScheduler+0x130>)
 8004226:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800422a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <xPortStartScheduler+0x130>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <xPortStartScheduler+0x130>)
 8004232:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004236:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004238:	f000 f8d6 	bl	80043e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <xPortStartScheduler+0x134>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004242:	f000 f8f5 	bl	8004430 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <xPortStartScheduler+0x138>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <xPortStartScheduler+0x138>)
 800424c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004250:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff69 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7ff f871 	bl	800333c <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff27 	bl	80040ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed00 	.word	0xe000ed00
 800426c:	410fc271 	.word	0x410fc271
 8004270:	410fc270 	.word	0x410fc270
 8004274:	e000e400 	.word	0xe000e400
 8004278:	20000d14 	.word	0x20000d14
 800427c:	20000d18 	.word	0x20000d18
 8004280:	e000ed20 	.word	0xe000ed20
 8004284:	2000000c 	.word	0x2000000c
 8004288:	e000ef34 	.word	0xe000ef34

0800428c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <vPortEnterCritical+0x54>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <vPortEnterCritical+0x54>)
 80042ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <vPortEnterCritical+0x54>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10e      	bne.n	80042d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <vPortEnterCritical+0x58>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <vPortEnterCritical+0x48>
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	e7fe      	b.n	80042d2 <vPortEnterCritical+0x46>
	}
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	2000000c 	.word	0x2000000c
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <vPortExitCritical+0x4c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <vPortExitCritical+0x22>
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	e7fe      	b.n	8004308 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <vPortExitCritical+0x4c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <vPortExitCritical+0x4c>)
 8004312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <vPortExitCritical+0x4c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <vPortExitCritical+0x3e>
 800431c:	2300      	movs	r3, #0
 800431e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
	...

08004340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004340:	f3ef 8009 	mrs	r0, PSP
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <pxCurrentTCBConst>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f01e 0f10 	tst.w	lr, #16
 8004350:	bf08      	it	eq
 8004352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	6010      	str	r0, [r2, #0]
 800435c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004364:	f380 8811 	msr	BASEPRI, r0
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f7fe ffe4 	bl	800333c <vTaskSwitchContext>
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f380 8811 	msr	BASEPRI, r0
 800437c:	bc09      	pop	{r0, r3}
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004386:	f01e 0f10 	tst.w	lr, #16
 800438a:	bf08      	it	eq
 800438c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004390:	f380 8809 	msr	PSP, r0
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst>:
 80043a0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043c0:	f7fe ff04 	bl	80031cc <xTaskIncrementTick>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <SysTick_Handler+0x3c>)
 80043cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <vPortSetupTimerInterrupt+0x34>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <vPortSetupTimerInterrupt+0x38>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <vPortSetupTimerInterrupt+0x3c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <vPortSetupTimerInterrupt+0x40>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <vPortSetupTimerInterrupt+0x44>)
 8004406:	3b01      	subs	r3, #1
 8004408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <vPortSetupTimerInterrupt+0x34>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010
 8004420:	e000e018 	.word	0xe000e018
 8004424:	20000000 	.word	0x20000000
 8004428:	10624dd3 	.word	0x10624dd3
 800442c:	e000e014 	.word	0xe000e014

08004430 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004430:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004440 <vPortEnableVFP+0x10>
 8004434:	6801      	ldr	r1, [r0, #0]
 8004436:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800443a:	6001      	str	r1, [r0, #0]
 800443c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800443e:	bf00      	nop
 8004440:	e000ed88 	.word	0xe000ed88

08004444 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800444a:	f3ef 8305 	mrs	r3, IPSR
 800444e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d913      	bls.n	800447e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <vPortValidateInterruptPriority+0x6c>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <vPortValidateInterruptPriority+0x70>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	7afa      	ldrb	r2, [r7, #11]
 8004466:	429a      	cmp	r2, r3
 8004468:	d209      	bcs.n	800447e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	e7fe      	b.n	800447c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <vPortValidateInterruptPriority+0x74>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <vPortValidateInterruptPriority+0x78>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d909      	bls.n	80044a2 <vPortValidateInterruptPriority+0x5e>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	e7fe      	b.n	80044a0 <vPortValidateInterruptPriority+0x5c>
	}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e3f0 	.word	0xe000e3f0
 80044b4:	20000d14 	.word	0x20000d14
 80044b8:	e000ed0c 	.word	0xe000ed0c
 80044bc:	20000d18 	.word	0x20000d18

080044c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044cc:	f7fe fdc4 	bl	8003058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044d0:	4b57      	ldr	r3, [pc, #348]	; (8004630 <pvPortMalloc+0x170>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044d8:	f000 f90c 	bl	80046f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044dc:	4b55      	ldr	r3, [pc, #340]	; (8004634 <pvPortMalloc+0x174>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 808c 	bne.w	8004602 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01c      	beq.n	800452a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80044f0:	2208      	movs	r2, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d013      	beq.n	800452a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f023 0307 	bic.w	r3, r3, #7
 8004508:	3308      	adds	r3, #8
 800450a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <pvPortMalloc+0x6a>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e7fe      	b.n	8004528 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d068      	beq.n	8004602 <pvPortMalloc+0x142>
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <pvPortMalloc+0x178>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d863      	bhi.n	8004602 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <pvPortMalloc+0x17c>)
 800453c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800453e:	4b3f      	ldr	r3, [pc, #252]	; (800463c <pvPortMalloc+0x17c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004544:	e004      	b.n	8004550 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d903      	bls.n	8004562 <pvPortMalloc+0xa2>
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f1      	bne.n	8004546 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004562:	4b33      	ldr	r3, [pc, #204]	; (8004630 <pvPortMalloc+0x170>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	429a      	cmp	r2, r3
 800456a:	d04a      	beq.n	8004602 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	4413      	add	r3, r2
 8004574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	2308      	movs	r3, #8
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	429a      	cmp	r2, r3
 800458c:	d91e      	bls.n	80045cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <pvPortMalloc+0xf4>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e7fe      	b.n	80045b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad2      	subs	r2, r2, r3
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045c6:	69b8      	ldr	r0, [r7, #24]
 80045c8:	f000 f8f6 	bl	80047b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045cc:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <pvPortMalloc+0x178>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4a18      	ldr	r2, [pc, #96]	; (8004638 <pvPortMalloc+0x178>)
 80045d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045da:	4b17      	ldr	r3, [pc, #92]	; (8004638 <pvPortMalloc+0x178>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <pvPortMalloc+0x180>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d203      	bcs.n	80045ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <pvPortMalloc+0x178>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <pvPortMalloc+0x180>)
 80045ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <pvPortMalloc+0x174>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004602:	f7fe fd37 	bl	8003074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	2b00      	cmp	r3, #0
 800460e:	d009      	beq.n	8004624 <pvPortMalloc+0x164>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e7fe      	b.n	8004622 <pvPortMalloc+0x162>
	return pvReturn;
 8004624:	69fb      	ldr	r3, [r7, #28]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	200018dc 	.word	0x200018dc
 8004634:	200018e8 	.word	0x200018e8
 8004638:	200018e0 	.word	0x200018e0
 800463c:	200018d4 	.word	0x200018d4
 8004640:	200018e4 	.word	0x200018e4

08004644 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d046      	beq.n	80046e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004656:	2308      	movs	r3, #8
 8004658:	425b      	negs	r3, r3
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4413      	add	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <vPortFree+0xa8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <vPortFree+0x42>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e7fe      	b.n	8004684 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <vPortFree+0x5e>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	e7fe      	b.n	80046a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <vPortFree+0xa8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d019      	beq.n	80046e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d115      	bne.n	80046e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <vPortFree+0xa8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	401a      	ands	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046c8:	f7fe fcc6 	bl	8003058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <vPortFree+0xac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <vPortFree+0xac>)
 80046d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f000 f86c 	bl	80047b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046e0:	f7fe fcc8 	bl	8003074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	200018e8 	.word	0x200018e8
 80046f0:	200018e0 	.word	0x200018e0

080046f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <prvHeapInit+0xac>)
 8004702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3307      	adds	r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <prvHeapInit+0xac>)
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <prvHeapInit+0xb0>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <prvHeapInit+0xb0>)
 8004734:	2200      	movs	r2, #0
 8004736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004740:	2208      	movs	r2, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <prvHeapInit+0xb4>)
 8004754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <prvHeapInit+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <prvHeapInit+0xb4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvHeapInit+0xb4>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <prvHeapInit+0xb8>)
 8004782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <prvHeapInit+0xbc>)
 800478a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <prvHeapInit+0xc0>)
 800478e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004792:	601a      	str	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000d1c 	.word	0x20000d1c
 80047a4:	200018d4 	.word	0x200018d4
 80047a8:	200018dc 	.word	0x200018dc
 80047ac:	200018e4 	.word	0x200018e4
 80047b0:	200018e0 	.word	0x200018e0
 80047b4:	200018e8 	.word	0x200018e8

080047b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <prvInsertBlockIntoFreeList+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e002      	b.n	80047cc <prvInsertBlockIntoFreeList+0x14>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d8f7      	bhi.n	80047c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d108      	bne.n	80047fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d118      	bne.n	8004840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d00d      	beq.n	8004836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	441a      	add	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e008      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvInsertBlockIntoFreeList+0xb0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d002      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	200018d4 	.word	0x200018d4
 8004868:	200018dc 	.word	0x200018dc

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4e0d      	ldr	r6, [pc, #52]	; (80048a4 <__libc_init_array+0x38>)
 8004870:	4c0d      	ldr	r4, [pc, #52]	; (80048a8 <__libc_init_array+0x3c>)
 8004872:	1ba4      	subs	r4, r4, r6
 8004874:	10a4      	asrs	r4, r4, #2
 8004876:	2500      	movs	r5, #0
 8004878:	42a5      	cmp	r5, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	4e0b      	ldr	r6, [pc, #44]	; (80048ac <__libc_init_array+0x40>)
 800487e:	4c0c      	ldr	r4, [pc, #48]	; (80048b0 <__libc_init_array+0x44>)
 8004880:	f000 f82c 	bl	80048dc <_init>
 8004884:	1ba4      	subs	r4, r4, r6
 8004886:	10a4      	asrs	r4, r4, #2
 8004888:	2500      	movs	r5, #0
 800488a:	42a5      	cmp	r5, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004894:	4798      	blx	r3
 8004896:	3501      	adds	r5, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800489e:	4798      	blx	r3
 80048a0:	3501      	adds	r5, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	080049ac 	.word	0x080049ac
 80048a8:	080049ac 	.word	0x080049ac
 80048ac:	080049ac 	.word	0x080049ac
 80048b0:	080049b0 	.word	0x080049b0

080048b4 <memcpy>:
 80048b4:	b510      	push	{r4, lr}
 80048b6:	1e43      	subs	r3, r0, #1
 80048b8:	440a      	add	r2, r1
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d100      	bne.n	80048c0 <memcpy+0xc>
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c8:	e7f7      	b.n	80048ba <memcpy+0x6>

080048ca <memset>:
 80048ca:	4402      	add	r2, r0
 80048cc:	4603      	mov	r3, r0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d100      	bne.n	80048d4 <memset+0xa>
 80048d2:	4770      	bx	lr
 80048d4:	f803 1b01 	strb.w	r1, [r3], #1
 80048d8:	e7f9      	b.n	80048ce <memset+0x4>
	...

080048dc <_init>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr

080048e8 <_fini>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr
