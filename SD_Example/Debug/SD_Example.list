
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fec  08007fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007fec  08007fec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fec  08007fec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000000c  08008000  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08008000  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012006  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000258c  00000000  00000000  00032042  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  000352d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002760e  00000000  00000000  00035e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2f4  00000000  00000000  0005d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea2be  00000000  00000000  0006979a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  00153ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e6c 	.word	0x08007e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007e6c 	.word	0x08007e6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80001de:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; //fatfs function common result code
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "STM32 FATFS works great!"; //file buffer
 80001e0:	4b40      	ldr	r3, [pc, #256]	; (80002e4 <main+0x10c>)
 80001e2:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f0:	c403      	stmia	r4!, {r0, r1}
 80001f2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fa6d 	bl	80006d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f87e 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f912 	bl	8000424 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000200:	f000 f8f0 	bl	80003e4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000204:	f004 fd42 	bl	8004c8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //mount SD card
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0 != FR_OK)) {
 8000208:	2200      	movs	r2, #0
 800020a:	4937      	ldr	r1, [pc, #220]	; (80002e8 <main+0x110>)
 800020c:	4837      	ldr	r0, [pc, #220]	; (80002ec <main+0x114>)
 800020e:	f006 fc19 	bl	8006a44 <f_mount>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <main+0x46>
	  Error_Handler();
 8000218:	f000 f948 	bl	80004ac <Error_Handler>
 800021c:	e019      	b.n	8000252 <main+0x7a>
  }
  else {
	  //make file system
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK) {
 800021e:	463a      	mov	r2, r7
 8000220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	4613      	mov	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	2107      	movs	r1, #7
 800022c:	482e      	ldr	r0, [pc, #184]	; (80002e8 <main+0x110>)
 800022e:	f007 f969 	bl	8007504 <f_mkfs>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <main+0x66>
		  Error_Handler();
 8000238:	f000 f938 	bl	80004ac <Error_Handler>
 800023c:	e009      	b.n	8000252 <main+0x7a>
	  } else {
		  //open file for writing using create
		  if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800023e:	220a      	movs	r2, #10
 8000240:	492b      	ldr	r1, [pc, #172]	; (80002f0 <main+0x118>)
 8000242:	482c      	ldr	r0, [pc, #176]	; (80002f4 <main+0x11c>)
 8000244:	f006 fc44 	bl	8006ad0 <f_open>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <main+0x7a>
			  Error_Handler();
 800024e:	f000 f92d 	bl	80004ac <Error_Handler>
		  }
	  }
  }

  //write to the text file
  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffb6 	bl	80001c8 <strlen>
 800025c:	4602      	mov	r2, r0
 800025e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000262:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000266:	4823      	ldr	r0, [pc, #140]	; (80002f4 <main+0x11c>)
 8000268:	f006 ff2f 	bl	80070ca <f_write>
 800026c:	4603      	mov	r3, r0
 800026e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
  if((byteswritten == 0) || (res != FR_OK)) {
 8000272:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <main+0xaa>
 800027a:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800027e:	2b00      	cmp	r3, #0
 8000280:	d002      	beq.n	8000288 <main+0xb0>
	  Error_Handler();
 8000282:	f000 f913 	bl	80004ac <Error_Handler>
 8000286:	e026      	b.n	80002d6 <main+0xfe>
  } else {
	  f_close(&SDFile);
 8000288:	481a      	ldr	r0, [pc, #104]	; (80002f4 <main+0x11c>)
 800028a:	f007 f911 	bl	80074b0 <f_close>

	  //test read the file
	  f_open(&SDFile, "STM32.TXT", FA_READ);
 800028e:	2201      	movs	r2, #1
 8000290:	4917      	ldr	r1, [pc, #92]	; (80002f0 <main+0x118>)
 8000292:	4818      	ldr	r0, [pc, #96]	; (80002f4 <main+0x11c>)
 8000294:	f006 fc1c 	bl	8006ad0 <f_open>
	  memset(rtext, 0, sizeof(rtext));
 8000298:	463b      	mov	r3, r7
 800029a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f007 fddb 	bl	8007e5c <memset>
	  res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80002a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80002aa:	4639      	mov	r1, r7
 80002ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b0:	4810      	ldr	r0, [pc, #64]	; (80002f4 <main+0x11c>)
 80002b2:	f006 fdcb 	bl	8006e4c <f_read>
 80002b6:	4603      	mov	r3, r0
 80002b8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	  if((bytesread == 0) || (res == FR_OK)) {
 80002bc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <main+0xf4>
 80002c4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d101      	bne.n	80002d0 <main+0xf8>
		  Error_Handler();
 80002cc:	f000 f8ee 	bl	80004ac <Error_Handler>
	  }
	  f_close(&SDFile);
 80002d0:	4808      	ldr	r0, [pc, #32]	; (80002f4 <main+0x11c>)
 80002d2:	f007 f8ed 	bl	80074b0 <f_close>
  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <main+0x114>)
 80002dc:	f006 fbb2 	bl	8006a44 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x108>
 80002e2:	bf00      	nop
 80002e4:	08007e90 	.word	0x08007e90
 80002e8:	200000e8 	.word	0x200000e8
 80002ec:	2000031c 	.word	0x2000031c
 80002f0:	08007e84 	.word	0x08007e84
 80002f4:	200000ec 	.word	0x200000ec

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0b8      	sub	sp, #224	; 0xe0
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000302:	2244      	movs	r2, #68	; 0x44
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f007 fda8 	bl	8007e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2288      	movs	r2, #136	; 0x88
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f007 fd9a 	bl	8007e5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000328:	2310      	movs	r3, #16
 800032a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800033a:	2360      	movs	r3, #96	; 0x60
 800033c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fd62 	bl	8000e14 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000356:	f000 f8a9 	bl	80004ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f001 f92e 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800038a:	f000 f88f 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800038e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000392:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000398:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800039a:	2301      	movs	r3, #1
 800039c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80003a2:	2310      	movs	r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003a6:	2307      	movs	r3, #7
 80003a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003b6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b8:	463b      	mov	r3, r7
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fb14 	bl	80019e8 <HAL_RCCEx_PeriphCLKConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003c6:	f000 f871 	bl	80004ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ce:	f000 fccb 	bl	8000d68 <HAL_PWREx_ControlVoltageScaling>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80003d8:	f000 f868 	bl	80004ac <Error_Handler>
  }
}
 80003dc:	bf00      	nop
 80003de:	37e0      	adds	r7, #224	; 0xe0
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <MX_SDMMC1_SD_Init+0x3c>)
 80003ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <MX_SDMMC1_SD_Init+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	2000005c 	.word	0x2000005c
 8000420:	40012800 	.word	0x40012800

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x84>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_GPIO_Init+0x84>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_GPIO_Init+0x84>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	f003 0308 	and.w	r3, r3, #8
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 8000482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f000 fa97 	bl	80009cc <HAL_GPIO_Init>

}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <Error_Handler+0x6>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6613      	str	r3, [r2, #96]	; 0x60
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <HAL_SD_MspInit+0xb4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d144      	bne.n	80005a8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000522:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000528:	6613      	str	r3, [r2, #96]	; 0x60
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_SD_MspInit+0xb8>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000566:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800056a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000578:	230c      	movs	r3, #12
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <HAL_SD_MspInit+0xbc>)
 8000584:	f000 fa22 	bl	80009cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000588:	2304      	movs	r3, #4
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000598:	230c      	movs	r3, #12
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	; (80005bc <HAL_SD_MspInit+0xc0>)
 80005a4:	f000 fa12 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40012800 	.word	0x40012800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000800 	.word	0x48000800
 80005bc:	48000c00 	.word	0x48000c00

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <NMI_Handler+0x4>

080005c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MemManage_Handler+0x4>

080005d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <BusFault_Handler+0x4>

080005d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <UsageFault_Handler+0x4>

080005de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f8b6 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <SystemInit+0x64>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <SystemInit+0x64>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <SystemInit+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <SystemInit+0x68>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SystemInit+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <SystemInit+0x68>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <SystemInit+0x68>)
 8000640:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000644:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000648:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SystemInit+0x68>)
 800064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000650:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <SystemInit+0x68>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <SystemInit+0x68>)
 8000658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <SystemInit+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SystemInit+0x64>)
 8000666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066a:	609a      	str	r2, [r3, #8]
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	40021000 	.word	0x40021000

08000680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000684:	f7ff ffc6 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800069a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
	ldr	r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LoopForever+0x16>)
	cmp	r2, r3
 80006aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ae:	f007 fbb1 	bl	8007e14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006b2:	f7ff fd91 	bl	80001d8 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80006bc:	08007ff4 	.word	0x08007ff4
	ldr	r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006c4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006cc:	2000054c 	.word	0x2000054c

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>

080006d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f941 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f80e 	bl	8000704 <HAL_InitTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	e001      	b.n	80006f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f4:	f7ff fede 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_InitTick+0x6c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d023      	beq.n	8000760 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x70>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x6c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f93f 	bl	80009b2 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d809      	bhi.n	8000754 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000748:	f000 f917 	bl	800097a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_InitTick+0x74>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e007      	b.n	8000764 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e004      	b.n	8000764 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	20000000 	.word	0x20000000
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	200000e0 	.word	0x200000e0

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000e0 	.word	0x200000e0

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffde 	bl	80007a4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000944:	f7ff ff8e 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff47 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff5c 	bl	8000848 <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff8e 	bl	80008b8 <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffb0 	bl	8000920 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009da:	e17f      	b.n	8000cdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8171 	beq.w	8000cd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d00b      	beq.n	8000a14 <HAL_GPIO_Init+0x48>
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a08:	2b11      	cmp	r3, #17
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b12      	cmp	r3, #18
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	f003 0201 	and.w	r2, r3, #1
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d118      	bne.n	8000ab4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a88:	2201      	movs	r2, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	f003 0201 	and.w	r2, r3, #1
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x128>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b12      	cmp	r3, #18
 8000af2:	d123      	bne.n	8000b3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	6939      	ldr	r1, [r7, #16]
 8000b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0203 	and.w	r2, r3, #3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 80ac 	beq.w	8000cd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b5e      	ldr	r3, [pc, #376]	; (8000cf8 <HAL_GPIO_Init+0x32c>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a5d      	ldr	r2, [pc, #372]	; (8000cf8 <HAL_GPIO_Init+0x32c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b5b      	ldr	r3, [pc, #364]	; (8000cf8 <HAL_GPIO_Init+0x32c>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b96:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_GPIO_Init+0x330>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc0:	d025      	beq.n	8000c0e <HAL_GPIO_Init+0x242>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	; (8000d00 <HAL_GPIO_Init+0x334>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d01f      	beq.n	8000c0a <HAL_GPIO_Init+0x23e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4d      	ldr	r2, [pc, #308]	; (8000d04 <HAL_GPIO_Init+0x338>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d019      	beq.n	8000c06 <HAL_GPIO_Init+0x23a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_GPIO_Init+0x33c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x236>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <HAL_GPIO_Init+0x340>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_Init+0x232>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a4a      	ldr	r2, [pc, #296]	; (8000d10 <HAL_GPIO_Init+0x344>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_Init+0x22e>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <HAL_GPIO_Init+0x348>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_Init+0x22a>
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	e00c      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	e00a      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	e008      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000bfe:	2304      	movs	r3, #4
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000c02:	2303      	movs	r3, #3
 8000c04:	e004      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000c06:	2302      	movs	r3, #2
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x244>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	f002 0203 	and.w	r2, r2, #3
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c20:	4936      	ldr	r1, [pc, #216]	; (8000cfc <HAL_GPIO_Init+0x330>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c52:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <HAL_GPIO_Init+0x34c>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f ae78 	bne.w	80009dc <HAL_GPIO_Init+0x10>
  }
}
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48001400 	.word	0x48001400
 8000d14:	48001800 	.word	0x48001800
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e001      	b.n	8000d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40007000 	.word	0x40007000

08000d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d76:	d130      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d84:	d038      	beq.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2232      	movs	r2, #50	; 0x32
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3301      	adds	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dac:	e002      	b.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d102      	bne.n	8000dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f2      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd4:	d110      	bne.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e00f      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d007      	beq.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	431bde83 	.word	0x431bde83

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e3d4      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e26:	4ba1      	ldr	r3, [pc, #644]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e30:	4b9e      	ldr	r3, [pc, #632]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80e4 	beq.w	8001010 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <HAL_RCC_OscConfig+0x4a>
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b0c      	cmp	r3, #12
 8000e52:	f040 808b 	bne.w	8000f6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f040 8087 	bne.w	8000f6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e5e:	4b93      	ldr	r3, [pc, #588]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d005      	beq.n	8000e76 <HAL_RCC_OscConfig+0x62>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e3ac      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	4b8c      	ldr	r3, [pc, #560]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <HAL_RCC_OscConfig+0x7c>
 8000e86:	4b89      	ldr	r3, [pc, #548]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e8e:	e005      	b.n	8000e9c <HAL_RCC_OscConfig+0x88>
 8000e90:	4b86      	ldr	r3, [pc, #536]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d223      	bcs.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fd3f 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e38d      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a7c      	ldr	r2, [pc, #496]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b7a      	ldr	r3, [pc, #488]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4977      	ldr	r1, [pc, #476]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	4972      	ldr	r1, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
 8000ee6:	e025      	b.n	8000f34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee8:	4b70      	ldr	r3, [pc, #448]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6f      	ldr	r2, [pc, #444]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	496a      	ldr	r1, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4965      	ldr	r1, [pc, #404]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fcff 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e34d      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f34:	f000 fc36 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8000f38:	4601      	mov	r1, r0
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	4a5a      	ldr	r2, [pc, #360]	; (80010b0 <HAL_RCC_OscConfig+0x29c>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4a58      	ldr	r2, [pc, #352]	; (80010b4 <HAL_RCC_OscConfig+0x2a0>)
 8000f52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <HAL_RCC_OscConfig+0x2a4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbd3 	bl	8000704 <HAL_InitTick>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d052      	beq.n	800100e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	e331      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d032      	beq.n	8000fda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f74:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fc10 	bl	80007a4 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fc0c 	bl	80007a4 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e31a      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a40      	ldr	r2, [pc, #256]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	493b      	ldr	r1, [pc, #236]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4936      	ldr	r1, [pc, #216]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	e01a      	b.n	8001010 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fbdd 	bl	80007a4 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fee:	f7ff fbd9 	bl	80007a4 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e2e7      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x1da>
 800100c:	e000      	b.n	8001010 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800100e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d074      	beq.n	8001106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b08      	cmp	r3, #8
 8001020:	d005      	beq.n	800102e <HAL_RCC_OscConfig+0x21a>
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2b0c      	cmp	r3, #12
 8001026:	d10e      	bne.n	8001046 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d10b      	bne.n	8001046 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d064      	beq.n	8001104 <HAL_RCC_OscConfig+0x2f0>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d160      	bne.n	8001104 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e2c4      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x24a>
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e01d      	b.n	800109a <HAL_RCC_OscConfig+0x286>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001066:	d10c      	bne.n	8001082 <HAL_RCC_OscConfig+0x26e>
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 800106e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 800107a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e00b      	b.n	800109a <HAL_RCC_OscConfig+0x286>
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_RCC_OscConfig+0x298>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01c      	beq.n	80010dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb7f 	bl	80007a4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010a8:	e011      	b.n	80010ce <HAL_RCC_OscConfig+0x2ba>
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	08007ef0 	.word	0x08007ef0
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fb72 	bl	80007a4 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e280      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	4baf      	ldr	r3, [pc, #700]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x2a8>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb62 	bl	80007a4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fb5e 	bl	80007a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e26c      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f6:	4ba5      	ldr	r3, [pc, #660]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2d0>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d060      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d005      	beq.n	8001124 <HAL_RCC_OscConfig+0x310>
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b0c      	cmp	r3, #12
 800111c:	d119      	bne.n	8001152 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d116      	bne.n	8001152 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001124:	4b99      	ldr	r3, [pc, #612]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x328>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e249      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b93      	ldr	r3, [pc, #588]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	4990      	ldr	r1, [pc, #576]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001150:	e040      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d023      	beq.n	80011a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115a:	4b8c      	ldr	r3, [pc, #560]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8b      	ldr	r2, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fb1d 	bl	80007a4 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fb19 	bl	80007a4 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e227      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001180:	4b82      	ldr	r3, [pc, #520]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b7f      	ldr	r3, [pc, #508]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	061b      	lsls	r3, r3, #24
 800119a:	497c      	ldr	r1, [pc, #496]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e018      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a79      	ldr	r2, [pc, #484]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80011a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff faf9 	bl	80007a4 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff faf5 	bl	80007a4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e203      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c8:	4b70      	ldr	r3, [pc, #448]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01c      	beq.n	8001222 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ee:	4a67      	ldr	r2, [pc, #412]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fad4 	bl	80007a4 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fad0 	bl	80007a4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1de      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001212:	4b5e      	ldr	r3, [pc, #376]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ef      	beq.n	8001200 <HAL_RCC_OscConfig+0x3ec>
 8001220:	e01b      	b.n	800125a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b5a      	ldr	r3, [pc, #360]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001232:	f7ff fab7 	bl	80007a4 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123a:	f7ff fab3 	bl	80007a4 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1c1      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ef      	bne.n	800123a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80a6 	beq.w	80013b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4a43      	ldr	r2, [pc, #268]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001290:	2301      	movs	r3, #1
 8001292:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_RCC_OscConfig+0x57c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d118      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a0:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x57c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <HAL_RCC_OscConfig+0x57c>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fa7a 	bl	80007a4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fa76 	bl	80007a4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e184      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_RCC_OscConfig+0x57c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_RCC_OscConfig+0x4d8>
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	e024      	b.n	8001336 <HAL_RCC_OscConfig+0x522>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d110      	bne.n	8001316 <HAL_RCC_OscConfig+0x502>
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a24      	ldr	r2, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x578>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	4a20      	ldr	r2, [pc, #128]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001314:	e00f      	b.n	8001336 <HAL_RCC_OscConfig+0x522>
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_RCC_OscConfig+0x578>)
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800132e:	f023 0304 	bic.w	r3, r3, #4
 8001332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d016      	beq.n	800136c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fa31 	bl	80007a4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fa2d 	bl	80007a4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e139      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x578>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ed      	beq.n	8001346 <HAL_RCC_OscConfig+0x532>
 800136a:	e01a      	b.n	80013a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff fa1a 	bl	80007a4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001372:	e00f      	b.n	8001394 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f7ff fa16 	bl	80007a4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d906      	bls.n	8001394 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e122      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001394:	4b90      	ldr	r3, [pc, #576]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e8      	bne.n	8001374 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a2:	7ffb      	ldrb	r3, [r7, #31]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a8a      	ldr	r2, [pc, #552]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8108 	beq.w	80015ce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	f040 80d0 	bne.w	8001568 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013c8:	4b83      	ldr	r3, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	429a      	cmp	r2, r3
 80013da:	d130      	bne.n	800143e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	3b01      	subs	r3, #1
 80013e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d127      	bne.n	800143e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d11f      	bne.n	800143e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001408:	2a07      	cmp	r2, #7
 800140a:	bf14      	ite	ne
 800140c:	2201      	movne	r2, #1
 800140e:	2200      	moveq	r2, #0
 8001410:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001412:	4293      	cmp	r3, r2
 8001414:	d113      	bne.n	800143e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d109      	bne.n	800143e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d06e      	beq.n	800151c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d069      	beq.n	8001518 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001444:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001450:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b7      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001460:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800146a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800146c:	f7ff f99a 	bl	80007a4 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff f996 	bl	80007a4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0a4      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001486:	4b54      	ldr	r3, [pc, #336]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x7c8>)
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014a2:	3a01      	subs	r2, #1
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	4311      	orrs	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014b4:	0852      	lsrs	r2, r2, #1
 80014b6:	3a01      	subs	r2, #1
 80014b8:	0552      	lsls	r2, r2, #21
 80014ba:	4311      	orrs	r1, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014c0:	0852      	lsrs	r2, r2, #1
 80014c2:	3a01      	subs	r2, #1
 80014c4:	0652      	lsls	r2, r2, #25
 80014c6:	4311      	orrs	r1, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014cc:	0912      	lsrs	r2, r2, #4
 80014ce:	0452      	lsls	r2, r2, #17
 80014d0:	430a      	orrs	r2, r1
 80014d2:	4941      	ldr	r1, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014f0:	f7ff f958 	bl	80007a4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff f954 	bl	80007a4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e062      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001516:	e05a      	b.n	80015ce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e059      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d152      	bne.n	80015ce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800153a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001540:	f7ff f930 	bl	80007a4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff f92c 	bl	80007a4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e03a      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x734>
 8001566:	e032      	b.n	80015ce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	d02d      	beq.n	80015ca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001578:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 8001598:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff f8ff 	bl	80007a4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff f8fb 	bl	80007a4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e009      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_OscConfig+0x7c4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x796>
 80015c8:	e001      	b.n	80015ce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f99d808c 	.word	0xf99d808c

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0c8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b66      	ldr	r3, [pc, #408]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d910      	bls.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4961      	ldr	r1, [pc, #388]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b0      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d04c      	beq.n	80016ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d121      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e09e      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d115      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e092      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e086      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e07e      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 0203 	bic.w	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	493f      	ldr	r1, [pc, #252]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169a:	f7ff f883 	bl	80007a4 <HAL_GetTick>
 800169e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f87f 	bl	80007a4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e066      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 020c 	and.w	r2, r3, #12
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d1eb      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	492c      	ldr	r1, [pc, #176]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d210      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0207 	bic.w	r2, r3, #7
 80016fe:	4924      	ldr	r1, [pc, #144]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_RCC_ClockConfig+0x1b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e036      	b.n	8001786 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4918      	ldr	r1, [pc, #96]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001756:	f000 f825 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_ClockConfig+0x1b4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	fa21 f303 	lsr.w	r3, r1, r3
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe ffc2 	bl	8000704 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	72fb      	strb	r3, [r7, #11]

  return status;
 8001784:	7afb      	ldrb	r3, [r7, #11]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000
 8001794:	40021000 	.word	0x40021000
 8001798:	08007ef0 	.word	0x08007ef0
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d121      	bne.n	8001816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d11e      	bne.n	8001816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e005      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001814:	e00a      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d102      	bne.n	8001822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	e004      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d101      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800182a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d133      	bne.n	800189a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0xa4>
 8001842:	2b03      	cmp	r3, #3
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0xaa>
 8001846:	e005      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800184a:	617b      	str	r3, [r7, #20]
      break;
 800184c:	e005      	b.n	800185a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001850:	617b      	str	r3, [r7, #20]
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	617b      	str	r3, [r7, #20]
      break;
 8001858:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	3301      	adds	r3, #1
 8001866:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	fb02 f203 	mul.w	r2, r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0e5b      	lsrs	r3, r3, #25
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800189a:	69bb      	ldr	r3, [r7, #24]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08007f08 	.word	0x08007f08
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4601      	mov	r1, r0
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08007f00 	.word	0x08007f00

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001900:	f7ff ffda 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 8001904:	4601      	mov	r1, r0
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0adb      	lsrs	r3, r3, #11
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	08007f00 	.word	0x08007f00

08001928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001940:	f7ff fa04 	bl	8000d4c <HAL_PWREx_GetVoltageRange>
 8001944:	6178      	str	r0, [r7, #20]
 8001946:	e014      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001960:	f7ff f9f4 	bl	8000d4c <HAL_PWREx_GetVoltageRange>
 8001964:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001978:	d10b      	bne.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d919      	bls.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2ba0      	cmp	r3, #160	; 0xa0
 8001984:	d902      	bls.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e013      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800198c:	2301      	movs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e010      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d902      	bls.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001998:	2303      	movs	r3, #3
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e00a      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d102      	bne.n	80019aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e004      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b70      	cmp	r3, #112	; 0x70
 80019ae:	d101      	bne.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019f0:	2300      	movs	r3, #0
 80019f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019f4:	2300      	movs	r3, #0
 80019f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03f      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0c:	d01c      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a12:	d802      	bhi.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001a18:	e01f      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a1e:	d003      	beq.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a24:	d01c      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001a26:	e018      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a28:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a84      	ldr	r2, [pc, #528]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a34:	e015      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 ff3f 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001a42:	4603      	mov	r3, r0
 8001a44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a46:	e00c      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3320      	adds	r3, #32
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f826 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a58:	e003      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a5e:	e000      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a68:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a76:	4972      	ldr	r1, [pc, #456]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a7e:	e001      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03f      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d01c      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9e:	d802      	bhi.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001aa4:	e01f      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aaa:	d003      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001aac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ab0:	d01c      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ab4:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a61      	ldr	r2, [pc, #388]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ac0:	e015      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fef9 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ad2:	e00c      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3320      	adds	r3, #32
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 ffe0 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ae4:	e003      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	74fb      	strb	r3, [r7, #19]
      break;
 8001aea:	e000      	b.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001af4:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b02:	494f      	ldr	r1, [pc, #316]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b0a:	e001      	b.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b0c:	7cfb      	ldrb	r3, [r7, #19]
 8001b0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a0 	beq.w	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b32:	2300      	movs	r3, #0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00d      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b60:	f7fe fe20 	bl	80007a4 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b66:	e009      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b68:	f7fe fe1c 	bl	80007a4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d902      	bls.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	74fb      	strb	r3, [r7, #19]
        break;
 8001b7a:	e005      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d15c      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01f      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d019      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d016      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe fddb 	bl	80007a4 <HAL_GetTick>
 8001bee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7fe fdd7 	bl	80007a4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d902      	bls.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	74fb      	strb	r3, [r7, #19]
            break;
 8001c08:	e006      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ec      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001c18:	7cfb      	ldrb	r3, [r7, #19]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2e:	4904      	ldr	r1, [pc, #16]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c36:	e009      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	74bb      	strb	r3, [r7, #18]
 8001c3c:	e006      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4c:	7c7b      	ldrb	r3, [r7, #17]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b9e      	ldr	r3, [pc, #632]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	4a9d      	ldr	r2, [pc, #628]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c6a:	4b98      	ldr	r3, [pc, #608]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c70:	f023 0203 	bic.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	4994      	ldr	r1, [pc, #592]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	f023 020c 	bic.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	498c      	ldr	r1, [pc, #560]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cae:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4983      	ldr	r1, [pc, #524]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cd0:	4b7e      	ldr	r3, [pc, #504]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	497b      	ldr	r1, [pc, #492]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d00:	4972      	ldr	r1, [pc, #456]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d14:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	496a      	ldr	r1, [pc, #424]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d36:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	4961      	ldr	r1, [pc, #388]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d58:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d66:	4959      	ldr	r1, [pc, #356]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	4950      	ldr	r1, [pc, #320]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	4948      	ldr	r1, [pc, #288]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	493f      	ldr	r1, [pc, #252]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d028      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dee:	4937      	ldr	r1, [pc, #220]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0a:	60d3      	str	r3, [r2, #12]
 8001e0c:	e011      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fd4e 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d028      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	491f      	ldr	r1, [pc, #124]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e68:	60d3      	str	r3, [r2, #12]
 8001e6a:	e011      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fd1f 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001e82:	4603      	mov	r3, r0
 8001e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02b      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a02      	ldr	r2, [pc, #8]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ec6:	60d3      	str	r3, [r2, #12]
 8001ec8:	e014      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fced 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001ef0:	7cfb      	ldrb	r3, [r7, #19]
 8001ef2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02f      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fcca 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	74bb      	strb	r3, [r7, #18]
 8001f3a:	e011      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fda7 	bl	8002aa0 <RCCEx_PLLSAI2_Config>
 8001f52:	4603      	mov	r3, r0
 8001f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9e:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fc6:	d137      	bne.n	8002038 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001fc8:	4bb8      	ldr	r3, [pc, #736]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	d014      	beq.n	8002006 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8001fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fe0:	d01e      	beq.n	8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8001fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe6:	d001      	beq.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8001fe8:	f000 bc60 	b.w	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8001fec:	4baf      	ldr	r3, [pc, #700]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	f040 8453 	bne.w	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8001ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002000:	61fb      	str	r3, [r7, #28]
      break;
 8002002:	f000 bc4e 	b.w	80028a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002006:	4ba9      	ldr	r3, [pc, #676]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	f040 8448 	bne.w	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8002016:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800201a:	61fb      	str	r3, [r7, #28]
      break;
 800201c:	f000 bc43 	b.w	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002020:	4ba2      	ldr	r3, [pc, #648]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800202c:	f040 843d 	bne.w	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8002030:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002032:	61fb      	str	r3, [r7, #28]
      break;
 8002034:	f000 bc39 	b.w	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002038:	4b9c      	ldr	r3, [pc, #624]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d023      	beq.n	8002090 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002048:	2b03      	cmp	r3, #3
 800204a:	d02e      	beq.n	80020aa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d139      	bne.n	80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002050:	4b96      	ldr	r3, [pc, #600]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d116      	bne.n	800208a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800205c:	4b93      	ldr	r3, [pc, #588]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8002068:	4b90      	ldr	r3, [pc, #576]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	e005      	b.n	8002080 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002074:	4b8d      	ldr	r3, [pc, #564]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	4a8c      	ldr	r2, [pc, #560]	; (80022b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002088:	e01f      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
      break;
 800208e:	e01c      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002090:	4b86      	ldr	r3, [pc, #536]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d102      	bne.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800209e:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80020a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80020a2:	e012      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
      break;
 80020a8:	e00f      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020aa:	4b80      	ldr	r3, [pc, #512]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b6:	d102      	bne.n	80020be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80020ba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80020bc:	e005      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
      break;
 80020c2:	e002      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
      break;
 80020c8:	bf00      	nop
    }

    switch(PeriphClk)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d0:	f000 8345 	beq.w	800275e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d825      	bhi.n	8002126 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80020da:	2b10      	cmp	r3, #16
 80020dc:	f000 81df 	beq.w	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d80f      	bhi.n	8002104 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	f000 8128 	beq.w	800233a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d803      	bhi.n	80020f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f000 80ec 	beq.w	80022cc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80020f4:	e3da      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	f000 8169 	beq.w	80023ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	f000 819a 	beq.w	8002436 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8002102:	e3d3      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	f000 82c1 	beq.w	800268c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d803      	bhi.n	8002116 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800210e:	2b20      	cmp	r3, #32
 8002110:	f000 81fd 	beq.w	800250e <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8002114:	e3ca      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	f000 82db 	beq.w	80026d2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 800211c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002120:	f000 82fa 	beq.w	8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8002124:	e3c2      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800212a:	f000 822d 	beq.w	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800212e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002132:	d811      	bhi.n	8002158 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002138:	d021      	beq.n	800217e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800213a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800213e:	d804      	bhi.n	800214a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002144:	f000 834c 	beq.w	80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8002148:	e3b0      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d01d      	beq.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002154:	d021      	beq.n	800219a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8002156:	e3a9      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	f000 8285 	beq.w	800266a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d804      	bhi.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800216a:	f000 837e 	beq.w	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 800216e:	e39d      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002174:	d011      	beq.n	800219a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8002176:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800217a:	d00e      	beq.n	800219a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 800217c:	e396      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002184:	f000 fd66 	bl	8002c54 <RCCEx_GetSAIxPeriphCLKFreq>
 8002188:	61f8      	str	r0, [r7, #28]
      break;
 800218a:	e38f      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800218c:	69b9      	ldr	r1, [r7, #24]
 800218e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002192:	f000 fd5f 	bl	8002c54 <RCCEx_GetSAIxPeriphCLKFreq>
 8002196:	61f8      	str	r0, [r7, #28]
      break;
 8002198:	e388      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80021a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ac:	d023      	beq.n	80021f6 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80021ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80021b2:	d003      	beq.n	80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80021b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021b8:	d04a      	beq.n	8002250 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 80021ba:	e086      	b.n	80022ca <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d17b      	bne.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80021c8:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	e005      	b.n	80021ec <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61fb      	str	r3, [r7, #28]
          break;
 80021f4:	e064      	b.n	80022c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002202:	d15f      	bne.n	80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002210:	d158      	bne.n	80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800221c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	fb02 f203 	mul.w	r2, r2, r3
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	3301      	adds	r3, #1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0d5b      	lsrs	r3, r3, #21
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	61fb      	str	r3, [r7, #28]
          break;
 800224e:	e039      	b.n	80022c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800225c:	d134      	bne.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226a:	d12d      	bne.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002276:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	fb02 f203 	mul.w	r2, r2, r3
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	3301      	adds	r3, #1
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	0d5b      	lsrs	r3, r3, #21
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	3301      	adds	r3, #1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	61fb      	str	r3, [r7, #28]
          break;
 80022a8:	e00e      	b.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	0003d090 	.word	0x0003d090
 80022b4:	08007f08 	.word	0x08007f08
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	007a1200 	.word	0x007a1200
          break;
 80022c0:	bf00      	nop
 80022c2:	e2f3      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80022c4:	bf00      	nop
 80022c6:	e2f1      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80022c8:	bf00      	nop
        break;
 80022ca:	e2ef      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80022cc:	4bac      	ldr	r3, [pc, #688]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d827      	bhi.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	080022f5 	.word	0x080022f5
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	08002305 	.word	0x08002305
 80022f0:	08002319 	.word	0x08002319
          frequency = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fb02 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 80022f8:	61f8      	str	r0, [r7, #28]
          break;
 80022fa:	e01d      	b.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80022fc:	f7ff fa52 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002300:	61f8      	str	r0, [r7, #28]
          break;
 8002302:	e019      	b.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d10f      	bne.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8002312:	4b9c      	ldr	r3, [pc, #624]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002314:	61fb      	str	r3, [r7, #28]
          break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002318:	4b99      	ldr	r3, [pc, #612]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8002326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232a:	61fb      	str	r3, [r7, #28]
          break;
 800232c:	e003      	b.n	8002336 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800232e:	bf00      	nop
 8002330:	e2bc      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002332:	bf00      	nop
 8002334:	e2ba      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002336:	bf00      	nop
        break;
 8002338:	e2b8      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800233a:	4b91      	ldr	r3, [pc, #580]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d83a      	bhi.n	80023c2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800234c:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002389 	.word	0x08002389
 8002358:	080023c3 	.word	0x080023c3
 800235c:	080023c3 	.word	0x080023c3
 8002360:	080023c3 	.word	0x080023c3
 8002364:	08002391 	.word	0x08002391
 8002368:	080023c3 	.word	0x080023c3
 800236c:	080023c3 	.word	0x080023c3
 8002370:	080023c3 	.word	0x080023c3
 8002374:	08002399 	.word	0x08002399
 8002378:	080023c3 	.word	0x080023c3
 800237c:	080023c3 	.word	0x080023c3
 8002380:	080023c3 	.word	0x080023c3
 8002384:	080023ad 	.word	0x080023ad
          frequency = HAL_RCC_GetPCLK1Freq();
 8002388:	f7ff faa2 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 800238c:	61f8      	str	r0, [r7, #28]
          break;
 800238e:	e01d      	b.n	80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8002390:	f7ff fa08 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002394:	61f8      	str	r0, [r7, #28]
          break;
 8002396:	e019      	b.n	80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80023a6:	4b77      	ldr	r3, [pc, #476]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80023a8:	61fb      	str	r3, [r7, #28]
          break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80023ac:	4b74      	ldr	r3, [pc, #464]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 80023ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023be:	61fb      	str	r3, [r7, #28]
          break;
 80023c0:	e003      	b.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 80023c2:	bf00      	nop
 80023c4:	e272      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80023c6:	bf00      	nop
 80023c8:	e270      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80023ca:	bf00      	nop
        break;
 80023cc:	e26e      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80023ce:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023d8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d00d      	beq.n	80023fc <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d802      	bhi.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 80023e8:	e024      	b.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80023ee:	2b30      	cmp	r3, #48	; 0x30
 80023f0:	d012      	beq.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 80023f2:	e01f      	b.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fa6c 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80023f8:	61f8      	str	r0, [r7, #28]
          break;
 80023fa:	e01b      	b.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 80023fc:	f7ff f9d2 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002400:	61f8      	str	r0, [r7, #28]
          break;
 8002402:	e017      	b.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d10d      	bne.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002414:	61fb      	str	r3, [r7, #28]
          break;
 8002416:	e00a      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d105      	bne.n	8002432 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8002426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242a:	61fb      	str	r3, [r7, #28]
          break;
 800242c:	e001      	b.n	8002432 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800242e:	bf00      	nop
 8002430:	e23c      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002432:	bf00      	nop
        break;
 8002434:	e23a      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002440:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d00d      	beq.n	8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d802      	bhi.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8002450:	e024      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8002456:	2bc0      	cmp	r3, #192	; 0xc0
 8002458:	d012      	beq.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 800245a:	e01f      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800245c:	f7ff fa38 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002460:	61f8      	str	r0, [r7, #28]
          break;
 8002462:	e01b      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002464:	f7ff f99e 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002468:	61f8      	str	r0, [r7, #28]
          break;
 800246a:	e017      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800246c:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002478:	d10d      	bne.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800247c:	61fb      	str	r3, [r7, #28]
          break;
 800247e:	e00a      	b.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d105      	bne.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 800248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002492:	61fb      	str	r3, [r7, #28]
          break;
 8002494:	e001      	b.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8002496:	bf00      	nop
 8002498:	e208      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800249a:	bf00      	nop
        break;
 800249c:	e206      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800249e:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80024b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b6:	d802      	bhi.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 80024bc:	e026      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 80024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c2:	d00b      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80024c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c8:	d012      	beq.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 80024ca:	e01f      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 80024cc:	f7ff fa00 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80024d0:	61f8      	str	r0, [r7, #28]
          break;
 80024d2:	e01b      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 80024d4:	f7ff f966 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 80024d8:	61f8      	str	r0, [r7, #28]
          break;
 80024da:	e017      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e8:	d10d      	bne.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80024ec:	61fb      	str	r3, [r7, #28]
          break;
 80024ee:	e00a      	b.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d105      	bne.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 80024fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002502:	61fb      	str	r3, [r7, #28]
          break;
 8002504:	e001      	b.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8002506:	bf00      	nop
 8002508:	e1d0      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800250a:	bf00      	nop
        break;
 800250c:	e1ce      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002518:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d010      	beq.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d802      	bhi.n	800252e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 800252c:	e026      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d00b      	beq.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8002534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002538:	d012      	beq.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800253a:	e01f      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800253c:	f7ff f9c8 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002540:	61f8      	str	r0, [r7, #28]
          break;
 8002542:	e01b      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002544:	f7ff f92e 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002548:	61f8      	str	r0, [r7, #28]
          break;
 800254a:	e017      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002558:	d10d      	bne.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800255c:	61fb      	str	r3, [r7, #28]
          break;
 800255e:	e00a      	b.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d105      	bne.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 800256e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002572:	61fb      	str	r3, [r7, #28]
          break;
 8002574:	e001      	b.n	800257a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8002576:	bf00      	nop
 8002578:	e198      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800257a:	bf00      	nop
        break;
 800257c:	e196      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002588:	4bad      	ldr	r3, [pc, #692]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002592:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259a:	d036      	beq.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800259c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025a0:	d003      	beq.n	80025aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80025a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a6:	d004      	beq.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80025a8:	e05e      	b.n	8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80025aa:	f7ff f8fb 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 80025ae:	61f8      	str	r0, [r7, #28]
          break;
 80025b0:	e05a      	b.n	8002668 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80025b2:	4ba3      	ldr	r3, [pc, #652]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025be:	d150      	bne.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80025c0:	4b9f      	ldr	r3, [pc, #636]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d04a      	beq.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80025cc:	4b9c      	ldr	r3, [pc, #624]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	fb02 f203 	mul.w	r2, r2, r3
 80025e0:	4b97      	ldr	r3, [pc, #604]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	3301      	adds	r3, #1
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80025f2:	4b93      	ldr	r3, [pc, #588]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	0e5b      	lsrs	r3, r3, #25
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	3301      	adds	r3, #1
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	61fb      	str	r3, [r7, #28]
          break;
 8002608:	e02b      	b.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800260a:	4b8d      	ldr	r3, [pc, #564]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002616:	d126      	bne.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002618:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002624:	4b86      	ldr	r3, [pc, #536]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	fb02 f203 	mul.w	r2, r2, r3
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	3301      	adds	r3, #1
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	0e5b      	lsrs	r3, r3, #25
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	3301      	adds	r3, #1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	61fb      	str	r3, [r7, #28]
          break;
 8002660:	e001      	b.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 8002662:	bf00      	nop
 8002664:	e122      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002666:	bf00      	nop
        break;
 8002668:	e120      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800266a:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002674:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff f93e 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8002680:	61f8      	str	r0, [r7, #28]
        break;
 8002682:	e113      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002684:	f7ff f88e 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002688:	61f8      	str	r0, [r7, #28]
        break;
 800268a:	e10f      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800268c:	4b6c      	ldr	r3, [pc, #432]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002696:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d009      	beq.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d000      	beq.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 80026aa:	e011      	b.n	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff f910 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80026b0:	61f8      	str	r0, [r7, #28]
          break;
 80026b2:	e00d      	b.n	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 80026b4:	f7ff f876 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 80026b8:	61f8      	str	r0, [r7, #28]
          break;
 80026ba:	e009      	b.n	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026bc:	4b60      	ldr	r3, [pc, #384]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 80026ca:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80026cc:	61fb      	str	r3, [r7, #28]
          break;
 80026ce:	bf00      	nop
        break;
 80026d0:	e0ec      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026dc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e4:	d009      	beq.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d000      	beq.n	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 80026f0:	e011      	b.n	8002716 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 80026f2:	f7ff f8ed 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80026f6:	61f8      	str	r0, [r7, #28]
          break;
 80026f8:	e00d      	b.n	8002716 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 80026fa:	f7ff f853 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 80026fe:	61f8      	str	r0, [r7, #28]
          break;
 8002700:	e009      	b.n	8002716 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d101      	bne.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8002712:	61fb      	str	r3, [r7, #28]
          break;
 8002714:	bf00      	nop
        break;
 8002716:	e0c9      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002722:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272a:	d009      	beq.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800272c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d000      	beq.n	8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 8002736:	e011      	b.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002738:	f7ff f8ca 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 800273c:	61f8      	str	r0, [r7, #28]
          break;
 800273e:	e00d      	b.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002740:	f7ff f830 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8002744:	61f8      	str	r0, [r7, #28]
          break;
 8002746:	e009      	b.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d101      	bne.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8002758:	61fb      	str	r3, [r7, #28]
          break;
 800275a:	bf00      	nop
        break;
 800275c:	e0a6      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002768:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002770:	d010      	beq.n	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8002772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002776:	d802      	bhi.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 800277c:	e02f      	b.n	80027de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 800277e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002782:	d012      	beq.n	80027aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8002784:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002788:	d019      	beq.n	80027be <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 800278a:	e028      	b.n	80027de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800278c:	f7ff f8a0 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002790:	61f8      	str	r0, [r7, #28]
          break;
 8002792:	e024      	b.n	80027de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d118      	bne.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 80027a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80027a6:	61fb      	str	r3, [r7, #28]
          break;
 80027a8:	e014      	b.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027aa:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d10f      	bne.n	80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80027ba:	61fb      	str	r3, [r7, #28]
          break;
 80027bc:	e00c      	b.n	80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d107      	bne.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 80027cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d0:	61fb      	str	r3, [r7, #28]
          break;
 80027d2:	e003      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80027d4:	bf00      	nop
 80027d6:	e069      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80027d8:	bf00      	nop
 80027da:	e067      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80027dc:	bf00      	nop
        break;
 80027de:	e065      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027ea:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f2:	d010      	beq.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 80027f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f8:	d802      	bhi.n	8002800 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 80027fe:	e033      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 8002800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002804:	d012      	beq.n	800282c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8002806:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800280a:	d01d      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 800280c:	e02c      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800280e:	f7ff f85f 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002812:	61f8      	str	r0, [r7, #28]
          break;
 8002814:	e028      	b.n	8002868 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d11c      	bne.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 8002824:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002828:	61fb      	str	r3, [r7, #28]
          break;
 800282a:	e018      	b.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002838:	d113      	bne.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 800283a:	4b02      	ldr	r3, [pc, #8]	; (8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800283c:	61fb      	str	r3, [r7, #28]
          break;
 800283e:	e010      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8002840:	40021000 	.word	0x40021000
 8002844:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d107      	bne.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	61fb      	str	r3, [r7, #28]
          break;
 800285c:	e003      	b.n	8002866 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 800285e:	bf00      	nop
 8002860:	e024      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002862:	bf00      	nop
 8002864:	e022      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002866:	bf00      	nop
        break;
 8002868:	e020      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002874:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d004      	beq.n	800288c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 8002882:	e00d      	b.n	80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002884:	f7ff f824 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002888:	61f8      	str	r0, [r7, #28]
          break;
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 800289c:	61fb      	str	r3, [r7, #28]
          break;
 800289e:	bf00      	nop
        break;
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 80028aa:	bf00      	nop
    }
  }

  return(frequency);
 80028ac:	69fb      	ldr	r3, [r7, #28]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	00f42400 	.word	0x00f42400

080028c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10d      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
       ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f2:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
       ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d044      	beq.n	8002990 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e041      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d00c      	beq.n	800292e <RCCEx_PLLSAI1_Config+0x6e>
 8002914:	2b03      	cmp	r3, #3
 8002916:	d013      	beq.n	8002940 <RCCEx_PLLSAI1_Config+0x80>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d120      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800291c:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11d      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292c:	e01a      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293e:	e013      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002940:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800295c:	e006      	b.n	800296c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      break;
 8002962:	e004      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002964:	bf00      	nop
 8002966:	e002      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800296c:	bf00      	nop
    }

    if(status == HAL_OK)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002974:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	3b01      	subs	r3, #1
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	430b      	orrs	r3, r1
 800298a:	4944      	ldr	r1, [pc, #272]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d17d      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 800299c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a2:	f7fd feff 	bl	80007a4 <HAL_GetTick>
 80029a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a8:	e009      	b.n	80029be <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029aa:	f7fd fefb 	bl	80007a4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d902      	bls.n	80029be <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	73fb      	strb	r3, [r7, #15]
        break;
 80029bc:	e005      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ef      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d160      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d111      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	0211      	lsls	r1, r2, #8
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68d2      	ldr	r2, [r2, #12]
 80029ec:	0912      	lsrs	r2, r2, #4
 80029ee:	0452      	lsls	r2, r2, #17
 80029f0:	430a      	orrs	r2, r1
 80029f2:	492a      	ldr	r1, [pc, #168]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	610b      	str	r3, [r1, #16]
 80029f8:	e027      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d112      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	0211      	lsls	r1, r2, #8
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6912      	ldr	r2, [r2, #16]
 8002a16:	0852      	lsrs	r2, r2, #1
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0552      	lsls	r2, r2, #21
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	491f      	ldr	r1, [pc, #124]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	610b      	str	r3, [r1, #16]
 8002a24:	e011      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	0211      	lsls	r1, r2, #8
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6952      	ldr	r2, [r2, #20]
 8002a3c:	0852      	lsrs	r2, r2, #1
 8002a3e:	3a01      	subs	r2, #1
 8002a40:	0652      	lsls	r2, r2, #25
 8002a42:	430a      	orrs	r2, r1
 8002a44:	4915      	ldr	r1, [pc, #84]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fd fea5 	bl	80007a4 <HAL_GetTick>
 8002a5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a5c:	e009      	b.n	8002a72 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5e:	f7fd fea1 	bl	80007a4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d902      	bls.n	8002a72 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a70:	e005      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ef      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aae:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0203 	and.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10d      	bne.n	8002ae6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d044      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e041      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d00c      	beq.n	8002b0e <RCCEx_PLLSAI2_Config+0x6e>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d013      	beq.n	8002b20 <RCCEx_PLLSAI2_Config+0x80>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d120      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afc:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11d      	bne.n	8002b44 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e01a      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b0e:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e013      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10f      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2c:	4b48      	ldr	r3, [pc, #288]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3c:	e006      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e004      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b44:	bf00      	nop
 8002b46:	e002      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b4c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b54:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	4939      	ldr	r1, [pc, #228]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d167      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b82:	f7fd fe0f 	bl	80007a4 <HAL_GetTick>
 8002b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b88:	e009      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b8a:	f7fd fe0b 	bl	80007a4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d902      	bls.n	8002b9e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9c:	e005      	b.n	8002baa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ef      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d14a      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d111      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	0211      	lsls	r1, r2, #8
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68d2      	ldr	r2, [r2, #12]
 8002bcc:	0912      	lsrs	r2, r2, #4
 8002bce:	0452      	lsls	r2, r2, #17
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	491f      	ldr	r1, [pc, #124]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	614b      	str	r3, [r1, #20]
 8002bd8:	e011      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002be2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6892      	ldr	r2, [r2, #8]
 8002bea:	0211      	lsls	r1, r2, #8
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6912      	ldr	r2, [r2, #16]
 8002bf0:	0852      	lsrs	r2, r2, #1
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0652      	lsls	r2, r2, #25
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	4915      	ldr	r1, [pc, #84]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fd fdcb 	bl	80007a4 <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c10:	e009      	b.n	8002c26 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c12:	f7fd fdc7 	bl	80007a4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	73fb      	strb	r3, [r7, #15]
          break;
 8002c24:	e005      	b.n	8002c32 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ef      	beq.n	8002c12 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000

08002c54 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c70:	d10c      	bne.n	8002c8c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c7c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c84:	d112      	bne.n	8002cac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8002c86:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e00f      	b.n	8002cac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	d10b      	bne.n	8002cac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8002c94:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002c9e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ca6:	d101      	bne.n	8002cac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8002caa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 80b4 	bne.w	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cbe:	d003      	beq.n	8002cc8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc6:	d135      	bne.n	8002d34 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cd4:	f040 80a1 	bne.w	8002e1a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8002cd8:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 809a 	beq.w	8002e1a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d04:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8002d0c:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8002d18:	2311      	movs	r3, #17
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e001      	b.n	8002d22 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8002d1e:	2307      	movs	r3, #7
 8002d20:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	fb02 f203 	mul.w	r2, r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8002d32:	e072      	b.n	8002e1a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d133      	bne.n	8002da2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d169      	bne.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8002d48:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d063      	beq.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	3301      	adds	r3, #1
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d72:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8002d86:	2311      	movs	r3, #17
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e001      	b.n	8002d90 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fb02 f203 	mul.w	r2, r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e03c      	b.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da8:	d003      	beq.n	8002db2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db0:	d134      	bne.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbe:	d12d      	bne.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d027      	beq.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dea:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8002dfe:	2311      	movs	r3, #17
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e001      	b.n	8002e08 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8002e04:	2307      	movs	r3, #7
 8002e06:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	fb02 f203 	mul.w	r2, r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e000      	b.n	8002e1c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8002e1a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	001fff68 	.word	0x001fff68

08002e34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e022      	b.n	8002e8c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fd fb4f 	bl	80004fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f814 	bl	8002e94 <HAL_SD_InitCard>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00a      	b.n	8002e8c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b090      	sub	sp, #64	; 0x40
 8002e98:	af04      	add	r7, sp, #16
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8002eb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002eb4:	f7ff f87e 	bl	8001fb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002eb8:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e08d      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk/400000U) - 2U);
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	09db      	lsrs	r3, r3, #7
 8002ed8:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_SD_InitCard+0x164>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	3b02      	subs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681d      	ldr	r5, [r3, #0]
 8002ee8:	466c      	mov	r4, sp
 8002eea:	f107 0318 	add.w	r3, r7, #24
 8002eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	4628      	mov	r0, r5
 8002efe:	f001 f94f 	bl	80041a0 <SDMMC_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8002f08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e06d      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f22:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 f984 	bl	8004236 <SDMMC_PowerState_ON>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8002f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e057      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	3302      	adds	r3, #2
 8002f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_SD_InitCard+0x168>)
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fc28 	bl	80007bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 ff01 	bl	8003d74 <SD_PowerON>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e02e      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fe20 	bl	8003bd8 <SD_InitCard>
 8002f98:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e01b      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 f9cb 	bl	800435c <SDMMC_CmdBlockLength>
 8002fc6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <HAL_SD_InitCard+0x16c>)
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3730      	adds	r7, #48	; 0x30
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	014f8b59 	.word	0x014f8b59
 8002ffc:	00012110 	.word	0x00012110
 8003000:	004005ff 	.word	0x004005ff

08003004 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b092      	sub	sp, #72	; 0x48
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7fd fbc7 	bl	80007a4 <HAL_GetTick>
 8003016:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1bd      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 81b0 	bne.w	80033a4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800304a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	429a      	cmp	r2, r3
 8003056:	d907      	bls.n	8003068 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e1a4      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2203      	movs	r2, #3
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800308a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	025b      	lsls	r3, r3, #9
 8003090:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003092:	2390      	movs	r3, #144	; 0x90
 8003094:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003096:	2302      	movs	r3, #2
 8003098:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f107 0214 	add.w	r2, r7, #20
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 f929 	bl	8004304 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d90a      	bls.n	80030ce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2202      	movs	r2, #2
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030c4:	4618      	mov	r0, r3
 80030c6:	f001 f98d 	bl	80043e4 <SDMMC_CmdReadMultiBlock>
 80030ca:	6478      	str	r0, [r7, #68]	; 0x44
 80030cc:	e009      	b.n	80030e2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f960 	bl	80043a0 <SDMMC_CmdReadSingleBlock>
 80030e0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80030e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7a      	ldr	r2, [pc, #488]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e151      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003112:	e061      	b.n	80031d8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03c      	beq.n	800319c <HAL_SD_ReadBlocks+0x198>
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d039      	beq.n	800319c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
 800312c:	e033      	b.n	8003196 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f861 	bl	80041fa <SDMMC_ReadFIFO>
 8003138:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	b2da      	uxtb	r2, r3
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	3301      	adds	r3, #1
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	3b01      	subs	r3, #1
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	b2da      	uxtb	r2, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	3301      	adds	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	3b01      	subs	r3, #1
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	b2da      	uxtb	r2, r3
 800316a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003170:	3301      	adds	r3, #1
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	3b01      	subs	r3, #1
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	0e1b      	lsrs	r3, r3, #24
 800317e:	b2da      	uxtb	r2, r3
 8003180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003182:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003186:	3301      	adds	r3, #1
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	3b01      	subs	r3, #1
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	3301      	adds	r3, #1
 8003194:	643b      	str	r3, [r7, #64]	; 0x40
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	2b07      	cmp	r3, #7
 800319a:	d9c8      	bls.n	800312e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800319c:	f7fd fb02 	bl	80007a4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d902      	bls.n	80031b2 <HAL_SD_ReadBlocks+0x1ae>
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d112      	bne.n	80031d8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0ec      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d096      	beq.n	8003114 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d91f      	bls.n	800323a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d01b      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f952 	bl	80044b0 <SDMMC_CmdStopTransfer>
 800320c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800320e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003210:	2b00      	cmp	r3, #0
 8003212:	d012      	beq.n	800323a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0bb      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	f043 0208 	orr.w	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0a1      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e087      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d064      	beq.n	800337a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <HAL_SD_ReadBlocks+0x2d4>)
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06d      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
 80032d6:	bf00      	nop
 80032d8:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 ff8a 	bl	80041fa <SDMMC_ReadFIFO>
 80032e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	3301      	adds	r3, #1
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	3b01      	subs	r3, #1
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	b2da      	uxtb	r2, r3
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003308:	3301      	adds	r3, #1
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	3b01      	subs	r3, #1
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	b2da      	uxtb	r2, r3
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	3301      	adds	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003324:	3b01      	subs	r3, #1
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	b2da      	uxtb	r2, r3
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	3301      	adds	r3, #1
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333a:	3b01      	subs	r3, #1
 800333c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800333e:	f7fd fa31 	bl	80007a4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800334a:	429a      	cmp	r2, r3
 800334c:	d902      	bls.n	8003354 <HAL_SD_ReadBlocks+0x350>
 800334e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d112      	bne.n	800337a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_SD_ReadBlocks+0x3b8>)
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01b      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_SD_ReadBlocks+0x38a>
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1a6      	bne.n	80032dc <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f240 523a 	movw	r2, #1338	; 0x53a
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e006      	b.n	80033b2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3748      	adds	r7, #72	; 0x48
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	004005ff 	.word	0x004005ff

080033c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b092      	sub	sp, #72	; 0x48
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033ce:	f7fd f9e9 	bl	80007a4 <HAL_GetTick>
 80033d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e165      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 8158 	bne.w	80036b0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	429a      	cmp	r2, r3
 8003412:	d907      	bls.n	8003424 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e14c      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	2b01      	cmp	r3, #1
 800343a:	d002      	beq.n	8003442 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	025b      	lsls	r3, r3, #9
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003446:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	025b      	lsls	r3, r3, #9
 800344c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800344e:	2390      	movs	r3, #144	; 0x90
 8003450:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003456:	2300      	movs	r3, #0
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f107 0218 	add.w	r2, r7, #24
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 ff4b 	bl	8004304 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d90a      	bls.n	800348a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fff3 	bl	800446c <SDMMC_CmdWriteMultiBlock>
 8003486:	6478      	str	r0, [r7, #68]	; 0x44
 8003488:	e009      	b.n	800349e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003496:	4618      	mov	r0, r3
 8003498:	f000 ffc6 	bl	8004428 <SDMMC_CmdWriteSingleBlock>
 800349c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a87      	ldr	r2, [pc, #540]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0f9      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80034ce:	e065      	b.n	800359c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d040      	beq.n	8003560 <HAL_SD_WriteBlocks+0x1a0>
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d03d      	beq.n	8003560 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	643b      	str	r3, [r7, #64]	; 0x40
 80034e8:	e037      	b.n	800355a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	3301      	adds	r3, #1
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f8:	3b01      	subs	r3, #1
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	3301      	adds	r3, #1
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	3b01      	subs	r3, #1
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	3301      	adds	r3, #1
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	3b01      	subs	r3, #1
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	061a      	lsls	r2, r3, #24
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	3301      	adds	r3, #1
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	3b01      	subs	r3, #1
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f107 0214 	add.w	r2, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fe60 	bl	8004214 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003556:	3301      	adds	r3, #1
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	2b07      	cmp	r3, #7
 800355e:	d9c4      	bls.n	80034ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003560:	f7fd f920 	bl	80007a4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800356c:	429a      	cmp	r2, r3
 800356e:	d902      	bls.n	8003576 <HAL_SD_WriteBlocks+0x1b6>
 8003570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d112      	bne.n	800359c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a53      	ldr	r2, [pc, #332]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e090      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d092      	beq.n	80034d0 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d91f      	bls.n	80035fe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d01b      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ff70 	bl	80044b0 <SDMMC_CmdStopTransfer>
 80035d0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80035d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05f      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2d      	ldr	r2, [pc, #180]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f043 0208 	orr.w	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e045      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02b      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_SD_WriteBlocks+0x308>)
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e011      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f240 523a 	movw	r2, #1338	; 0x53a
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e006      	b.n	80036be <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3748      	adds	r7, #72	; 0x48
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	004005ff 	.word	0x004005ff

080036cc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036da:	0f9b      	lsrs	r3, r3, #30
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2da      	uxtb	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2da      	uxtb	r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	0d1b      	lsrs	r3, r3, #20
 800372e:	b29a      	uxth	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	b2da      	uxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374a:	0bdb      	lsrs	r3, r3, #15
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375c:	0b9b      	lsrs	r3, r3, #14
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	b2da      	uxtb	r2, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800376e:	0b5b      	lsrs	r3, r3, #13
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	b2da      	uxtb	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003780:	0b1b      	lsrs	r3, r3, #12
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	2b00      	cmp	r3, #0
 800379a:	d163      	bne.n	8003864 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037ac:	0f92      	lsrs	r2, r2, #30
 80037ae:	431a      	orrs	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	0edb      	lsrs	r3, r3, #27
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ca:	0e1b      	lsrs	r3, r3, #24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003800:	0bdb      	lsrs	r3, r3, #15
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	b2da      	uxtb	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	7e1b      	ldrb	r3, [r3, #24]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	3302      	adds	r3, #2
 8003824:	2201      	movs	r2, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800382e:	fb02 f203 	mul.w	r2, r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7a1b      	ldrb	r3, [r3, #8]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003850:	0a52      	lsrs	r2, r2, #9
 8003852:	fb02 f203 	mul.w	r2, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
 8003862:	e031      	b.n	80038c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	2b01      	cmp	r3, #1
 800386a:	d11d      	bne.n	80038a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	3301      	adds	r3, #1
 8003888:	029a      	lsls	r2, r3, #10
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60
 80038a6:	e00f      	b.n	80038c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_SD_GetCardCSD+0x344>)
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e09d      	b.n	8003a04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	0b9b      	lsrs	r3, r3, #14
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038de:	09db      	lsrs	r3, r3, #7
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	0fdb      	lsrs	r3, r3, #31
 8003902:	b2da      	uxtb	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	0f5b      	lsrs	r3, r3, #29
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	b2da      	uxtb	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	b2da      	uxtb	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	0d9b      	lsrs	r3, r3, #22
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	b2da      	uxtb	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	0d5b      	lsrs	r3, r3, #21
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	0bdb      	lsrs	r3, r3, #15
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	0b9b      	lsrs	r3, r3, #14
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	0b1b      	lsrs	r3, r3, #12
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	004005ff 	.word	0x004005ff

08003a14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b08e      	sub	sp, #56	; 0x38
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d02e      	beq.n	8003aea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d106      	bne.n	8003aa2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003aa0:	e029      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa18 	bl	8003ee0 <SD_WideBus_Enable>
 8003ab0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
 8003abe:	e01a      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa55 	bl	8003f76 <SD_WideBus_Disable>
 8003acc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8003ada:	e00c      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae8:	e005      	b.n	8003af6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <HAL_SD_ConfigWideBusOperation+0x128>)
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b0c:	e01f      	b.n	8003b4e <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681d      	ldr	r5, [r3, #0]
 8003b34:	466c      	mov	r4, sp
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 fb29 	bl	80041a0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fc00 	bl	800435c <SDMMC_CmdBlockLength>
 8003b5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_SD_ConfigWideBusOperation+0x128>)
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bdb0      	pop	{r4, r5, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	004005ff 	.word	0x004005ff

08003b98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f970 	bl	8003e90 <SD_SendStatus>
 8003bb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0a5b      	lsrs	r3, r3, #9
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003bce:	693b      	ldr	r3, [r7, #16]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b094      	sub	sp, #80	; 0x50
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fb33 	bl	8004254 <SDMMC_GetPowerState>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003bf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bf8:	e0b7      	b.n	8003d6a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d02f      	beq.n	8003c62 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd5c 	bl	80046c4 <SDMMC_CmdSendCID>
 8003c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <SD_InitCard+0x40>
    {
      return errorstate;
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	e0a8      	b.n	8003d6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fb5d 	bl	80042de <SDMMC_GetResponse>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2104      	movs	r1, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fb54 	bl	80042de <SDMMC_GetResponse>
 8003c36:	4602      	mov	r2, r0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2108      	movs	r1, #8
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb4b 	bl	80042de <SDMMC_GetResponse>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	210c      	movs	r1, #12
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb42 	bl	80042de <SDMMC_GetResponse>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d00d      	beq.n	8003c86 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f107 020e 	add.w	r2, r7, #14
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fd62 	bl	800473e <SDMMC_CmdSetRelAdd>
 8003c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <SD_InitCard+0xae>
    {
      return errorstate;
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	e071      	b.n	8003d6a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d036      	beq.n	8003cfc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 fd2c 	bl	8004700 <SDMMC_CmdSendCSD>
 8003ca8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	e05a      	b.n	8003d6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fb0f 	bl	80042de <SDMMC_GetResponse>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2104      	movs	r1, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fb06 	bl	80042de <SDMMC_GetResponse>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2108      	movs	r1, #8
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fafd 	bl	80042de <SDMMC_GetResponse>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	210c      	movs	r1, #12
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 faf4 	bl	80042de <SDMMC_GetResponse>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2104      	movs	r1, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 faeb 	bl	80042de <SDMMC_GetResponse>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	0d1a      	lsrs	r2, r3, #20
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fcd8 	bl	80036cc <HAL_SD_GetCardCSD>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d26:	e020      	b.n	8003d6a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	f04f 0400 	mov.w	r4, #0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4623      	mov	r3, r4
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	f000 fbda 	bl	80044f4 <SDMMC_CmdSelDesel>
 8003d40:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SD_InitCard+0x174>
  {
    return errorstate;
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	e00e      	b.n	8003d6a <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681d      	ldr	r5, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	466c      	mov	r4, sp
 8003d54:	f103 0210 	add.w	r2, r3, #16
 8003d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d5e:	3304      	adds	r3, #4
 8003d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fa1c 	bl	80041a0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3740      	adds	r7, #64	; 0x40
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbd4 	bl	800453a <SDMMC_CmdGoIdleState>
 8003d92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	e072      	b.n	8003e84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fbe7 	bl	8004576 <SDMMC_CmdOperCond>
 8003da8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fbbd 	bl	800453a <SDMMC_CmdGoIdleState>
 8003dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	e05b      	b.n	8003e84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d137      	bne.n	8003e4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fbe7 	bl	80045b4 <SDMMC_CmdAppCommand>
 8003de6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02d      	beq.n	8003e4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003df2:	e047      	b.n	8003e84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fbda 	bl	80045b4 <SDMMC_CmdAppCommand>
 8003e00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SD_PowerON+0x98>
    {
      return errorstate;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	e03b      	b.n	8003e84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	491e      	ldr	r1, [pc, #120]	; (8003e8c <SD_PowerON+0x118>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fbf0 	bl	80045f8 <SDMMC_CmdAppOperCommand>
 8003e18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e24:	e02e      	b.n	8003e84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa56 	bl	80042de <SDMMC_GetResponse>
 8003e32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	0fdb      	lsrs	r3, r3, #31
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <SD_PowerON+0xcc>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <SD_PowerON+0xce>
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]

    count++;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d802      	bhi.n	8003e5a <SD_PowerON+0xe6>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0cc      	beq.n	8003df4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e68:	e00c      	b.n	8003e84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
 8003e7a:	e002      	b.n	8003e82 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	c1100000 	.word	0xc1100000

08003e90 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea4:	e018      	b.n	8003ed8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fc64 	bl	8004780 <SDMMC_CmdSendStatus>
 8003eb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e009      	b.n	8003ed8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa07 	bl	80042de <SDMMC_GetResponse>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9f1 	bl	80042de <SDMMC_GetResponse>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f06:	d102      	bne.n	8003f0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f0c:	e02f      	b.n	8003f6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f0e:	f107 030c 	add.w	r3, r7, #12
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f879 	bl	800400c <SD_FindSCR>
 8003f1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e023      	b.n	8003f6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f000 fb39 	bl	80045b4 <SDMMC_CmdAppCommand>
 8003f42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	e00f      	b.n	8003f6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fb72 	bl	800463e <SDMMC_CmdBusWidth>
 8003f5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	e003      	b.n	8003f6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e001      	b.n	8003f6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f9a6 	bl	80042de <SDMMC_GetResponse>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f9c:	d102      	bne.n	8003fa4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fa2:	e02f      	b.n	8004004 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f82e 	bl	800400c <SD_FindSCR>
 8003fb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	e023      	b.n	8004004 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01c      	beq.n	8004000 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 faee 	bl	80045b4 <SDMMC_CmdAppCommand>
 8003fd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	e00f      	b.n	8004004 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fb27 	bl	800463e <SDMMC_CmdBusWidth>
 8003ff0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	e003      	b.n	8004004 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e001      	b.n	8004004 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004000:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b08f      	sub	sp, #60	; 0x3c
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004016:	f7fc fbc5 	bl	80007a4 <HAL_GetTick>
 800401a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2108      	movs	r1, #8
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f992 	bl	800435c <SDMMC_CmdBlockLength>
 8004038:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	e0a9      	b.n	8004198 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 faaf 	bl	80045b4 <SDMMC_CmdAppCommand>
 8004056:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <SD_FindSCR+0x56>
  {
    return errorstate;
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	e09a      	b.n	8004198 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004066:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004068:	2308      	movs	r3, #8
 800406a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800406c:	2330      	movs	r3, #48	; 0x30
 800406e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004070:	2302      	movs	r3, #2
 8004072:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004078:	2301      	movs	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f107 0210 	add.w	r2, r7, #16
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f93c 	bl	8004304 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 faf6 	bl	8004682 <SDMMC_CmdSendSCR>
 8004096:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	e07a      	b.n	8004198 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f107 0208 	add.w	r2, r7, #8
 80040bc:	18d4      	adds	r4, r2, r3
 80040be:	4608      	mov	r0, r1
 80040c0:	f000 f89b 	bl	80041fa <SDMMC_ReadFIFO>
 80040c4:	4603      	mov	r3, r0
 80040c6:	6023      	str	r3, [r4, #0]
      index++;
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	3301      	adds	r3, #1
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80040ce:	f7fc fb69 	bl	80007a4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040dc:	d102      	bne.n	80040e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80040de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040e2:	e059      	b.n	8004198 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ea:	f240 432a 	movw	r3, #1066	; 0x42a
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0d6      	beq.n	80040a2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800410a:	2308      	movs	r3, #8
 800410c:	e044      	b.n	8004198 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2202      	movs	r2, #2
 8004122:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004124:	2302      	movs	r3, #2
 8004126:	e037      	b.n	8004198 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2220      	movs	r2, #32
 800413c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800413e:	2320      	movs	r3, #32
 8004140:	e02a      	b.n	8004198 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f240 523a 	movw	r2, #1338	; 0x53a
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	061a      	lsls	r2, r3, #24
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004158:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004162:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	0e1b      	lsrs	r3, r3, #24
 8004168:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	601a      	str	r2, [r3, #0]
    scr++;
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	3304      	adds	r3, #4
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	061a      	lsls	r2, r3, #24
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004180:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800418a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0e1b      	lsrs	r3, r3, #24
 8004190:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	373c      	adds	r7, #60	; 0x3c
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80041a0:	b084      	sub	sp, #16
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	f107 001c 	add.w	r0, r7, #28
 80041ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80041be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80041c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80041c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80041ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80041ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80041de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	b004      	add	sp, #16
 80041f8:	4770      	bx	lr

080041fa <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004244:	2002      	movs	r0, #2
 8004246:	f7fc fab9 	bl	80007bc <HAL_Delay>

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0303 	and.w	r3, r3, #3
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800428e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004294:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800429a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042aa:	f023 030f 	bic.w	r3, r3, #15
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3314      	adds	r3, #20
 80042ec:	461a      	mov	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800432a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004330:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004336:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800434e:	2300      	movs	r3, #0

}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800436a:	2310      	movs	r3, #16
 800436c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800436e:	2340      	movs	r3, #64	; 0x40
 8004370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff74 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	2110      	movs	r1, #16
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa18 	bl	80047c4 <SDMMC_GetCmdResp1>
 8004394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004396:	69fb      	ldr	r3, [r7, #28]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80043ae:	2311      	movs	r3, #17
 80043b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff52 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	2111      	movs	r1, #17
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9f6 	bl	80047c4 <SDMMC_GetCmdResp1>
 80043d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043da:	69fb      	ldr	r3, [r7, #28]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80043f2:	2312      	movs	r3, #18
 80043f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043f6:	2340      	movs	r3, #64	; 0x40
 80043f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004404:	f107 0308 	add.w	r3, r7, #8
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff30 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	2112      	movs	r1, #18
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9d4 	bl	80047c4 <SDMMC_GetCmdResp1>
 800441c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800441e:	69fb      	ldr	r3, [r7, #28]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004436:	2318      	movs	r3, #24
 8004438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800443a:	2340      	movs	r3, #64	; 0x40
 800443c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ff0e 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	2118      	movs	r1, #24
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9b2 	bl	80047c4 <SDMMC_GetCmdResp1>
 8004460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004462:	69fb      	ldr	r3, [r7, #28]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800447a:	2319      	movs	r3, #25
 800447c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff feec 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004498:	f241 3288 	movw	r2, #5000	; 0x1388
 800449c:	2119      	movs	r1, #25
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f990 	bl	80047c4 <SDMMC_GetCmdResp1>
 80044a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044a6:	69fb      	ldr	r3, [r7, #28]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044bc:	230c      	movs	r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044cc:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff fecb 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80044da:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <SDMMC_CmdStopTransfer+0x40>)
 80044dc:	210c      	movs	r1, #12
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f970 	bl	80047c4 <SDMMC_GetCmdResp1>
 80044e4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	05f5e100 	.word	0x05f5e100

080044f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004504:	2307      	movs	r3, #7
 8004506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004508:	2340      	movs	r3, #64	; 0x40
 800450a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800450c:	2300      	movs	r3, #0
 800450e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004514:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004516:	f107 0310 	add.w	r3, r7, #16
 800451a:	4619      	mov	r1, r3
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff fea7 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	2107      	movs	r1, #7
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f94b 	bl	80047c4 <SDMMC_GetCmdResp1>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004532:	4618      	mov	r0, r3
 8004534:	3728      	adds	r7, #40	; 0x28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b088      	sub	sp, #32
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fe86 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fb65 	bl	8004c34 <SDMMC_GetCmdError>
 800456a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800456c:	69fb      	ldr	r3, [r7, #28]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800457e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004584:	2308      	movs	r3, #8
 8004586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004588:	2340      	movs	r3, #64	; 0x40
 800458a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fe67 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 faf8 	bl	8004b98 <SDMMC_GetCmdResp7>
 80045a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045aa:	69fb      	ldr	r3, [r7, #28]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80045c2:	2337      	movs	r3, #55	; 0x37
 80045c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fe48 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	2137      	movs	r1, #55	; 0x37
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8ec 	bl	80047c4 <SDMMC_GetCmdResp1>
 80045ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045ee:	69fb      	ldr	r3, [r7, #28]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800460e:	2329      	movs	r3, #41	; 0x29
 8004610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004612:	2340      	movs	r3, #64	; 0x40
 8004614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800461a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fe22 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9ff 	bl	8004a30 <SDMMC_GetCmdResp3>
 8004632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004634:	69fb      	ldr	r3, [r7, #28]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b088      	sub	sp, #32
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800464c:	2306      	movs	r3, #6
 800464e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fe03 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	2106      	movs	r1, #6
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8a7 	bl	80047c4 <SDMMC_GetCmdResp1>
 8004676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004678:	69fb      	ldr	r3, [r7, #28]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800468e:	2333      	movs	r3, #51	; 0x33
 8004690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800469a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046a0:	f107 0308 	add.w	r3, r7, #8
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fde2 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	2133      	movs	r1, #51	; 0x33
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f886 	bl	80047c4 <SDMMC_GetCmdResp1>
 80046b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ba:	69fb      	ldr	r3, [r7, #28]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80046d0:	2302      	movs	r3, #2
 80046d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80046d4:	23c0      	movs	r3, #192	; 0xc0
 80046d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fdc1 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f956 	bl	80049a0 <SDMMC_GetCmdResp2>
 80046f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046f6:	69fb      	ldr	r3, [r7, #28]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800470e:	2309      	movs	r3, #9
 8004710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004712:	23c0      	movs	r3, #192	; 0xc0
 8004714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800471a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004720:	f107 0308 	add.w	r3, r7, #8
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fda2 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f937 	bl	80049a0 <SDMMC_GetCmdResp2>
 8004732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004734:	69fb      	ldr	r3, [r7, #28]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b088      	sub	sp, #32
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800474c:	2303      	movs	r3, #3
 800474e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fd83 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	2103      	movs	r1, #3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f99c 	bl	8004aac <SDMMC_GetCmdResp6>
 8004774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800478e:	230d      	movs	r3, #13
 8004790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800479a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fd62 	bl	8004270 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80047ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b0:	210d      	movs	r1, #13
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f806 	bl	80047c4 <SDMMC_GetCmdResp1>
 80047b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	460b      	mov	r3, r1
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80047d2:	4b70      	ldr	r3, [pc, #448]	; (8004994 <SDMMC_GetCmdResp1+0x1d0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a70      	ldr	r2, [pc, #448]	; (8004998 <SDMMC_GetCmdResp1+0x1d4>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	0a5a      	lsrs	r2, r3, #9
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	1e5a      	subs	r2, r3, #1
 80047ea:	61fa      	str	r2, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047f4:	e0c9      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <SDMMC_GetCmdResp1+0x22>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ea      	bne.n	80047e6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2204      	movs	r2, #4
 8004820:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004822:	2304      	movs	r3, #4
 8004824:	e0b1      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004838:	2301      	movs	r3, #1
 800483a:	e0a6      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	22c5      	movs	r2, #197	; 0xc5
 8004840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fd3e 	bl	80042c4 <SDMMC_GetCommandResponse>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	4293      	cmp	r3, r2
 8004850:	d001      	beq.n	8004856 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004852:	2301      	movs	r3, #1
 8004854:	e099      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004856:	2100      	movs	r1, #0
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fd40 	bl	80042de <SDMMC_GetResponse>
 800485e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4b4e      	ldr	r3, [pc, #312]	; (800499c <SDMMC_GetCmdResp1+0x1d8>)
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800486a:	2300      	movs	r3, #0
 800486c:	e08d      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	da02      	bge.n	800487a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004878:	e087      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	e080      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	e079      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80048a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a4:	e071      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80048b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b4:	e069      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80048c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c4:	e061      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80048d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d4:	e059      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80048e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e4:	e051      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80048f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048f4:	e049      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004904:	e041      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004914:	e039      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004924:	e031      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004934:	e029      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004940:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004944:	e021      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004954:	e019      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004964:	e011      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004970:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004974:	e009      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004980:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004984:	e001      	b.n	800498a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000000 	.word	0x20000000
 8004998:	10624dd3 	.word	0x10624dd3
 800499c:	fdffe008 	.word	0xfdffe008

080049a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049a8:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <SDMMC_GetCmdResp2+0x88>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	; (8004a2c <SDMMC_GetCmdResp2+0x8c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a5b      	lsrs	r3, r3, #9
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	60fa      	str	r2, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049cc:	e026      	b.n	8004a1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ef      	beq.n	80049be <SDMMC_GetCmdResp2+0x1e>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049fa:	2304      	movs	r3, #4
 80049fc:	e00e      	b.n	8004a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e003      	b.n	8004a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	22c5      	movs	r2, #197	; 0xc5
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <SDMMC_GetCmdResp3+0x74>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <SDMMC_GetCmdResp3+0x78>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a5b      	lsrs	r3, r3, #9
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e5a      	subs	r2, r3, #1
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a5c:	e01b      	b.n	8004a96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ef      	beq.n	8004a4e <SDMMC_GetCmdResp3+0x1e>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ea      	bne.n	8004a4e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2204      	movs	r2, #4
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	e003      	b.n	8004a96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	22c5      	movs	r2, #197	; 0xc5
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004aba:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <SDMMC_GetCmdResp6+0xe4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <SDMMC_GetCmdResp6+0xe8>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0a5b      	lsrs	r3, r3, #9
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	61fa      	str	r2, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ada:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ade:	e052      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <SDMMC_GetCmdResp6+0x24>
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ea      	bne.n	8004ad0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e03a      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e02f      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fbcc 	bl	80042c4 <SDMMC_GetCommandResponse>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d001      	beq.n	8004b3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e025      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22c5      	movs	r2, #197	; 0xc5
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004b40:	2100      	movs	r1, #0
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff fbcb 	bl	80042de <SDMMC_GetResponse>
 8004b48:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e011      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b70:	e009      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b80:	e001      	b.n	8004b86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000
 8004b94:	10624dd3 	.word	0x10624dd3

08004b98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ba0:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <SDMMC_GetCmdResp7+0x94>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a22      	ldr	r2, [pc, #136]	; (8004c30 <SDMMC_GetCmdResp7+0x98>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0a5b      	lsrs	r3, r3, #9
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	60fa      	str	r2, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bc4:	e02c      	b.n	8004c20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ef      	beq.n	8004bb6 <SDMMC_GetCmdResp7+0x1e>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ea      	bne.n	8004bb6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2204      	movs	r2, #4
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	e014      	b.n	8004c20 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e009      	b.n	8004c20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2240      	movs	r2, #64	; 0x40
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c1e:	2300      	movs	r3, #0

}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000000 	.word	0x20000000
 8004c30:	10624dd3 	.word	0x10624dd3

08004c34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <SDMMC_GetCmdError+0x50>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <SDMMC_GetCmdError+0x54>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0a5b      	lsrs	r3, r3, #9
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	60fa      	str	r2, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c60:	e009      	b.n	8004c76 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f1      	beq.n	8004c52 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	22c5      	movs	r2, #197	; 0xc5
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004c90:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <MX_FATFS_Init+0x18>)
 8004c92:	4805      	ldr	r0, [pc, #20]	; (8004ca8 <MX_FATFS_Init+0x1c>)
 8004c94:	f003 f8ae 	bl	8007df4 <FATFS_LinkDriver>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <MX_FATFS_Init+0x20>)
 8004c9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ca0:	bf00      	nop
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200000e8 	.word	0x200000e8
 8004ca8:	08007f38 	.word	0x08007f38
 8004cac:	200000e4 	.word	0x200000e4

08004cb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004cb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004cca:	f000 f879 	bl	8004dc0 <BSP_SD_IsDetected>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e012      	b.n	8004cfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8004cd8:	480b      	ldr	r0, [pc, #44]	; (8004d08 <BSP_SD_Init+0x48>)
 8004cda:	f7fe f8ab 	bl	8002e34 <HAL_SD_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8004ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cec:	4806      	ldr	r0, [pc, #24]	; (8004d08 <BSP_SD_Init+0x48>)
 8004cee:	f7fe febd 	bl	8003a6c <HAL_SD_ConfigWideBusOperation>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	2000005c 	.word	0x2000005c

08004d0c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	4806      	ldr	r0, [pc, #24]	; (8004d44 <BSP_SD_ReadBlocks+0x38>)
 8004d2a:	f7fe f96b 	bl	8003004 <HAL_SD_ReadBlocks>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	2000005c 	.word	0x2000005c

08004d48 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	4806      	ldr	r0, [pc, #24]	; (8004d80 <BSP_SD_WriteBlocks+0x38>)
 8004d66:	f7fe fb2b 	bl	80033c0 <HAL_SD_WriteBlocks>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000005c 	.word	0x2000005c

08004d84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004d88:	4805      	ldr	r0, [pc, #20]	; (8004da0 <BSP_SD_GetCardState+0x1c>)
 8004d8a:	f7fe ff05 	bl	8003b98 <HAL_SD_GetCardState>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000005c 	.word	0x2000005c

08004da4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4803      	ldr	r0, [pc, #12]	; (8004dbc <BSP_SD_GetCardInfo+0x18>)
 8004db0:	f7fe fe30 	bl	8003a14 <HAL_SD_GetCardInfo>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	2000005c 	.word	0x2000005c

08004dc0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004dca:	f000 f80b 	bl	8004de4 <BSP_PlatformIsDetected>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	b2db      	uxtb	r3, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004dea:	2301      	movs	r3, #1
 8004dec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004df6:	f7fb ff91 	bl	8000d1c <HAL_GPIO_ReadPin>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8004e00:	2300      	movs	r3, #0
 8004e02:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004e04:	79fb      	ldrb	r3, [r7, #7]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <SD_CheckStatus+0x38>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004e20:	f7ff ffb0 	bl	8004d84 <BSP_SD_GetCardState>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <SD_CheckStatus+0x38>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <SD_CheckStatus+0x38>)
 8004e38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004e3a:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <SD_CheckStatus+0x38>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000009 	.word	0x20000009

08004e4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <SD_initialize+0x38>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004e5c:	f7ff ff30 	bl	8004cc0 <BSP_SD_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ffd1 	bl	8004e10 <SD_CheckStatus>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <SD_initialize+0x38>)
 8004e74:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <SD_initialize+0x38>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000009 	.word	0x20000009

08004e88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ffbb 	bl	8004e10 <SD_CheckStatus>
 8004e9a:	4603      	mov	r3, r0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	68b8      	ldr	r0, [r7, #8]
 8004ec2:	f7ff ff23 	bl	8004d0c <BSP_SD_ReadBlocks>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004ecc:	bf00      	nop
 8004ece:	f7ff ff59 	bl	8004d84 <BSP_SD_GetCardState>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1fa      	bne.n	8004ece <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f7ff ff20 	bl	8004d48 <BSP_SD_WriteBlocks>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004f0e:	bf00      	nop
 8004f10:	f7ff ff38 	bl	8004d84 <BSP_SD_GetCardState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1fa      	bne.n	8004f10 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	603a      	str	r2, [r7, #0]
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	460b      	mov	r3, r1
 8004f36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004f3e:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <SD_ioctl+0xac>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <SD_ioctl+0x28>
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e03c      	b.n	8004fca <SD_ioctl+0xa2>

  switch (cmd)
 8004f50:	79bb      	ldrb	r3, [r7, #6]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d834      	bhi.n	8004fc0 <SD_ioctl+0x98>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <SD_ioctl+0x34>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f75 	.word	0x08004f75
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004fa7 	.word	0x08004fa7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f72:	e028      	b.n	8004fc6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff13 	bl	8004da4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f8a:	e01c      	b.n	8004fc6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff07 	bl	8004da4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004fa4:	e00f      	b.n	8004fc6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fefa 	bl	8004da4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	0a5a      	lsrs	r2, r3, #9
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004fbe:	e002      	b.n	8004fc6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3730      	adds	r7, #48	; 0x30
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000009 	.word	0x20000009

08004fd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <disk_status+0x30>)
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	79fa      	ldrb	r2, [r7, #7]
 8004ff0:	4905      	ldr	r1, [pc, #20]	; (8005008 <disk_status+0x30>)
 8004ff2:	440a      	add	r2, r1
 8004ff4:	7a12      	ldrb	r2, [r2, #8]
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4798      	blx	r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000050 	.word	0x20000050

0800500c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <disk_initialize+0x48>)
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d111      	bne.n	8005048 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <disk_initialize+0x48>)
 8005028:	2101      	movs	r1, #1
 800502a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <disk_initialize+0x48>)
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	79fa      	ldrb	r2, [r7, #7]
 800503a:	4906      	ldr	r1, [pc, #24]	; (8005054 <disk_initialize+0x48>)
 800503c:	440a      	add	r2, r1
 800503e:	7a12      	ldrb	r2, [r2, #8]
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000050 	.word	0x20000050

08005058 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <disk_read+0x3c>)
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	689c      	ldr	r4, [r3, #8]
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <disk_read+0x3c>)
 8005078:	4413      	add	r3, r2
 800507a:	7a18      	ldrb	r0, [r3, #8]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	47a0      	blx	r4
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]
  return res;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000050 	.word	0x20000050

08005098 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <disk_write+0x3c>)
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68dc      	ldr	r4, [r3, #12]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <disk_write+0x3c>)
 80050b8:	4413      	add	r3, r2
 80050ba:	7a18      	ldrb	r0, [r3, #8]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	47a0      	blx	r4
 80050c4:	4603      	mov	r3, r0
 80050c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000050 	.word	0x20000050

080050d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	603a      	str	r2, [r7, #0]
 80050e2:	71fb      	strb	r3, [r7, #7]
 80050e4:	460b      	mov	r3, r1
 80050e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <disk_ioctl+0x38>)
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	79fa      	ldrb	r2, [r7, #7]
 80050f6:	4906      	ldr	r1, [pc, #24]	; (8005110 <disk_ioctl+0x38>)
 80050f8:	440a      	add	r2, r1
 80050fa:	7a10      	ldrb	r0, [r2, #8]
 80050fc:	79b9      	ldrb	r1, [r7, #6]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
  return res;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000050 	.word	0x20000050

08005114 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3301      	adds	r3, #1
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005124:	89fb      	ldrh	r3, [r7, #14]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	b21a      	sxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b21b      	sxth	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b21b      	sxth	r3, r3
 8005134:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005136:	89fb      	ldrh	r3, [r7, #14]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3303      	adds	r3, #3
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	3202      	adds	r2, #2
 800515c:	7812      	ldrb	r2, [r2, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	3201      	adds	r2, #1
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	7812      	ldrb	r2, [r2, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
	return rv;
 800517c:	68fb      	ldr	r3, [r7, #12]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	887b      	ldrh	r3, [r7, #2]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	0a1b      	lsrs	r3, r3, #8
 80051da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	1c53      	adds	r3, r2, #1
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1c59      	adds	r1, r3, #1
 800523c:	6179      	str	r1, [r7, #20]
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3b01      	subs	r3, #1
 8005246:	607b      	str	r3, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f1      	bne.n	8005232 <mem_cpy+0x1a>
	}
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	617a      	str	r2, [r7, #20]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3b01      	subs	r3, #1
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f3      	bne.n	800526a <mem_set+0x10>
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800528e:	b480      	push	{r7}
 8005290:	b089      	sub	sp, #36	; 0x24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	61fa      	str	r2, [r7, #28]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	61ba      	str	r2, [r7, #24]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	1acb      	subs	r3, r1, r3
 80052ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3b01      	subs	r3, #1
 80052c0:	607b      	str	r3, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <mem_cmp+0x40>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0eb      	beq.n	80052a6 <mem_cmp+0x18>

	return r;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3724      	adds	r7, #36	; 0x24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80052e6:	e002      	b.n	80052ee <chk_chr+0x12>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3301      	adds	r3, #1
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <chk_chr+0x26>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4293      	cmp	r3, r2
 8005300:	d1f2      	bne.n	80052e8 <chk_chr+0xc>
	return *str;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	781b      	ldrb	r3, [r3, #0]
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e029      	b.n	800537c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005328:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <chk_lock+0xb4>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	4413      	add	r3, r2
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01d      	beq.n	8005372 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005336:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <chk_lock+0xb4>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4413      	add	r3, r2
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d116      	bne.n	8005376 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <chk_lock+0xb4>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4413      	add	r3, r2
 8005350:	3304      	adds	r3, #4
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005358:	429a      	cmp	r2, r3
 800535a:	d10c      	bne.n	8005376 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800535c:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <chk_lock+0xb4>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	4413      	add	r3, r2
 8005364:	3308      	adds	r3, #8
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800536c:	429a      	cmp	r2, r3
 800536e:	d102      	bne.n	8005376 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005370:	e007      	b.n	8005382 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d9d2      	bls.n	8005328 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d109      	bne.n	800539c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <chk_lock+0x80>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d101      	bne.n	8005398 <chk_lock+0x84>
 8005394:	2300      	movs	r3, #0
 8005396:	e010      	b.n	80053ba <chk_lock+0xa6>
 8005398:	2312      	movs	r3, #18
 800539a:	e00e      	b.n	80053ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <chk_lock+0xa0>
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <chk_lock+0xb4>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4413      	add	r3, r2
 80053aa:	330c      	adds	r3, #12
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d101      	bne.n	80053b8 <chk_lock+0xa4>
 80053b4:	2310      	movs	r3, #16
 80053b6:	e000      	b.n	80053ba <chk_lock+0xa6>
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000030 	.word	0x20000030

080053cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	e002      	b.n	80053de <enq_lock+0x12>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3301      	adds	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d806      	bhi.n	80053f2 <enq_lock+0x26>
 80053e4:	4a09      	ldr	r2, [pc, #36]	; (800540c <enq_lock+0x40>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4413      	add	r3, r2
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f2      	bne.n	80053d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000030 	.word	0x20000030

08005410 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e01f      	b.n	8005460 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005420:	4a41      	ldr	r2, [pc, #260]	; (8005528 <inc_lock+0x118>)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	4413      	add	r3, r2
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d113      	bne.n	800545a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005432:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <inc_lock+0x118>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	3304      	adds	r3, #4
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005442:	429a      	cmp	r2, r3
 8005444:	d109      	bne.n	800545a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005446:	4a38      	ldr	r2, [pc, #224]	; (8005528 <inc_lock+0x118>)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	4413      	add	r3, r2
 800544e:	3308      	adds	r3, #8
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005456:	429a      	cmp	r2, r3
 8005458:	d006      	beq.n	8005468 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d9dc      	bls.n	8005420 <inc_lock+0x10>
 8005466:	e000      	b.n	800546a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005468:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d132      	bne.n	80054d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e002      	b.n	800547c <inc_lock+0x6c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d806      	bhi.n	8005490 <inc_lock+0x80>
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <inc_lock+0x118>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f2      	bne.n	8005476 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d101      	bne.n	800549a <inc_lock+0x8a>
 8005496:	2300      	movs	r3, #0
 8005498:	e040      	b.n	800551c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4922      	ldr	r1, [pc, #136]	; (8005528 <inc_lock+0x118>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	440b      	add	r3, r1
 80054a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	491e      	ldr	r1, [pc, #120]	; (8005528 <inc_lock+0x118>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	440b      	add	r3, r1
 80054b4:	3304      	adds	r3, #4
 80054b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	491a      	ldr	r1, [pc, #104]	; (8005528 <inc_lock+0x118>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	440b      	add	r3, r1
 80054c4:	3308      	adds	r3, #8
 80054c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <inc_lock+0x118>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	330c      	adds	r3, #12
 80054d2:	2200      	movs	r2, #0
 80054d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <inc_lock+0xe0>
 80054dc:	4a12      	ldr	r2, [pc, #72]	; (8005528 <inc_lock+0x118>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	330c      	adds	r3, #12
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <inc_lock+0xe0>
 80054ec:	2300      	movs	r3, #0
 80054ee:	e015      	b.n	800551c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <inc_lock+0xf8>
 80054f6:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <inc_lock+0x118>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	4413      	add	r3, r2
 80054fe:	330c      	adds	r3, #12
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	e001      	b.n	800550c <inc_lock+0xfc>
 8005508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550c:	4906      	ldr	r1, [pc, #24]	; (8005528 <inc_lock+0x118>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	440b      	add	r3, r1
 8005514:	330c      	adds	r3, #12
 8005516:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000030 	.word	0x20000030

0800552c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d825      	bhi.n	800558c <dec_lock+0x60>
		n = Files[i].ctr;
 8005540:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <dec_lock+0x74>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	330c      	adds	r3, #12
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005554:	d101      	bne.n	800555a <dec_lock+0x2e>
 8005556:	2300      	movs	r3, #0
 8005558:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <dec_lock+0x3a>
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	3b01      	subs	r3, #1
 8005564:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005566:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <dec_lock+0x74>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4413      	add	r3, r2
 800556e:	330c      	adds	r3, #12
 8005570:	89fa      	ldrh	r2, [r7, #14]
 8005572:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005574:	89fb      	ldrh	r3, [r7, #14]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <dec_lock+0x5a>
 800557a:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <dec_lock+0x74>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	4413      	add	r3, r2
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	737b      	strb	r3, [r7, #13]
 800558a:	e001      	b.n	8005590 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800558c:	2302      	movs	r3, #2
 800558e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005590:	7b7b      	ldrb	r3, [r7, #13]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000030 	.word	0x20000030

080055a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e010      	b.n	80055d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055b2:	4a0d      	ldr	r2, [pc, #52]	; (80055e8 <clear_lock+0x44>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d105      	bne.n	80055ce <clear_lock+0x2a>
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <clear_lock+0x44>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	4413      	add	r3, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d9eb      	bls.n	80055b2 <clear_lock+0xe>
	}
}
 80055da:	bf00      	nop
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000030 	.word	0x20000030

080055ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	78db      	ldrb	r3, [r3, #3]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d034      	beq.n	800566a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	7858      	ldrb	r0, [r3, #1]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005610:	2301      	movs	r3, #1
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	f7ff fd40 	bl	8005098 <disk_write>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <sync_window+0x38>
			res = FR_DISK_ERR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e022      	b.n	800566a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	429a      	cmp	r2, r3
 8005638:	d217      	bcs.n	800566a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	789b      	ldrb	r3, [r3, #2]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	e010      	b.n	8005664 <sync_window+0x78>
					wsect += fs->fsize;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	7858      	ldrb	r0, [r3, #1]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005656:	2301      	movs	r3, #1
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	f7ff fd1d 	bl	8005098 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3b01      	subs	r3, #1
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d8eb      	bhi.n	8005642 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d01b      	beq.n	80056c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ffad 	bl	80055ec <sync_window>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d113      	bne.n	80056c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7858      	ldrb	r0, [r3, #1]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056a6:	2301      	movs	r3, #1
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	f7ff fcd5 	bl	8005058 <disk_read>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff87 	bl	80055ec <sync_window>
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d158      	bne.n	800579a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d148      	bne.n	8005782 <sync_fs+0xb2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	791b      	ldrb	r3, [r3, #4]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d144      	bne.n	8005782 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3330      	adds	r3, #48	; 0x30
 80056fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fda9 	bl	800525a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3330      	adds	r3, #48	; 0x30
 800570c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005710:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fd38 	bl	800518a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3330      	adds	r3, #48	; 0x30
 800571e:	4921      	ldr	r1, [pc, #132]	; (80057a4 <sync_fs+0xd4>)
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fd4d 	bl	80051c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3330      	adds	r3, #48	; 0x30
 800572a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800572e:	491e      	ldr	r1, [pc, #120]	; (80057a8 <sync_fs+0xd8>)
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fd45 	bl	80051c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3330      	adds	r3, #48	; 0x30
 800573a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7ff fd3b 	bl	80051c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3330      	adds	r3, #48	; 0x30
 800574e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7ff fd31 	bl	80051c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7858      	ldrb	r0, [r3, #1]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	2301      	movs	r3, #1
 8005778:	f7ff fc8e 	bl	8005098 <disk_write>
			fs->fsi_flag = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	2200      	movs	r2, #0
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fca4 	bl	80050d8 <disk_ioctl>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <sync_fs+0xca>
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	41615252 	.word	0x41615252
 80057a8:	61417272 	.word	0x61417272

080057ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	3b02      	subs	r3, #2
 80057ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	3b02      	subs	r3, #2
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d301      	bcc.n	80057cc <clust2sect+0x20>
 80057c8:	2300      	movs	r3, #0
 80057ca:	e008      	b.n	80057de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	895b      	ldrh	r3, [r3, #10]
 80057d0:	461a      	mov	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	fb03 f202 	mul.w	r2, r3, r2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	4413      	add	r3, r2
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d904      	bls.n	800580a <get_fat+0x20>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d302      	bcc.n	8005810 <get_fat+0x26>
		val = 1;	/* Internal error */
 800580a:	2301      	movs	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e08c      	b.n	800592a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005814:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d045      	beq.n	80058aa <get_fat+0xc0>
 800581e:	2b03      	cmp	r3, #3
 8005820:	d05d      	beq.n	80058de <get_fat+0xf4>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d177      	bne.n	8005916 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	0a5b      	lsrs	r3, r3, #9
 800583c:	4413      	add	r3, r2
 800583e:	4619      	mov	r1, r3
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f7ff ff17 	bl	8005674 <move_window>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d167      	bne.n	800591c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4413      	add	r3, r2
 800585a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800585e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6a1a      	ldr	r2, [r3, #32]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	0a5b      	lsrs	r3, r3, #9
 8005868:	4413      	add	r3, r2
 800586a:	4619      	mov	r1, r3
 800586c:	6938      	ldr	r0, [r7, #16]
 800586e:	f7ff ff01 	bl	8005674 <move_window>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d153      	bne.n	8005920 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <get_fat+0xb6>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	e002      	b.n	80058a6 <get_fat+0xbc>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a6:	617b      	str	r3, [r7, #20]
			break;
 80058a8:	e03f      	b.n	800592a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	4413      	add	r3, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	6938      	ldr	r0, [r7, #16]
 80058b8:	f7ff fedc 	bl	8005674 <move_window>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d130      	bne.n	8005924 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80058d0:	4413      	add	r3, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fc1e 	bl	8005114 <ld_word>
 80058d8:	4603      	mov	r3, r0
 80058da:	617b      	str	r3, [r7, #20]
			break;
 80058dc:	e025      	b.n	800592a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	4413      	add	r3, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	6938      	ldr	r0, [r7, #16]
 80058ec:	f7ff fec2 	bl	8005674 <move_window>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d118      	bne.n	8005928 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005904:	4413      	add	r3, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fc1c 	bl	8005144 <ld_dword>
 800590c:	4603      	mov	r3, r0
 800590e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005912:	617b      	str	r3, [r7, #20]
			break;
 8005914:	e009      	b.n	800592a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005916:	2301      	movs	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e006      	b.n	800592a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800591c:	bf00      	nop
 800591e:	e004      	b.n	800592a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005920:	bf00      	nop
 8005922:	e002      	b.n	800592a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005924:	bf00      	nop
 8005926:	e000      	b.n	800592a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005928:	bf00      	nop
		}
	}

	return val;
 800592a:	697b      	ldr	r3, [r7, #20]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b089      	sub	sp, #36	; 0x24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005940:	2302      	movs	r3, #2
 8005942:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b01      	cmp	r3, #1
 8005948:	f240 80d6 	bls.w	8005af8 <put_fat+0x1c4>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	f080 80d0 	bcs.w	8005af8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d073      	beq.n	8005a48 <put_fat+0x114>
 8005960:	2b03      	cmp	r3, #3
 8005962:	f000 8091 	beq.w	8005a88 <put_fat+0x154>
 8005966:	2b01      	cmp	r3, #1
 8005968:	f040 80c6 	bne.w	8005af8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4413      	add	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	0a5b      	lsrs	r3, r3, #9
 8005982:	4413      	add	r3, r2
 8005984:	4619      	mov	r1, r3
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fe74 	bl	8005674 <move_window>
 800598c:	4603      	mov	r3, r0
 800598e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005990:	7ffb      	ldrb	r3, [r7, #31]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80a9 	bne.w	8005aea <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	1c59      	adds	r1, r3, #1
 80059a2:	61b9      	str	r1, [r7, #24]
 80059a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <put_fat+0x9e>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	b25b      	sxtb	r3, r3
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	b25a      	sxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e001      	b.n	80059d6 <put_fat+0xa2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	0a5b      	lsrs	r3, r3, #9
 80059e8:	4413      	add	r3, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff fe41 	bl	8005674 <move_window>
 80059f2:	4603      	mov	r3, r0
 80059f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059f6:	7ffb      	ldrb	r3, [r7, #31]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d178      	bne.n	8005aee <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	4413      	add	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <put_fat+0xea>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e00e      	b.n	8005a3c <put_fat+0x108>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	f023 030f 	bic.w	r3, r3, #15
 8005a28:	b25a      	sxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	70da      	strb	r2, [r3, #3]
			break;
 8005a46:	e057      	b.n	8005af8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	4413      	add	r3, r2
 8005a52:	4619      	mov	r1, r3
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff fe0d 	bl	8005674 <move_window>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d146      	bne.n	8005af2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a72:	4413      	add	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	b292      	uxth	r2, r2
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fb85 	bl	800518a <st_word>
			fs->wflag = 1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	70da      	strb	r2, [r3, #3]
			break;
 8005a86:	e037      	b.n	8005af8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	09db      	lsrs	r3, r3, #7
 8005a90:	4413      	add	r3, r2
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff fded 	bl	8005674 <move_window>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a9e:	7ffb      	ldrb	r3, [r7, #31]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d128      	bne.n	8005af6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ab8:	4413      	add	r3, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fb42 	bl	8005144 <ld_dword>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ac6:	4323      	orrs	r3, r4
 8005ac8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ad8:	4413      	add	r3, r2
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fb6f 	bl	80051c0 <st_dword>
			fs->wflag = 1;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	70da      	strb	r2, [r3, #3]
			break;
 8005ae8:	e006      	b.n	8005af8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005aea:	bf00      	nop
 8005aec:	e004      	b.n	8005af8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005af6:	bf00      	nop
		}
	}
	return res;
 8005af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3724      	adds	r7, #36	; 0x24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}

08005b02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d904      	bls.n	8005b28 <remove_chain+0x26>
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d301      	bcc.n	8005b2c <remove_chain+0x2a>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e04b      	b.n	8005bc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	69b8      	ldr	r0, [r7, #24]
 8005b3a:	f7ff fefb 	bl	8005934 <put_fat>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <remove_chain+0x4a>
 8005b48:	7ffb      	ldrb	r3, [r7, #31]
 8005b4a:	e03b      	b.n	8005bc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fe4b 	bl	80057ea <get_fat>
 8005b54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d031      	beq.n	8005bc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <remove_chain+0x64>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e02e      	b.n	8005bc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6c:	d101      	bne.n	8005b72 <remove_chain+0x70>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e028      	b.n	8005bc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005b72:	2200      	movs	r2, #0
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	69b8      	ldr	r0, [r7, #24]
 8005b78:	f7ff fedc 	bl	8005934 <put_fat>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <remove_chain+0x88>
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	e01c      	b.n	8005bc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	3b02      	subs	r3, #2
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d20b      	bcs.n	8005bb0 <remove_chain+0xae>
			fs->free_clst++;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	791b      	ldrb	r3, [r3, #4]
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3c6      	bcc.n	8005b4c <remove_chain+0x4a>
 8005bbe:	e000      	b.n	8005bc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005bc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <create_chain+0x2c>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d31b      	bcc.n	8005c30 <create_chain+0x64>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e018      	b.n	8005c30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fdf2 	bl	80057ea <get_fat>
 8005c06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d801      	bhi.n	8005c12 <create_chain+0x46>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e070      	b.n	8005cf4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c18:	d101      	bne.n	8005c1e <create_chain+0x52>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	e06a      	b.n	8005cf4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d201      	bcs.n	8005c2c <create_chain+0x60>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	e063      	b.n	8005cf4 <create_chain+0x128>
		scl = clst;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d307      	bcc.n	8005c54 <create_chain+0x88>
				ncl = 2;
 8005c44:	2302      	movs	r3, #2
 8005c46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d901      	bls.n	8005c54 <create_chain+0x88>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e04f      	b.n	8005cf4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005c54:	69f9      	ldr	r1, [r7, #28]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff fdc7 	bl	80057ea <get_fat>
 8005c5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d003      	beq.n	8005c72 <create_chain+0xa6>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c70:	d101      	bne.n	8005c76 <create_chain+0xaa>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	e03e      	b.n	8005cf4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d1da      	bne.n	8005c34 <create_chain+0x68>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e038      	b.n	8005cf4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005c82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	6938      	ldr	r0, [r7, #16]
 8005c8c:	f7ff fe52 	bl	8005934 <put_fat>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <create_chain+0xe2>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d006      	beq.n	8005cae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6938      	ldr	r0, [r7, #16]
 8005ca6:	f7ff fe45 	bl	8005934 <put_fat>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	3b02      	subs	r3, #2
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d804      	bhi.n	8005cd2 <create_chain+0x106>
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	1e5a      	subs	r2, r3, #1
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	711a      	strb	r2, [r3, #4]
 8005ce0:	e007      	b.n	8005cf2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <create_chain+0x122>
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cec:	e000      	b.n	8005cf0 <create_chain+0x124>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005cf2:	69fb      	ldr	r3, [r7, #28]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	3304      	adds	r3, #4
 8005d12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	8952      	ldrh	r2, [r2, #10]
 8005d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	613a      	str	r2, [r7, #16]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <clmt_clust+0x3a>
 8005d32:	2300      	movs	r3, #0
 8005d34:	e010      	b.n	8005d58 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d307      	bcc.n	8005d4e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d4c:	e7e9      	b.n	8005d22 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005d4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d7a:	d204      	bcs.n	8005d86 <dir_sdi+0x22>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005d86:	2302      	movs	r3, #2
 8005d88:	e063      	b.n	8005e52 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <dir_sdi+0x46>
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d902      	bls.n	8005daa <dir_sdi+0x46>
		clst = fs->dirbase;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	8912      	ldrh	r2, [r2, #8]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d301      	bcc.n	8005dc0 <dir_sdi+0x5c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e048      	b.n	8005e52 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	61da      	str	r2, [r3, #28]
 8005dc8:	e029      	b.n	8005e1e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	895b      	ldrh	r3, [r3, #10]
 8005dce:	025b      	lsls	r3, r3, #9
 8005dd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005dd2:	e019      	b.n	8005e08 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fd06 	bl	80057ea <get_fat>
 8005dde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de6:	d101      	bne.n	8005dec <dir_sdi+0x88>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e032      	b.n	8005e52 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d904      	bls.n	8005dfc <dir_sdi+0x98>
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d301      	bcc.n	8005e00 <dir_sdi+0x9c>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e028      	b.n	8005e52 <dir_sdi+0xee>
			ofs -= csz;
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d2e1      	bcs.n	8005dd4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	6938      	ldr	r0, [r7, #16]
 8005e14:	f7ff fcca 	bl	80057ac <clust2sect>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <dir_sdi+0xcc>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e010      	b.n	8005e52 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	0a5b      	lsrs	r3, r3, #9
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	441a      	add	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	3320      	adds	r3, #32
 8005e70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <dir_next+0x28>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e80:	d301      	bcc.n	8005e86 <dir_next+0x2c>
 8005e82:	2304      	movs	r3, #4
 8005e84:	e0aa      	b.n	8005fdc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f040 8098 	bne.w	8005fc2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	8912      	ldrh	r2, [r2, #8]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	f0c0 8088 	bcc.w	8005fc2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	61da      	str	r2, [r3, #28]
 8005eb8:	2304      	movs	r3, #4
 8005eba:	e08f      	b.n	8005fdc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	0a5b      	lsrs	r3, r3, #9
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	8952      	ldrh	r2, [r2, #10]
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d17a      	bne.n	8005fc2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7ff fc88 	bl	80057ea <get_fat>
 8005eda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d801      	bhi.n	8005ee6 <dir_next+0x8c>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e07a      	b.n	8005fdc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eec:	d101      	bne.n	8005ef2 <dir_next+0x98>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e074      	b.n	8005fdc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d358      	bcc.n	8005fae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	61da      	str	r2, [r3, #28]
 8005f08:	2304      	movs	r3, #4
 8005f0a:	e067      	b.n	8005fdc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f7ff fe59 	bl	8005bcc <create_chain>
 8005f1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <dir_next+0xcc>
 8005f22:	2307      	movs	r3, #7
 8005f24:	e05a      	b.n	8005fdc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <dir_next+0xd6>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e055      	b.n	8005fdc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f36:	d101      	bne.n	8005f3c <dir_next+0xe2>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e04f      	b.n	8005fdc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fb55 	bl	80055ec <sync_window>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <dir_next+0xf2>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e047      	b.n	8005fdc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3330      	adds	r3, #48	; 0x30
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff f97f 	bl	800525a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	6979      	ldr	r1, [r7, #20]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fc22 	bl	80057ac <clust2sect>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f6e:	e012      	b.n	8005f96 <dir_next+0x13c>
						fs->wflag = 1;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fb38 	bl	80055ec <sync_window>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <dir_next+0x12c>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e02a      	b.n	8005fdc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	895b      	ldrh	r3, [r3, #10]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d3e6      	bcc.n	8005f70 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff fbf8 	bl	80057ac <clust2sect>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff feb4 	bl	8005d64 <dir_sdi>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d12b      	bne.n	800605e <dir_alloc+0x7a>
		n = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fb2f 	bl	8005674 <move_window>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d11d      	bne.n	800605c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2be5      	cmp	r3, #229	; 0xe5
 8006028:	d004      	beq.n	8006034 <dir_alloc+0x50>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	3301      	adds	r3, #1
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d102      	bne.n	8006048 <dir_alloc+0x64>
 8006042:	e00c      	b.n	800605e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006048:	2101      	movs	r1, #1
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff05 	bl	8005e5a <dir_next>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0d7      	beq.n	800600a <dir_alloc+0x26>
 800605a:	e000      	b.n	800605e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800605c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d101      	bne.n	8006068 <dir_alloc+0x84>
 8006064:	2307      	movs	r3, #7
 8006066:	75fb      	strb	r3, [r7, #23]
	return res;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	331a      	adds	r3, #26
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff f847 	bl	8005114 <ld_word>
 8006086:	4603      	mov	r3, r0
 8006088:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d109      	bne.n	80060a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff f83c 	bl	8005114 <ld_word>
 800609c:	4603      	mov	r3, r0
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	331a      	adds	r3, #26
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	b292      	uxth	r2, r2
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f85f 	bl	800518a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d109      	bne.n	80060e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f103 0214 	add.w	r2, r3, #20
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7ff f851 	bl	800518a <st_word>
	}
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80060fe:	2100      	movs	r1, #0
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fe2f 	bl	8005d64 <dir_sdi>
 8006106:	4603      	mov	r3, r0
 8006108:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <dir_find+0x24>
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	e03e      	b.n	8006192 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	4619      	mov	r1, r3
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7ff faaa 	bl	8005674 <move_window>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d12f      	bne.n	800618a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <dir_find+0x4e>
 8006138:	2304      	movs	r3, #4
 800613a:	75fb      	strb	r3, [r7, #23]
 800613c:	e028      	b.n	8006190 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	330b      	adds	r3, #11
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800614a:	b2da      	uxtb	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	330b      	adds	r3, #11
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <dir_find+0x86>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a18      	ldr	r0, [r3, #32]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	220b      	movs	r2, #11
 800616a:	4619      	mov	r1, r3
 800616c:	f7ff f88f 	bl	800528e <mem_cmp>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006176:	2100      	movs	r1, #0
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fe6e 	bl	8005e5a <dir_next>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0c5      	beq.n	8006114 <dir_find+0x24>
 8006188:	e002      	b.n	8006190 <dir_find+0xa0>
		if (res != FR_OK) break;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800618e:	bf00      	nop

	return res;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80061a8:	2101      	movs	r1, #1
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ff1a 	bl	8005fe4 <dir_alloc>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11c      	bne.n	80061f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4619      	mov	r1, r3
 80061c0:	68b8      	ldr	r0, [r7, #8]
 80061c2:	f7ff fa57 	bl	8005674 <move_window>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d111      	bne.n	80061f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	2220      	movs	r2, #32
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f83e 	bl	800525a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a18      	ldr	r0, [r3, #32]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3324      	adds	r3, #36	; 0x24
 80061e6:	220b      	movs	r2, #11
 80061e8:	4619      	mov	r1, r3
 80061ea:	f7ff f815 	bl	8005218 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2201      	movs	r2, #1
 80061f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3324      	adds	r3, #36	; 0x24
 8006214:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006216:	220b      	movs	r2, #11
 8006218:	2120      	movs	r1, #32
 800621a:	68b8      	ldr	r0, [r7, #8]
 800621c:	f7ff f81d 	bl	800525a <mem_set>
	si = i = 0; ni = 8;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	2308      	movs	r3, #8
 800622a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	617a      	str	r2, [r7, #20]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b20      	cmp	r3, #32
 800623e:	d94e      	bls.n	80062de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	2b2f      	cmp	r3, #47	; 0x2f
 8006244:	d006      	beq.n	8006254 <create_name+0x54>
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b5c      	cmp	r3, #92	; 0x5c
 800624a:	d110      	bne.n	800626e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800624c:	e002      	b.n	8006254 <create_name+0x54>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	3301      	adds	r3, #1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b2f      	cmp	r3, #47	; 0x2f
 800625e:	d0f6      	beq.n	800624e <create_name+0x4e>
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b5c      	cmp	r3, #92	; 0x5c
 800626a:	d0f0      	beq.n	800624e <create_name+0x4e>
			break;
 800626c:	e038      	b.n	80062e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b2e      	cmp	r3, #46	; 0x2e
 8006272:	d003      	beq.n	800627c <create_name+0x7c>
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	429a      	cmp	r2, r3
 800627a:	d30c      	bcc.n	8006296 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b0b      	cmp	r3, #11
 8006280:	d002      	beq.n	8006288 <create_name+0x88>
 8006282:	7ffb      	ldrb	r3, [r7, #31]
 8006284:	2b2e      	cmp	r3, #46	; 0x2e
 8006286:	d001      	beq.n	800628c <create_name+0x8c>
 8006288:	2306      	movs	r3, #6
 800628a:	e044      	b.n	8006316 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800628c:	2308      	movs	r3, #8
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	230b      	movs	r3, #11
 8006292:	61bb      	str	r3, [r7, #24]
			continue;
 8006294:	e022      	b.n	80062dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006296:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da04      	bge.n	80062a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800629e:	7ffb      	ldrb	r3, [r7, #31]
 80062a0:	3b80      	subs	r3, #128	; 0x80
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <create_name+0x120>)
 80062a4:	5cd3      	ldrb	r3, [r2, r3]
 80062a6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80062a8:	7ffb      	ldrb	r3, [r7, #31]
 80062aa:	4619      	mov	r1, r3
 80062ac:	481d      	ldr	r0, [pc, #116]	; (8006324 <create_name+0x124>)
 80062ae:	f7ff f815 	bl	80052dc <chk_chr>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <create_name+0xbc>
 80062b8:	2306      	movs	r3, #6
 80062ba:	e02c      	b.n	8006316 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80062bc:	7ffb      	ldrb	r3, [r7, #31]
 80062be:	2b60      	cmp	r3, #96	; 0x60
 80062c0:	d905      	bls.n	80062ce <create_name+0xce>
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	2b7a      	cmp	r3, #122	; 0x7a
 80062c6:	d802      	bhi.n	80062ce <create_name+0xce>
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	3b20      	subs	r3, #32
 80062cc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	613a      	str	r2, [r7, #16]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	4413      	add	r3, r2
 80062d8:	7ffa      	ldrb	r2, [r7, #31]
 80062da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80062dc:	e7a6      	b.n	800622c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80062de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	441a      	add	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <create_name+0xf4>
 80062f0:	2306      	movs	r3, #6
 80062f2:	e010      	b.n	8006316 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2be5      	cmp	r3, #229	; 0xe5
 80062fa:	d102      	bne.n	8006302 <create_name+0x102>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2205      	movs	r2, #5
 8006300:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b20      	cmp	r3, #32
 8006306:	d801      	bhi.n	800630c <create_name+0x10c>
 8006308:	2204      	movs	r2, #4
 800630a:	e000      	b.n	800630e <create_name+0x10e>
 800630c:	2200      	movs	r2, #0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	330b      	adds	r3, #11
 8006312:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006314:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	08007f4c 	.word	0x08007f4c
 8006324:	08007eac 	.word	0x08007eac

08006328 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800633c:	e002      	b.n	8006344 <follow_path+0x1c>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b2f      	cmp	r3, #47	; 0x2f
 800634a:	d0f8      	beq.n	800633e <follow_path+0x16>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b5c      	cmp	r3, #92	; 0x5c
 8006352:	d0f4      	beq.n	800633e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b1f      	cmp	r3, #31
 8006360:	d80a      	bhi.n	8006378 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2280      	movs	r2, #128	; 0x80
 8006366:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800636a:	2100      	movs	r1, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff fcf9 	bl	8005d64 <dir_sdi>
 8006372:	4603      	mov	r3, r0
 8006374:	75fb      	strb	r3, [r7, #23]
 8006376:	e043      	b.n	8006400 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006378:	463b      	mov	r3, r7
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff3f 	bl	8006200 <create_name>
 8006382:	4603      	mov	r3, r0
 8006384:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d134      	bne.n	80063f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff feaf 	bl	80060f0 <dir_find>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800639c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d127      	bne.n	80063fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d122      	bne.n	80063fa <follow_path+0xd2>
 80063b4:	2305      	movs	r3, #5
 80063b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80063b8:	e01f      	b.n	80063fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11c      	bne.n	80063fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	799b      	ldrb	r3, [r3, #6]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80063d0:	2305      	movs	r3, #5
 80063d2:	75fb      	strb	r3, [r7, #23]
 80063d4:	e014      	b.n	8006400 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e4:	4413      	add	r3, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fe42 	bl	8006072 <ld_clust>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063f4:	e7c0      	b.n	8006378 <follow_path+0x50>
			if (res != FR_OK) break;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <follow_path+0xd8>
				break;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063fe:	bf00      	nop
			}
		}
	}

	return res;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006416:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d031      	beq.n	8006484 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e002      	b.n	800642e <get_ldnumber+0x24>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3301      	adds	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b20      	cmp	r3, #32
 8006434:	d903      	bls.n	800643e <get_ldnumber+0x34>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b3a      	cmp	r3, #58	; 0x3a
 800643c:	d1f4      	bne.n	8006428 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b3a      	cmp	r3, #58	; 0x3a
 8006444:	d11c      	bne.n	8006480 <get_ldnumber+0x76>
			tp = *path;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	60fa      	str	r2, [r7, #12]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	3b30      	subs	r3, #48	; 0x30
 8006456:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d80e      	bhi.n	800647c <get_ldnumber+0x72>
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	429a      	cmp	r2, r3
 8006464:	d10a      	bne.n	800647c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d107      	bne.n	800647c <get_ldnumber+0x72>
					vol = (int)i;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3301      	adds	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	e002      	b.n	8006486 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006484:	693b      	ldr	r3, [r7, #16]
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	70da      	strb	r2, [r3, #3]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff f8e0 	bl	8005674 <move_window>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <check_fs+0x2a>
 80064ba:	2304      	movs	r3, #4
 80064bc:	e038      	b.n	8006530 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3330      	adds	r3, #48	; 0x30
 80064c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fe24 	bl	8005114 <ld_word>
 80064cc:	4603      	mov	r3, r0
 80064ce:	461a      	mov	r2, r3
 80064d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <check_fs+0x48>
 80064d8:	2303      	movs	r3, #3
 80064da:	e029      	b.n	8006530 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064e2:	2be9      	cmp	r3, #233	; 0xe9
 80064e4:	d009      	beq.n	80064fa <check_fs+0x66>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ec:	2beb      	cmp	r3, #235	; 0xeb
 80064ee:	d11e      	bne.n	800652e <check_fs+0x9a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064f6:	2b90      	cmp	r3, #144	; 0x90
 80064f8:	d119      	bne.n	800652e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3330      	adds	r3, #48	; 0x30
 80064fe:	3336      	adds	r3, #54	; 0x36
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fe1f 	bl	8005144 <ld_dword>
 8006506:	4603      	mov	r3, r0
 8006508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800650c:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <check_fs+0xa4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d101      	bne.n	8006516 <check_fs+0x82>
 8006512:	2300      	movs	r3, #0
 8006514:	e00c      	b.n	8006530 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3330      	adds	r3, #48	; 0x30
 800651a:	3352      	adds	r3, #82	; 0x52
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fe11 	bl	8005144 <ld_dword>
 8006522:	4602      	mov	r2, r0
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <check_fs+0xa8>)
 8006526:	429a      	cmp	r2, r3
 8006528:	d101      	bne.n	800652e <check_fs+0x9a>
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800652e:	2302      	movs	r3, #2
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	00544146 	.word	0x00544146
 800653c:	33544146 	.word	0x33544146

08006540 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b096      	sub	sp, #88	; 0x58
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff ff58 	bl	800640a <get_ldnumber>
 800655a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	da01      	bge.n	8006566 <find_volume+0x26>
 8006562:	230b      	movs	r3, #11
 8006564:	e22e      	b.n	80069c4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006566:	4aa8      	ldr	r2, [pc, #672]	; (8006808 <find_volume+0x2c8>)
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <find_volume+0x3a>
 8006576:	230c      	movs	r3, #12
 8006578:	e224      	b.n	80069c4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800657e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe fd1f 	bl	8004fd8 <disk_status>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10c      	bne.n	80065c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <find_volume+0x82>
 80065b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80065be:	230a      	movs	r3, #10
 80065c0:	e200      	b.n	80069c4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80065c2:	2300      	movs	r3, #0
 80065c4:	e1fe      	b.n	80069c4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80065cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fd17 	bl	800500c <disk_initialize>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80065e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80065f0:	2303      	movs	r3, #3
 80065f2:	e1e7      	b.n	80069c4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <find_volume+0xca>
 80065fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006606:	230a      	movs	r3, #10
 8006608:	e1dc      	b.n	80069c4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800660e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006612:	f7ff ff3f 	bl	8006494 <check_fs>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800661c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006620:	2b02      	cmp	r3, #2
 8006622:	d14b      	bne.n	80066bc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006624:	2300      	movs	r3, #0
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
 8006628:	e01f      	b.n	800666a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006638:	4413      	add	r3, r2
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	3304      	adds	r3, #4
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <find_volume+0x114>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3308      	adds	r3, #8
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fd7a 	bl	8005144 <ld_dword>
 8006650:	4602      	mov	r2, r0
 8006652:	e000      	b.n	8006656 <find_volume+0x116>
 8006654:	2200      	movs	r2, #0
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800665e:	440b      	add	r3, r1
 8006660:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006666:	3301      	adds	r3, #1
 8006668:	643b      	str	r3, [r7, #64]	; 0x40
 800666a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666c:	2b03      	cmp	r3, #3
 800666e:	d9dc      	bls.n	800662a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006670:	2300      	movs	r3, #0
 8006672:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <find_volume+0x140>
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	3b01      	subs	r3, #1
 800667e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006688:	4413      	add	r3, r2
 800668a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <find_volume+0x162>
 8006696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800669a:	f7ff fefb 	bl	8006494 <check_fs>
 800669e:	4603      	mov	r3, r0
 80066a0:	e000      	b.n	80066a4 <find_volume+0x164>
 80066a2:	2303      	movs	r3, #3
 80066a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d905      	bls.n	80066bc <find_volume+0x17c>
 80066b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b2:	3301      	adds	r3, #1
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d9e1      	bls.n	8006680 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80066bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d101      	bne.n	80066c8 <find_volume+0x188>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e17d      	b.n	80069c4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80066c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d901      	bls.n	80066d4 <find_volume+0x194>
 80066d0:	230d      	movs	r3, #13
 80066d2:	e177      	b.n	80069c4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	3330      	adds	r3, #48	; 0x30
 80066d8:	330b      	adds	r3, #11
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fd1a 	bl	8005114 <ld_word>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e6:	d001      	beq.n	80066ec <find_volume+0x1ac>
 80066e8:	230d      	movs	r3, #13
 80066ea:	e16b      	b.n	80069c4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	3330      	adds	r3, #48	; 0x30
 80066f0:	3316      	adds	r3, #22
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fd0e 	bl	8005114 <ld_word>
 80066f8:	4603      	mov	r3, r0
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <find_volume+0x1d0>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	3330      	adds	r3, #48	; 0x30
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fd1b 	bl	8005144 <ld_dword>
 800670e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006714:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d005      	beq.n	8006734 <find_volume+0x1f4>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	789b      	ldrb	r3, [r3, #2]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d001      	beq.n	8006734 <find_volume+0x1f4>
 8006730:	230d      	movs	r3, #13
 8006732:	e147      	b.n	80069c4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	789b      	ldrb	r3, [r3, #2]
 8006738:	461a      	mov	r2, r3
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	fb02 f303 	mul.w	r3, r2, r3
 8006740:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b29a      	uxth	r2, r3
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	895b      	ldrh	r3, [r3, #10]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <find_volume+0x228>
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	895b      	ldrh	r3, [r3, #10]
 800675a:	461a      	mov	r2, r3
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	895b      	ldrh	r3, [r3, #10]
 8006760:	3b01      	subs	r3, #1
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <find_volume+0x22c>
 8006768:	230d      	movs	r3, #13
 800676a:	e12b      	b.n	80069c4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	3330      	adds	r3, #48	; 0x30
 8006770:	3311      	adds	r3, #17
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fcce 	bl	8005114 <ld_word>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	891b      	ldrh	r3, [r3, #8]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <find_volume+0x252>
 800678e:	230d      	movs	r3, #13
 8006790:	e118      	b.n	80069c4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	3313      	adds	r3, #19
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fcbb 	bl	8005114 <ld_word>
 800679e:	4603      	mov	r3, r0
 80067a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <find_volume+0x276>
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	3330      	adds	r3, #48	; 0x30
 80067ac:	3320      	adds	r3, #32
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fcc8 	bl	8005144 <ld_dword>
 80067b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	3330      	adds	r3, #48	; 0x30
 80067ba:	330e      	adds	r3, #14
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fca9 	bl	8005114 <ld_word>
 80067c2:	4603      	mov	r3, r0
 80067c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <find_volume+0x290>
 80067cc:	230d      	movs	r3, #13
 80067ce:	e0f9      	b.n	80069c4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80067d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	4413      	add	r3, r2
 80067d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067d8:	8912      	ldrh	r2, [r2, #8]
 80067da:	0912      	lsrs	r2, r2, #4
 80067dc:	b292      	uxth	r2, r2
 80067de:	4413      	add	r3, r2
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80067e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d201      	bcs.n	80067ee <find_volume+0x2ae>
 80067ea:	230d      	movs	r3, #13
 80067ec:	e0ea      	b.n	80069c4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80067ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f6:	8952      	ldrh	r2, [r2, #10]
 80067f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <find_volume+0x2cc>
 8006804:	230d      	movs	r3, #13
 8006806:	e0dd      	b.n	80069c4 <find_volume+0x484>
 8006808:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 800680c:	2303      	movs	r3, #3
 800680e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006818:	4293      	cmp	r3, r2
 800681a:	d802      	bhi.n	8006822 <find_volume+0x2e2>
 800681c:	2302      	movs	r3, #2
 800681e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006828:	4293      	cmp	r3, r2
 800682a:	d802      	bhi.n	8006832 <find_volume+0x2f2>
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800683e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006844:	441a      	add	r2, r3
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800684a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	441a      	add	r2, r3
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006858:	2b03      	cmp	r3, #3
 800685a:	d11e      	bne.n	800689a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	3330      	adds	r3, #48	; 0x30
 8006860:	332a      	adds	r3, #42	; 0x2a
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fc56 	bl	8005114 <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <find_volume+0x332>
 800686e:	230d      	movs	r3, #13
 8006870:	e0a8      	b.n	80069c4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	891b      	ldrh	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <find_volume+0x33e>
 800687a:	230d      	movs	r3, #13
 800687c:	e0a2      	b.n	80069c4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	3330      	adds	r3, #48	; 0x30
 8006882:	332c      	adds	r3, #44	; 0x2c
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fc5d 	bl	8005144 <ld_dword>
 800688a:	4602      	mov	r2, r0
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	647b      	str	r3, [r7, #68]	; 0x44
 8006898:	e01f      	b.n	80068da <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	891b      	ldrh	r3, [r3, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <find_volume+0x366>
 80068a2:	230d      	movs	r3, #13
 80068a4:	e08e      	b.n	80069c4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ac:	441a      	add	r2, r3
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d103      	bne.n	80068c2 <find_volume+0x382>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	e00a      	b.n	80068d8 <find_volume+0x398>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	085a      	lsrs	r2, r3, #1
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068e4:	0a5b      	lsrs	r3, r3, #9
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d201      	bcs.n	80068ee <find_volume+0x3ae>
 80068ea:	230d      	movs	r3, #13
 80068ec:	e06a      	b.n	80069c4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068f4:	611a      	str	r2, [r3, #16]
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006908:	2b03      	cmp	r3, #3
 800690a:	d149      	bne.n	80069a0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	3330      	adds	r3, #48	; 0x30
 8006910:	3330      	adds	r3, #48	; 0x30
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fbfe 	bl	8005114 <ld_word>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d140      	bne.n	80069a0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800691e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006920:	3301      	adds	r3, #1
 8006922:	4619      	mov	r1, r3
 8006924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006926:	f7fe fea5 	bl	8005674 <move_window>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d137      	bne.n	80069a0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	2200      	movs	r2, #0
 8006934:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	3330      	adds	r3, #48	; 0x30
 800693a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fbe8 	bl	8005114 <ld_word>
 8006944:	4603      	mov	r3, r0
 8006946:	461a      	mov	r2, r3
 8006948:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800694c:	429a      	cmp	r2, r3
 800694e:	d127      	bne.n	80069a0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	3330      	adds	r3, #48	; 0x30
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fbf5 	bl	8005144 <ld_dword>
 800695a:	4602      	mov	r2, r0
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <find_volume+0x48c>)
 800695e:	429a      	cmp	r2, r3
 8006960:	d11e      	bne.n	80069a0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	3330      	adds	r3, #48	; 0x30
 8006966:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fbea 	bl	8005144 <ld_dword>
 8006970:	4602      	mov	r2, r0
 8006972:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <find_volume+0x490>)
 8006974:	429a      	cmp	r2, r3
 8006976:	d113      	bne.n	80069a0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	3330      	adds	r3, #48	; 0x30
 800697c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fbdf 	bl	8005144 <ld_dword>
 8006986:	4602      	mov	r2, r0
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	3330      	adds	r3, #48	; 0x30
 8006990:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fbd5 	bl	8005144 <ld_dword>
 800699a:	4602      	mov	r2, r0
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <find_volume+0x494>)
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <find_volume+0x494>)
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <find_volume+0x494>)
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80069bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069be:	f7fe fdf1 	bl	80055a4 <clear_lock>
#endif
	return FR_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3758      	adds	r7, #88	; 0x58
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	41615252 	.word	0x41615252
 80069d0:	61417272 	.word	0x61417272
 80069d4:	2000002c 	.word	0x2000002c

080069d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80069e2:	2309      	movs	r3, #9
 80069e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01c      	beq.n	8006a26 <validate+0x4e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d018      	beq.n	8006a26 <validate+0x4e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d013      	beq.n	8006a26 <validate+0x4e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	889a      	ldrh	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	88db      	ldrh	r3, [r3, #6]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d10c      	bne.n	8006a26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fae0 	bl	8004fd8 <disk_status>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <validate+0x4e>
			res = FR_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <validate+0x5a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	e000      	b.n	8006a34 <validate+0x5c>
 8006a32:	2300      	movs	r3, #0
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	6013      	str	r3, [r2, #0]
	return res;
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a56:	f107 0310 	add.w	r3, r7, #16
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fcd5 	bl	800640a <get_ldnumber>
 8006a60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da01      	bge.n	8006a6c <f_mount+0x28>
 8006a68:	230b      	movs	r3, #11
 8006a6a:	e02b      	b.n	8006ac4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <f_mount+0x88>)
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f7fe fd91 	bl	80055a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	490d      	ldr	r1, [pc, #52]	; (8006acc <f_mount+0x88>)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <f_mount+0x66>
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d001      	beq.n	8006aae <f_mount+0x6a>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e00a      	b.n	8006ac4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006aae:	f107 010c 	add.w	r1, r7, #12
 8006ab2:	f107 0308 	add.w	r3, r7, #8
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fd41 	bl	8006540 <find_volume>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3720      	adds	r7, #32
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000028 	.word	0x20000028

08006ad0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b098      	sub	sp, #96	; 0x60
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <f_open+0x18>
 8006ae4:	2309      	movs	r3, #9
 8006ae6:	e1ad      	b.n	8006e44 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006af0:	79fa      	ldrb	r2, [r7, #7]
 8006af2:	f107 0110 	add.w	r1, r7, #16
 8006af6:	f107 0308 	add.w	r3, r7, #8
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fd20 	bl	8006540 <find_volume>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8191 	bne.w	8006e32 <f_open+0x362>
		dj.obj.fs = fs;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fc03 	bl	8006328 <follow_path>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11a      	bne.n	8006b66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006b30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da03      	bge.n	8006b42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006b3a:	2306      	movs	r3, #6
 8006b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b40:	e011      	b.n	8006b66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fbda 	bl	8005314 <chk_lock>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	f003 031c 	and.w	r3, r3, #28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d07f      	beq.n	8006c70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d10e      	bne.n	8006b9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b80:	f7fe fc24 	bl	80053cc <enq_lock>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <f_open+0xc8>
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fb03 	bl	800619a <dir_register>
 8006b94:	4603      	mov	r3, r0
 8006b96:	e000      	b.n	8006b9a <f_open+0xca>
 8006b98:	2312      	movs	r3, #18
 8006b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	71fb      	strb	r3, [r7, #7]
 8006ba6:	e010      	b.n	8006bca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ba8:	7ebb      	ldrb	r3, [r7, #26]
 8006baa:	f003 0311 	and.w	r3, r3, #17
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <f_open+0xea>
					res = FR_DENIED;
 8006bb2:	2307      	movs	r3, #7
 8006bb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006bb8:	e007      	b.n	8006bca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <f_open+0xfa>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d168      	bne.n	8006ca4 <f_open+0x1d4>
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d063      	beq.n	8006ca4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006bdc:	f7fe f868 	bl	8004cb0 <get_fattime>
 8006be0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	330e      	adds	r3, #14
 8006be6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fae9 	bl	80051c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	3316      	adds	r3, #22
 8006bf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fae3 	bl	80051c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	330b      	adds	r3, #11
 8006bfe:	2220      	movs	r2, #32
 8006c00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fa32 	bl	8006072 <ld_clust>
 8006c0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c14:	2200      	movs	r2, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fa4a 	bl	80060b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	331c      	adds	r3, #28
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe facc 	bl	80051c0 <st_dword>
					fs->wflag = 1;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d037      	beq.n	8006ca4 <f_open+0x1d4>
						dw = fs->winsect;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006c3a:	f107 0314 	add.w	r3, r7, #20
 8006c3e:	2200      	movs	r2, #0
 8006c40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe ff5d 	bl	8005b02 <remove_chain>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d126      	bne.n	8006ca4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fd0a 	bl	8005674 <move_window>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c6a:	3a01      	subs	r2, #1
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	e019      	b.n	8006ca4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d115      	bne.n	8006ca4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006c78:	7ebb      	ldrb	r3, [r7, #26]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006c82:	2304      	movs	r3, #4
 8006c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c88:	e00c      	b.n	8006ca4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <f_open+0x1d4>
 8006c94:	7ebb      	ldrb	r3, [r7, #26]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <f_open+0x1d4>
						res = FR_DENIED;
 8006c9e:	2307      	movs	r3, #7
 8006ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d128      	bne.n	8006cfe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f107 0314 	add.w	r3, r7, #20
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe fb93 	bl	8005410 <inc_lock>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <f_open+0x22e>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 8095 	bne.w	8006e32 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff f9af 	bl	8006072 <ld_clust>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	331c      	adds	r3, #28
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fa10 	bl	8005144 <ld_dword>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	88da      	ldrh	r2, [r3, #6]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	79fa      	ldrb	r2, [r7, #7]
 8006d42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fa7a 	bl	800525a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d060      	beq.n	8006e32 <f_open+0x362>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05c      	beq.n	8006e32 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	895b      	ldrh	r3, [r3, #10]
 8006d84:	025b      	lsls	r3, r3, #9
 8006d86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	657b      	str	r3, [r7, #84]	; 0x54
 8006d94:	e016      	b.n	8006dc4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fd25 	bl	80057ea <get_fat>
 8006da0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d802      	bhi.n	8006dae <f_open+0x2de>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db4:	d102      	bne.n	8006dbc <f_open+0x2ec>
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006dbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <f_open+0x304>
 8006dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d8e0      	bhi.n	8006d96 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d127      	bne.n	8006e32 <f_open+0x362>
 8006de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d022      	beq.n	8006e32 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe fcdb 	bl	80057ac <clust2sect>
 8006df6:	6478      	str	r0, [r7, #68]	; 0x44
 8006df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <f_open+0x336>
						res = FR_INT_ERR;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e04:	e015      	b.n	8006e32 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e08:	0a5a      	lsrs	r2, r3, #9
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	7858      	ldrb	r0, [r3, #1]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	2301      	movs	r3, #1
 8006e22:	f7fe f919 	bl	8005058 <disk_read>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <f_open+0x362>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <f_open+0x370>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3760      	adds	r7, #96	; 0x60
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	; 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f107 0214 	add.w	r2, r7, #20
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff fdb3 	bl	80069d8 <validate>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d107      	bne.n	8006e90 <f_read+0x44>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	7d5b      	ldrb	r3, [r3, #21]
 8006e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <f_read+0x4a>
 8006e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e94:	e115      	b.n	80070c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	7d1b      	ldrb	r3, [r3, #20]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <f_read+0x5a>
 8006ea2:	2307      	movs	r3, #7
 8006ea4:	e10d      	b.n	80070c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	f240 80fe 	bls.w	80070b8 <f_read+0x26c>
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006ec0:	e0fa      	b.n	80070b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 80c6 	bne.w	800705c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	0a5b      	lsrs	r3, r3, #9
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	8952      	ldrh	r2, [r2, #10]
 8006eda:	3a01      	subs	r2, #1
 8006edc:	4013      	ands	r3, r2
 8006ede:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d12f      	bne.n	8006f46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef4:	e013      	b.n	8006f1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7fe fef9 	bl	8005cfc <clmt_clust>
 8006f0a:	6338      	str	r0, [r7, #48]	; 0x30
 8006f0c:	e007      	b.n	8006f1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe fc67 	bl	80057ea <get_fat>
 8006f1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d804      	bhi.n	8006f2e <f_read+0xe2>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2202      	movs	r2, #2
 8006f28:	755a      	strb	r2, [r3, #21]
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e0c9      	b.n	80070c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f34:	d104      	bne.n	8006f40 <f_read+0xf4>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	755a      	strb	r2, [r3, #21]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0c0      	b.n	80070c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fc2c 	bl	80057ac <clust2sect>
 8006f54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <f_read+0x11a>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	755a      	strb	r2, [r3, #21]
 8006f62:	2302      	movs	r3, #2
 8006f64:	e0ad      	b.n	80070c2 <f_read+0x276>
			sect += csect;
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0a5b      	lsrs	r3, r3, #9
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d039      	beq.n	8006fee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	4413      	add	r3, r2
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	8952      	ldrh	r2, [r2, #10]
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d905      	bls.n	8006f94 <f_read+0x148>
					cc = fs->csize - csect;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	895b      	ldrh	r3, [r3, #10]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	7858      	ldrb	r0, [r3, #1]
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f9e:	f7fe f85b 	bl	8005058 <disk_read>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <f_read+0x166>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	755a      	strb	r2, [r3, #21]
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e087      	b.n	80070c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7d1b      	ldrb	r3, [r3, #20]
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da14      	bge.n	8006fe6 <f_read+0x19a>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d90d      	bls.n	8006fe6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1a      	ldr	r2, [r3, #32]
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	025b      	lsls	r3, r3, #9
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	18d0      	adds	r0, r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3330      	adds	r3, #48	; 0x30
 8006fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f7fe f919 	bl	8005218 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	025b      	lsls	r3, r3, #9
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006fec:	e050      	b.n	8007090 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d02e      	beq.n	8007056 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	7d1b      	ldrb	r3, [r3, #20]
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da18      	bge.n	8007034 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	7858      	ldrb	r0, [r3, #1]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	2301      	movs	r3, #1
 8007012:	f7fe f841 	bl	8005098 <disk_write>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <f_read+0x1da>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	755a      	strb	r2, [r3, #21]
 8007022:	2301      	movs	r3, #1
 8007024:	e04d      	b.n	80070c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	7d1b      	ldrb	r3, [r3, #20]
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	b2da      	uxtb	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	7858      	ldrb	r0, [r3, #1]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800703e:	2301      	movs	r3, #1
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	f7fe f809 	bl	8005058 <disk_read>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <f_read+0x20a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	755a      	strb	r2, [r3, #21]
 8007052:	2301      	movs	r3, #1
 8007054:	e035      	b.n	80070c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007064:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800706a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d901      	bls.n	8007076 <f_read+0x22a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	4413      	add	r3, r2
 8007086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007088:	4619      	mov	r1, r3
 800708a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800708c:	f7fe f8c4 	bl	8005218 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	4413      	add	r3, r2
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	441a      	add	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	619a      	str	r2, [r3, #24]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	441a      	add	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f47f af01 	bne.w	8006ec2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3738      	adds	r7, #56	; 0x38
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b08c      	sub	sp, #48	; 0x30
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f107 0210 	add.w	r2, r7, #16
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fc74 	bl	80069d8 <validate>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <f_write+0x44>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	7d5b      	ldrb	r3, [r3, #21]
 8007102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <f_write+0x4a>
 800710e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007112:	e14b      	b.n	80073ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	7d1b      	ldrb	r3, [r3, #20]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <f_write+0x5a>
 8007120:	2307      	movs	r3, #7
 8007122:	e143      	b.n	80073ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	441a      	add	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	429a      	cmp	r2, r3
 8007132:	f080 812d 	bcs.w	8007390 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	43db      	mvns	r3, r3
 800713c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800713e:	e127      	b.n	8007390 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 80e3 	bne.w	8007314 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	0a5b      	lsrs	r3, r3, #9
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	8952      	ldrh	r2, [r2, #10]
 8007158:	3a01      	subs	r2, #1
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d143      	bne.n	80071ec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10c      	bne.n	8007186 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11a      	bne.n	80071ae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fd25 	bl	8005bcc <create_chain>
 8007182:	62b8      	str	r0, [r7, #40]	; 0x28
 8007184:	e013      	b.n	80071ae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f7fe fdb1 	bl	8005cfc <clmt_clust>
 800719a:	62b8      	str	r0, [r7, #40]	; 0x28
 800719c:	e007      	b.n	80071ae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f7fe fd10 	bl	8005bcc <create_chain>
 80071ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80f2 	beq.w	800739a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d104      	bne.n	80071c6 <f_write+0xfc>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2202      	movs	r2, #2
 80071c0:	755a      	strb	r2, [r3, #21]
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0f2      	b.n	80073ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071cc:	d104      	bne.n	80071d8 <f_write+0x10e>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	755a      	strb	r2, [r3, #21]
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0e9      	b.n	80073ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <f_write+0x122>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7d1b      	ldrb	r3, [r3, #20]
 80071f0:	b25b      	sxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da18      	bge.n	8007228 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	7858      	ldrb	r0, [r3, #1]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	2301      	movs	r3, #1
 8007206:	f7fd ff47 	bl	8005098 <disk_write>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <f_write+0x150>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	755a      	strb	r2, [r3, #21]
 8007216:	2301      	movs	r3, #1
 8007218:	e0c8      	b.n	80073ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	7d1b      	ldrb	r3, [r3, #20]
 800721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7fe fabb 	bl	80057ac <clust2sect>
 8007236:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <f_write+0x17e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	755a      	strb	r2, [r3, #21]
 8007244:	2302      	movs	r3, #2
 8007246:	e0b1      	b.n	80073ac <f_write+0x2e2>
			sect += csect;
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	4413      	add	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	0a5b      	lsrs	r3, r3, #9
 8007254:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d03c      	beq.n	80072d6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	4413      	add	r3, r2
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	8952      	ldrh	r2, [r2, #10]
 8007266:	4293      	cmp	r3, r2
 8007268:	d905      	bls.n	8007276 <f_write+0x1ac>
					cc = fs->csize - csect;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	895b      	ldrh	r3, [r3, #10]
 800726e:	461a      	mov	r2, r3
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	7858      	ldrb	r0, [r3, #1]
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	69f9      	ldr	r1, [r7, #28]
 8007280:	f7fd ff0a 	bl	8005098 <disk_write>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <f_write+0x1ca>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	755a      	strb	r2, [r3, #21]
 8007290:	2301      	movs	r3, #1
 8007292:	e08b      	b.n	80073ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d915      	bls.n	80072ce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a1a      	ldr	r2, [r3, #32]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	025b      	lsls	r3, r3, #9
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ba:	4619      	mov	r1, r3
 80072bc:	f7fd ffac 	bl	8005218 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	025b      	lsls	r3, r3, #9
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80072d4:	e03f      	b.n	8007356 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d016      	beq.n	800730e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	699a      	ldr	r2, [r3, #24]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d210      	bcs.n	800730e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	7858      	ldrb	r0, [r3, #1]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072f6:	2301      	movs	r3, #1
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	f7fd fead 	bl	8005058 <disk_read>
 80072fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	755a      	strb	r2, [r3, #21]
 800730a:	2301      	movs	r3, #1
 800730c:	e04e      	b.n	80073ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d901      	bls.n	800732e <f_write+0x264>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733c:	4413      	add	r3, r2
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	69f9      	ldr	r1, [r7, #28]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fd ff68 	bl	8005218 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	7d1b      	ldrb	r3, [r3, #20]
 800734c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	4413      	add	r3, r2
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	619a      	str	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	429a      	cmp	r2, r3
 8007374:	bf38      	it	cc
 8007376:	461a      	movcc	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	441a      	add	r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f aed4 	bne.w	8007140 <f_write+0x76>
 8007398:	e000      	b.n	800739c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800739a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3730      	adds	r7, #48	; 0x30
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f107 0208 	add.w	r2, r7, #8
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fb07 	bl	80069d8 <validate>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d168      	bne.n	80074a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	7d1b      	ldrb	r3, [r3, #20]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d062      	beq.n	80074a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7d1b      	ldrb	r3, [r3, #20]
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da15      	bge.n	8007416 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	7858      	ldrb	r0, [r3, #1]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1a      	ldr	r2, [r3, #32]
 80073f8:	2301      	movs	r3, #1
 80073fa:	f7fd fe4d 	bl	8005098 <disk_write>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <f_sync+0x54>
 8007404:	2301      	movs	r3, #1
 8007406:	e04f      	b.n	80074a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7d1b      	ldrb	r3, [r3, #20]
 800740c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007410:	b2da      	uxtb	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007416:	f7fd fc4b 	bl	8004cb0 <get_fattime>
 800741a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe f925 	bl	8005674 <move_window>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d138      	bne.n	80074a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	330b      	adds	r3, #11
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	330b      	adds	r3, #11
 8007444:	f042 0220 	orr.w	r2, r2, #32
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	461a      	mov	r2, r3
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	f7fe fe2a 	bl	80060b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f103 021c 	add.w	r2, r3, #28
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fd fea9 	bl	80051c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3316      	adds	r3, #22
 8007472:	6939      	ldr	r1, [r7, #16]
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fea3 	bl	80051c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3312      	adds	r3, #18
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd fe82 	bl	800518a <st_word>
					fs->wflag = 1;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2201      	movs	r2, #1
 800748a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe f91e 	bl	80056d0 <sync_fs>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7d1b      	ldrb	r3, [r3, #20]
 800749c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ff7b 	bl	80073b4 <f_sync>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d118      	bne.n	80074fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f107 0208 	add.w	r2, r7, #8
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fa81 	bl	80069d8 <validate>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe f821 	bl	800552c <dec_lock>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b09d      	sub	sp, #116	; 0x74
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	460b      	mov	r3, r1
 8007512:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8007514:	2301      	movs	r3, #1
 8007516:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8007518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800751c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe ff71 	bl	800640a <get_ldnumber>
 8007528:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800752a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	da02      	bge.n	8007536 <f_mkfs+0x32>
 8007530:	230b      	movs	r3, #11
 8007532:	f000 bc0d 	b.w	8007d50 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8007536:	4a94      	ldr	r2, [pc, #592]	; (8007788 <f_mkfs+0x284>)
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <f_mkfs+0x4a>
 8007542:	4a91      	ldr	r2, [pc, #580]	; (8007788 <f_mkfs+0x284>)
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007550:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8007554:	2300      	movs	r3, #0
 8007556:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800755a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd fd54 	bl	800500c <disk_initialize>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800756a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <f_mkfs+0x76>
 8007576:	2303      	movs	r3, #3
 8007578:	e3ea      	b.n	8007d50 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800757a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <f_mkfs+0x86>
 8007586:	230a      	movs	r3, #10
 8007588:	e3e2      	b.n	8007d50 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800758a:	f107 0214 	add.w	r2, r7, #20
 800758e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007592:	2103      	movs	r1, #3
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd fd9f 	bl	80050d8 <disk_ioctl>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10c      	bne.n	80075ba <f_mkfs+0xb6>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <f_mkfs+0xb6>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ac:	d805      	bhi.n	80075ba <f_mkfs+0xb6>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	1e5a      	subs	r2, r3, #1
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	4013      	ands	r3, r2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <f_mkfs+0xba>
 80075ba:	2301      	movs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80075be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <f_mkfs+0xce>
 80075ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d309      	bcc.n	80075e6 <f_mkfs+0xe2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d8:	d805      	bhi.n	80075e6 <f_mkfs+0xe2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	1e5a      	subs	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <f_mkfs+0xe6>
 80075e6:	2313      	movs	r3, #19
 80075e8:	e3b2      	b.n	8007d50 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80075ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80075f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007604:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <f_mkfs+0x114>
 8007614:	230e      	movs	r3, #14
 8007616:	e39b      	b.n	8007d50 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007618:	f107 0210 	add.w	r2, r7, #16
 800761c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007620:	2101      	movs	r1, #1
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd fd58 	bl	80050d8 <disk_ioctl>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <f_mkfs+0x12e>
 800762e:	2301      	movs	r3, #1
 8007630:	e38e      	b.n	8007d50 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <f_mkfs+0x13c>
 800763c:	2300      	movs	r3, #0
 800763e:	e000      	b.n	8007642 <f_mkfs+0x13e>
 8007640:	233f      	movs	r3, #63	; 0x3f
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	429a      	cmp	r2, r3
 800764a:	d901      	bls.n	8007650 <f_mkfs+0x14c>
 800764c:	230e      	movs	r3, #14
 800764e:	e37f      	b.n	8007d50 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b7f      	cmp	r3, #127	; 0x7f
 800765c:	d801      	bhi.n	8007662 <f_mkfs+0x15e>
 800765e:	230e      	movs	r3, #14
 8007660:	e376      	b.n	8007d50 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b80      	cmp	r3, #128	; 0x80
 8007666:	d901      	bls.n	800766c <f_mkfs+0x168>
 8007668:	2313      	movs	r3, #19
 800766a:	e371      	b.n	8007d50 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	2b02      	cmp	r3, #2
 800767e:	d004      	beq.n	800768a <f_mkfs+0x186>
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800768a:	2303      	movs	r3, #3
 800768c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007690:	e009      	b.n	80076a6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <f_mkfs+0x19c>
 800769c:	2313      	movs	r3, #19
 800769e:	e357      	b.n	8007d50 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80076aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d13c      	bne.n	800772c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11b      	bne.n	80076f0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	0c5b      	lsrs	r3, r3, #17
 80076bc:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80076be:	2300      	movs	r3, #0
 80076c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c2:	2301      	movs	r3, #1
 80076c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c6:	e005      	b.n	80076d4 <f_mkfs+0x1d0>
 80076c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ca:	3301      	adds	r3, #1
 80076cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076d4:	4a2d      	ldr	r2, [pc, #180]	; (800778c <f_mkfs+0x288>)
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <f_mkfs+0x1ec>
 80076e0:	4a2a      	ldr	r2, [pc, #168]	; (800778c <f_mkfs+0x288>)
 80076e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d2eb      	bcs.n	80076c8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	3302      	adds	r3, #2
 80076fe:	009a      	lsls	r2, r3, #2
 8007700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007702:	4413      	add	r3, r2
 8007704:	1e5a      	subs	r2, r3, #1
 8007706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800770e:	2320      	movs	r3, #32
 8007710:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8007712:	2300      	movs	r3, #0
 8007714:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800771c:	4293      	cmp	r3, r2
 800771e:	d903      	bls.n	8007728 <f_mkfs+0x224>
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <f_mkfs+0x28c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d952      	bls.n	80077ce <f_mkfs+0x2ca>
 8007728:	230e      	movs	r3, #14
 800772a:	e311      	b.n	8007d50 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800772c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11b      	bne.n	800776a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	0b1b      	lsrs	r3, r3, #12
 8007736:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007738:	2300      	movs	r3, #0
 800773a:	64bb      	str	r3, [r7, #72]	; 0x48
 800773c:	2301      	movs	r3, #1
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007740:	e005      	b.n	800774e <f_mkfs+0x24a>
 8007742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007744:	3301      	adds	r3, #1
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800774e:	4a11      	ldr	r2, [pc, #68]	; (8007794 <f_mkfs+0x290>)
 8007750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <f_mkfs+0x266>
 800775a:	4a0e      	ldr	r2, [pc, #56]	; (8007794 <f_mkfs+0x290>)
 800775c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007762:	461a      	mov	r2, r3
 8007764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007766:	4293      	cmp	r3, r2
 8007768:	d2eb      	bcs.n	8007742 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007772:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f640 72f5 	movw	r2, #4085	; 0xff5
 800777a:	4293      	cmp	r3, r2
 800777c:	d90c      	bls.n	8007798 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	3302      	adds	r3, #2
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	663b      	str	r3, [r7, #96]	; 0x60
 8007786:	e012      	b.n	80077ae <f_mkfs+0x2aa>
 8007788:	20000028 	.word	0x20000028
 800778c:	08007fcc 	.word	0x08007fcc
 8007790:	0ffffff5 	.word	0x0ffffff5
 8007794:	08007fdc 	.word	0x08007fdc
				} else {
					fmt = FS_FAT12;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	4613      	mov	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	3301      	adds	r3, #1
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	3303      	adds	r3, #3
 80077ac:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80077ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80077b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b2:	4413      	add	r3, r2
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 80077be:	2301      	movs	r3, #1
 80077c0:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80077c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d2:	4413      	add	r3, r2
 80077d4:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80077d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077da:	fb02 f203 	mul.w	r2, r2, r3
 80077de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077e0:	4413      	add	r3, r2
 80077e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077e4:	4413      	add	r3, r2
 80077e6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	1e5a      	subs	r2, r3, #1
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	425b      	negs	r3, r3
 80077f4:	401a      	ands	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80077fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007800:	2b03      	cmp	r3, #3
 8007802:	d108      	bne.n	8007816 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8007804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007808:	4413      	add	r3, r2
 800780a:	65bb      	str	r3, [r7, #88]	; 0x58
 800780c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800780e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007810:	4413      	add	r3, r2
 8007812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007814:	e006      	b.n	8007824 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8007816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007820:	4413      	add	r3, r2
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007826:	011a      	lsls	r2, r3, #4
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	441a      	add	r2, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	429a      	cmp	r2, r3
 8007834:	d901      	bls.n	800783a <f_mkfs+0x336>
 8007836:	230e      	movs	r3, #14
 8007838:	e28a      	b.n	8007d50 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8007856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800785a:	2b03      	cmp	r3, #3
 800785c:	d10f      	bne.n	800787e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007864:	4293      	cmp	r3, r2
 8007866:	d80a      	bhi.n	800787e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d105      	bne.n	800787a <f_mkfs+0x376>
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	607b      	str	r3, [r7, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d144      	bne.n	8007904 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800787a:	230e      	movs	r3, #14
 800787c:	e268      	b.n	8007d50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800787e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007882:	2b02      	cmp	r3, #2
 8007884:	d133      	bne.n	80078ee <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800788c:	4293      	cmp	r3, r2
 800788e:	d91e      	bls.n	80078ce <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d107      	bne.n	80078a6 <f_mkfs+0x3a2>
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d803      	bhi.n	80078a6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800789e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e033      	b.n	800790e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80078b0:	2303      	movs	r3, #3
 80078b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80078b6:	e02a      	b.n	800790e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <f_mkfs+0x3c6>
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d91e      	bls.n	8007908 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80078ca:	230e      	movs	r3, #14
 80078cc:	e240      	b.n	8007d50 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d80a      	bhi.n	80078ee <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <f_mkfs+0x3e6>
 80078de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	607b      	str	r3, [r7, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d910      	bls.n	800790c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80078ea:	230e      	movs	r3, #14
 80078ec:	e230      	b.n	8007d50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80078ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10c      	bne.n	8007910 <f_mkfs+0x40c>
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d907      	bls.n	8007910 <f_mkfs+0x40c>
 8007900:	230e      	movs	r3, #14
 8007902:	e225      	b.n	8007d50 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007904:	bf00      	nop
 8007906:	e6ce      	b.n	80076a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007908:	bf00      	nop
 800790a:	e6cc      	b.n	80076a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800790c:	bf00      	nop
			pau = au;
 800790e:	e6ca      	b.n	80076a6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007910:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007914:	461a      	mov	r2, r3
 8007916:	2100      	movs	r1, #0
 8007918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800791a:	f7fd fc9e 	bl	800525a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800791e:	220b      	movs	r2, #11
 8007920:	49bc      	ldr	r1, [pc, #752]	; (8007c14 <f_mkfs+0x710>)
 8007922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007924:	f7fd fc78 	bl	8005218 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	330b      	adds	r3, #11
 800792c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800792e:	4611      	mov	r1, r2
 8007930:	4618      	mov	r0, r3
 8007932:	f7fd fc2a 	bl	800518a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	330d      	adds	r3, #13
 800793a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	330e      	adds	r3, #14
 8007944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007946:	b292      	uxth	r2, r2
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd fc1d 	bl	800518a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	3310      	adds	r3, #16
 8007954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	f103 0211 	add.w	r2, r3, #17
 8007960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007964:	2b03      	cmp	r3, #3
 8007966:	d002      	beq.n	800796e <f_mkfs+0x46a>
 8007968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796a:	b29b      	uxth	r3, r3
 800796c:	e000      	b.n	8007970 <f_mkfs+0x46c>
 800796e:	2300      	movs	r3, #0
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f7fd fc09 	bl	800518a <st_word>
		if (sz_vol < 0x10000) {
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797e:	d208      	bcs.n	8007992 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	3313      	adds	r3, #19
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	b292      	uxth	r2, r2
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fd fbfd 	bl	800518a <st_word>
 8007990:	e006      	b.n	80079a0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	3320      	adds	r3, #32
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f7fd fc10 	bl	80051c0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	3315      	adds	r3, #21
 80079a4:	22f8      	movs	r2, #248	; 0xf8
 80079a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	3318      	adds	r3, #24
 80079ac:	213f      	movs	r1, #63	; 0x3f
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fd fbeb 	bl	800518a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	331a      	adds	r3, #26
 80079b8:	21ff      	movs	r1, #255	; 0xff
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd fbe5 	bl	800518a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	331c      	adds	r3, #28
 80079c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd fbfa 	bl	80051c0 <st_dword>
		if (fmt == FS_FAT32) {
 80079cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d131      	bne.n	8007a38 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80079da:	f7fd f969 	bl	8004cb0 <get_fattime>
 80079de:	4603      	mov	r3, r0
 80079e0:	4619      	mov	r1, r3
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7fd fbec 	bl	80051c0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd fbe6 	bl	80051c0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	332c      	adds	r3, #44	; 0x2c
 80079f8:	2102      	movs	r1, #2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fbe0 	bl	80051c0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	3330      	adds	r3, #48	; 0x30
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd fbbf 	bl	800518a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	3332      	adds	r3, #50	; 0x32
 8007a10:	2106      	movs	r1, #6
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fd fbb9 	bl	800518a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	3340      	adds	r3, #64	; 0x40
 8007a1c:	2280      	movs	r2, #128	; 0x80
 8007a1e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	3342      	adds	r3, #66	; 0x42
 8007a24:	2229      	movs	r2, #41	; 0x29
 8007a26:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	3347      	adds	r3, #71	; 0x47
 8007a2c:	2213      	movs	r2, #19
 8007a2e:	497a      	ldr	r1, [pc, #488]	; (8007c18 <f_mkfs+0x714>)
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fd fbf1 	bl	8005218 <mem_cpy>
 8007a36:	e020      	b.n	8007a7a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8007a3e:	f7fd f937 	bl	8004cb0 <get_fattime>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4620      	mov	r0, r4
 8007a48:	f7fd fbba 	bl	80051c0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	3316      	adds	r3, #22
 8007a50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a52:	b292      	uxth	r2, r2
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fd fb97 	bl	800518a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	3324      	adds	r3, #36	; 0x24
 8007a60:	2280      	movs	r2, #128	; 0x80
 8007a62:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	3326      	adds	r3, #38	; 0x26
 8007a68:	2229      	movs	r2, #41	; 0x29
 8007a6a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	332b      	adds	r3, #43	; 0x2b
 8007a70:	2213      	movs	r2, #19
 8007a72:	496a      	ldr	r1, [pc, #424]	; (8007c1c <f_mkfs+0x718>)
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fbcf 	bl	8005218 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fd fb80 	bl	800518a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007a8a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a94:	f7fd fb00 	bl	8005098 <disk_write>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <f_mkfs+0x59e>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e156      	b.n	8007d50 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8007aa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d140      	bne.n	8007b2c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	1d9a      	adds	r2, r3, #6
 8007aae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ab6:	f7fd faef 	bl	8005098 <disk_write>
			mem_set(buf, 0, ss);
 8007aba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007abc:	461a      	mov	r2, r3
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac2:	f7fd fbca 	bl	800525a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8007ac6:	4956      	ldr	r1, [pc, #344]	; (8007c20 <f_mkfs+0x71c>)
 8007ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aca:	f7fd fb79 	bl	80051c0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ad4:	4953      	ldr	r1, [pc, #332]	; (8007c24 <f_mkfs+0x720>)
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd fb72 	bl	80051c0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fd fb69 	bl	80051c0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007af4:	2102      	movs	r1, #2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fb62 	bl	80051c0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b02:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fd fb3f 	bl	800518a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	1dda      	adds	r2, r3, #7
 8007b10:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b14:	2301      	movs	r3, #1
 8007b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b18:	f7fd fabe 	bl	8005098 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b24:	2301      	movs	r3, #1
 8007b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b28:	f7fd fab6 	bl	8005098 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b32:	f7fd fb92 	bl	800525a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3e:	e04b      	b.n	8007bd8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8007b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d113      	bne.n	8007b70 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007b48:	f06f 0107 	mvn.w	r1, #7
 8007b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4e:	f7fd fb37 	bl	80051c0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	3304      	adds	r3, #4
 8007b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd fb30 	bl	80051c0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	3308      	adds	r3, #8
 8007b64:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fd fb29 	bl	80051c0 <st_dword>
 8007b6e:	e00b      	b.n	8007b88 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007b70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <f_mkfs+0x678>
 8007b78:	4b2b      	ldr	r3, [pc, #172]	; (8007c28 <f_mkfs+0x724>)
 8007b7a:	e001      	b.n	8007b80 <f_mkfs+0x67c>
 8007b7c:	f06f 0307 	mvn.w	r3, #7
 8007b80:	4619      	mov	r1, r3
 8007b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b84:	f7fd fb1c 	bl	80051c0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b8a:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007b8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	4293      	cmp	r3, r2
 8007b92:	bf28      	it	cs
 8007b94:	4613      	movcs	r3, r2
 8007b96:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007b98:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba2:	f7fd fa79 	bl	8005098 <disk_write>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <f_mkfs+0x6ac>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0cf      	b.n	8007d50 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8007bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb8:	f7fd fb4f 	bl	800525a <mem_set>
				sect += n; nsect -= n;
 8007bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	4413      	add	r3, r2
 8007bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8007bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1dc      	bne.n	8007b8c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d3af      	bcc.n	8007b40 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d101      	bne.n	8007bec <f_mkfs+0x6e8>
 8007be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bea:	e000      	b.n	8007bee <f_mkfs+0x6ea>
 8007bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bee:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007bf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	bf28      	it	cs
 8007bf8:	4613      	movcs	r3, r2
 8007bfa:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007bfc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c06:	f7fd fa47 	bl	8005098 <disk_write>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00d      	beq.n	8007c2c <f_mkfs+0x728>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e09d      	b.n	8007d50 <f_mkfs+0x84c>
 8007c14:	08007ebc 	.word	0x08007ebc
 8007c18:	08007ec8 	.word	0x08007ec8
 8007c1c:	08007edc 	.word	0x08007edc
 8007c20:	41615252 	.word	0x41615252
 8007c24:	61417272 	.word	0x61417272
 8007c28:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8007c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c30:	4413      	add	r3, r2
 8007c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8007c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1d6      	bne.n	8007bf0 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d103      	bne.n	8007c52 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007c50:	e010      	b.n	8007c74 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d303      	bcc.n	8007c62 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007c5a:	2306      	movs	r3, #6
 8007c5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007c60:	e008      	b.n	8007c74 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007c62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d101      	bne.n	8007c6e <f_mkfs+0x76a>
 8007c6a:	2304      	movs	r3, #4
 8007c6c:	e000      	b.n	8007c70 <f_mkfs+0x76c>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d15b      	bne.n	8007d36 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8007c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c80:	461a      	mov	r2, r3
 8007c82:	2100      	movs	r1, #0
 8007c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c86:	f7fd fae8 	bl	800525a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fa78 	bl	800518a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007ca0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	3301      	adds	r3, #1
 8007cac:	2201      	movs	r2, #1
 8007cae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	3303      	adds	r3, #3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007cc8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	441a      	add	r2, r3
 8007cd0:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <f_mkfs+0x854>)
 8007cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	0852      	lsrs	r2, r2, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	0b5b      	lsrs	r3, r3, #13
 8007cde:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	3305      	adds	r3, #5
 8007ce4:	22fe      	movs	r2, #254	; 0xfe
 8007ce6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	3306      	adds	r3, #6
 8007cf2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fd fa58 	bl	80051c0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	330c      	adds	r3, #12
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4611      	mov	r1, r2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd fa51 	bl	80051c0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007d1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007d22:	2301      	movs	r3, #1
 8007d24:	2200      	movs	r2, #0
 8007d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d28:	f7fd f9b6 	bl	8005098 <disk_write>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <f_mkfs+0x832>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e00c      	b.n	8007d50 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007d36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fd f9ca 	bl	80050d8 <disk_ioctl>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <f_mkfs+0x84a>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <f_mkfs+0x84c>

	return FR_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3774      	adds	r7, #116	; 0x74
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd90      	pop	{r4, r7, pc}
 8007d58:	0515565b 	.word	0x0515565b

08007d5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d72:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d74:	7a5b      	ldrb	r3, [r3, #9]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d131      	bne.n	8007de0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d7c:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d7e:	7a5b      	ldrb	r3, [r3, #9]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d86:	2100      	movs	r1, #0
 8007d88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d8c:	7a5b      	ldrb	r3, [r3, #9]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d9c:	7a5b      	ldrb	r3, [r3, #9]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007da4:	4413      	add	r3, r2
 8007da6:	79fa      	ldrb	r2, [r7, #7]
 8007da8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007dac:	7a5b      	ldrb	r3, [r3, #9]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	b2d1      	uxtb	r1, r2
 8007db4:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007db6:	7251      	strb	r1, [r2, #9]
 8007db8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007dba:	7dbb      	ldrb	r3, [r7, #22]
 8007dbc:	3330      	adds	r3, #48	; 0x30
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	223a      	movs	r2, #58	; 0x3a
 8007dca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	3302      	adds	r3, #2
 8007dd0:	222f      	movs	r2, #47	; 0x2f
 8007dd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000050 	.word	0x20000050

08007df4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff ffaa 	bl	8007d5c <FATFS_LinkDriverEx>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <__libc_init_array>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0d      	ldr	r6, [pc, #52]	; (8007e4c <__libc_init_array+0x38>)
 8007e18:	4c0d      	ldr	r4, [pc, #52]	; (8007e50 <__libc_init_array+0x3c>)
 8007e1a:	1ba4      	subs	r4, r4, r6
 8007e1c:	10a4      	asrs	r4, r4, #2
 8007e1e:	2500      	movs	r5, #0
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d109      	bne.n	8007e38 <__libc_init_array+0x24>
 8007e24:	4e0b      	ldr	r6, [pc, #44]	; (8007e54 <__libc_init_array+0x40>)
 8007e26:	4c0c      	ldr	r4, [pc, #48]	; (8007e58 <__libc_init_array+0x44>)
 8007e28:	f000 f820 	bl	8007e6c <_init>
 8007e2c:	1ba4      	subs	r4, r4, r6
 8007e2e:	10a4      	asrs	r4, r4, #2
 8007e30:	2500      	movs	r5, #0
 8007e32:	42a5      	cmp	r5, r4
 8007e34:	d105      	bne.n	8007e42 <__libc_init_array+0x2e>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e3c:	4798      	blx	r3
 8007e3e:	3501      	adds	r5, #1
 8007e40:	e7ee      	b.n	8007e20 <__libc_init_array+0xc>
 8007e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e46:	4798      	blx	r3
 8007e48:	3501      	adds	r5, #1
 8007e4a:	e7f2      	b.n	8007e32 <__libc_init_array+0x1e>
 8007e4c:	08007fec 	.word	0x08007fec
 8007e50:	08007fec 	.word	0x08007fec
 8007e54:	08007fec 	.word	0x08007fec
 8007e58:	08007ff0 	.word	0x08007ff0

08007e5c <memset>:
 8007e5c:	4402      	add	r2, r0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d100      	bne.n	8007e66 <memset+0xa>
 8007e64:	4770      	bx	lr
 8007e66:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6a:	e7f9      	b.n	8007e60 <memset+0x4>

08007e6c <_init>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr

08007e78 <_fini>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr
