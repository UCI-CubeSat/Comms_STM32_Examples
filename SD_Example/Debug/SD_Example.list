
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800902c  0800902c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800902c  0800902c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800902c  0800902c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002348  2000000c  08009040  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20002354  08009040  00022354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178a1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003059  00000000  00000000  000378dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0003a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028294  00000000  00000000  0003c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e2  00000000  00000000  00064684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eab43  00000000  00000000  00077966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001624a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  001624fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ac8 	.word	0x08008ac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008ac8 	.word	0x08008ac8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001da:	f5ad 5dcb 	sub.w	sp, sp, #6496	; 0x1960
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SD_CARD sd;
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "Yet another test"; //file buffer
 80001e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80001e6:	f103 0318 	add.w	r3, r3, #24
 80001ea:	4a6f      	ldr	r2, [pc, #444]	; (80003a8 <main+0x1d0>)
 80001ec:	461c      	mov	r4, r3
 80001ee:	4615      	mov	r5, r2
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	682b      	ldr	r3, [r5, #0]
 80001f6:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[_MAX_SS]; //file read buffer
	uint8_t file_path[50] = "sub_test/stm32.txt";
 80001f8:	f107 0610 	add.w	r6, r7, #16
 80001fc:	3e0c      	subs	r6, #12
 80001fe:	4b6b      	ldr	r3, [pc, #428]	; (80003ac <main+0x1d4>)
 8000200:	4634      	mov	r4, r6
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	682b      	ldr	r3, [r5, #0]
 800020a:	461a      	mov	r2, r3
 800020c:	8022      	strh	r2, [r4, #0]
 800020e:	3402      	adds	r4, #2
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	7023      	strb	r3, [r4, #0]
 8000214:	f106 0313 	add.w	r3, r6, #19
 8000218:	221f      	movs	r2, #31
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f008 fc4b 	bl	8008ab8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fbf0 	bl	8000a06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f8cb 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f971 	bl	8000510 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800022e:	f000 f94f 	bl	80004d0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000232:	f005 f881 	bl	8005338 <MX_FATFS_Init>

/*  if(init_sd(&sd) == -1) {
	  Error_Handler();
*/

  if(init_sd(&sd) != FR_OK) {
 8000236:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800023a:	f103 0314 	add.w	r3, r3, #20
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f9b0 	bl	80005a4 <init_sd>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0x78>
	  Error_Handler();
 800024a:	f000 f9a5 	bl	8000598 <Error_Handler>
 800024e:	e043      	b.n	80002d8 <main+0x100>
  }
  else { //file system already exists, try to open a file

	  bytesread = read_from_file(&sd, file_path, 35);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	3b0c      	subs	r3, #12
 8000256:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 800025a:	f100 0014 	add.w	r0, r0, #20
 800025e:	2223      	movs	r2, #35	; 0x23
 8000260:	4619      	mov	r1, r3
 8000262:	f000 f9df 	bl	8000624 <read_from_file>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800026e:	f103 030c 	add.w	r3, r3, #12
 8000272:	601a      	str	r2, [r3, #0]

	  memcpy(&sd.write_buffer, wtext, sizeof(wtext));
 8000274:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000278:	f103 0314 	add.w	r3, r3, #20
 800027c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000280:	f102 0218 	add.w	r2, r2, #24
 8000284:	f203 541c 	addw	r4, r3, #1308	; 0x51c
 8000288:	4615      	mov	r5, r2
 800028a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028e:	682b      	ldr	r3, [r5, #0]
 8000290:	7023      	strb	r3, [r4, #0]
	  byteswritten = write_to_file(&sd, file_path, sizeof(wtext));
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	3b0c      	subs	r3, #12
 8000298:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 800029c:	f100 0014 	add.w	r0, r0, #20
 80002a0:	2211      	movs	r2, #17
 80002a2:	4619      	mov	r1, r3
 80002a4:	f000 f9f4 	bl	8000690 <write_to_file>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80002b0:	f103 0310 	add.w	r3, r3, #16
 80002b4:	601a      	str	r2, [r3, #0]

	  unmount(&sd);
 80002b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80002ba:	f103 0314 	add.w	r3, r3, #20
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fa6c 	bl	800079c <unmount>

	  //older tests below

	  //open file, create it and write
	  if(f_open(&SDFile, "sub_test/stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 80002c4:	220a      	movs	r2, #10
 80002c6:	493a      	ldr	r1, [pc, #232]	; (80003b0 <main+0x1d8>)
 80002c8:	483a      	ldr	r0, [pc, #232]	; (80003b4 <main+0x1dc>)
 80002ca:	f007 fd01 	bl	8007cd0 <f_open>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <main+0x100>
		  Error_Handler();
 80002d4:	f000 f960 	bl	8000598 <Error_Handler>
		  }
	  }

  	  //write to the text file
  	  sd.res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80002d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80002dc:	f103 0318 	add.w	r3, r3, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff71 	bl	80001c8 <strlen>
 80002e6:	4602      	mov	r2, r0
 80002e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80002ec:	f103 0310 	add.w	r3, r3, #16
 80002f0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80002f4:	f101 0118 	add.w	r1, r1, #24
 80002f8:	482e      	ldr	r0, [pc, #184]	; (80003b4 <main+0x1dc>)
 80002fa:	f008 f814 	bl	8008326 <f_write>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000306:	f103 0314 	add.w	r3, r3, #20
 800030a:	701a      	strb	r2, [r3, #0]
  	  if((byteswritten == 0) || (sd.res != FR_OK)) {
 800030c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000310:	f103 0310 	add.w	r3, r3, #16
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <main+0x150>
 800031a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800031e:	f103 0314 	add.w	r3, r3, #20
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <main+0x156>
  		  Error_Handler();
 8000328:	f000 f936 	bl	8000598 <Error_Handler>
 800032c:	e036      	b.n	800039c <main+0x1c4>
  	  } else {
  		  f_close(&SDFile);
 800032e:	4821      	ldr	r0, [pc, #132]	; (80003b4 <main+0x1dc>)
 8000330:	f008 fa0b 	bl	800874a <f_close>

	  //test read the file
	  f_open(&SDFile, "stm32.txt", FA_READ);
 8000334:	2201      	movs	r2, #1
 8000336:	4920      	ldr	r1, [pc, #128]	; (80003b8 <main+0x1e0>)
 8000338:	481e      	ldr	r0, [pc, #120]	; (80003b4 <main+0x1dc>)
 800033a:	f007 fcc9 	bl	8007cd0 <f_open>
	  memset(rtext, 0, sizeof(rtext));
 800033e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000342:	3b18      	subs	r3, #24
 8000344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f008 fbb4 	bl	8008ab8 <memset>
	  sd.res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000350:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000354:	f103 030c 	add.w	r3, r3, #12
 8000358:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800035c:	3918      	subs	r1, #24
 800035e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000362:	4814      	ldr	r0, [pc, #80]	; (80003b4 <main+0x1dc>)
 8000364:	f007 fe80 	bl	8008068 <f_read>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000370:	f103 0314 	add.w	r3, r3, #20
 8000374:	701a      	strb	r2, [r3, #0]
	  if((bytesread == 0) || (sd.res != FR_OK)) {
 8000376:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800037a:	f103 030c 	add.w	r3, r3, #12
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <main+0x1ba>
 8000384:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000388:	f103 0314 	add.w	r3, r3, #20
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <main+0x1be>
		  Error_Handler();
 8000392:	f000 f901 	bl	8000598 <Error_Handler>
	  }
	  f_close(&SDFile);
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <main+0x1dc>)
 8000398:	f008 f9d7 	bl	800874a <f_close>
	  //expect FR_NO_FILE, functions properly
	  stat_test = f_stat("sub_test/stm31.txt", &stat_test_info);
*/
  }
  //unmount disk
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2100      	movs	r1, #0
 80003a0:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x1e4>)
 80003a2:	f007 fc4f 	bl	8007c44 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <main+0x1ce>
 80003a8:	08008b00 	.word	0x08008b00
 80003ac:	08008b14 	.word	0x08008b14
 80003b0:	08008ae0 	.word	0x08008ae0
 80003b4:	200002ec 	.word	0x200002ec
 80003b8:	08008af4 	.word	0x08008af4
 80003bc:	2000131c 	.word	0x2000131c

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b0b8      	sub	sp, #224	; 0xe0
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003ca:	2244      	movs	r2, #68	; 0x44
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f008 fb72 	bl	8008ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2288      	movs	r2, #136	; 0x88
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f008 fb64 	bl	8008ab8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f0:	2310      	movs	r3, #16
 80003f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f6:	2301      	movs	r3, #1
 80003f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000402:	2360      	movs	r3, #96	; 0x60
 8000404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000408:	2302      	movs	r3, #2
 800040a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800040e:	2301      	movs	r3, #1
 8000410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 800041a:	2310      	movs	r3, #16
 800041c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000420:	2307      	movs	r3, #7
 8000422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000426:	2302      	movs	r3, #2
 8000428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800042c:	2302      	movs	r3, #2
 800042e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fef6 	bl	8001228 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000442:	f000 f8a9 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2303      	movs	r3, #3
 800044e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000464:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fac2 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000476:	f000 f88f 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800047a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800047e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000484:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000486:	2301      	movs	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800048e:	2310      	movs	r3, #16
 8000490:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000492:	2307      	movs	r3, #7
 8000494:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000496:	2304      	movs	r3, #4
 8000498:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800049a:	2302      	movs	r3, #2
 800049c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800049e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 fcaa 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80004b2:	f000 f871 	bl	8000598 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ba:	f000 fe5f 	bl	800117c <HAL_PWREx_ControlVoltageScaling>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80004c4:	f000 f868 	bl	8000598 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	37e0      	adds	r7, #224	; 0xe0
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <MX_SDMMC1_SD_Init+0x3c>)
 80004d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <MX_SDMMC1_SD_Init+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
 // hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  /* USER CODE END SDMMC1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	2000025c 	.word	0x2000025c
 800050c:	40012800 	.word	0x40012800

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_GPIO_Init+0x84>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <MX_GPIO_Init+0x84>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_GPIO_Init+0x84>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_GPIO_Init+0x84>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <MX_GPIO_Init+0x84>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_GPIO_Init+0x84>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_GPIO_Init+0x84>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <MX_GPIO_Init+0x84>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_GPIO_Init+0x84>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 800056e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000578:	2302      	movs	r3, #2
 800057a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f000 fc29 	bl	8000ddc <HAL_GPIO_Init>

}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <init_sd>:
 */

int8_t
init_sd(SD_CARD *sd //SD Card instance
		)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  	 //check that SD Card is slotted correctly
  	 if(!BSP_SD_IsDetected()) {
 80005ac:	f004 ff83 	bl	80054b6 <BSP_SD_IsDetected>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <init_sd+0x18>
  		 return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	e02b      	b.n	8000614 <init_sd+0x70>
  	 }

  	 //instantly mount SD card on startup
  	 sd->res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	4917      	ldr	r1, [pc, #92]	; (800061c <init_sd+0x78>)
 80005c0:	4817      	ldr	r0, [pc, #92]	; (8000620 <init_sd+0x7c>)
 80005c2:	f007 fb3f 	bl	8007c44 <f_mount>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
  	 if(sd->res != FR_OK) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <init_sd+0x38>
  		 return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	e01b      	b.n	8000614 <init_sd+0x70>
  	 }

  	 //initialize R/W buffers
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80005e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 fa65 	bl	8008ab8 <memset>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <init_sd+0x68>
  			 memset(sd->write_buffer, 0, sizeof(sd->write_buffer)) == NULL) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80005fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f008 fa59 	bl	8008ab8 <memset>
 8000606:	4603      	mov	r3, r0
  	 if(memset(sd->read_buffer, 0, sizeof(sd->read_buffer)) == NULL ||
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <init_sd+0x6e>
  		 return -1;
 800060c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000610:	e000      	b.n	8000614 <init_sd+0x70>
  	 }

  	 //return success
  	 return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200002e8 	.word	0x200002e8
 8000620:	2000131c 	.word	0x2000131c

08000624 <read_from_file>:
int32_t
read_from_file(SD_CARD *sd,			//SD card instance
		  uint8_t file_path[50],//path to the file
		  uint16_t read_amount  //amount of bytes to read
		  )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	4613      	mov	r3, r2
 8000630:	80fb      	strh	r3, [r7, #6]

	UINT bytes_read;

	//open file for reading
	sd->res = f_open(&SDFile, (char*)file_path, FA_READ);
 8000632:	2201      	movs	r2, #1
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <read_from_file+0x68>)
 8000638:	f007 fb4a 	bl	8007cd0 <f_open>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	701a      	strb	r2, [r3, #0]
	if(sd->res != FR_OK) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <read_from_file+0x2e>
		return -1;
 800064c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000650:	e018      	b.n	8000684 <read_from_file+0x60>
	}

	//prevent out of range access
	if(f_size(&SDFile) < read_amount) {
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <read_from_file+0x68>)
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	429a      	cmp	r2, r3
 800065a:	d202      	bcs.n	8000662 <read_from_file+0x3e>
		read_amount = f_size(&SDFile);
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <read_from_file+0x68>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	80fb      	strh	r3, [r7, #6]
	}
	//read bytes from file and store them in read buffer
	sd->res = f_read(&SDFile, &sd->read_buffer, read_amount, &bytes_read);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8000668:	88fa      	ldrh	r2, [r7, #6]
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <read_from_file+0x68>)
 8000670:	f007 fcfa 	bl	8008068 <f_read>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <read_from_file+0x68>)
 800067e:	f008 f864 	bl	800874a <f_close>

	return bytes_read;
 8000682:	697b      	ldr	r3, [r7, #20]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200002ec 	.word	0x200002ec

08000690 <write_to_file>:
int32_t
write_to_file(SD_CARD *sd,		 //SD card instance
		   uint8_t file_path[50],//path to the file
		   uint16_t write_amount //amount of bytes to be written
		   )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	4613      	mov	r3, r2
 800069c:	80fb      	strh	r3, [r7, #6]
 800069e:	466b      	mov	r3, sp
 80006a0:	461d      	mov	r5, r3
	UINT bytes_written;
	unsigned char w_str[write_amount+1];
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	1c5c      	adds	r4, r3, #1
 80006a6:	1e63      	subs	r3, r4, #1
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	4623      	mov	r3, r4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f04f 0100 	mov.w	r1, #0
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	00cb      	lsls	r3, r1, #3
 80006bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006c0:	00c2      	lsls	r2, r0, #3
 80006c2:	4623      	mov	r3, r4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f04f 0100 	mov.w	r1, #0
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	00cb      	lsls	r3, r1, #3
 80006d4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006d8:	00c2      	lsls	r2, r0, #3
 80006da:	4623      	mov	r3, r4
 80006dc:	3307      	adds	r3, #7
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	ebad 0d03 	sub.w	sp, sp, r3
 80006e6:	466b      	mov	r3, sp
 80006e8:	3300      	adds	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
	//copy buffer to local array (may need to improve this later)
	memcpy(w_str, &sd->write_buffer, write_amount);
 80006ec:	69b8      	ldr	r0, [r7, #24]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	4619      	mov	r1, r3
 80006f8:	f008 f9d0 	bl	8008a9c <memcpy>

	//check if file exists
	sd->res = f_stat((char*)file_path, &sd->finfo);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3304      	adds	r3, #4
 8000700:	4619      	mov	r1, r3
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f008 f84b 	bl	800879e <f_stat>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	701a      	strb	r2, [r3, #0]

	//adhere to different cases
	switch(sd->res) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <write_to_file+0x8e>
 8000718:	2b04      	cmp	r3, #4
 800071a:	d00a      	beq.n	8000732 <write_to_file+0xa2>
 800071c:	e013      	b.n	8000746 <write_to_file+0xb6>

	case FR_OK:
		//file exists, append to it
		sd->res = f_open(&SDFile, (char*)file_path, FA_OPEN_APPEND | FA_WRITE);
 800071e:	2232      	movs	r2, #50	; 0x32
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	481d      	ldr	r0, [pc, #116]	; (8000798 <write_to_file+0x108>)
 8000724:	f007 fad4 	bl	8007cd0 <f_open>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e013      	b.n	800075a <write_to_file+0xca>
	case FR_NO_FILE:
		//file does not exist, create it
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 8000732:	2206      	movs	r2, #6
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <write_to_file+0x108>)
 8000738:	f007 faca 	bl	8007cd0 <f_open>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e009      	b.n	800075a <write_to_file+0xca>
	default:
		//default case should overwrite to prevent system failure
		sd->res = f_open(&SDFile, (char*)file_path, FA_CREATE_NEW | FA_WRITE);
 8000746:	2206      	movs	r2, #6
 8000748:	68b9      	ldr	r1, [r7, #8]
 800074a:	4813      	ldr	r0, [pc, #76]	; (8000798 <write_to_file+0x108>)
 800074c:	f007 fac0 	bl	8007cd0 <f_open>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	701a      	strb	r2, [r3, #0]
		break;
 8000758:	bf00      	nop
	}

	//prevent out of range access
	if(write_amount > f_size(&SDFile)) {
 800075a:	88fa      	ldrh	r2, [r7, #6]
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <write_to_file+0x108>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d904      	bls.n	800076e <write_to_file+0xde>
		write_amount = f_size(&SDFile) - 1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <write_to_file+0x108>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	b29b      	uxth	r3, r3
 800076a:	3b01      	subs	r3, #1
 800076c:	80fb      	strh	r3, [r7, #6]
	}

	//write to file
	sd->res = f_write(&SDFile, w_str, (UINT)write_amount, (UINT*)&bytes_written);
 800076e:	69b9      	ldr	r1, [r7, #24]
 8000770:	88fa      	ldrh	r2, [r7, #6]
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <write_to_file+0x108>)
 8000778:	f007 fdd5 	bl	8008326 <f_write>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	701a      	strb	r2, [r3, #0]
	f_close(&SDFile);
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <write_to_file+0x108>)
 8000786:	f007 ffe0 	bl	800874a <f_close>

	return bytes_written;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	46ad      	mov	sp, r5
}
 800078e:	4618      	mov	r0, r3
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bdb0      	pop	{r4, r5, r7, pc}
 8000796:	bf00      	nop
 8000798:	200002ec 	.word	0x200002ec

0800079c <unmount>:
 * Unmount SD card
 */
void
unmount(SD_CARD *sd //SD Card instance
		)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	sd->res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <unmount+0x24>)
 80007aa:	f007 fa4b 	bl	8007c44 <f_mount>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000131c 	.word	0x2000131c

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x44>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6613      	str	r3, [r2, #96]	; 0x60
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x44>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <HAL_SD_MspInit+0xc4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d14c      	bne.n	80008c8 <HAL_SD_MspInit+0xbc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000838:	6613      	str	r3, [r2, #96]	; 0x60
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <HAL_SD_MspInit+0xc8>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000876:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000888:	230c      	movs	r3, #12
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <HAL_SD_MspInit+0xcc>)
 8000894:	f000 faa2 	bl	8000ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000898:	2304      	movs	r3, #4
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008a8:	230c      	movs	r3, #12
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <HAL_SD_MspInit+0xd0>)
 80008b4:	f000 fa92 	bl	8000ddc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2031      	movs	r0, #49	; 0x31
 80008be:	f000 fa16 	bl	8000cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008c2:	2031      	movs	r0, #49	; 0x31
 80008c4:	f000 fa2f 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40012800 	.word	0x40012800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000800 	.word	0x48000800
 80008dc:	48000c00 	.word	0x48000c00

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f8c0 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <SDMMC1_IRQHandler+0x10>)
 800093a:	f003 f9c3 	bl	8003cc4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000025c 	.word	0x2000025c

08000948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <SystemInit+0x64>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <SystemInit+0x64>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <SystemInit+0x68>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <SystemInit+0x68>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <SystemInit+0x68>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <SystemInit+0x68>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <SystemInit+0x68>)
 8000974:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000978:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800097c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <SystemInit+0x68>)
 8000980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000984:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SystemInit+0x68>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <SystemInit+0x68>)
 800098c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000990:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SystemInit+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SystemInit+0x64>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099e:	609a      	str	r2, [r3, #8]
#endif
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	40021000 	.word	0x40021000

080009b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b8:	f7ff ffc6 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
	ldr	r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <LoopForever+0x16>)
	cmp	r2, r3
 80009de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f008 f837 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e6:	f7ff fbf7 	bl	80001d8 <main>

080009ea <LoopForever>:

LoopForever:
    b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009f0:	08009034 	.word	0x08009034
	ldr	r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009f8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a00:	20002354 	.word	0x20002354

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>

08000a06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f961 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f80e 	bl	8000a38 <HAL_InitTick>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e001      	b.n	8000a2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a28:	f7ff fecc 	bl	80007c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d023      	beq.n	8000a94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_InitTick+0x70>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_InitTick+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f96d 	bl	8000d42 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10f      	bne.n	8000a8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d809      	bhi.n	8000a88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	f000 f937 	bl	8000cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_InitTick+0x74>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e007      	b.n	8000a98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e004      	b.n	8000a98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e001      	b.n	8000a98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200002e0 	.word	0x200002e0

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200002e0 	.word	0x200002e0

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d005      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2204      	movs	r2, #4
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e029      	b.n	8000dd2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 020e 	bic.w	r2, r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f003 021c 	and.w	r2, r3, #28
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
    }
  }
  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e17f      	b.n	80010ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8171 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x128>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80ac 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	; (800110c <HAL_GPIO_Init+0x330>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a5e      	ldr	r2, [pc, #376]	; (800110c <HAL_GPIO_Init+0x330>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	; (800110c <HAL_GPIO_Init+0x330>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa6:	4a5a      	ldr	r2, [pc, #360]	; (8001110 <HAL_GPIO_Init+0x334>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x242>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_Init+0x338>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_GPIO_Init+0x33c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_GPIO_Init+0x340>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_GPIO_Init+0x344>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <HAL_GPIO_Init+0x348>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x34c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x22a>
 8001002:	2306      	movs	r3, #6
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001006:	2307      	movs	r3, #7
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101e:	2300      	movs	r3, #0
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001030:	4937      	ldr	r1, [pc, #220]	; (8001110 <HAL_GPIO_Init+0x334>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_GPIO_Init+0x350>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <HAL_GPIO_Init+0x350>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_GPIO_Init+0x350>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_GPIO_Init+0x350>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_GPIO_Init+0x350>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_GPIO_Init+0x350>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_GPIO_Init+0x350>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_GPIO_Init+0x350>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae78 	bne.w	8000dec <HAL_GPIO_Init+0x10>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_PWREx_GetVoltageRange+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40007000 	.word	0x40007000

0800117c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118a:	d130      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001198:	d038      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2232      	movs	r2, #50	; 0x32
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c0:	e002      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d4:	d102      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f2      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e8:	d110      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e00f      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d007      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001204:	4a05      	ldr	r2, [pc, #20]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e3d4      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123a:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001244:	4b9e      	ldr	r3, [pc, #632]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80e4 	beq.w	8001424 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_RCC_OscConfig+0x4a>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	f040 808b 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 8087 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001272:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x62>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e3ac      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_RCC_OscConfig+0x7c>
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a2:	e005      	b.n	80012b0 <HAL_RCC_OscConfig+0x88>
 80012a4:	4b86      	ldr	r3, [pc, #536]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d223      	bcs.n	80012fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd41 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e38d      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	4b7d      	ldr	r3, [pc, #500]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a7c      	ldr	r2, [pc, #496]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4977      	ldr	r1, [pc, #476]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4972      	ldr	r1, [pc, #456]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e025      	b.n	8001348 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	496a      	ldr	r1, [pc, #424]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131a:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4965      	ldr	r1, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd01 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e34d      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001348:	f000 fc36 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	495a      	ldr	r1, [pc, #360]	; (80014c4 <HAL_RCC_OscConfig+0x29c>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_RCC_OscConfig+0x2a0>)
 8001366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001368:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HAL_RCC_OscConfig+0x2a4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb63 	bl	8000a38 <HAL_InitTick>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d052      	beq.n	8001422 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	e331      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d032      	beq.n	80013ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001394:	f7ff fba0 	bl	8000ad8 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139c:	f7ff fb9c 	bl	8000ad8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e31a      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a40      	ldr	r2, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	493b      	ldr	r1, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	4936      	ldr	r1, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e01a      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb6d 	bl	8000ad8 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fb69 	bl	8000ad8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e2e7      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x1da>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001422:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d074      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x21a>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d10e      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d064      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d160      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e2c4      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x24a>
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e01d      	b.n	80014ae <HAL_RCC_OscConfig+0x286>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x26e>
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x286>
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_RCC_OscConfig+0x298>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb0f 	bl	8000ad8 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08008b90 	.word	0x08008b90
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb02 	bl	8000ad8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e280      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4baf      	ldr	r3, [pc, #700]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2a8>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff faf2 	bl	8000ad8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff faee 	bl	8000ad8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e26c      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4ba5      	ldr	r3, [pc, #660]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d0>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d060      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x310>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d119      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e249      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b93      	ldr	r3, [pc, #588]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4990      	ldr	r1, [pc, #576]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a8b      	ldr	r2, [pc, #556]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff faad 	bl	8000ad8 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff faa9 	bl	8000ad8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e227      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	497c      	ldr	r1, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a79      	ldr	r2, [pc, #484]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa89 	bl	8000ad8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fa85 	bl	8000ad8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e203      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fa64 	bl	8000ad8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fa60 	bl	8000ad8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1de      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x3ec>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa47 	bl	8000ad8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa43 	bl	8000ad8 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1c1      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b44      	ldr	r3, [pc, #272]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a43      	ldr	r2, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_OscConfig+0x57c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d118      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_RCC_OscConfig+0x57c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a3a      	ldr	r2, [pc, #232]	; (80017a4 <HAL_RCC_OscConfig+0x57c>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa0a 	bl	8000ad8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff fa06 	bl	8000ad8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e184      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x57c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d8>
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fe:	e024      	b.n	800174a <HAL_RCC_OscConfig+0x522>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d110      	bne.n	800172a <HAL_RCC_OscConfig+0x502>
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	e00f      	b.n	800174a <HAL_RCC_OscConfig+0x522>
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 800173c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d016      	beq.n	8001780 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff f9c1 	bl	8000ad8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f9bd 	bl	8000ad8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e139      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x578>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ed      	beq.n	800175a <HAL_RCC_OscConfig+0x532>
 800177e:	e01a      	b.n	80017b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff f9aa 	bl	8000ad8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001786:	e00f      	b.n	80017a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff f9a6 	bl	8000ad8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d906      	bls.n	80017a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e122      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b90      	ldr	r3, [pc, #576]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e8      	bne.n	8001788 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	4a8a      	ldr	r2, [pc, #552]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8108 	beq.w	80019e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 80d0 	bne.w	800197c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017dc:	4b83      	ldr	r3, [pc, #524]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d130      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	3b01      	subs	r3, #1
 80017fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d127      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d11f      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800181c:	2a07      	cmp	r2, #7
 800181e:	bf14      	ite	ne
 8001820:	2201      	movne	r2, #1
 8001822:	2200      	moveq	r2, #0
 8001824:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d06e      	beq.n	8001930 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d069      	beq.n	800192c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001864:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b7      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001874:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800187a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001880:	f7ff f92a 	bl	8000ad8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f926 	bl	8000ad8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0a4      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b51      	ldr	r3, [pc, #324]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <HAL_RCC_OscConfig+0x7c8>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018b6:	3a01      	subs	r2, #1
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c0:	0212      	lsls	r2, r2, #8
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018c8:	0852      	lsrs	r2, r2, #1
 80018ca:	3a01      	subs	r2, #1
 80018cc:	0552      	lsls	r2, r2, #21
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018d4:	0852      	lsrs	r2, r2, #1
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0652      	lsls	r2, r2, #25
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	0912      	lsrs	r2, r2, #4
 80018e2:	0452      	lsls	r2, r2, #17
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4941      	ldr	r1, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001904:	f7ff f8e8 	bl	8000ad8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f8e4 	bl	8000ad8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e062      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192a:	e05a      	b.n	80019e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e059      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d152      	bne.n	80019e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a27      	ldr	r2, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001954:	f7ff f8c0 	bl	8000ad8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f8bc 	bl	8000ad8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e03a      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x734>
 800197a:	e032      	b.n	80019e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d02d      	beq.n	80019de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80019a0:	f023 0303 	bic.w	r3, r3, #3
 80019a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80019ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f88f 	bl	8000ad8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f88b 	bl	8000ad8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e009      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x796>
 80019dc:	e001      	b.n	80019e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	f99d808c 	.word	0xf99d808c

080019f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0c8      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b66      	ldr	r3, [pc, #408]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4961      	ldr	r1, [pc, #388]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b0      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d04c      	beq.n	8001ade <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d121      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e09e      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d115      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e092      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e086      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e07e      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 0203 	bic.w	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	493f      	ldr	r1, [pc, #252]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aae:	f7ff f813 	bl	8000ad8 <HAL_GetTick>
 8001ab2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab6:	f7ff f80f 	bl	8000ad8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e066      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 020c 	and.w	r2, r3, #12
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d1eb      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	492c      	ldr	r1, [pc, #176]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d210      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4924      	ldr	r1, [pc, #144]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e036      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4918      	ldr	r1, [pc, #96]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4910      	ldr	r1, [pc, #64]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b6a:	f000 f825 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	490c      	ldr	r1, [pc, #48]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	5ccb      	ldrb	r3, [r1, r3]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ff52 	bl	8000a38 <HAL_InitTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b98:	7afb      	ldrb	r3, [r7, #11]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08008b90 	.word	0x08008b90
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x34>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d11e      	bne.n	8001c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bec:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e005      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c14:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10d      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e004      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d134      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d003      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xac>
 8001c5c:	e005      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c60:	617b      	str	r3, [r7, #20]
      break;
 8001c62:	e005      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	617b      	str	r3, [r7, #20]
      break;
 8001c68:	e002      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	617b      	str	r3, [r7, #20]
      break;
 8001c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	fb02 f203 	mul.w	r2, r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	0e5b      	lsrs	r3, r3, #25
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08008ba8 	.word	0x08008ba8
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4904      	ldr	r1, [pc, #16]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08008ba0 	.word	0x08008ba0

08001d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d18:	f7ff ffda 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0adb      	lsrs	r3, r3, #11
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4904      	ldr	r1, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08008ba0 	.word	0x08008ba0

08001d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d58:	f7ff fa02 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001d5c:	6178      	str	r0, [r7, #20]
 8001d5e:	e014      	b.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d78:	f7ff f9f2 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d90:	d10b      	bne.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d919      	bls.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d9c:	d902      	bls.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d9e:	2302      	movs	r3, #2
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e013      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e010      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d902      	bls.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db0:	2303      	movs	r3, #3
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e00a      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b80      	cmp	r3, #128	; 0x80
 8001dba:	d102      	bne.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e004      	b.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b70      	cmp	r3, #112	; 0x70
 8001dc6:	d101      	bne.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc8:	2301      	movs	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4909      	ldr	r1, [pc, #36]	; (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d041      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e24:	d02a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e2a:	d824      	bhi.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e30:	d008      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e36:	d81e      	bhi.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e40:	d010      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e42:	e018      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e44:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a85      	ldr	r2, [pc, #532]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e50:	e015      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 f825 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e62:	e00c      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3320      	adds	r3, #32
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f910 	bl	8003090 <RCCEx_PLLSAI2_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e74:	e003      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	74fb      	strb	r3, [r7, #19]
      break;
 8001e7a:	e000      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e7e:	7cfb      	ldrb	r3, [r7, #19]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e84:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e92:	4973      	ldr	r1, [pc, #460]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e9a:	e001      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d041      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eb4:	d02a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eba:	d824      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ec6:	d81e      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a61      	ldr	r2, [pc, #388]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee0:	e015      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 ffdd 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef2:	e00c      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3320      	adds	r3, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 f8c8 	bl	8003090 <RCCEx_PLLSAI2_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f04:	e003      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0a:	e000      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f14:	4b52      	ldr	r3, [pc, #328]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f22:	494f      	ldr	r1, [pc, #316]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f2a:	e001      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a0 	beq.w	800207e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	4a40      	ldr	r2, [pc, #256]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	; 0x58
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f80:	f7fe fdaa 	bl	8000ad8 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f86:	e009      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7fe fda6 	bl	8000ad8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d902      	bls.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	74fb      	strb	r3, [r7, #19]
        break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ef      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d15c      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01f      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d019      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fd65 	bl	8000ad8 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002010:	e00b      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fd61 	bl	8000ad8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d902      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	74fb      	strb	r3, [r7, #19]
            break;
 8002028:	e006      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ec      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800204e:	4904      	ldr	r1, [pc, #16]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002056:	e009      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
 800205c:	e006      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206c:	7c7b      	ldrb	r3, [r7, #17]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a9d      	ldr	r2, [pc, #628]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208a:	4b98      	ldr	r3, [pc, #608]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f023 0203 	bic.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	4994      	ldr	r1, [pc, #592]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ac:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 020c 	bic.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	498c      	ldr	r1, [pc, #560]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4983      	ldr	r1, [pc, #524]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f0:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	497b      	ldr	r1, [pc, #492]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	4972      	ldr	r1, [pc, #456]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002134:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	496a      	ldr	r1, [pc, #424]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002164:	4961      	ldr	r1, [pc, #388]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002178:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	4959      	ldr	r1, [pc, #356]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219a:	4b54      	ldr	r3, [pc, #336]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a8:	4950      	ldr	r1, [pc, #320]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	4948      	ldr	r1, [pc, #288]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	493f      	ldr	r1, [pc, #252]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d028      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221e:	d106      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222a:	60d3      	str	r3, [r2, #12]
 800222c:	e011      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002236:	d10c      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fe32 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	491f      	ldr	r1, [pc, #124]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227c:	d106      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002288:	60d3      	str	r3, [r2, #12]
 800228a:	e011      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fe03 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02b      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022da:	d109      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a02      	ldr	r2, [pc, #8]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
 80022e8:	e014      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fdd1 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232e:	4928      	ldr	r1, [pc, #160]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233e:	d10d      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fdae 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	74bb      	strb	r3, [r7, #18]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	2102      	movs	r1, #2
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe8f 	bl	8003090 <RCCEx_PLLSAI2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800239a:	490d      	ldr	r1, [pc, #52]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023be:	4904      	ldr	r1, [pc, #16]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e6:	d13e      	bne.n	8002466 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80023e8:	4bbe      	ldr	r3, [pc, #760]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023fa:	d028      	beq.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002402:	f200 853e 	bhi.w	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d005      	beq.n	800241a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	d00e      	beq.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002416:	f000 bd34 	b.w	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800241a:	4bb2      	ldr	r3, [pc, #712]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b02      	cmp	r3, #2
 8002426:	f040 852e 	bne.w	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800242a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800242e:	61fb      	str	r3, [r7, #28]
      break;
 8002430:	f000 bd29 	b.w	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002434:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	f040 8523 	bne.w	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002444:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002448:	61fb      	str	r3, [r7, #28]
      break;
 800244a:	f000 bd1e 	b.w	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800244e:	4ba5      	ldr	r3, [pc, #660]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800245a:	f040 8518 	bne.w	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800245e:	4ba2      	ldr	r3, [pc, #648]	; (80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002460:	61fb      	str	r3, [r7, #28]
      break;
 8002462:	f000 bd14 	b.w	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002466:	4b9f      	ldr	r3, [pc, #636]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d036      	beq.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d840      	bhi.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d003      	beq.n	800248a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d020      	beq.n	80024ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002488:	e039      	b.n	80024fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800248a:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d116      	bne.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002496:	4b93      	ldr	r3, [pc, #588]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	e005      	b.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80024ae:	4b8d      	ldr	r3, [pc, #564]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4a8c      	ldr	r2, [pc, #560]	; (80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80024c2:	e01f      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
      break;
 80024c8:	e01c      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d102      	bne.n	80024de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80024d8:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80024da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80024dc:	e012      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
      break;
 80024e2:	e00f      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f0:	d102      	bne.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80024f2:	4b80      	ldr	r3, [pc, #512]	; (80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 80024f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80024f6:	e005      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
      break;
 80024fc:	e002      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
      break;
 8002502:	bf00      	nop
    }

    switch(PeriphClk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250a:	f000 80d2 	beq.w	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002514:	f200 84bd 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800251e:	f000 80c8 	beq.w	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002528:	f200 84b3 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002532:	f000 835b 	beq.w	8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	f200 84a9 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002546:	f000 847f 	beq.w	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002550:	f200 849f 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255a:	f000 82ce 	beq.w	8002afa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002564:	f200 8495 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	f000 80a0 	beq.w	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	f200 848b 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	f000 808f 	beq.w	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258c:	f200 8481 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002596:	d07e      	beq.n	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259e:	f200 8478 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	f000 8404 	beq.w	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	f200 846e 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	f000 83b0 	beq.w	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c6:	f200 8464 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	f000 837a 	beq.w	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	f200 845a 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	f000 8345 	beq.w	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	f200 8452 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d84b      	bhi.n	800268c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 844b 	beq.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	2b1f      	cmp	r3, #31
 8002602:	f200 8446 	bhi.w	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	080027f7 	.word	0x080027f7
 8002610:	08002867 	.word	0x08002867
 8002614:	08002e93 	.word	0x08002e93
 8002618:	080028fb 	.word	0x080028fb
 800261c:	08002e93 	.word	0x08002e93
 8002620:	08002e93 	.word	0x08002e93
 8002624:	08002e93 	.word	0x08002e93
 8002628:	08002973 	.word	0x08002973
 800262c:	08002e93 	.word	0x08002e93
 8002630:	08002e93 	.word	0x08002e93
 8002634:	08002e93 	.word	0x08002e93
 8002638:	08002e93 	.word	0x08002e93
 800263c:	08002e93 	.word	0x08002e93
 8002640:	08002e93 	.word	0x08002e93
 8002644:	08002e93 	.word	0x08002e93
 8002648:	080029f7 	.word	0x080029f7
 800264c:	08002e93 	.word	0x08002e93
 8002650:	08002e93 	.word	0x08002e93
 8002654:	08002e93 	.word	0x08002e93
 8002658:	08002e93 	.word	0x08002e93
 800265c:	08002e93 	.word	0x08002e93
 8002660:	08002e93 	.word	0x08002e93
 8002664:	08002e93 	.word	0x08002e93
 8002668:	08002e93 	.word	0x08002e93
 800266c:	08002e93 	.word	0x08002e93
 8002670:	08002e93 	.word	0x08002e93
 8002674:	08002e93 	.word	0x08002e93
 8002678:	08002e93 	.word	0x08002e93
 800267c:	08002e93 	.word	0x08002e93
 8002680:	08002e93 	.word	0x08002e93
 8002684:	08002e93 	.word	0x08002e93
 8002688:	08002a79 	.word	0x08002a79
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	f000 82bd 	beq.w	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002694:	e3fd      	b.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800269c:	f000 fdd6 	bl	800324c <RCCEx_GetSAIxPeriphCLKFreq>
 80026a0:	61f8      	str	r0, [r7, #28]
      break;
 80026a2:	e3f7      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80026a4:	69b9      	ldr	r1, [r7, #24]
 80026a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026aa:	f000 fdcf 	bl	800324c <RCCEx_GetSAIxPeriphCLKFreq>
 80026ae:	61f8      	str	r0, [r7, #28]
      break;
 80026b0:	e3f0      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80026c4:	d018      	beq.n	80026f8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80026cc:	f200 808b 	bhi.w	80027e6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d6:	d059      	beq.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026de:	d028      	beq.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 80026e0:	e081      	b.n	80027e6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	0003d090 	.word	0x0003d090
 80026ec:	08008ba8 	.word	0x08008ba8
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80026f8:	4bae      	ldr	r3, [pc, #696]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d172      	bne.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002704:	4bab      	ldr	r3, [pc, #684]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002710:	4ba8      	ldr	r3, [pc, #672]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	e005      	b.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800271c:	4ba5      	ldr	r3, [pc, #660]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	4aa3      	ldr	r2, [pc, #652]	; (80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61fb      	str	r3, [r7, #28]
          break;
 8002730:	e05b      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002732:	4ba0      	ldr	r3, [pc, #640]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273e:	d156      	bne.n	80027ee <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002740:	4b9c      	ldr	r3, [pc, #624]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800274c:	d14f      	bne.n	80027ee <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800274e:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	fb02 f203 	mul.w	r2, r2, r3
 8002762:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	3301      	adds	r3, #1
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002774:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0d5b      	lsrs	r3, r3, #21
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	61fb      	str	r3, [r7, #28]
          break;
 800278a:	e030      	b.n	80027ee <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800278c:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002798:	d12b      	bne.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800279a:	4b86      	ldr	r3, [pc, #536]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a6:	d124      	bne.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80027a8:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	fb02 f203 	mul.w	r2, r2, r3
 80027bc:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	3301      	adds	r3, #1
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80027ce:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	0d5b      	lsrs	r3, r3, #21
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	3301      	adds	r3, #1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	61fb      	str	r3, [r7, #28]
          break;
 80027e4:	e005      	b.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 80027e6:	bf00      	nop
 80027e8:	e354      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80027ea:	bf00      	nop
 80027ec:	e352      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80027ee:	bf00      	nop
 80027f0:	e350      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80027f2:	bf00      	nop
        break;
 80027f4:	e34e      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d828      	bhi.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002821 	.word	0x08002821
 8002814:	08002829 	.word	0x08002829
 8002818:	08002831 	.word	0x08002831
 800281c:	08002845 	.word	0x08002845
          frequency = HAL_RCC_GetPCLK2Freq();
 8002820:	f7ff fa78 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002824:	61f8      	str	r0, [r7, #28]
          break;
 8002826:	e01d      	b.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002828:	f7ff f9c6 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 800282c:	61f8      	str	r0, [r7, #28]
          break;
 800282e:	e019      	b.n	8002864 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002830:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d10f      	bne.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 800283e:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002840:	61fb      	str	r3, [r7, #28]
          break;
 8002842:	e00c      	b.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002844:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	61fb      	str	r3, [r7, #28]
          break;
 8002858:	e003      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 800285a:	bf00      	nop
 800285c:	e31a      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800285e:	bf00      	nop
 8002860:	e318      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002862:	bf00      	nop
        break;
 8002864:	e316      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d83a      	bhi.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002878:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	080028b5 	.word	0x080028b5
 8002884:	080028ef 	.word	0x080028ef
 8002888:	080028ef 	.word	0x080028ef
 800288c:	080028ef 	.word	0x080028ef
 8002890:	080028bd 	.word	0x080028bd
 8002894:	080028ef 	.word	0x080028ef
 8002898:	080028ef 	.word	0x080028ef
 800289c:	080028ef 	.word	0x080028ef
 80028a0:	080028c5 	.word	0x080028c5
 80028a4:	080028ef 	.word	0x080028ef
 80028a8:	080028ef 	.word	0x080028ef
 80028ac:	080028ef 	.word	0x080028ef
 80028b0:	080028d9 	.word	0x080028d9
          frequency = HAL_RCC_GetPCLK1Freq();
 80028b4:	f7ff fa18 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 80028b8:	61f8      	str	r0, [r7, #28]
          break;
 80028ba:	e01d      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 80028bc:	f7ff f97c 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 80028c0:	61f8      	str	r0, [r7, #28]
          break;
 80028c2:	e019      	b.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80028d4:	61fb      	str	r3, [r7, #28]
          break;
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d107      	bne.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 80028e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ea:	61fb      	str	r3, [r7, #28]
          break;
 80028ec:	e003      	b.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 80028ee:	bf00      	nop
 80028f0:	e2d0      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80028f2:	bf00      	nop
 80028f4:	e2ce      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80028f6:	bf00      	nop
        break;
 80028f8:	e2cc      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d021      	beq.n	8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	d829      	bhi.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b20      	cmp	r3, #32
 8002916:	d011      	beq.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b20      	cmp	r3, #32
 800291c:	d823      	bhi.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b10      	cmp	r3, #16
 8002928:	d004      	beq.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 800292a:	e01c      	b.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff f9dc 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002930:	61f8      	str	r0, [r7, #28]
          break;
 8002932:	e01d      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002934:	f7ff f940 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002938:	61f8      	str	r0, [r7, #28]
          break;
 800293a:	e019      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002948:	d10f      	bne.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800294c:	61fb      	str	r3, [r7, #28]
          break;
 800294e:	e00c      	b.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 800295e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002962:	61fb      	str	r3, [r7, #28]
          break;
 8002964:	e003      	b.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002966:	bf00      	nop
 8002968:	e294      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800296a:	bf00      	nop
 800296c:	e292      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800296e:	bf00      	nop
        break;
 8002970:	e290      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2bc0      	cmp	r3, #192	; 0xc0
 8002982:	d027      	beq.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2bc0      	cmp	r3, #192	; 0xc0
 8002988:	d82f      	bhi.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d017      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b80      	cmp	r3, #128	; 0x80
 8002994:	d829      	bhi.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d004      	beq.n	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 80029a2:	e022      	b.n	80029ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff f9a0 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 80029a8:	61f8      	str	r0, [r7, #28]
          break;
 80029aa:	e023      	b.n	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 80029ac:	f7ff f904 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 80029b0:	61f8      	str	r0, [r7, #28]
          break;
 80029b2:	e01f      	b.n	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08008ba8 	.word	0x08008ba8
 80029bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4ba9      	ldr	r3, [pc, #676]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d10f      	bne.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 80029ce:	4ba7      	ldr	r3, [pc, #668]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80029d0:	61fb      	str	r3, [r7, #28]
          break;
 80029d2:	e00c      	b.n	80029ee <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80029d4:	4ba4      	ldr	r3, [pc, #656]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 80029e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e6:	61fb      	str	r3, [r7, #28]
          break;
 80029e8:	e003      	b.n	80029f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 80029ea:	bf00      	nop
 80029ec:	e252      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029ee:	bf00      	nop
 80029f0:	e250      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029f2:	bf00      	nop
        break;
 80029f4:	e24e      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80029f6:	4b9c      	ldr	r3, [pc, #624]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a08:	d025      	beq.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a10:	d82c      	bhi.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d013      	beq.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a20:	d824      	bhi.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d004      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8002a30:	e01c      	b.n	8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002a32:	f7ff f959 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002a36:	61f8      	str	r0, [r7, #28]
          break;
 8002a38:	e01d      	b.n	8002a76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a3a:	f7ff f8bd 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002a3e:	61f8      	str	r0, [r7, #28]
          break;
 8002a40:	e019      	b.n	8002a76 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d10f      	bne.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8002a50:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002a52:	61fb      	str	r3, [r7, #28]
          break;
 8002a54:	e00c      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a56:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d107      	bne.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8002a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a68:	61fb      	str	r3, [r7, #28]
          break;
 8002a6a:	e003      	b.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8002a6c:	bf00      	nop
 8002a6e:	e211      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a70:	bf00      	nop
 8002a72:	e20f      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a74:	bf00      	nop
        break;
 8002a76:	e20d      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002a78:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a8a:	d025      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a92:	d82c      	bhi.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa2:	d824      	bhi.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 8002ab2:	e01c      	b.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f7ff f918 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002ab8:	61f8      	str	r0, [r7, #28]
          break;
 8002aba:	e01d      	b.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8002abc:	f7ff f87c 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002ac0:	61f8      	str	r0, [r7, #28]
          break;
 8002ac2:	e019      	b.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 8002ad2:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002ad4:	61fb      	str	r3, [r7, #28]
          break;
 8002ad6:	e00c      	b.n	8002af2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ad8:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8002ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aea:	61fb      	str	r3, [r7, #28]
          break;
 8002aec:	e003      	b.n	8002af6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8002aee:	bf00      	nop
 8002af0:	e1d0      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002af2:	bf00      	nop
 8002af4:	e1ce      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002af6:	bf00      	nop
        break;
 8002af8:	e1cc      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002afa:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b0c:	d00c      	beq.n	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b14:	d864      	bhi.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d030      	beq.n	8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8002b26:	e05b      	b.n	8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b28:	f7ff f846 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002b2c:	61f8      	str	r0, [r7, #28]
          break;
 8002b2e:	e05c      	b.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002b30:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d152      	bne.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04c      	beq.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b54:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	fb02 f203 	mul.w	r2, r2, r3
 8002b5e:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	3301      	adds	r3, #1
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	61fb      	str	r3, [r7, #28]
          break;
 8002b86:	e02d      	b.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d128      	bne.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d022      	beq.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	fb02 f203 	mul.w	r2, r2, r3
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	0e5b      	lsrs	r3, r3, #25
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	61fb      	str	r3, [r7, #28]
          break;
 8002bde:	e003      	b.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 8002be0:	bf00      	nop
 8002be2:	e157      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002be4:	bf00      	nop
 8002be6:	e155      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002be8:	bf00      	nop
        break;
 8002bea:	e153      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002bfe:	f7ff f889 	bl	8001d14 <HAL_RCC_GetPCLK2Freq>
 8002c02:	61f8      	str	r0, [r7, #28]
        break;
 8002c04:	e146      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c06:	f7fe ffd7 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002c0a:	61f8      	str	r0, [r7, #28]
        break;
 8002c0c:	e142      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002c0e:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c20:	d013      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d819      	bhi.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d004      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8002c38:	e011      	b.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff f855 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002c3e:	61f8      	str	r0, [r7, #28]
          break;
 8002c40:	e010      	b.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c42:	f7fe ffb9 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002c46:	61f8      	str	r0, [r7, #28]
          break;
 8002c48:	e00c      	b.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d104      	bne.n	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002c5a:	61fb      	str	r3, [r7, #28]
          break;
 8002c5c:	e001      	b.n	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8002c5e:	bf00      	nop
 8002c60:	e118      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c62:	bf00      	nop
        break;
 8002c64:	e116      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002c70:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c82:	d013      	beq.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	d819      	bhi.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c98:	d004      	beq.n	8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f7ff f824 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	61f8      	str	r0, [r7, #28]
          break;
 8002ca2:	e010      	b.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ca4:	f7fe ff88 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002ca8:	61f8      	str	r0, [r7, #28]
          break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cac:	4b7c      	ldr	r3, [pc, #496]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb8:	d104      	bne.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002cba:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002cbc:	61fb      	str	r3, [r7, #28]
          break;
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8002cc0:	bf00      	nop
 8002cc2:	e0e7      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002cc4:	bf00      	nop
        break;
 8002cc6:	e0e5      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cda:	d013      	beq.n	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce2:	d819      	bhi.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d004      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 8002cf2:	e011      	b.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7fe fff8 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	61f8      	str	r0, [r7, #28]
          break;
 8002cfa:	e010      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002cfc:	f7fe ff5c 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8002d00:	61f8      	str	r0, [r7, #28]
          break;
 8002d02:	e00c      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d104      	bne.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002d14:	61fb      	str	r3, [r7, #28]
          break;
 8002d16:	e001      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8002d18:	bf00      	nop
 8002d1a:	e0bb      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002d1c:	bf00      	nop
        break;
 8002d1e:	e0b9      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002d20:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d32:	d02c      	beq.n	8002d8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d3a:	d833      	bhi.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d42:	d01a      	beq.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d4a:	d82b      	bhi.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	d004      	beq.n	8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8002d5a:	e023      	b.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7fe ffc4 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002d60:	61f8      	str	r0, [r7, #28]
          break;
 8002d62:	e026      	b.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002d64:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d11a      	bne.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8002d72:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002d76:	61fb      	str	r3, [r7, #28]
          break;
 8002d78:	e016      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d7a:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d111      	bne.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002d8a:	61fb      	str	r3, [r7, #28]
          break;
 8002d8c:	e00e      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8002d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da0:	61fb      	str	r3, [r7, #28]
          break;
 8002da2:	e005      	b.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8002da4:	bf00      	nop
 8002da6:	e075      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002da8:	bf00      	nop
 8002daa:	e073      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002dac:	bf00      	nop
 8002dae:	e071      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002db0:	bf00      	nop
        break;
 8002db2:	e06f      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dc6:	d02c      	beq.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dce:	d833      	bhi.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd6:	d01a      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dde:	d82b      	bhi.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dec:	d004      	beq.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8002dee:	e023      	b.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7fe ff7a 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002df4:	61f8      	str	r0, [r7, #28]
          break;
 8002df6:	e026      	b.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8002e06:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002e0a:	61fb      	str	r3, [r7, #28]
          break;
 8002e0c:	e016      	b.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d111      	bne.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002e1e:	61fb      	str	r3, [r7, #28]
          break;
 8002e20:	e00e      	b.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8002e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e34:	61fb      	str	r3, [r7, #28]
          break;
 8002e36:	e005      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8002e38:	bf00      	nop
 8002e3a:	e02b      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e3c:	bf00      	nop
 8002e3e:	e029      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e40:	bf00      	nop
 8002e42:	e027      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e44:	bf00      	nop
        break;
 8002e46:	e025      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d004      	beq.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8002e62:	e00d      	b.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e64:	f7fe ff40 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8002e68:	61f8      	str	r0, [r7, #28]
          break;
 8002e6a:	e009      	b.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e78:	d101      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002e7c:	61fb      	str	r3, [r7, #28]
          break;
 8002e7e:	bf00      	nop
        break;
 8002e80:	e008      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002e82:	bf00      	nop
 8002e84:	e006      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002e86:	bf00      	nop
 8002e88:	e004      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e002      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e000      	b.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8002e92:	bf00      	nop
    }
  }

  return(frequency);
 8002e94:	69fb      	ldr	r3, [r7, #28]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	00f42400 	.word	0x00f42400

08002ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb6:	4b75      	ldr	r3, [pc, #468]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec2:	4b72      	ldr	r3, [pc, #456]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10d      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eda:	4b6c      	ldr	r3, [pc, #432]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d047      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e044      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d018      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0x86>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d825      	bhi.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0x62>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d009      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x74>
 8002f08:	e020      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e01a      	b.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f1c:	4b5b      	ldr	r3, [pc, #364]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2c:	e013      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4a:	e006      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e004      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	430b      	orrs	r3, r1
 8002f78:	4944      	ldr	r1, [pc, #272]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d17d      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a40      	ldr	r2, [pc, #256]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fd fda2 	bl	8000ad8 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f96:	e009      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f98:	f7fd fd9e 	bl	8000ad8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8002faa:	e005      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ef      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d160      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	0912      	lsrs	r2, r2, #4
 8002fdc:	0452      	lsls	r2, r2, #17
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	492a      	ldr	r1, [pc, #168]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	610b      	str	r3, [r1, #16]
 8002fe6:	e027      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d112      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fee:	4b27      	ldr	r3, [pc, #156]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ff6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	0211      	lsls	r1, r2, #8
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6912      	ldr	r2, [r2, #16]
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	3a01      	subs	r2, #1
 8003008:	0552      	lsls	r2, r2, #21
 800300a:	430a      	orrs	r2, r1
 800300c:	491f      	ldr	r1, [pc, #124]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	610b      	str	r3, [r1, #16]
 8003012:	e011      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800301c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6952      	ldr	r2, [r2, #20]
 800302a:	0852      	lsrs	r2, r2, #1
 800302c:	3a01      	subs	r2, #1
 800302e:	0652      	lsls	r2, r2, #25
 8003030:	430a      	orrs	r2, r1
 8003032:	4916      	ldr	r1, [pc, #88]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fd fd48 	bl	8000ad8 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304a:	e009      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304c:	f7fd fd44 	bl	8000ad8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	73fb      	strb	r3, [r7, #15]
          break;
 800305e:	e005      	b.n	800306c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ef      	beq.n	800304c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	4904      	ldr	r1, [pc, #16]	; (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030aa:	4b67      	ldr	r3, [pc, #412]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0203 	and.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d10d      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
       ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
       ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d047      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	e044      	b.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d018      	beq.n	8003116 <RCCEx_PLLSAI2_Config+0x86>
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d825      	bhi.n	8003134 <RCCEx_PLLSAI2_Config+0xa4>
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d002      	beq.n	80030f2 <RCCEx_PLLSAI2_Config+0x62>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d009      	beq.n	8003104 <RCCEx_PLLSAI2_Config+0x74>
 80030f0:	e020      	b.n	8003134 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030f2:	4b55      	ldr	r3, [pc, #340]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003102:	e01a      	b.n	800313a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003114:	e013      	b.n	800313e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003132:	e006      	b.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	e004      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003142:	bf00      	nop
    }

    if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800314a:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	430b      	orrs	r3, r1
 8003160:	4939      	ldr	r1, [pc, #228]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d167      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800316c:	4b36      	ldr	r3, [pc, #216]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a35      	ldr	r2, [pc, #212]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fd fcae 	bl	8000ad8 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317e:	e009      	b.n	8003194 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003180:	f7fd fcaa 	bl	8000ad8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	73fb      	strb	r3, [r7, #15]
        break;
 8003192:	e005      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ef      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d14a      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031ac:	4b26      	ldr	r3, [pc, #152]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	0211      	lsls	r1, r2, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	0912      	lsrs	r2, r2, #4
 80031c4:	0452      	lsls	r2, r2, #17
 80031c6:	430a      	orrs	r2, r1
 80031c8:	491f      	ldr	r1, [pc, #124]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	614b      	str	r3, [r1, #20]
 80031ce:	e011      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6892      	ldr	r2, [r2, #8]
 80031e0:	0211      	lsls	r1, r2, #8
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6912      	ldr	r2, [r2, #16]
 80031e6:	0852      	lsrs	r2, r2, #1
 80031e8:	3a01      	subs	r2, #1
 80031ea:	0652      	lsls	r2, r2, #25
 80031ec:	430a      	orrs	r2, r1
 80031ee:	4916      	ldr	r1, [pc, #88]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fd fc6a 	bl	8000ad8 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003206:	e009      	b.n	800321c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003208:	f7fd fc66 	bl	8000ad8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
          break;
 800321a:	e005      	b.n	8003228 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ef      	beq.n	8003208 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000

0800324c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d10c      	bne.n	8003284 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800326a:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003274:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327c:	d112      	bne.n	80032a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e00f      	b.n	80032a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d10b      	bne.n	80032a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800328c:	4b65      	ldr	r3, [pc, #404]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003296:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800329e:	d101      	bne.n	80032a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80032a2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 80b4 	bne.w	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b6:	d003      	beq.n	80032c0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032be:	d135      	bne.n	800332c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032cc:	f040 80a1 	bne.w	8003412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80032d0:	4b54      	ldr	r3, [pc, #336]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 809a 	beq.w	8003412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80032de:	4b51      	ldr	r3, [pc, #324]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	3301      	adds	r3, #1
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80032f2:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003304:	4b47      	ldr	r3, [pc, #284]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003310:	2311      	movs	r3, #17
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e001      	b.n	800331a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003316:	2307      	movs	r3, #7
 8003318:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	fb02 f203 	mul.w	r2, r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800332a:	e072      	b.n	8003412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d133      	bne.n	800339a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003332:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333e:	d169      	bne.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d063      	beq.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	3301      	adds	r3, #1
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003360:	4b30      	ldr	r3, [pc, #192]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800337e:	2311      	movs	r3, #17
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	e001      	b.n	8003388 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003384:	2307      	movs	r3, #7
 8003386:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	fb02 f203 	mul.w	r2, r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e03c      	b.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a0:	d003      	beq.n	80033aa <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a8:	d134      	bne.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b6:	d12d      	bne.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d027      	beq.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	3301      	adds	r3, #1
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80033f6:	2311      	movs	r3, #17
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e001      	b.n	8003400 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80033fc:	2307      	movs	r3, #7
 80033fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	fb02 f203 	mul.w	r2, r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e000      	b.n	8003414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003412:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003414:	69fb      	ldr	r3, [r7, #28]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	001fff68 	.word	0x001fff68

0800342c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd f9db 	bl	800080c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f814 	bl	800348c <HAL_SD_InitCard>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00a      	b.n	8003484 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b090      	sub	sp, #64	; 0x40
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80034a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034ac:	f7fe ff92 	bl	80023d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e08d      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	09db      	lsrs	r3, r3, #7
 80034d0:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <HAL_SD_InitCard+0x164>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	3b02      	subs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681d      	ldr	r5, [r3, #0]
 80034e0:	466c      	mov	r4, sp
 80034e2:	f107 0318 	add.w	r3, r7, #24
 80034e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f4:	4628      	mov	r0, r5
 80034f6:	f001 f9eb 	bl	80048d0 <SDMMC_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e06d      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800351a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fa20 	bl	8004966 <SDMMC_PowerState_ON>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800352c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e057      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003546:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	3302      	adds	r3, #2
 800354c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_SD_InitCard+0x168>)
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	3301      	adds	r3, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fac6 	bl	8000af0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f001 f857 	bl	8004618 <SD_PowerON>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e02e      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 ff78 	bl	8004480 <SD_InitCard>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e01b      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fa67 	bl	8004a8c <SDMMC_CmdBlockLength>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00f      	beq.n	80035e6 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <HAL_SD_InitCard+0x16c>)
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bdb0      	pop	{r4, r5, r7, pc}
 80035f0:	014f8b59 	.word	0x014f8b59
 80035f4:	00012110 	.word	0x00012110
 80035f8:	004005ff 	.word	0x004005ff

080035fc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b092      	sub	sp, #72	; 0x48
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800360a:	f7fd fa65 	bl	8000ad8 <HAL_GetTick>
 800360e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1bd      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	f040 81b0 	bne.w	800399c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	429a      	cmp	r2, r3
 800364e:	d907      	bls.n	8003660 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e1a4      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	2b01      	cmp	r3, #1
 8003676:	d002      	beq.n	800367e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	025b      	lsls	r3, r3, #9
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003682:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	025b      	lsls	r3, r3, #9
 8003688:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800368a:	2390      	movs	r3, #144	; 0x90
 800368c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003696:	2301      	movs	r3, #1
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f107 0214 	add.w	r2, r7, #20
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f9c5 	bl	8004a34 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d90a      	bls.n	80036c6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2202      	movs	r2, #2
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 fa29 	bl	8004b14 <SDMMC_CmdReadMultiBlock>
 80036c2:	6478      	str	r0, [r7, #68]	; 0x44
 80036c4:	e009      	b.n	80036da <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f9fc 	bl	8004ad0 <SDMMC_CmdReadSingleBlock>
 80036d8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7a      	ldr	r2, [pc, #488]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e151      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800370a:	e061      	b.n	80037d0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03c      	beq.n	8003794 <HAL_SD_ReadBlocks+0x198>
 800371a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d039      	beq.n	8003794 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003720:	2300      	movs	r3, #0
 8003722:	643b      	str	r3, [r7, #64]	; 0x40
 8003724:	e033      	b.n	800378e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f8fd 	bl	800492a <SDMMC_ReadFIFO>
 8003730:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	b2da      	uxtb	r2, r3
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	3301      	adds	r3, #1
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003742:	3b01      	subs	r3, #1
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	b2da      	uxtb	r2, r3
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	3301      	adds	r3, #1
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	3b01      	subs	r3, #1
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2da      	uxtb	r2, r3
 8003762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003764:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	3301      	adds	r3, #1
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	3b01      	subs	r3, #1
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	b2da      	uxtb	r2, r3
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	3301      	adds	r3, #1
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	3b01      	subs	r3, #1
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378a:	3301      	adds	r3, #1
 800378c:	643b      	str	r3, [r7, #64]	; 0x40
 800378e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003790:	2b07      	cmp	r3, #7
 8003792:	d9c8      	bls.n	8003726 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003794:	f7fd f9a0 	bl	8000ad8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d902      	bls.n	80037aa <HAL_SD_ReadBlocks+0x1ae>
 80037a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d112      	bne.n	80037d0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0ec      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d096      	beq.n	800370c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d022      	beq.n	8003832 <HAL_SD_ReadBlocks+0x236>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d91f      	bls.n	8003832 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d01b      	beq.n	8003832 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f9ee 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8003804:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381a:	431a      	orrs	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0bb      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f043 0208 	orr.w	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0a1      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f043 0202 	orr.w	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e087      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d064      	beq.n	8003972 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a08      	ldr	r2, [pc, #32]	; (80038d0 <HAL_SD_ReadBlocks+0x2d4>)
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06d      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
 80038ce:	bf00      	nop
 80038d0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f826 	bl	800492a <SDMMC_ReadFIFO>
 80038de:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	3301      	adds	r3, #1
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80038ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f0:	3b01      	subs	r3, #1
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	3301      	adds	r3, #1
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	3b01      	subs	r3, #1
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	b2da      	uxtb	r2, r3
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	3301      	adds	r3, #1
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800391a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391c:	3b01      	subs	r3, #1
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	0e1b      	lsrs	r3, r3, #24
 8003924:	b2da      	uxtb	r2, r3
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	3301      	adds	r3, #1
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	3b01      	subs	r3, #1
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003936:	f7fd f8cf 	bl	8000ad8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003942:	429a      	cmp	r2, r3
 8003944:	d902      	bls.n	800394c <HAL_SD_ReadBlocks+0x350>
 8003946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d112      	bne.n	8003972 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_SD_ReadBlocks+0x3b8>)
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e01b      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SD_ReadBlocks+0x38a>
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1a6      	bne.n	80038d4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f240 523a 	movw	r2, #1338	; 0x53a
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e006      	b.n	80039aa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3748      	adds	r7, #72	; 0x48
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	004005ff 	.word	0x004005ff

080039b8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b092      	sub	sp, #72	; 0x48
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80039c6:	f7fd f887 	bl	8000ad8 <HAL_GetTick>
 80039ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e165      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f040 8158 	bne.w	8003ca8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d907      	bls.n	8003a1c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e14c      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2203      	movs	r2, #3
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	025b      	lsls	r3, r3, #9
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	025b      	lsls	r3, r3, #9
 8003a44:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003a46:	2390      	movs	r3, #144	; 0x90
 8003a48:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f107 0218 	add.w	r2, r7, #24
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ffe7 	bl	8004a34 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d90a      	bls.n	8003a82 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f88f 	bl	8004b9c <SDMMC_CmdWriteMultiBlock>
 8003a7e:	6478      	str	r0, [r7, #68]	; 0x44
 8003a80:	e009      	b.n	8003a96 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2210      	movs	r2, #16
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f862 	bl	8004b58 <SDMMC_CmdWriteSingleBlock>
 8003a94:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a87      	ldr	r2, [pc, #540]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0f9      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ac6:	e065      	b.n	8003b94 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d040      	beq.n	8003b58 <HAL_SD_WriteBlocks+0x1a0>
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03d      	beq.n	8003b58 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae0:	e037      	b.n	8003b52 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	3301      	adds	r3, #1
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	3b01      	subs	r3, #1
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	021a      	lsls	r2, r3, #8
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	3301      	adds	r3, #1
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	061a      	lsls	r2, r3, #24
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b32:	3301      	adds	r3, #1
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f107 0214 	add.w	r2, r7, #20
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fefc 	bl	8004944 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4e:	3301      	adds	r3, #1
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	d9c4      	bls.n	8003ae2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003b58:	f7fc ffbe 	bl	8000ad8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d902      	bls.n	8003b6e <HAL_SD_WriteBlocks+0x1b6>
 8003b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a53      	ldr	r2, [pc, #332]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e090      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d092      	beq.n	8003ac8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d022      	beq.n	8003bf6 <HAL_SD_WriteBlocks+0x23e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d91f      	bls.n	8003bf6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d01b      	beq.n	8003bf6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f80c 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8003bc8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d012      	beq.n	8003bf6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3a      	ldr	r2, [pc, #232]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e05f      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d012      	beq.n	8003c2a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2d      	ldr	r2, [pc, #180]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f043 0208 	orr.w	r2, r3, #8
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e045      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	f043 0202 	orr.w	r2, r3, #2
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e02b      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_SD_WriteBlocks+0x308>)
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	f043 0210 	orr.w	r2, r3, #16
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e011      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e006      	b.n	8003cb6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3748      	adds	r7, #72	; 0x48
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	004005ff 	.word	0x004005ff

08003cc4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x2e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fd4a 	bl	8004784 <SD_Read_IT>
 8003cf0:	e155      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 808f 	beq.w	8003e20 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003d1a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003d1e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d039      	beq.n	8003dae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <HAL_SD_IRQHandler+0x8a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d011      	beq.n	8003d72 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 ff44 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8003d58:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f91f 	bl	8003fb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <HAL_SD_IRQHandler+0xda>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 fb6a 	bl	8005478 <HAL_SD_RxCpltCallback>
 8003da4:	e0fb      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fb5c 	bl	8005464 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003dac:	e0f7      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80f2 	beq.w	8003f9e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d011      	beq.n	8003de8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ff09 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8003dce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8e4 	bl	8003fb0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 80d5 	bne.w	8003f9e <HAL_SD_IRQHandler+0x2da>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 80cf 	bne.w	8003f9e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0208 	bic.w	r2, r2, #8
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f001 fb23 	bl	8005464 <HAL_SD_TxCpltCallback>
}
 8003e1e:	e0be      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_SD_IRQHandler+0x17c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fcf4 	bl	8004826 <SD_Write_IT>
 8003e3e:	e0ae      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80a7 	beq.w	8003f9e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f043 0208 	orr.w	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	f043 0210 	orr.w	r2, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fe82 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f855 	bl	8003fb0 <HAL_SD_ErrorCallback>
}
 8003f06:	e04a      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d045      	beq.n	8003f9e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <HAL_SD_IRQHandler+0x262>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d011      	beq.n	8003f4a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_SD_IRQHandler+0x2e4>)
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc ff11 	bl	8000d5a <HAL_DMA_Abort_IT>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02f      	beq.n	8003f9e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa2e 	bl	80043a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003f48:	e029      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_SD_IRQHandler+0x29a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d011      	beq.n	8003f82 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_SD_IRQHandler+0x2e8>)
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fc fef5 	bl	8000d5a <HAL_DMA_Abort_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d013      	beq.n	8003f9e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fa49 	bl	8004412 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003f80:	e00d      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f001 fa5a 	bl	8005450 <HAL_SD_AbortCallback>
}
 8003f9c:	e7ff      	b.n	8003f9e <HAL_SD_IRQHandler+0x2da>
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	080043a5 	.word	0x080043a5
 8003fac:	08004413 	.word	0x08004413

08003fb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd2:	0f9b      	lsrs	r3, r3, #30
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fde:	0e9b      	lsrs	r3, r3, #26
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b2da      	uxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004024:	0d1b      	lsrs	r3, r3, #20
 8004026:	b29a      	uxth	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2da      	uxtb	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004042:	0bdb      	lsrs	r3, r3, #15
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004054:	0b9b      	lsrs	r3, r3, #14
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004066:	0b5b      	lsrs	r3, r3, #13
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004078:	0b1b      	lsrs	r3, r3, #12
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	2b00      	cmp	r3, #0
 8004092:	d163      	bne.n	800415c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004098:	009a      	lsls	r2, r3, #2
 800409a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80040a4:	0f92      	lsrs	r2, r2, #30
 80040a6:	431a      	orrs	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	0edb      	lsrs	r3, r3, #27
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	0e1b      	lsrs	r3, r3, #24
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	0d5b      	lsrs	r3, r3, #21
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	0c9b      	lsrs	r3, r3, #18
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f8:	0bdb      	lsrs	r3, r3, #15
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	b2da      	uxtb	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	7e1b      	ldrb	r3, [r3, #24]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	3302      	adds	r3, #2
 800411c:	2201      	movs	r2, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004126:	fb02 f203 	mul.w	r2, r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7a1b      	ldrb	r3, [r3, #8]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004148:	0a52      	lsrs	r2, r2, #9
 800414a:	fb02 f203 	mul.w	r2, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
 800415a:	e031      	b.n	80041c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11d      	bne.n	80041a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	3301      	adds	r3, #1
 8004180:	029a      	lsls	r2, r3, #10
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
 800419e:	e00f      	b.n	80041c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_SD_GetCardCSD+0x344>)
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e09d      	b.n	80042fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c4:	0b9b      	lsrs	r3, r3, #14
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	0fdb      	lsrs	r3, r3, #31
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	0f5b      	lsrs	r3, r3, #29
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	b2da      	uxtb	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	0d9b      	lsrs	r3, r3, #22
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	b2da      	uxtb	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	0d5b      	lsrs	r3, r3, #21
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	0bdb      	lsrs	r3, r3, #15
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	0b9b      	lsrs	r3, r3, #14
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	0b1b      	lsrs	r3, r3, #12
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	004005ff 	.word	0x004005ff

0800430c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004370:	f107 030c 	add.w	r3, r7, #12
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9dc 	bl	8004734 <SD_SendStatus>
 800437c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800439a:	693b      	ldr	r3, [r7, #16]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ffd1 	bl	8004364 <HAL_SD_GetCardState>
 80043c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d002      	beq.n	80043de <SD_DMATxAbort+0x3a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d10a      	bne.n	80043f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fbfc 	bl	8004be0 <SDMMC_CmdStopTransfer>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f001 f827 	bl	8005450 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004402:	e002      	b.n	800440a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fdd3 	bl	8003fb0 <HAL_SD_ErrorCallback>
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f240 523a 	movw	r2, #1338	; 0x53a
 8004428:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff ff9a 	bl	8004364 <HAL_SD_GetCardState>
 8004430:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d002      	beq.n	800444c <SD_DMARxAbort+0x3a>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b05      	cmp	r3, #5
 800444a:	d10a      	bne.n	8004462 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fbc5 	bl	8004be0 <SDMMC_CmdStopTransfer>
 8004456:	4602      	mov	r2, r0
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fff0 	bl	8005450 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004470:	e002      	b.n	8004478 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff fd9c 	bl	8003fb0 <HAL_SD_ErrorCallback>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b094      	sub	sp, #80	; 0x50
 8004484:	af04      	add	r7, sp, #16
 8004486:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004488:	2301      	movs	r3, #1
 800448a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa77 	bl	8004984 <SDMMC_GetPowerState>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800449c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044a0:	e0b6      	b.n	8004610 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d02f      	beq.n	800450a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc5d 	bl	8004d6e <SDMMC_CmdSendCID>
 80044b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80044bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044be:	e0a7      	b.n	8004610 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 faa1 	bl	8004a0e <SDMMC_GetResponse>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2104      	movs	r1, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fa98 	bl	8004a0e <SDMMC_GetResponse>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2108      	movs	r1, #8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fa8f 	bl	8004a0e <SDMMC_GetResponse>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	210c      	movs	r1, #12
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa86 	bl	8004a0e <SDMMC_GetResponse>
 8004502:	4602      	mov	r2, r0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	2b03      	cmp	r3, #3
 8004510:	d00d      	beq.n	800452e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f107 020e 	add.w	r2, r7, #14
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fc63 	bl	8004de8 <SDMMC_CmdSetRelAdd>
 8004522:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <SD_InitCard+0xae>
    {
      return errorstate;
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	e070      	b.n	8004610 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	2b03      	cmp	r3, #3
 8004534:	d036      	beq.n	80045a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004536:	89fb      	ldrh	r3, [r7, #14]
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fc2d 	bl	8004daa <SDMMC_CmdSendCSD>
 8004550:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	e059      	b.n	8004610 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fa53 	bl	8004a0e <SDMMC_GetResponse>
 8004568:	4602      	mov	r2, r0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2104      	movs	r1, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa4a 	bl	8004a0e <SDMMC_GetResponse>
 800457a:	4602      	mov	r2, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2108      	movs	r1, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fa41 	bl	8004a0e <SDMMC_GetResponse>
 800458c:	4602      	mov	r2, r0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	210c      	movs	r1, #12
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fa38 	bl	8004a0e <SDMMC_GetResponse>
 800459e:	4602      	mov	r2, r0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2104      	movs	r1, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa2f 	bl	8004a0e <SDMMC_GetResponse>
 80045b0:	4603      	mov	r3, r0
 80045b2:	0d1a      	lsrs	r2, r3, #20
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fd00 	bl	8003fc4 <HAL_SD_GetCardCSD>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045ce:	e01f      	b.n	8004610 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	461a      	mov	r2, r3
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	4608      	mov	r0, r1
 80045e2:	f000 fb1f 	bl	8004c24 <SDMMC_CmdSelDesel>
 80045e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <SD_InitCard+0x172>
  {
    return errorstate;
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	e00e      	b.n	8004610 <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681d      	ldr	r5, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	466c      	mov	r4, sp
 80045fa:	f103 0210 	add.w	r2, r3, #16
 80045fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004604:	3304      	adds	r3, #4
 8004606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004608:	4628      	mov	r0, r5
 800460a:	f000 f961 	bl	80048d0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3740      	adds	r7, #64	; 0x40
 8004614:	46bd      	mov	sp, r7
 8004616:	bdb0      	pop	{r4, r5, r7, pc}

08004618 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fb1a 	bl	8004c6a <SDMMC_CmdGoIdleState>
 8004636:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <SD_PowerON+0x2a>
  {
    return errorstate;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	e072      	b.n	8004728 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb2d 	bl	8004ca6 <SDMMC_CmdOperCond>
 800464c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fb03 	bl	8004c6a <SDMMC_CmdGoIdleState>
 8004664:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <SD_PowerON+0x5e>
    {
      return errorstate;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e05b      	b.n	8004728 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	2b01      	cmp	r3, #1
 800467c:	d137      	bne.n	80046ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb2d 	bl	8004ce4 <SDMMC_CmdAppCommand>
 800468a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02d      	beq.n	80046ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004696:	e047      	b.n	8004728 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb20 	bl	8004ce4 <SDMMC_CmdAppCommand>
 80046a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	e03b      	b.n	8004728 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	491e      	ldr	r1, [pc, #120]	; (8004730 <SD_PowerON+0x118>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fb36 	bl	8004d28 <SDMMC_CmdAppOperCommand>
 80046bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046c8:	e02e      	b.n	8004728 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f99c 	bl	8004a0e <SDMMC_GetResponse>
 80046d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	0fdb      	lsrs	r3, r3, #31
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <SD_PowerON+0xcc>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <SD_PowerON+0xce>
 80046e4:	2300      	movs	r3, #0
 80046e6:	613b      	str	r3, [r7, #16]

    count++;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d802      	bhi.n	80046fe <SD_PowerON+0xe6>
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0cc      	beq.n	8004698 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004704:	4293      	cmp	r3, r2
 8004706:	d902      	bls.n	800470e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800470c:	e00c      	b.n	8004728 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
 800471e:	e002      	b.n	8004726 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	c1100000 	.word	0xc1100000

08004734 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004748:	e018      	b.n	800477c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fb67 	bl	8004e2a <SDMMC_CmdSendStatus>
 800475c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	e009      	b.n	800477c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f94d 	bl	8004a0e <SDMMC_GetResponse>
 8004774:	4602      	mov	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d03f      	beq.n	800481e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e033      	b.n	800480c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f8be 	bl	800492a <SDMMC_ReadFIFO>
 80047ae:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3b01      	subs	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	3301      	adds	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b07      	cmp	r3, #7
 8004810:	d9c8      	bls.n	80047a4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d043      	beq.n	80048c8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e037      	b.n	80048b6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	021a      	lsls	r2, r3, #8
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3b01      	subs	r3, #1
 800486e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4313      	orrs	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3b01      	subs	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	061a      	lsls	r2, r3, #24
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3b01      	subs	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f107 0208 	add.w	r2, r7, #8
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f84a 	bl	8004944 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b07      	cmp	r3, #7
 80048ba:	d9c4      	bls.n	8004846 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80048c8:	bf00      	nop
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80048d0:	b084      	sub	sp, #16
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	f107 001c 	add.w	r0, r7, #28
 80048de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80048ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80048f2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80048f6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80048fa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80048fe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800490e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	b004      	add	sp, #16
 8004928:	4770      	bx	lr

0800492a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004974:	2002      	movs	r0, #2
 8004976:	f7fc f8bb 	bl	8000af0 <HAL_Delay>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0303 	and.w	r3, r3, #3
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80049c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80049ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80049da:	f023 030f 	bic.w	r3, r3, #15
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	b2db      	uxtb	r3, r3
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004a60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004a66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0

}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff74 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	2110      	movs	r1, #16
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9d6 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ade:	2311      	movs	r3, #17
 8004ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff ff52 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b00:	2111      	movs	r1, #17
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9b4 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b22:	2312      	movs	r3, #18
 8004b24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff30 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	2112      	movs	r1, #18
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f992 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004b66:	2318      	movs	r3, #24
 8004b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b6a:	2340      	movs	r3, #64	; 0x40
 8004b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b78:	f107 0308 	add.w	r3, r7, #8
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff0e 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	2118      	movs	r1, #24
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f970 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004baa:	2319      	movs	r3, #25
 8004bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff feec 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	2119      	movs	r1, #25
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f94e 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004bec:	230c      	movs	r3, #12
 8004bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bf0:	2340      	movs	r3, #64	; 0x40
 8004bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bfc:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fecb 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <SDMMC_CmdStopTransfer+0x40>)
 8004c0c:	210c      	movs	r1, #12
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f92e 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004c14:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8004c16:	69fb      	ldr	r3, [r7, #28]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	05f5e100 	.word	0x05f5e100

08004c24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c34:	2307      	movs	r3, #7
 8004c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c44:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c46:	f107 0310 	add.w	r3, r7, #16
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff fea7 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	2107      	movs	r1, #7
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f909 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fe86 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb23 	bl	80052e0 <SDMMC_GetCmdError>
 8004c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b088      	sub	sp, #32
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004cae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cb8:	2340      	movs	r3, #64	; 0x40
 8004cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fe67 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fab6 	bl	8005244 <SDMMC_GetCmdResp7>
 8004cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cda:	69fb      	ldr	r3, [r7, #28]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004cf2:	2337      	movs	r3, #55	; 0x37
 8004cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cf6:	2340      	movs	r3, #64	; 0x40
 8004cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d04:	f107 0308 	add.w	r3, r7, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fe48 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d14:	2137      	movs	r1, #55	; 0x37
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8aa 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d3e:	2329      	movs	r3, #41	; 0x29
 8004d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d50:	f107 0308 	add.w	r3, r7, #8
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fe22 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f9bd 	bl	80050dc <SDMMC_GetCmdResp3>
 8004d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d64:	69fb      	ldr	r3, [r7, #28]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b088      	sub	sp, #32
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004d7e:	23c0      	movs	r3, #192	; 0xc0
 8004d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe04 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f957 	bl	800504c <SDMMC_GetCmdResp2>
 8004d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004da0:	69fb      	ldr	r3, [r7, #28]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b088      	sub	sp, #32
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004db8:	2309      	movs	r3, #9
 8004dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004dbc:	23c0      	movs	r3, #192	; 0xc0
 8004dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fde5 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f938 	bl	800504c <SDMMC_GetCmdResp2>
 8004ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dde:	69fb      	ldr	r3, [r7, #28]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004df6:	2303      	movs	r3, #3
 8004df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fdc6 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	2103      	movs	r1, #3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f99d 	bl	8005158 <SDMMC_GetCmdResp6>
 8004e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e20:	69fb      	ldr	r3, [r7, #28]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b088      	sub	sp, #32
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004e38:	230d      	movs	r3, #13
 8004e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e3c:	2340      	movs	r3, #64	; 0x40
 8004e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e4a:	f107 0308 	add.w	r3, r7, #8
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fda5 	bl	80049a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	210d      	movs	r1, #13
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f807 	bl	8004e70 <SDMMC_GetCmdResp1>
 8004e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e64:	69fb      	ldr	r3, [r7, #28]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e7e:	4b70      	ldr	r3, [pc, #448]	; (8005040 <SDMMC_GetCmdResp1+0x1d0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a70      	ldr	r2, [pc, #448]	; (8005044 <SDMMC_GetCmdResp1+0x1d4>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	0a5a      	lsrs	r2, r3, #9
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ea0:	e0c9      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0ef      	beq.n	8004e92 <SDMMC_GetCmdResp1+0x22>
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ea      	bne.n	8004e92 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ece:	2304      	movs	r3, #4
 8004ed0:	e0b1      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0a6      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	22c5      	movs	r2, #197	; 0xc5
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7ff fd80 	bl	80049f4 <SDMMC_GetCommandResponse>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	7afb      	ldrb	r3, [r7, #11]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d001      	beq.n	8004f02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e099      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004f02:	2100      	movs	r1, #0
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fd82 	bl	8004a0e <SDMMC_GetResponse>
 8004f0a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4b4e      	ldr	r3, [pc, #312]	; (8005048 <SDMMC_GetCmdResp1+0x1d8>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e08d      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da02      	bge.n	8004f26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f24:	e087      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f30:	2340      	movs	r3, #64	; 0x40
 8004f32:	e080      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	e079      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f50:	e071      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f60:	e069      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f70:	e061      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f80:	e059      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f90:	e051      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fa0:	e049      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004fac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fb0:	e041      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc0:	e039      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fd0:	e031      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004fdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fe0:	e029      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004fec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ff0:	e021      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ffc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005000:	e019      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800500c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005010:	e011      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800501c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005020:	e009      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800502c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005030:	e001      	b.n	8005036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000000 	.word	0x20000000
 8005044:	10624dd3 	.word	0x10624dd3
 8005048:	fdffe008 	.word	0xfdffe008

0800504c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <SDMMC_GetCmdResp2+0x88>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <SDMMC_GetCmdResp2+0x8c>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	0a5b      	lsrs	r3, r3, #9
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	60fa      	str	r2, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005078:	e026      	b.n	80050c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ef      	beq.n	800506a <SDMMC_GetCmdResp2+0x1e>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ea      	bne.n	800506a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050a6:	2304      	movs	r3, #4
 80050a8:	e00e      	b.n	80050c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050bc:	2301      	movs	r3, #1
 80050be:	e003      	b.n	80050c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	22c5      	movs	r2, #197	; 0xc5
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000000 	.word	0x20000000
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <SDMMC_GetCmdResp3+0x74>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1a      	ldr	r2, [pc, #104]	; (8005154 <SDMMC_GetCmdResp3+0x78>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0a5b      	lsrs	r3, r3, #9
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	60fa      	str	r2, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005108:	e01b      	b.n	8005142 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0ef      	beq.n	80050fa <SDMMC_GetCmdResp3+0x1e>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ea      	bne.n	80050fa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2204      	movs	r2, #4
 8005134:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005136:	2304      	movs	r3, #4
 8005138:	e003      	b.n	8005142 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	22c5      	movs	r2, #197	; 0xc5
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000000 	.word	0x20000000
 8005154:	10624dd3 	.word	0x10624dd3

08005158 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	460b      	mov	r3, r1
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005166:	4b35      	ldr	r3, [pc, #212]	; (800523c <SDMMC_GetCmdResp6+0xe4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a35      	ldr	r2, [pc, #212]	; (8005240 <SDMMC_GetCmdResp6+0xe8>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	0a5b      	lsrs	r3, r3, #9
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800518a:	e052      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ef      	beq.n	800517c <SDMMC_GetCmdResp6+0x24>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ea      	bne.n	800517c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2204      	movs	r2, #4
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051b8:	2304      	movs	r3, #4
 80051ba:	e03a      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e02f      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fc0e 	bl	80049f4 <SDMMC_GetCommandResponse>
 80051d8:	4603      	mov	r3, r0
 80051da:	461a      	mov	r2, r3
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	4293      	cmp	r3, r2
 80051e0:	d001      	beq.n	80051e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e025      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	22c5      	movs	r2, #197	; 0xc5
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80051ec:	2100      	movs	r1, #0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fc0d 	bl	8004a0e <SDMMC_GetResponse>
 80051f4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800520a:	2300      	movs	r3, #0
 800520c:	e011      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800521c:	e009      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800522c:	e001      	b.n	8005232 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800522e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000000 	.word	0x20000000
 8005240:	10624dd3 	.word	0x10624dd3

08005244 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800524c:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <SDMMC_GetCmdResp7+0x94>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <SDMMC_GetCmdResp7+0x98>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0a5b      	lsrs	r3, r3, #9
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1e5a      	subs	r2, r3, #1
 8005266:	60fa      	str	r2, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800526c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005270:	e02c      	b.n	80052cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ef      	beq.n	8005262 <SDMMC_GetCmdResp7+0x1e>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ea      	bne.n	8005262 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800529e:	2304      	movs	r3, #4
 80052a0:	e014      	b.n	80052cc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e009      	b.n	80052cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2240      	movs	r2, #64	; 0x40
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80052ca:	2300      	movs	r3, #0

}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	20000000 	.word	0x20000000
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <SDMMC_GetCmdError+0x50>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a11      	ldr	r2, [pc, #68]	; (8005334 <SDMMC_GetCmdError+0x54>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0a5b      	lsrs	r3, r3, #9
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1e5a      	subs	r2, r3, #1
 8005302:	60fa      	str	r2, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800530c:	e009      	b.n	8005322 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f1      	beq.n	80052fe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	22c5      	movs	r2, #197	; 0xc5
 800531e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000000 	.word	0x20000000
 8005334:	10624dd3 	.word	0x10624dd3

08005338 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800533c:	4904      	ldr	r1, [pc, #16]	; (8005350 <MX_FATFS_Init+0x18>)
 800533e:	4805      	ldr	r0, [pc, #20]	; (8005354 <MX_FATFS_Init+0x1c>)
 8005340:	f003 fab2 	bl	80088a8 <FATFS_LinkDriver>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <MX_FATFS_Init+0x20>)
 800534a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200002e8 	.word	0x200002e8
 8005354:	08008bd8 	.word	0x08008bd8
 8005358:	200002e4 	.word	0x200002e4

0800535c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005360:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005376:	f000 f89e 	bl	80054b6 <BSP_SD_IsDetected>
 800537a:	4603      	mov	r3, r0
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005380:	2302      	movs	r3, #2
 8005382:	e005      	b.n	8005390 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005384:	4804      	ldr	r0, [pc, #16]	; (8005398 <BSP_SD_Init+0x2c>)
 8005386:	f7fe f851 	bl	800342c <HAL_SD_Init>
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800538e:	79fb      	ldrb	r3, [r7, #7]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2000025c 	.word	0x2000025c

0800539c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	4806      	ldr	r0, [pc, #24]	; (80053d4 <BSP_SD_ReadBlocks+0x38>)
 80053ba:	f7fe f91f 	bl	80035fc <HAL_SD_ReadBlocks>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2000025c 	.word	0x2000025c

080053d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	4806      	ldr	r0, [pc, #24]	; (8005410 <BSP_SD_WriteBlocks+0x38>)
 80053f6:	f7fe fadf 	bl	80039b8 <HAL_SD_WriteBlocks>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005404:	7dfb      	ldrb	r3, [r7, #23]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000025c 	.word	0x2000025c

08005414 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005418:	4805      	ldr	r0, [pc, #20]	; (8005430 <BSP_SD_GetCardState+0x1c>)
 800541a:	f7fe ffa3 	bl	8004364 <HAL_SD_GetCardState>
 800541e:	4603      	mov	r3, r0
 8005420:	2b04      	cmp	r3, #4
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
}
 800542a:	4618      	mov	r0, r3
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	2000025c 	.word	0x2000025c

08005434 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4803      	ldr	r0, [pc, #12]	; (800544c <BSP_SD_GetCardInfo+0x18>)
 8005440:	f7fe ff64 	bl	800430c <HAL_SD_GetCardInfo>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	2000025c 	.word	0x2000025c

08005450 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005458:	f000 f818 	bl	800548c <BSP_SD_AbortCallback>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800546c:	f000 f815 	bl	800549a <BSP_SD_WriteCpltCallback>
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005480:	f000 f812 	bl	80054a8 <BSP_SD_ReadCpltCallback>
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0

}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800549a:	b480      	push	{r7}
 800549c:	af00      	add	r7, sp, #0

}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0

}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80054bc:	2301      	movs	r3, #1
 80054be:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80054c0:	f000 f80b 	bl	80054da <BSP_PlatformIsDetected>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80054ca:	2300      	movs	r3, #0
 80054cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	b2db      	uxtb	r3, r3
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80054e0:	2301      	movs	r3, #1
 80054e2:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80054e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ec:	f7fb fe20 	bl	8001130 <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 80054f6:	2300      	movs	r3, #0
 80054f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80054fa:	79fb      	ldrb	r3, [r7, #7]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <SD_CheckStatus+0x38>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005514:	f7ff ff7e 	bl	8005414 <BSP_SD_GetCardState>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <SD_CheckStatus+0x38>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4b04      	ldr	r3, [pc, #16]	; (800553c <SD_CheckStatus+0x38>)
 800552c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800552e:	4b03      	ldr	r3, [pc, #12]	; (800553c <SD_CheckStatus+0x38>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b2db      	uxtb	r3, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000009 	.word	0x20000009

08005540 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <SD_initialize+0x38>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005550:	f7ff ff0c 	bl	800536c <BSP_SD_Init>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ffd1 	bl	8005504 <SD_CheckStatus>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	4b04      	ldr	r3, [pc, #16]	; (8005578 <SD_initialize+0x38>)
 8005568:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <SD_initialize+0x38>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000009 	.word	0x20000009

0800557c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ffbb 	bl	8005504 <SD_CheckStatus>
 800558e:	4603      	mov	r3, r0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	68b8      	ldr	r0, [r7, #8]
 80055b6:	f7ff fef1 	bl	800539c <BSP_SD_ReadBlocks>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80055c0:	bf00      	nop
 80055c2:	f7ff ff27 	bl	8005414 <BSP_SD_GetCardState>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1fa      	bne.n	80055c2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b086      	sub	sp, #24
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4603      	mov	r3, r0
 80055e8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7ff feee 	bl	80053d8 <BSP_SD_WriteBlocks>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d107      	bne.n	8005612 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005602:	bf00      	nop
 8005604:	f7ff ff06 	bl	8005414 <BSP_SD_GetCardState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1fa      	bne.n	8005604 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005612:	7dfb      	ldrb	r3, [r7, #23]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08c      	sub	sp, #48	; 0x30
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	603a      	str	r2, [r7, #0]
 8005626:	71fb      	strb	r3, [r7, #7]
 8005628:	460b      	mov	r3, r1
 800562a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005632:	4b25      	ldr	r3, [pc, #148]	; (80056c8 <SD_ioctl+0xac>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <SD_ioctl+0x28>
 8005640:	2303      	movs	r3, #3
 8005642:	e03c      	b.n	80056be <SD_ioctl+0xa2>

  switch (cmd)
 8005644:	79bb      	ldrb	r3, [r7, #6]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d834      	bhi.n	80056b4 <SD_ioctl+0x98>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <SD_ioctl+0x34>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005661 	.word	0x08005661
 8005654:	08005669 	.word	0x08005669
 8005658:	08005681 	.word	0x08005681
 800565c:	0800569b 	.word	0x0800569b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005666:	e028      	b.n	80056ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fee1 	bl	8005434 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800567e:	e01c      	b.n	80056ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fed5 	bl	8005434 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	b29a      	uxth	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005698:	e00f      	b.n	80056ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fec8 	bl	8005434 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	0a5a      	lsrs	r2, r3, #9
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056b2:	e002      	b.n	80056ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000009 	.word	0x20000009

080056cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <disk_status+0x30>)
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	79fa      	ldrb	r2, [r7, #7]
 80056e4:	4905      	ldr	r1, [pc, #20]	; (80056fc <disk_status+0x30>)
 80056e6:	440a      	add	r2, r1
 80056e8:	7a12      	ldrb	r2, [r2, #8]
 80056ea:	4610      	mov	r0, r2
 80056ec:	4798      	blx	r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000250 	.word	0x20000250

08005700 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	4a0d      	ldr	r2, [pc, #52]	; (8005748 <disk_initialize+0x48>)
 8005712:	5cd3      	ldrb	r3, [r2, r3]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d111      	bne.n	800573c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <disk_initialize+0x48>)
 800571c:	2101      	movs	r1, #1
 800571e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <disk_initialize+0x48>)
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	79fa      	ldrb	r2, [r7, #7]
 800572e:	4906      	ldr	r1, [pc, #24]	; (8005748 <disk_initialize+0x48>)
 8005730:	440a      	add	r2, r1
 8005732:	7a12      	ldrb	r2, [r2, #8]
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20000250 	.word	0x20000250

0800574c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <disk_read+0x3c>)
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	689c      	ldr	r4, [r3, #8]
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <disk_read+0x3c>)
 800576c:	4413      	add	r3, r2
 800576e:	7a18      	ldrb	r0, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	47a0      	blx	r4
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]
  return res;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}
 8005786:	bf00      	nop
 8005788:	20000250 	.word	0x20000250

0800578c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <disk_write+0x3c>)
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68dc      	ldr	r4, [r3, #12]
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <disk_write+0x3c>)
 80057ac:	4413      	add	r3, r2
 80057ae:	7a18      	ldrb	r0, [r3, #8]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	47a0      	blx	r4
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd90      	pop	{r4, r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000250 	.word	0x20000250

080057cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	603a      	str	r2, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	460b      	mov	r3, r1
 80057da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <disk_ioctl+0x38>)
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	79fa      	ldrb	r2, [r7, #7]
 80057ea:	4906      	ldr	r1, [pc, #24]	; (8005804 <disk_ioctl+0x38>)
 80057ec:	440a      	add	r2, r1
 80057ee:	7a10      	ldrb	r0, [r2, #8]
 80057f0:	79b9      	ldrb	r1, [r7, #6]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000250 	.word	0x20000250

08005808 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3301      	adds	r3, #1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005818:	89fb      	ldrh	r3, [r7, #14]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	b21a      	sxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b21b      	sxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b21b      	sxth	r3, r3
 8005828:	81fb      	strh	r3, [r7, #14]
	return rv;
 800582a:	89fb      	ldrh	r3, [r7, #14]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3303      	adds	r3, #3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	3202      	adds	r2, #2
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	3201      	adds	r2, #1
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7812      	ldrb	r2, [r2, #0]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	887a      	ldrh	r2, [r7, #2]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	1c53      	adds	r3, r2, #1
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1c59      	adds	r1, r3, #1
 8005930:	6179      	str	r1, [r7, #20]
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3b01      	subs	r3, #1
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f1      	bne.n	8005926 <mem_cpy+0x1a>
	}
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800594e:	b480      	push	{r7}
 8005950:	b087      	sub	sp, #28
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	617a      	str	r2, [r7, #20]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f3      	bne.n	800595e <mem_set+0x10>
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	61fa      	str	r2, [r7, #28]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4619      	mov	r1, r3
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	61ba      	str	r2, [r7, #24]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <mem_cmp+0x40>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0eb      	beq.n	800599c <mem_cmp+0x18>

	return r;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3724      	adds	r7, #36	; 0x24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80059dc:	e002      	b.n	80059e4 <chk_chr+0x12>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3301      	adds	r3, #1
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <chk_chr+0x26>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d1f2      	bne.n	80059de <chk_chr+0xc>
	return *str;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	781b      	ldrb	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e029      	b.n	8005a70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a1c:	4a27      	ldr	r2, [pc, #156]	; (8005abc <chk_lock+0xb4>)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4413      	add	r3, r2
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01d      	beq.n	8005a66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <chk_lock+0xb4>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4413      	add	r3, r2
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d116      	bne.n	8005a6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <chk_lock+0xb4>)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	4413      	add	r3, r2
 8005a44:	3304      	adds	r3, #4
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10c      	bne.n	8005a6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a50:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <chk_lock+0xb4>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4413      	add	r3, r2
 8005a58:	3308      	adds	r3, #8
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d102      	bne.n	8005a6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a64:	e007      	b.n	8005a76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a66:	2301      	movs	r3, #1
 8005a68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d9d2      	bls.n	8005a1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d109      	bne.n	8005a90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <chk_lock+0x80>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d101      	bne.n	8005a8c <chk_lock+0x84>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e010      	b.n	8005aae <chk_lock+0xa6>
 8005a8c:	2312      	movs	r3, #18
 8005a8e:	e00e      	b.n	8005aae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <chk_lock+0xa0>
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <chk_lock+0xb4>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	4413      	add	r3, r2
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa6:	d101      	bne.n	8005aac <chk_lock+0xa4>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	e000      	b.n	8005aae <chk_lock+0xa6>
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000030 	.word	0x20000030

08005ac0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	e002      	b.n	8005ad2 <enq_lock+0x12>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d806      	bhi.n	8005ae6 <enq_lock+0x26>
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <enq_lock+0x40>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000030 	.word	0x20000030

08005b04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e01f      	b.n	8005b54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b14:	4a41      	ldr	r2, [pc, #260]	; (8005c1c <inc_lock+0x118>)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	4413      	add	r3, r2
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d113      	bne.n	8005b4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b26:	4a3d      	ldr	r2, [pc, #244]	; (8005c1c <inc_lock+0x118>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d109      	bne.n	8005b4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b3a:	4a38      	ldr	r2, [pc, #224]	; (8005c1c <inc_lock+0x118>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	3308      	adds	r3, #8
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d006      	beq.n	8005b5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d9dc      	bls.n	8005b14 <inc_lock+0x10>
 8005b5a:	e000      	b.n	8005b5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d132      	bne.n	8005bca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e002      	b.n	8005b70 <inc_lock+0x6c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d806      	bhi.n	8005b84 <inc_lock+0x80>
 8005b76:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <inc_lock+0x118>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f2      	bne.n	8005b6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d101      	bne.n	8005b8e <inc_lock+0x8a>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e040      	b.n	8005c10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4922      	ldr	r1, [pc, #136]	; (8005c1c <inc_lock+0x118>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	440b      	add	r3, r1
 8005b9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	491e      	ldr	r1, [pc, #120]	; (8005c1c <inc_lock+0x118>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3304      	adds	r3, #4
 8005baa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	491a      	ldr	r1, [pc, #104]	; (8005c1c <inc_lock+0x118>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3308      	adds	r3, #8
 8005bba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005bbc:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <inc_lock+0x118>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	4413      	add	r3, r2
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <inc_lock+0xe0>
 8005bd0:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <inc_lock+0x118>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	4413      	add	r3, r2
 8005bd8:	330c      	adds	r3, #12
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <inc_lock+0xe0>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e015      	b.n	8005c10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d108      	bne.n	8005bfc <inc_lock+0xf8>
 8005bea:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <inc_lock+0x118>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	4413      	add	r3, r2
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	e001      	b.n	8005c00 <inc_lock+0xfc>
 8005bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c00:	4906      	ldr	r1, [pc, #24]	; (8005c1c <inc_lock+0x118>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	440b      	add	r3, r1
 8005c08:	330c      	adds	r3, #12
 8005c0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000030 	.word	0x20000030

08005c20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d825      	bhi.n	8005c80 <dec_lock+0x60>
		n = Files[i].ctr;
 8005c34:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <dec_lock+0x74>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	4413      	add	r3, r2
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c48:	d101      	bne.n	8005c4e <dec_lock+0x2e>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c4e:	89fb      	ldrh	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <dec_lock+0x3a>
 8005c54:	89fb      	ldrh	r3, [r7, #14]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c5a:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <dec_lock+0x74>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	4413      	add	r3, r2
 8005c62:	330c      	adds	r3, #12
 8005c64:	89fa      	ldrh	r2, [r7, #14]
 8005c66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <dec_lock+0x5a>
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <dec_lock+0x74>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4413      	add	r3, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	737b      	strb	r3, [r7, #13]
 8005c7e:	e001      	b.n	8005c84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c80:	2302      	movs	r3, #2
 8005c82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c84:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000030 	.word	0x20000030

08005c98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e010      	b.n	8005cc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ca6:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <clear_lock+0x44>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	4413      	add	r3, r2
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d105      	bne.n	8005cc2 <clear_lock+0x2a>
 8005cb6:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <clear_lock+0x44>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	4413      	add	r3, r2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d9eb      	bls.n	8005ca6 <clear_lock+0xe>
	}
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000030 	.word	0x20000030

08005ce0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d034      	beq.n	8005d5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7858      	ldrb	r0, [r3, #1]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d04:	2301      	movs	r3, #1
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	f7ff fd40 	bl	800578c <disk_write>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
 8005d16:	e022      	b.n	8005d5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	1ad2      	subs	r2, r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d217      	bcs.n	8005d5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	789b      	ldrb	r3, [r3, #2]
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e010      	b.n	8005d58 <sync_window+0x78>
					wsect += fs->fsize;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7858      	ldrb	r0, [r3, #1]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	f7ff fd1d 	bl	800578c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d8eb      	bhi.n	8005d36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d01b      	beq.n	8005db8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ffad 	bl	8005ce0 <sync_window>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d113      	bne.n	8005db8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	7858      	ldrb	r0, [r3, #1]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	f7ff fcd5 	bl	800574c <disk_read>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff87 	bl	8005ce0 <sync_window>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d159      	bne.n	8005e90 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d149      	bne.n	8005e78 <sync_fs+0xb4>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	791b      	ldrb	r3, [r3, #4]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d145      	bne.n	8005e78 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	899b      	ldrh	r3, [r3, #12]
 8005df6:	461a      	mov	r2, r3
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f7ff fda8 	bl	800594e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3338      	adds	r3, #56	; 0x38
 8005e02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e06:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fd37 	bl	800587e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3338      	adds	r3, #56	; 0x38
 8005e14:	4921      	ldr	r1, [pc, #132]	; (8005e9c <sync_fs+0xd8>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fd4c 	bl	80058b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3338      	adds	r3, #56	; 0x38
 8005e20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e24:	491e      	ldr	r1, [pc, #120]	; (8005ea0 <sync_fs+0xdc>)
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd44 	bl	80058b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7ff fd3a 	bl	80058b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3338      	adds	r3, #56	; 0x38
 8005e44:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f7ff fd30 	bl	80058b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7858      	ldrb	r0, [r3, #1]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f7ff fc8d 	bl	800578c <disk_write>
			fs->fsi_flag = 0;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fca3 	bl	80057cc <disk_ioctl>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <sync_fs+0xcc>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	41615252 	.word	0x41615252
 8005ea0:	61417272 	.word	0x61417272

08005ea4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	3b02      	subs	r3, #2
 8005eb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	3b02      	subs	r3, #2
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d301      	bcc.n	8005ec4 <clust2sect+0x20>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e008      	b.n	8005ed6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	895b      	ldrh	r3, [r3, #10]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	fb03 f202 	mul.w	r2, r3, r2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	4413      	add	r3, r2
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d904      	bls.n	8005f02 <get_fat+0x20>
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f02:	2301      	movs	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e0bb      	b.n	8006080 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	f000 8083 	beq.w	800601e <get_fat+0x13c>
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	f300 80a7 	bgt.w	800606c <get_fat+0x18a>
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d002      	beq.n	8005f28 <get_fat+0x46>
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d056      	beq.n	8005fd4 <get_fat+0xf2>
 8005f26:	e0a1      	b.n	800606c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	899b      	ldrh	r3, [r3, #12]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f46:	4413      	add	r3, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f7ff ff0c 	bl	8005d68 <move_window>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 808d 	bne.w	8006072 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	60fa      	str	r2, [r7, #12]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	8992      	ldrh	r2, [r2, #12]
 8005f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f66:	fb02 f201 	mul.w	r2, r2, r1
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	899b      	ldrh	r3, [r3, #12]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f86:	4413      	add	r3, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f7ff feec 	bl	8005d68 <move_window>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d16f      	bne.n	8006076 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	899b      	ldrh	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fa2:	fb02 f201 	mul.w	r2, r2, r1
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <get_fat+0xe8>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	091b      	lsrs	r3, r3, #4
 8005fc8:	e002      	b.n	8005fd0 <get_fat+0xee>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	617b      	str	r3, [r7, #20]
			break;
 8005fd2:	e055      	b.n	8006080 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	899b      	ldrh	r3, [r3, #12]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fe8:	4413      	add	r3, r2
 8005fea:	4619      	mov	r1, r3
 8005fec:	6938      	ldr	r0, [r7, #16]
 8005fee:	f7ff febb 	bl	8005d68 <move_window>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d140      	bne.n	800607a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	8992      	ldrh	r2, [r2, #12]
 8006006:	fbb3 f0f2 	udiv	r0, r3, r2
 800600a:	fb02 f200 	mul.w	r2, r2, r0
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	440b      	add	r3, r1
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fbf8 	bl	8005808 <ld_word>
 8006018:	4603      	mov	r3, r0
 800601a:	617b      	str	r3, [r7, #20]
			break;
 800601c:	e030      	b.n	8006080 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	899b      	ldrh	r3, [r3, #12]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	b29b      	uxth	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006032:	4413      	add	r3, r2
 8006034:	4619      	mov	r1, r3
 8006036:	6938      	ldr	r0, [r7, #16]
 8006038:	f7ff fe96 	bl	8005d68 <move_window>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11d      	bne.n	800607e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	8992      	ldrh	r2, [r2, #12]
 8006050:	fbb3 f0f2 	udiv	r0, r3, r2
 8006054:	fb02 f200 	mul.w	r2, r2, r0
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	440b      	add	r3, r1
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fbeb 	bl	8005838 <ld_dword>
 8006062:	4603      	mov	r3, r0
 8006064:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006068:	617b      	str	r3, [r7, #20]
			break;
 800606a:	e009      	b.n	8006080 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e006      	b.n	8006080 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006072:	bf00      	nop
 8006074:	e004      	b.n	8006080 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800607e:	bf00      	nop
		}
	}

	return val;
 8006080:	697b      	ldr	r3, [r7, #20]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800608a:	b590      	push	{r4, r7, lr}
 800608c:	b089      	sub	sp, #36	; 0x24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b01      	cmp	r3, #1
 800609e:	f240 8102 	bls.w	80062a6 <put_fat+0x21c>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	f080 80fc 	bcs.w	80062a6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f000 80b6 	beq.w	8006224 <put_fat+0x19a>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	f300 80fd 	bgt.w	80062b8 <put_fat+0x22e>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d003      	beq.n	80060ca <put_fat+0x40>
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	f000 8083 	beq.w	80061ce <put_fat+0x144>
 80060c8:	e0f6      	b.n	80062b8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4413      	add	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	899b      	ldrh	r3, [r3, #12]
 80060e0:	4619      	mov	r1, r3
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80060e8:	4413      	add	r3, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fe3b 	bl	8005d68 <move_window>
 80060f2:	4603      	mov	r3, r0
 80060f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 80d6 	bne.w	80062aa <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	61ba      	str	r2, [r7, #24]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	8992      	ldrh	r2, [r2, #12]
 800610e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006112:	fb02 f200 	mul.w	r2, r2, r0
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	440b      	add	r3, r1
 800611a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <put_fat+0xb8>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	b25b      	sxtb	r3, r3
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	b25a      	sxtb	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	b25b      	sxtb	r3, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	b25b      	sxtb	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	e001      	b.n	8006146 <put_fat+0xbc>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	899b      	ldrh	r3, [r3, #12]
 8006158:	4619      	mov	r1, r3
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006160:	4413      	add	r3, r2
 8006162:	4619      	mov	r1, r3
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff fdff 	bl	8005d68 <move_window>
 800616a:	4603      	mov	r3, r0
 800616c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f040 809c 	bne.w	80062ae <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	899b      	ldrh	r3, [r3, #12]
 8006180:	461a      	mov	r2, r3
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	fbb3 f0f2 	udiv	r0, r3, r2
 8006188:	fb02 f200 	mul.w	r2, r2, r0
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	440b      	add	r3, r1
 8006190:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <put_fat+0x11a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e00e      	b.n	80061c2 <put_fat+0x138>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b25b      	sxtb	r3, r3
 80061aa:	f023 030f 	bic.w	r3, r3, #15
 80061ae:	b25a      	sxtb	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	4313      	orrs	r3, r2
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	70da      	strb	r2, [r3, #3]
			break;
 80061cc:	e074      	b.n	80062b8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	899b      	ldrh	r3, [r3, #12]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	fbb3 f3f1 	udiv	r3, r3, r1
 80061e2:	4413      	add	r3, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff fdbe 	bl	8005d68 <move_window>
 80061ec:	4603      	mov	r3, r0
 80061ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061f0:	7ffb      	ldrb	r3, [r7, #31]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d15d      	bne.n	80062b2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	8992      	ldrh	r2, [r2, #12]
 8006204:	fbb3 f0f2 	udiv	r0, r3, r2
 8006208:	fb02 f200 	mul.w	r2, r2, r0
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	440b      	add	r3, r1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	b292      	uxth	r2, r2
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fb31 	bl	800587e <st_word>
			fs->wflag = 1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	70da      	strb	r2, [r3, #3]
			break;
 8006222:	e049      	b.n	80062b8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	899b      	ldrh	r3, [r3, #12]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	b29b      	uxth	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	fbb3 f3f1 	udiv	r3, r3, r1
 8006238:	4413      	add	r3, r2
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fd93 	bl	8005d68 <move_window>
 8006242:	4603      	mov	r3, r0
 8006244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d134      	bne.n	80062b6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	8992      	ldrh	r2, [r2, #12]
 8006260:	fbb3 f0f2 	udiv	r0, r3, r2
 8006264:	fb02 f200 	mul.w	r2, r2, r0
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	440b      	add	r3, r1
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fae3 	bl	8005838 <ld_dword>
 8006272:	4603      	mov	r3, r0
 8006274:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006278:	4323      	orrs	r3, r4
 800627a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	8992      	ldrh	r2, [r2, #12]
 800628a:	fbb3 f0f2 	udiv	r0, r3, r2
 800628e:	fb02 f200 	mul.w	r2, r2, r0
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	440b      	add	r3, r1
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fb0b 	bl	80058b4 <st_dword>
			fs->wflag = 1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	70da      	strb	r2, [r3, #3]
			break;
 80062a4:	e008      	b.n	80062b8 <put_fat+0x22e>
		}
	}
 80062a6:	bf00      	nop
 80062a8:	e006      	b.n	80062b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062aa:	bf00      	nop
 80062ac:	e004      	b.n	80062b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80062b6:	bf00      	nop
	return res;
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3724      	adds	r7, #36	; 0x24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}

080062c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d904      	bls.n	80062e8 <remove_chain+0x26>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d301      	bcc.n	80062ec <remove_chain+0x2a>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e04b      	b.n	8006384 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	69b8      	ldr	r0, [r7, #24]
 80062fa:	f7ff fec6 	bl	800608a <put_fat>
 80062fe:	4603      	mov	r3, r0
 8006300:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <remove_chain+0x4a>
 8006308:	7ffb      	ldrb	r3, [r7, #31]
 800630a:	e03b      	b.n	8006384 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fde7 	bl	8005ee2 <get_fat>
 8006314:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d031      	beq.n	8006380 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <remove_chain+0x64>
 8006322:	2302      	movs	r3, #2
 8006324:	e02e      	b.n	8006384 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632c:	d101      	bne.n	8006332 <remove_chain+0x70>
 800632e:	2301      	movs	r3, #1
 8006330:	e028      	b.n	8006384 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006332:	2200      	movs	r2, #0
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	69b8      	ldr	r0, [r7, #24]
 8006338:	f7ff fea7 	bl	800608a <put_fat>
 800633c:	4603      	mov	r3, r0
 800633e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006340:	7ffb      	ldrb	r3, [r7, #31]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <remove_chain+0x88>
 8006346:	7ffb      	ldrb	r3, [r7, #31]
 8006348:	e01c      	b.n	8006384 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	3b02      	subs	r3, #2
 8006354:	429a      	cmp	r2, r3
 8006356:	d20b      	bcs.n	8006370 <remove_chain+0xae>
			fs->free_clst++;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3c6      	bcc.n	800630c <remove_chain+0x4a>
 800637e:	e000      	b.n	8006382 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006380:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <create_chain+0x2c>
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d31b      	bcc.n	80063f0 <create_chain+0x64>
 80063b8:	2301      	movs	r3, #1
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	e018      	b.n	80063f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fd8e 	bl	8005ee2 <get_fat>
 80063c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d801      	bhi.n	80063d2 <create_chain+0x46>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e070      	b.n	80064b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d8:	d101      	bne.n	80063de <create_chain+0x52>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	e06a      	b.n	80064b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d201      	bcs.n	80063ec <create_chain+0x60>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	e063      	b.n	80064b4 <create_chain+0x128>
		scl = clst;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	3301      	adds	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	429a      	cmp	r2, r3
 8006402:	d307      	bcc.n	8006414 <create_chain+0x88>
				ncl = 2;
 8006404:	2302      	movs	r3, #2
 8006406:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	429a      	cmp	r2, r3
 800640e:	d901      	bls.n	8006414 <create_chain+0x88>
 8006410:	2300      	movs	r3, #0
 8006412:	e04f      	b.n	80064b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006414:	69f9      	ldr	r1, [r7, #28]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fd63 	bl	8005ee2 <get_fat>
 800641c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d003      	beq.n	8006432 <create_chain+0xa6>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006430:	d101      	bne.n	8006436 <create_chain+0xaa>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	e03e      	b.n	80064b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d1da      	bne.n	80063f4 <create_chain+0x68>
 800643e:	2300      	movs	r3, #0
 8006440:	e038      	b.n	80064b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006442:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006448:	69f9      	ldr	r1, [r7, #28]
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f7ff fe1d 	bl	800608a <put_fat>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <create_chain+0xe2>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6938      	ldr	r0, [r7, #16]
 8006466:	f7ff fe10 	bl	800608a <put_fat>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d116      	bne.n	80064a2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	3b02      	subs	r3, #2
 8006484:	429a      	cmp	r2, r3
 8006486:	d804      	bhi.n	8006492 <create_chain+0x106>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	791b      	ldrb	r3, [r3, #4]
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	711a      	strb	r2, [r3, #4]
 80064a0:	e007      	b.n	80064b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d102      	bne.n	80064ae <create_chain+0x122>
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ac:	e000      	b.n	80064b0 <create_chain+0x124>
 80064ae:	2301      	movs	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064b2:	69fb      	ldr	r3, [r7, #28]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	3304      	adds	r3, #4
 80064d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	899b      	ldrh	r3, [r3, #12]
 80064d8:	461a      	mov	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	8952      	ldrh	r2, [r2, #10]
 80064e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1d1a      	adds	r2, r3, #4
 80064ee:	613a      	str	r2, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <clmt_clust+0x42>
 80064fa:	2300      	movs	r3, #0
 80064fc:	e010      	b.n	8006520 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	d307      	bcc.n	8006516 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3304      	adds	r3, #4
 8006512:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006514:	e7e9      	b.n	80064ea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006516:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006542:	d204      	bcs.n	800654e <dir_sdi+0x22>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <dir_sdi+0x26>
		return FR_INT_ERR;
 800654e:	2302      	movs	r3, #2
 8006550:	e071      	b.n	8006636 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <dir_sdi+0x46>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d902      	bls.n	8006572 <dir_sdi+0x46>
		clst = fs->dirbase;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10c      	bne.n	8006592 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	8912      	ldrh	r2, [r2, #8]
 8006580:	4293      	cmp	r3, r2
 8006582:	d301      	bcc.n	8006588 <dir_sdi+0x5c>
 8006584:	2302      	movs	r3, #2
 8006586:	e056      	b.n	8006636 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	61da      	str	r2, [r3, #28]
 8006590:	e02d      	b.n	80065ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	895b      	ldrh	r3, [r3, #10]
 8006596:	461a      	mov	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	899b      	ldrh	r3, [r3, #12]
 800659c:	fb03 f302 	mul.w	r3, r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065a2:	e019      	b.n	80065d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6979      	ldr	r1, [r7, #20]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff fc9a 	bl	8005ee2 <get_fat>
 80065ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d101      	bne.n	80065bc <dir_sdi+0x90>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e03c      	b.n	8006636 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d904      	bls.n	80065cc <dir_sdi+0xa0>
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d301      	bcc.n	80065d0 <dir_sdi+0xa4>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e032      	b.n	8006636 <dir_sdi+0x10a>
			ofs -= csz;
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d2e1      	bcs.n	80065a4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80065e0:	6979      	ldr	r1, [r7, #20]
 80065e2:	6938      	ldr	r0, [r7, #16]
 80065e4:	f7ff fc5e 	bl	8005ea4 <clust2sect>
 80065e8:	4602      	mov	r2, r0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <dir_sdi+0xd4>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e01a      	b.n	8006636 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	899b      	ldrh	r3, [r3, #12]
 8006608:	4619      	mov	r1, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	899b      	ldrh	r3, [r3, #12]
 8006620:	461a      	mov	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	fbb3 f0f2 	udiv	r0, r3, r2
 8006628:	fb02 f200 	mul.w	r2, r2, r0
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	18ca      	adds	r2, r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	3320      	adds	r3, #32
 8006654:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <dir_next+0x28>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006664:	d301      	bcc.n	800666a <dir_next+0x2c>
 8006666:	2304      	movs	r3, #4
 8006668:	e0bb      	b.n	80067e2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	899b      	ldrh	r3, [r3, #12]
 800666e:	461a      	mov	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	fbb3 f1f2 	udiv	r1, r3, r2
 8006676:	fb02 f201 	mul.w	r2, r2, r1
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 809d 	bne.w	80067bc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10b      	bne.n	80066ac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	8912      	ldrh	r2, [r2, #8]
 800669c:	4293      	cmp	r3, r2
 800669e:	f0c0 808d 	bcc.w	80067bc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	61da      	str	r2, [r3, #28]
 80066a8:	2304      	movs	r3, #4
 80066aa:	e09a      	b.n	80067e2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	899b      	ldrh	r3, [r3, #12]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	8952      	ldrh	r2, [r2, #10]
 80066bc:	3a01      	subs	r2, #1
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d17b      	bne.n	80067bc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7ff fc08 	bl	8005ee2 <get_fat>
 80066d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d801      	bhi.n	80066de <dir_next+0xa0>
 80066da:	2302      	movs	r3, #2
 80066dc:	e081      	b.n	80067e2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e4:	d101      	bne.n	80066ea <dir_next+0xac>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e07b      	b.n	80067e2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d359      	bcc.n	80067a8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	61da      	str	r2, [r3, #28]
 8006700:	2304      	movs	r3, #4
 8006702:	e06e      	b.n	80067e2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f7ff fe3d 	bl	800638c <create_chain>
 8006712:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <dir_next+0xe0>
 800671a:	2307      	movs	r3, #7
 800671c:	e061      	b.n	80067e2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <dir_next+0xea>
 8006724:	2302      	movs	r3, #2
 8006726:	e05c      	b.n	80067e2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800672e:	d101      	bne.n	8006734 <dir_next+0xf6>
 8006730:	2301      	movs	r3, #1
 8006732:	e056      	b.n	80067e2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fad3 	bl	8005ce0 <sync_window>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <dir_next+0x106>
 8006740:	2301      	movs	r3, #1
 8006742:	e04e      	b.n	80067e2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	899b      	ldrh	r3, [r3, #12]
 800674e:	461a      	mov	r2, r3
 8006750:	2100      	movs	r1, #0
 8006752:	f7ff f8fc 	bl	800594e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fba1 	bl	8005ea4 <clust2sect>
 8006762:	4602      	mov	r2, r0
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	635a      	str	r2, [r3, #52]	; 0x34
 8006768:	e012      	b.n	8006790 <dir_next+0x152>
						fs->wflag = 1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fab5 	bl	8005ce0 <sync_window>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <dir_next+0x142>
 800677c:	2301      	movs	r3, #1
 800677e:	e030      	b.n	80067e2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3301      	adds	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	635a      	str	r2, [r3, #52]	; 0x34
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	895b      	ldrh	r3, [r3, #10]
 8006794:	461a      	mov	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4293      	cmp	r3, r2
 800679a:	d3e6      	bcc.n	800676a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad2      	subs	r2, r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fb77 	bl	8005ea4 <clust2sect>
 80067b6:	4602      	mov	r2, r0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80067d4:	fb02 f200 	mul.w	r2, r2, r0
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	18ca      	adds	r2, r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b086      	sub	sp, #24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067fa:	2100      	movs	r1, #0
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fe95 	bl	800652c <dir_sdi>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d12b      	bne.n	8006864 <dir_alloc+0x7a>
		n = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	4619      	mov	r1, r3
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff faa6 	bl	8005d68 <move_window>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11d      	bne.n	8006862 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2be5      	cmp	r3, #229	; 0xe5
 800682e:	d004      	beq.n	800683a <dir_alloc+0x50>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d107      	bne.n	800684a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3301      	adds	r3, #1
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d102      	bne.n	800684e <dir_alloc+0x64>
 8006848:	e00c      	b.n	8006864 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800684e:	2101      	movs	r1, #1
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff fef4 	bl	800663e <dir_next>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0d7      	beq.n	8006810 <dir_alloc+0x26>
 8006860:	e000      	b.n	8006864 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006862:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d101      	bne.n	800686e <dir_alloc+0x84>
 800686a:	2307      	movs	r3, #7
 800686c:	75fb      	strb	r3, [r7, #23]
	return res;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	331a      	adds	r3, #26
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe ffbe 	bl	8005808 <ld_word>
 800688c:	4603      	mov	r3, r0
 800688e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d109      	bne.n	80068ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe ffb3 	bl	8005808 <ld_word>
 80068a2:	4603      	mov	r3, r0
 80068a4:	041b      	lsls	r3, r3, #16
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	331a      	adds	r3, #26
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	b292      	uxth	r2, r2
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe ffd6 	bl	800587e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d109      	bne.n	80068ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f103 0214 	add.w	r2, r3, #20
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe ffc8 	bl	800587e <st_word>
	}
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	331a      	adds	r3, #26
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe ff7e 	bl	8005808 <ld_word>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <cmp_lfn+0x1e>
 8006912:	2300      	movs	r3, #0
 8006914:	e059      	b.n	80069ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800691e:	1e5a      	subs	r2, r3, #1
 8006920:	4613      	mov	r3, r2
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800692c:	2301      	movs	r3, #1
 800692e:	81fb      	strh	r3, [r7, #14]
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	e033      	b.n	800699e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006936:	4a27      	ldr	r2, [pc, #156]	; (80069d4 <cmp_lfn+0xdc>)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4413      	add	r3, r2
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe ff5f 	bl	8005808 <ld_word>
 800694a:	4603      	mov	r3, r0
 800694c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800694e:	89fb      	ldrh	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01a      	beq.n	800698a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2bfe      	cmp	r3, #254	; 0xfe
 8006958:	d812      	bhi.n	8006980 <cmp_lfn+0x88>
 800695a:	89bb      	ldrh	r3, [r7, #12]
 800695c:	4618      	mov	r0, r3
 800695e:	f001 ffef 	bl	8008940 <ff_wtoupper>
 8006962:	4603      	mov	r3, r0
 8006964:	461c      	mov	r4, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	617a      	str	r2, [r7, #20]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f001 ffe3 	bl	8008940 <ff_wtoupper>
 800697a:	4603      	mov	r3, r0
 800697c:	429c      	cmp	r4, r3
 800697e:	d001      	beq.n	8006984 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006980:	2300      	movs	r3, #0
 8006982:	e022      	b.n	80069ca <cmp_lfn+0xd2>
			}
			wc = uc;
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	81fb      	strh	r3, [r7, #14]
 8006988:	e006      	b.n	8006998 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006990:	4293      	cmp	r3, r2
 8006992:	d001      	beq.n	8006998 <cmp_lfn+0xa0>
 8006994:	2300      	movs	r3, #0
 8006996:	e018      	b.n	80069ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3301      	adds	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b0c      	cmp	r3, #12
 80069a2:	d9c8      	bls.n	8006936 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <cmp_lfn+0xd0>
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <cmp_lfn+0xd0>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <cmp_lfn+0xd0>
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80069c8:	2301      	movs	r3, #1
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd90      	pop	{r4, r7, pc}
 80069d2:	bf00      	nop
 80069d4:	08008c6c 	.word	0x08008c6c

080069d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	460b      	mov	r3, r1
 80069e8:	71fb      	strb	r3, [r7, #7]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	330d      	adds	r3, #13
 80069f2:	79ba      	ldrb	r2, [r7, #6]
 80069f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	330b      	adds	r3, #11
 80069fa:	220f      	movs	r2, #15
 80069fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	330c      	adds	r3, #12
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	331a      	adds	r3, #26
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe ff36 	bl	800587e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	1e5a      	subs	r2, r3, #1
 8006a16:	4613      	mov	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	82fb      	strh	r3, [r7, #22]
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a2a:	8afb      	ldrh	r3, [r7, #22]
 8006a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <put_lfn+0x6c>
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	61fa      	str	r2, [r7, #28]
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <put_lfn+0xcc>)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	4413      	add	r3, r2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	8afa      	ldrh	r2, [r7, #22]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe ff11 	bl	800587e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a5c:	8afb      	ldrh	r3, [r7, #22]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <put_lfn+0x90>
 8006a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a66:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d9da      	bls.n	8006a2a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a74:	8afb      	ldrh	r3, [r7, #22]
 8006a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d006      	beq.n	8006a8c <put_lfn+0xb4>
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <put_lfn+0xbc>
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a92:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	79fa      	ldrb	r2, [r7, #7]
 8006a98:	701a      	strb	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08008c6c 	.word	0x08008c6c

08006aa8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	; 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ab6:	220b      	movs	r2, #11
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7fe ff26 	bl	800590c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d92b      	bls.n	8006b1e <gen_numname+0x76>
		sr = seq;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006aca:	e022      	b.n	8006b12 <gen_numname+0x6a>
			wc = *lfn++;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	607a      	str	r2, [r7, #4]
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ada:	e017      	b.n	8006b0c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	005a      	lsls	r2, r3, #1
 8006ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006aea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <gen_numname+0x5e>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006b00:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006b04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	3301      	adds	r3, #1
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d9e4      	bls.n	8006adc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1d8      	bne.n	8006acc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b1e:	2307      	movs	r3, #7
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	3330      	adds	r3, #48	; 0x30
 8006b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b36:	2b39      	cmp	r3, #57	; 0x39
 8006b38:	d904      	bls.n	8006b44 <gen_numname+0x9c>
 8006b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b3e:	3307      	adds	r3, #7
 8006b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	1e5a      	subs	r2, r3, #1
 8006b48:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b4e:	4413      	add	r3, r2
 8006b50:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b54:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	091b      	lsrs	r3, r3, #4
 8006b5c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1de      	bne.n	8006b22 <gen_numname+0x7a>
	ns[i] = '~';
 8006b64:	f107 0214 	add.w	r2, r7, #20
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	4413      	add	r3, r2
 8006b6c:	227e      	movs	r2, #126	; 0x7e
 8006b6e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	e002      	b.n	8006b7c <gen_numname+0xd4>
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d205      	bcs.n	8006b90 <gen_numname+0xe8>
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	4413      	add	r3, r2
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d1f2      	bne.n	8006b76 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b07      	cmp	r3, #7
 8006b94:	d808      	bhi.n	8006ba8 <gen_numname+0x100>
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006ba6:	e000      	b.n	8006baa <gen_numname+0x102>
 8006ba8:	2120      	movs	r1, #32
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	627a      	str	r2, [r7, #36]	; 0x24
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	460a      	mov	r2, r1
 8006bb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	d9e8      	bls.n	8006b90 <gen_numname+0xe8>
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006bd4:	230b      	movs	r3, #11
 8006bd6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	0852      	lsrs	r2, r2, #1
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4313      	orrs	r3, r2
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6079      	str	r1, [r7, #4]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	4413      	add	r3, r2
 8006bee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ed      	bne.n	8006bd8 <sum_sfn+0x10>
	return sum;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fc86 	bl	800652c <dir_sdi>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <dir_find+0x24>
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	e0a9      	b.n	8006d82 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c2e:	23ff      	movs	r3, #255	; 0xff
 8006c30:	753b      	strb	r3, [r7, #20]
 8006c32:	7d3b      	ldrb	r3, [r7, #20]
 8006c34:	757b      	strb	r3, [r7, #21]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f7ff f88f 	bl	8005d68 <move_window>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f040 8090 	bne.w	8006d76 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c5e:	7dbb      	ldrb	r3, [r7, #22]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <dir_find+0x60>
 8006c64:	2304      	movs	r3, #4
 8006c66:	75fb      	strb	r3, [r7, #23]
 8006c68:	e08a      	b.n	8006d80 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	330b      	adds	r3, #11
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c76:	73fb      	strb	r3, [r7, #15]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7bfa      	ldrb	r2, [r7, #15]
 8006c7c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006c7e:	7dbb      	ldrb	r3, [r7, #22]
 8006c80:	2be5      	cmp	r3, #229	; 0xe5
 8006c82:	d007      	beq.n	8006c94 <dir_find+0x8a>
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <dir_find+0x98>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b0f      	cmp	r3, #15
 8006c92:	d006      	beq.n	8006ca2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c94:	23ff      	movs	r3, #255	; 0xff
 8006c96:	757b      	strb	r3, [r7, #21]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006ca0:	e05e      	b.n	8006d60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b0f      	cmp	r3, #15
 8006ca6:	d136      	bne.n	8006d16 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d154      	bne.n	8006d60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006cb6:	7dbb      	ldrb	r3, [r7, #22]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00d      	beq.n	8006cdc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	7b5b      	ldrb	r3, [r3, #13]
 8006cc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006cc8:	7dbb      	ldrb	r3, [r7, #22]
 8006cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cce:	75bb      	strb	r3, [r7, #22]
 8006cd0:	7dbb      	ldrb	r3, [r7, #22]
 8006cd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006cdc:	7dba      	ldrb	r2, [r7, #22]
 8006cde:	7d7b      	ldrb	r3, [r7, #21]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d115      	bne.n	8006d10 <dir_find+0x106>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	330d      	adds	r3, #13
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	7d3a      	ldrb	r2, [r7, #20]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d10e      	bne.n	8006d10 <dir_find+0x106>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7ff fdfb 	bl	80068f8 <cmp_lfn>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <dir_find+0x106>
 8006d08:	7d7b      	ldrb	r3, [r7, #21]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e000      	b.n	8006d12 <dir_find+0x108>
 8006d10:	23ff      	movs	r3, #255	; 0xff
 8006d12:	757b      	strb	r3, [r7, #21]
 8006d14:	e024      	b.n	8006d60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d16:	7d7b      	ldrb	r3, [r7, #21]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d109      	bne.n	8006d30 <dir_find+0x126>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff ff51 	bl	8006bc8 <sum_sfn>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	7d3b      	ldrb	r3, [r7, #20]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d024      	beq.n	8006d7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <dir_find+0x14a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a18      	ldr	r0, [r3, #32]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3324      	adds	r3, #36	; 0x24
 8006d46:	220b      	movs	r2, #11
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f7fe fe1b 	bl	8005984 <mem_cmp>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d014      	beq.n	8006d7e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d54:	23ff      	movs	r3, #255	; 0xff
 8006d56:	757b      	strb	r3, [r7, #21]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fc6b 	bl	800663e <dir_next>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f43f af65 	beq.w	8006c3e <dir_find+0x34>
 8006d74:	e004      	b.n	8006d80 <dir_find+0x176>
		if (res != FR_OK) break;
 8006d76:	bf00      	nop
 8006d78:	e002      	b.n	8006d80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d7a:	bf00      	nop
 8006d7c:	e000      	b.n	8006d80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d7e:	bf00      	nop

	return res;
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08c      	sub	sp, #48	; 0x30
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006da0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <dir_register+0x20>
 8006da8:	2306      	movs	r3, #6
 8006daa:	e0e0      	b.n	8006f6e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006dac:	2300      	movs	r3, #0
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
 8006db0:	e002      	b.n	8006db8 <dir_register+0x2c>
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	3301      	adds	r3, #1
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f4      	bne.n	8006db2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	220c      	movs	r2, #12
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fd99 	bl	800590c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d032      	beq.n	8006e4a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2240      	movs	r2, #64	; 0x40
 8006de8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006dec:	2301      	movs	r3, #1
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df0:	e016      	b.n	8006e20 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	f107 010c 	add.w	r1, r7, #12
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	f7ff fe51 	bl	8006aa8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff feff 	bl	8006c0a <dir_find>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2b63      	cmp	r3, #99	; 0x63
 8006e24:	d9e5      	bls.n	8006df2 <dir_register+0x66>
 8006e26:	e000      	b.n	8006e2a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2b64      	cmp	r3, #100	; 0x64
 8006e2e:	d101      	bne.n	8006e34 <dir_register+0xa8>
 8006e30:	2307      	movs	r3, #7
 8006e32:	e09c      	b.n	8006f6e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d002      	beq.n	8006e42 <dir_register+0xb6>
 8006e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e40:	e095      	b.n	8006f6e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e42:	7dfa      	ldrb	r2, [r7, #23]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d007      	beq.n	8006e64 <dir_register+0xd8>
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	330c      	adds	r3, #12
 8006e58:	4a47      	ldr	r2, [pc, #284]	; (8006f78 <dir_register+0x1ec>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	089b      	lsrs	r3, r3, #2
 8006e60:	3301      	adds	r3, #1
 8006e62:	e000      	b.n	8006e66 <dir_register+0xda>
 8006e64:	2301      	movs	r3, #1
 8006e66:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e68:	6a39      	ldr	r1, [r7, #32]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fcbd 	bl	80067ea <dir_alloc>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d148      	bne.n	8006f10 <dir_register+0x184>
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d042      	beq.n	8006f10 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	015b      	lsls	r3, r3, #5
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fb48 	bl	800652c <dir_sdi>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d132      	bne.n	8006f10 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3324      	adds	r3, #36	; 0x24
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fe8a 	bl	8006bc8 <sum_sfn>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	69f8      	ldr	r0, [r7, #28]
 8006ec0:	f7fe ff52 	bl	8005d68 <move_window>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11d      	bne.n	8006f0e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	6918      	ldr	r0, [r3, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a19      	ldr	r1, [r3, #32]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7efb      	ldrb	r3, [r7, #27]
 8006ee0:	f7ff fd7a 	bl	80069d8 <put_lfn>
				fs->wflag = 1;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006eea:	2100      	movs	r1, #0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fba6 	bl	800663e <dir_next>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <dir_register+0x184>
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	623b      	str	r3, [r7, #32]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1d5      	bne.n	8006eb8 <dir_register+0x12c>
 8006f0c:	e000      	b.n	8006f10 <dir_register+0x184>
				if (res != FR_OK) break;
 8006f0e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d128      	bne.n	8006f6a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	69f8      	ldr	r0, [r7, #28]
 8006f20:	f7fe ff22 	bl	8005d68 <move_window>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d11b      	bne.n	8006f6a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	2220      	movs	r2, #32
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fd07 	bl	800594e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a18      	ldr	r0, [r3, #32]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3324      	adds	r3, #36	; 0x24
 8006f48:	220b      	movs	r2, #11
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f7fe fcde 	bl	800590c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	f002 0218 	and.w	r2, r2, #24
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	2201      	movs	r2, #1
 8006f68:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3730      	adds	r7, #48	; 0x30
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	4ec4ec4f 	.word	0x4ec4ec4f

08006f7c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 80c9 	beq.w	800712e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa4:	d032      	beq.n	800700c <get_fileinfo+0x90>
			i = j = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006fae:	e01b      	b.n	8006fe8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006fb0:	89fb      	ldrh	r3, [r7, #14]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 fc87 	bl	80088c8 <ff_convert>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006fbe:	89fb      	ldrh	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <get_fileinfo+0x4e>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e01a      	b.n	8007000 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2bfe      	cmp	r3, #254	; 0xfe
 8006fce:	d902      	bls.n	8006fd6 <get_fileinfo+0x5a>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e014      	b.n	8007000 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	61fa      	str	r2, [r7, #28]
 8006fdc:	89fa      	ldrh	r2, [r7, #14]
 8006fde:	b2d1      	uxtb	r1, r2
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	61b9      	str	r1, [r7, #24]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	81fb      	strh	r3, [r7, #14]
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1d7      	bne.n	8006fb0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	3316      	adds	r3, #22
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	3316      	adds	r3, #22
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007020:	e04c      	b.n	80070bc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	1c59      	adds	r1, r3, #1
 800702a:	61f9      	str	r1, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d100      	bne.n	800703a <get_fileinfo+0xbe>
 8007038:	e040      	b.n	80070bc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b05      	cmp	r3, #5
 800703e:	d101      	bne.n	8007044 <get_fileinfo+0xc8>
 8007040:	23e5      	movs	r3, #229	; 0xe5
 8007042:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b09      	cmp	r3, #9
 8007048:	d10f      	bne.n	800706a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800704a:	89bb      	ldrh	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <get_fileinfo+0xe0>
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	4413      	add	r3, r2
 8007056:	3316      	adds	r3, #22
 8007058:	222e      	movs	r2, #46	; 0x2e
 800705a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	61ba      	str	r2, [r7, #24]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4413      	add	r3, r2
 8007066:	222e      	movs	r2, #46	; 0x2e
 8007068:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4413      	add	r3, r2
 8007070:	3309      	adds	r3, #9
 8007072:	7dfa      	ldrb	r2, [r7, #23]
 8007074:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007076:	89bb      	ldrh	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11c      	bne.n	80070b6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d913      	bls.n	80070aa <get_fileinfo+0x12e>
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b5a      	cmp	r3, #90	; 0x5a
 8007086:	d810      	bhi.n	80070aa <get_fileinfo+0x12e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	330c      	adds	r3, #12
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b08      	cmp	r3, #8
 8007096:	d901      	bls.n	800709c <get_fileinfo+0x120>
 8007098:	2310      	movs	r3, #16
 800709a:	e000      	b.n	800709e <get_fileinfo+0x122>
 800709c:	2308      	movs	r3, #8
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	3320      	adds	r3, #32
 80070a8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	4413      	add	r3, r2
 80070b0:	3316      	adds	r3, #22
 80070b2:	7dfa      	ldrb	r2, [r7, #23]
 80070b4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	3301      	adds	r3, #1
 80070ba:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b0a      	cmp	r3, #10
 80070c0:	d9af      	bls.n	8007022 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80070c2:	89bb      	ldrh	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10d      	bne.n	80070e4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	4413      	add	r3, r2
 80070ce:	3316      	adds	r3, #22
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	330c      	adds	r3, #12
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <get_fileinfo+0x168>
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	4413      	add	r3, r2
 80070ea:	3309      	adds	r3, #9
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	7ada      	ldrb	r2, [r3, #11]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	331c      	adds	r3, #28
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fb99 	bl	8005838 <ld_dword>
 8007106:	4602      	mov	r2, r0
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	3316      	adds	r3, #22
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fb90 	bl	8005838 <ld_dword>
 8007118:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	b29a      	uxth	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	80da      	strh	r2, [r3, #6]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	b29a      	uxth	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	809a      	strh	r2, [r3, #4]
 800712c:	e000      	b.n	8007130 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800712e:	bf00      	nop
}
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08a      	sub	sp, #40	; 0x28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007168:	2b1f      	cmp	r3, #31
 800716a:	d940      	bls.n	80071ee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800716c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800716e:	2b2f      	cmp	r3, #47	; 0x2f
 8007170:	d006      	beq.n	8007180 <create_name+0x48>
 8007172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007174:	2b5c      	cmp	r3, #92	; 0x5c
 8007176:	d110      	bne.n	800719a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007178:	e002      	b.n	8007180 <create_name+0x48>
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	3301      	adds	r3, #1
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	4413      	add	r3, r2
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b2f      	cmp	r3, #47	; 0x2f
 800718a:	d0f6      	beq.n	800717a <create_name+0x42>
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	4413      	add	r3, r2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b5c      	cmp	r3, #92	; 0x5c
 8007196:	d0f0      	beq.n	800717a <create_name+0x42>
			break;
 8007198:	e02a      	b.n	80071f0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2bfe      	cmp	r3, #254	; 0xfe
 800719e:	d901      	bls.n	80071a4 <create_name+0x6c>
 80071a0:	2306      	movs	r3, #6
 80071a2:	e177      	b.n	8007494 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80071a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80071aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ac:	2101      	movs	r1, #1
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fb8a 	bl	80088c8 <ff_convert>
 80071b4:	4603      	mov	r3, r0
 80071b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80071b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <create_name+0x8a>
 80071be:	2306      	movs	r3, #6
 80071c0:	e168      	b.n	8007494 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80071c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c4:	2b7f      	cmp	r3, #127	; 0x7f
 80071c6:	d809      	bhi.n	80071dc <create_name+0xa4>
 80071c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ca:	4619      	mov	r1, r3
 80071cc:	48b3      	ldr	r0, [pc, #716]	; (800749c <create_name+0x364>)
 80071ce:	f7fe fc00 	bl	80059d2 <chk_chr>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <create_name+0xa4>
 80071d8:	2306      	movs	r3, #6
 80071da:	e15b      	b.n	8007494 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	617a      	str	r2, [r7, #20]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071ea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80071ec:	e7b4      	b.n	8007158 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80071ee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	441a      	add	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80071fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fc:	2b1f      	cmp	r3, #31
 80071fe:	d801      	bhi.n	8007204 <create_name+0xcc>
 8007200:	2304      	movs	r3, #4
 8007202:	e000      	b.n	8007206 <create_name+0xce>
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800720a:	e011      	b.n	8007230 <create_name+0xf8>
		w = lfn[di - 1];
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007212:	3b01      	subs	r3, #1
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800721e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007220:	2b20      	cmp	r3, #32
 8007222:	d002      	beq.n	800722a <create_name+0xf2>
 8007224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007226:	2b2e      	cmp	r3, #46	; 0x2e
 8007228:	d106      	bne.n	8007238 <create_name+0x100>
		di--;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3b01      	subs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ea      	bne.n	800720c <create_name+0xd4>
 8007236:	e000      	b.n	800723a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007238:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	2200      	movs	r2, #0
 8007244:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <create_name+0x118>
 800724c:	2306      	movs	r3, #6
 800724e:	e121      	b.n	8007494 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3324      	adds	r3, #36	; 0x24
 8007254:	220b      	movs	r2, #11
 8007256:	2120      	movs	r1, #32
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fb78 	bl	800594e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	e002      	b.n	800726a <create_name+0x132>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	3301      	adds	r3, #1
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	2b20      	cmp	r3, #32
 8007276:	d0f5      	beq.n	8007264 <create_name+0x12c>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	2b2e      	cmp	r3, #46	; 0x2e
 8007284:	d0ee      	beq.n	8007264 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <create_name+0x168>
 800728c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007290:	f043 0303 	orr.w	r3, r3, #3
 8007294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007298:	e002      	b.n	80072a0 <create_name+0x168>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3b01      	subs	r3, #1
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <create_name+0x182>
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	3b01      	subs	r3, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d1ef      	bne.n	800729a <create_name+0x162>

	i = b = 0; ni = 8;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072c0:	2300      	movs	r3, #0
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	2308      	movs	r3, #8
 80072c6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	61ba      	str	r2, [r7, #24]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80072d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8090 	beq.w	8007400 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80072e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d006      	beq.n	80072f4 <create_name+0x1bc>
 80072e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e8:	2b2e      	cmp	r3, #46	; 0x2e
 80072ea:	d10a      	bne.n	8007302 <create_name+0x1ca>
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d006      	beq.n	8007302 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80072f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f8:	f043 0303 	orr.w	r3, r3, #3
 80072fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007300:	e07d      	b.n	80073fe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	429a      	cmp	r2, r3
 8007308:	d203      	bcs.n	8007312 <create_name+0x1da>
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	429a      	cmp	r2, r3
 8007310:	d123      	bne.n	800735a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b0b      	cmp	r3, #11
 8007316:	d106      	bne.n	8007326 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800731c:	f043 0303 	orr.w	r3, r3, #3
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007324:	e06f      	b.n	8007406 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	429a      	cmp	r2, r3
 800732c:	d005      	beq.n	800733a <create_name+0x202>
 800732e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007332:	f043 0303 	orr.w	r3, r3, #3
 8007336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	429a      	cmp	r2, r3
 8007340:	d860      	bhi.n	8007404 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	2308      	movs	r3, #8
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	230b      	movs	r3, #11
 800734c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800734e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007358:	e051      	b.n	80073fe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800735a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800735c:	2b7f      	cmp	r3, #127	; 0x7f
 800735e:	d914      	bls.n	800738a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f001 faaf 	bl	80088c8 <ff_convert>
 800736a:	4603      	mov	r3, r0
 800736c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800736e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <create_name+0x246>
 8007374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007376:	3b80      	subs	r3, #128	; 0x80
 8007378:	4a49      	ldr	r2, [pc, #292]	; (80074a0 <create_name+0x368>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800737e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800738a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <create_name+0x268>
 8007390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007392:	4619      	mov	r1, r3
 8007394:	4843      	ldr	r0, [pc, #268]	; (80074a4 <create_name+0x36c>)
 8007396:	f7fe fb1c 	bl	80059d2 <chk_chr>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80073a0:	235f      	movs	r3, #95	; 0x5f
 80073a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80073a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a8:	f043 0303 	orr.w	r3, r3, #3
 80073ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073b0:	e01b      	b.n	80073ea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80073b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d909      	bls.n	80073cc <create_name+0x294>
 80073b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ba:	2b5a      	cmp	r3, #90	; 0x5a
 80073bc:	d806      	bhi.n	80073cc <create_name+0x294>
					b |= 2;
 80073be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073c2:	f043 0302 	orr.w	r3, r3, #2
 80073c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073ca:	e00e      	b.n	80073ea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80073cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ce:	2b60      	cmp	r3, #96	; 0x60
 80073d0:	d90b      	bls.n	80073ea <create_name+0x2b2>
 80073d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073d4:	2b7a      	cmp	r3, #122	; 0x7a
 80073d6:	d808      	bhi.n	80073ea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80073d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e6:	3b20      	subs	r3, #32
 80073e8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	623a      	str	r2, [r7, #32]
 80073f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073f2:	b2d1      	uxtb	r1, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	460a      	mov	r2, r1
 80073fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80073fe:	e763      	b.n	80072c8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007404:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800740c:	2be5      	cmp	r3, #229	; 0xe5
 800740e:	d103      	bne.n	8007418 <create_name+0x2e0>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2205      	movs	r2, #5
 8007414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d104      	bne.n	8007428 <create_name+0x2f0>
 800741e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007428:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800742c:	f003 030c 	and.w	r3, r3, #12
 8007430:	2b0c      	cmp	r3, #12
 8007432:	d005      	beq.n	8007440 <create_name+0x308>
 8007434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d105      	bne.n	800744c <create_name+0x314>
 8007440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007444:	f043 0302 	orr.w	r3, r3, #2
 8007448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800744c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d117      	bne.n	8007488 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <create_name+0x338>
 8007464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007468:	f043 0310 	orr.w	r3, r3, #16
 800746c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007474:	f003 030c 	and.w	r3, r3, #12
 8007478:	2b04      	cmp	r3, #4
 800747a:	d105      	bne.n	8007488 <create_name+0x350>
 800747c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007480:	f043 0308 	orr.w	r3, r3, #8
 8007484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800748e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007492:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007494:	4618      	mov	r0, r3
 8007496:	3728      	adds	r7, #40	; 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	08008b48 	.word	0x08008b48
 80074a0:	08008bec 	.word	0x08008bec
 80074a4:	08008b54 	.word	0x08008b54

080074a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80074bc:	e002      	b.n	80074c4 <follow_path+0x1c>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b2f      	cmp	r3, #47	; 0x2f
 80074ca:	d0f8      	beq.n	80074be <follow_path+0x16>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b5c      	cmp	r3, #92	; 0x5c
 80074d2:	d0f4      	beq.n	80074be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b1f      	cmp	r3, #31
 80074e0:	d80a      	bhi.n	80074f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80074ea:	2100      	movs	r1, #0
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff f81d 	bl	800652c <dir_sdi>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
 80074f6:	e048      	b.n	800758a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074f8:	463b      	mov	r3, r7
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fe1b 	bl	8007138 <create_name>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d139      	bne.n	8007580 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fb7c 	bl	8006c0a <dir_find>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800751c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b04      	cmp	r3, #4
 8007528:	d12c      	bne.n	8007584 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d127      	bne.n	8007584 <follow_path+0xdc>
 8007534:	2305      	movs	r3, #5
 8007536:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007538:	e024      	b.n	8007584 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d121      	bne.n	8007588 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	799b      	ldrb	r3, [r3, #6]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007550:	2305      	movs	r3, #5
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	e019      	b.n	800758a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	8992      	ldrh	r2, [r2, #12]
 8007564:	fbb3 f0f2 	udiv	r0, r3, r2
 8007568:	fb02 f200 	mul.w	r2, r2, r0
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	440b      	add	r3, r1
 8007570:	4619      	mov	r1, r3
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff f980 	bl	8006878 <ld_clust>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800757e:	e7bb      	b.n	80074f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007580:	bf00      	nop
 8007582:	e002      	b.n	800758a <follow_path+0xe2>
				break;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007588:	bf00      	nop
			}
		}
	}

	return res;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d031      	beq.n	800760e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	e002      	b.n	80075b8 <get_ldnumber+0x24>
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3301      	adds	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b1f      	cmp	r3, #31
 80075be:	d903      	bls.n	80075c8 <get_ldnumber+0x34>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b3a      	cmp	r3, #58	; 0x3a
 80075c6:	d1f4      	bne.n	80075b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b3a      	cmp	r3, #58	; 0x3a
 80075ce:	d11c      	bne.n	800760a <get_ldnumber+0x76>
			tp = *path;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	60fa      	str	r2, [r7, #12]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	3b30      	subs	r3, #48	; 0x30
 80075e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d80e      	bhi.n	8007606 <get_ldnumber+0x72>
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d10a      	bne.n	8007606 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <get_ldnumber+0x72>
					vol = (int)i;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	3301      	adds	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	e002      	b.n	8007610 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800760e:	693b      	ldr	r3, [r7, #16]
}
 8007610:	4618      	mov	r0, r3
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	70da      	strb	r2, [r3, #3]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007632:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fe fb96 	bl	8005d68 <move_window>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <check_fs+0x2a>
 8007642:	2304      	movs	r3, #4
 8007644:	e038      	b.n	80076b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3338      	adds	r3, #56	; 0x38
 800764a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe f8da 	bl	8005808 <ld_word>
 8007654:	4603      	mov	r3, r0
 8007656:	461a      	mov	r2, r3
 8007658:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <check_fs+0x48>
 8007660:	2303      	movs	r3, #3
 8007662:	e029      	b.n	80076b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800766a:	2be9      	cmp	r3, #233	; 0xe9
 800766c:	d009      	beq.n	8007682 <check_fs+0x66>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007674:	2beb      	cmp	r3, #235	; 0xeb
 8007676:	d11e      	bne.n	80076b6 <check_fs+0x9a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800767e:	2b90      	cmp	r3, #144	; 0x90
 8007680:	d119      	bne.n	80076b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3338      	adds	r3, #56	; 0x38
 8007686:	3336      	adds	r3, #54	; 0x36
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe f8d5 	bl	8005838 <ld_dword>
 800768e:	4603      	mov	r3, r0
 8007690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <check_fs+0xa4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d101      	bne.n	800769e <check_fs+0x82>
 800769a:	2300      	movs	r3, #0
 800769c:	e00c      	b.n	80076b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3338      	adds	r3, #56	; 0x38
 80076a2:	3352      	adds	r3, #82	; 0x52
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe f8c7 	bl	8005838 <ld_dword>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <check_fs+0xa8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d101      	bne.n	80076b6 <check_fs+0x9a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80076b6:	2302      	movs	r3, #2
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	00544146 	.word	0x00544146
 80076c4:	33544146 	.word	0x33544146

080076c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b096      	sub	sp, #88	; 0x58
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff59 	bl	8007594 <get_ldnumber>
 80076e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da01      	bge.n	80076ee <find_volume+0x26>
 80076ea:	230b      	movs	r3, #11
 80076ec:	e268      	b.n	8007bc0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076ee:	4ab0      	ldr	r2, [pc, #704]	; (80079b0 <find_volume+0x2e8>)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <find_volume+0x3a>
 80076fe:	230c      	movs	r3, #12
 8007700:	e25e      	b.n	8007bc0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007706:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fd ffd5 	bl	80056cc <disk_status>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <find_volume+0x82>
 800773a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007746:	230a      	movs	r3, #10
 8007748:	e23a      	b.n	8007bc0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800774a:	2300      	movs	r3, #0
 800774c:	e238      	b.n	8007bc0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	4618      	mov	r0, r3
 8007762:	f7fd ffcd 	bl	8005700 <disk_initialize>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800776c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007778:	2303      	movs	r3, #3
 800777a:	e221      	b.n	8007bc0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <find_volume+0xca>
 8007782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800778e:	230a      	movs	r3, #10
 8007790:	e216      	b.n	8007bc0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	7858      	ldrb	r0, [r3, #1]
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	330c      	adds	r3, #12
 800779a:	461a      	mov	r2, r3
 800779c:	2102      	movs	r1, #2
 800779e:	f7fe f815 	bl	80057cc <disk_ioctl>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <find_volume+0xe4>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e209      	b.n	8007bc0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	899b      	ldrh	r3, [r3, #12]
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d80d      	bhi.n	80077d2 <find_volume+0x10a>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	899b      	ldrh	r3, [r3, #12]
 80077ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077be:	d308      	bcc.n	80077d2 <find_volume+0x10a>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	899b      	ldrh	r3, [r3, #12]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	899b      	ldrh	r3, [r3, #12]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <find_volume+0x10e>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e1f4      	b.n	8007bc0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80077da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077de:	f7ff ff1d 	bl	800761c <check_fs>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d14b      	bne.n	8007888 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077f0:	2300      	movs	r3, #0
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40
 80077f4:	e01f      	b.n	8007836 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80077fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007804:	4413      	add	r3, r2
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	3304      	adds	r3, #4
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d006      	beq.n	8007820 <find_volume+0x158>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	3308      	adds	r3, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe f80e 	bl	8005838 <ld_dword>
 800781c:	4602      	mov	r2, r0
 800781e:	e000      	b.n	8007822 <find_volume+0x15a>
 8007820:	2200      	movs	r2, #0
 8007822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800782a:	440b      	add	r3, r1
 800782c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007832:	3301      	adds	r3, #1
 8007834:	643b      	str	r3, [r7, #64]	; 0x40
 8007836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007838:	2b03      	cmp	r3, #3
 800783a:	d9dc      	bls.n	80077f6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800783c:	2300      	movs	r3, #0
 800783e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <find_volume+0x184>
 8007846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007848:	3b01      	subs	r3, #1
 800784a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800784c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007854:	4413      	add	r3, r2
 8007856:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800785a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800785c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <find_volume+0x1a6>
 8007862:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007866:	f7ff fed9 	bl	800761c <check_fs>
 800786a:	4603      	mov	r3, r0
 800786c:	e000      	b.n	8007870 <find_volume+0x1a8>
 800786e:	2303      	movs	r3, #3
 8007870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007878:	2b01      	cmp	r3, #1
 800787a:	d905      	bls.n	8007888 <find_volume+0x1c0>
 800787c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787e:	3301      	adds	r3, #1
 8007880:	643b      	str	r3, [r7, #64]	; 0x40
 8007882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007884:	2b03      	cmp	r3, #3
 8007886:	d9e1      	bls.n	800784c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788c:	2b04      	cmp	r3, #4
 800788e:	d101      	bne.n	8007894 <find_volume+0x1cc>
 8007890:	2301      	movs	r3, #1
 8007892:	e195      	b.n	8007bc0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007898:	2b01      	cmp	r3, #1
 800789a:	d901      	bls.n	80078a0 <find_volume+0x1d8>
 800789c:	230d      	movs	r3, #13
 800789e:	e18f      	b.n	8007bc0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	3338      	adds	r3, #56	; 0x38
 80078a4:	330b      	adds	r3, #11
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fd ffae 	bl	8005808 <ld_word>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	899b      	ldrh	r3, [r3, #12]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <find_volume+0x1f4>
 80078b8:	230d      	movs	r3, #13
 80078ba:	e181      	b.n	8007bc0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	3338      	adds	r3, #56	; 0x38
 80078c0:	3316      	adds	r3, #22
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fd ffa0 	bl	8005808 <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80078cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <find_volume+0x218>
 80078d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d4:	3338      	adds	r3, #56	; 0x38
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fd ffad 	bl	8005838 <ld_dword>
 80078de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	789b      	ldrb	r3, [r3, #2]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d005      	beq.n	8007904 <find_volume+0x23c>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	789b      	ldrb	r3, [r3, #2]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d001      	beq.n	8007904 <find_volume+0x23c>
 8007900:	230d      	movs	r3, #13
 8007902:	e15d      	b.n	8007bc0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	789b      	ldrb	r3, [r3, #2]
 8007908:	461a      	mov	r2, r3
 800790a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007918:	b29a      	uxth	r2, r3
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <find_volume+0x270>
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	895b      	ldrh	r3, [r3, #10]
 800792a:	461a      	mov	r2, r3
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	895b      	ldrh	r3, [r3, #10]
 8007930:	3b01      	subs	r3, #1
 8007932:	4013      	ands	r3, r2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <find_volume+0x274>
 8007938:	230d      	movs	r3, #13
 800793a:	e141      	b.n	8007bc0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	3338      	adds	r3, #56	; 0x38
 8007940:	3311      	adds	r3, #17
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd ff60 	bl	8005808 <ld_word>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	891b      	ldrh	r3, [r3, #8]
 8007954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007956:	8992      	ldrh	r2, [r2, #12]
 8007958:	0952      	lsrs	r2, r2, #5
 800795a:	b292      	uxth	r2, r2
 800795c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007960:	fb02 f201 	mul.w	r2, r2, r1
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <find_volume+0x2a8>
 800796c:	230d      	movs	r3, #13
 800796e:	e127      	b.n	8007bc0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	3338      	adds	r3, #56	; 0x38
 8007974:	3313      	adds	r3, #19
 8007976:	4618      	mov	r0, r3
 8007978:	f7fd ff46 	bl	8005808 <ld_word>
 800797c:	4603      	mov	r3, r0
 800797e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <find_volume+0x2cc>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	3338      	adds	r3, #56	; 0x38
 800798a:	3320      	adds	r3, #32
 800798c:	4618      	mov	r0, r3
 800798e:	f7fd ff53 	bl	8005838 <ld_dword>
 8007992:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	3338      	adds	r3, #56	; 0x38
 8007998:	330e      	adds	r3, #14
 800799a:	4618      	mov	r0, r3
 800799c:	f7fd ff34 	bl	8005808 <ld_word>
 80079a0:	4603      	mov	r3, r0
 80079a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80079a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <find_volume+0x2ec>
 80079aa:	230d      	movs	r3, #13
 80079ac:	e108      	b.n	8007bc0 <find_volume+0x4f8>
 80079ae:	bf00      	nop
 80079b0:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80079b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80079b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b8:	4413      	add	r3, r2
 80079ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079bc:	8911      	ldrh	r1, [r2, #8]
 80079be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c0:	8992      	ldrh	r2, [r2, #12]
 80079c2:	0952      	lsrs	r2, r2, #5
 80079c4:	b292      	uxth	r2, r2
 80079c6:	fbb1 f2f2 	udiv	r2, r1, r2
 80079ca:	b292      	uxth	r2, r2
 80079cc:	4413      	add	r3, r2
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d201      	bcs.n	80079dc <find_volume+0x314>
 80079d8:	230d      	movs	r3, #13
 80079da:	e0f1      	b.n	8007bc0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80079dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079e4:	8952      	ldrh	r2, [r2, #10]
 80079e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <find_volume+0x32e>
 80079f2:	230d      	movs	r3, #13
 80079f4:	e0e4      	b.n	8007bc0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80079f6:	2303      	movs	r3, #3
 80079f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d802      	bhi.n	8007a0c <find_volume+0x344>
 8007a06:	2302      	movs	r3, #2
 8007a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d802      	bhi.n	8007a1c <find_volume+0x354>
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	1c9a      	adds	r2, r3, #2
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a28:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2e:	441a      	add	r2, r3
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007a34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	441a      	add	r2, r3
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007a3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d11e      	bne.n	8007a84 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	3338      	adds	r3, #56	; 0x38
 8007a4a:	332a      	adds	r3, #42	; 0x2a
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fd fedb 	bl	8005808 <ld_word>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <find_volume+0x394>
 8007a58:	230d      	movs	r3, #13
 8007a5a:	e0b1      	b.n	8007bc0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	891b      	ldrh	r3, [r3, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <find_volume+0x3a0>
 8007a64:	230d      	movs	r3, #13
 8007a66:	e0ab      	b.n	8007bc0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	3338      	adds	r3, #56	; 0x38
 8007a6c:	332c      	adds	r3, #44	; 0x2c
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd fee2 	bl	8005838 <ld_dword>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	647b      	str	r3, [r7, #68]	; 0x44
 8007a82:	e01f      	b.n	8007ac4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	891b      	ldrh	r3, [r3, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <find_volume+0x3c8>
 8007a8c:	230d      	movs	r3, #13
 8007a8e:	e097      	b.n	8007bc0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a96:	441a      	add	r2, r3
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d103      	bne.n	8007aac <find_volume+0x3e4>
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	e00a      	b.n	8007ac2 <find_volume+0x3fa>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4413      	add	r3, r2
 8007ab6:	085a      	lsrs	r2, r3, #1
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ac2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ad6:	8989      	ldrh	r1, [r1, #12]
 8007ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d201      	bcs.n	8007ae4 <find_volume+0x41c>
 8007ae0:	230d      	movs	r3, #13
 8007ae2:	e06d      	b.n	8007bc0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aea:	619a      	str	r2, [r3, #24]
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2280      	movs	r2, #128	; 0x80
 8007af8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d149      	bne.n	8007b96 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	3338      	adds	r3, #56	; 0x38
 8007b06:	3330      	adds	r3, #48	; 0x30
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7fd fe7d 	bl	8005808 <ld_word>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d140      	bne.n	8007b96 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b16:	3301      	adds	r3, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b1c:	f7fe f924 	bl	8005d68 <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d137      	bne.n	8007b96 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	2200      	movs	r2, #0
 8007b2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	3338      	adds	r3, #56	; 0x38
 8007b30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fd fe67 	bl	8005808 <ld_word>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d127      	bne.n	8007b96 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	3338      	adds	r3, #56	; 0x38
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fe74 	bl	8005838 <ld_dword>
 8007b50:	4603      	mov	r3, r0
 8007b52:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <find_volume+0x500>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d11e      	bne.n	8007b96 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	3338      	adds	r3, #56	; 0x38
 8007b5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fd fe69 	bl	8005838 <ld_dword>
 8007b66:	4603      	mov	r3, r0
 8007b68:	4a18      	ldr	r2, [pc, #96]	; (8007bcc <find_volume+0x504>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d113      	bne.n	8007b96 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	3338      	adds	r3, #56	; 0x38
 8007b72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd fe5e 	bl	8005838 <ld_dword>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	3338      	adds	r3, #56	; 0x38
 8007b86:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd fe54 	bl	8005838 <ld_dword>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007b9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <find_volume+0x508>)
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <find_volume+0x508>)
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <find_volume+0x508>)
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	4a07      	ldr	r2, [pc, #28]	; (8007bd4 <find_volume+0x50c>)
 8007bb6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007bb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bba:	f7fe f86d 	bl	8005c98 <clear_lock>
#endif
	return FR_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3758      	adds	r7, #88	; 0x58
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	41615252 	.word	0x41615252
 8007bcc:	61417272 	.word	0x61417272
 8007bd0:	2000002c 	.word	0x2000002c
 8007bd4:	20000050 	.word	0x20000050

08007bd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007be2:	2309      	movs	r3, #9
 8007be4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01c      	beq.n	8007c26 <validate+0x4e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <validate+0x4e>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <validate+0x4e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	889a      	ldrh	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d10c      	bne.n	8007c26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fd5a 	bl	80056cc <disk_status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <validate+0x4e>
			res = FR_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <validate+0x5a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	e000      	b.n	8007c34 <validate+0x5c>
 8007c32:	2300      	movs	r3, #0
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	6013      	str	r3, [r2, #0]
	return res;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c56:	f107 0310 	add.w	r3, r7, #16
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fc9a 	bl	8007594 <get_ldnumber>
 8007c60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da01      	bge.n	8007c6c <f_mount+0x28>
 8007c68:	230b      	movs	r3, #11
 8007c6a:	e02b      	b.n	8007cc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <f_mount+0x88>)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c7c:	69b8      	ldr	r0, [r7, #24]
 8007c7e:	f7fe f80b 	bl	8005c98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	490d      	ldr	r1, [pc, #52]	; (8007ccc <f_mount+0x88>)
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <f_mount+0x66>
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d001      	beq.n	8007cae <f_mount+0x6a>
 8007caa:	2300      	movs	r3, #0
 8007cac:	e00a      	b.n	8007cc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007cae:	f107 010c 	add.w	r1, r7, #12
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fd05 	bl	80076c8 <find_volume>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20000028 	.word	0x20000028

08007cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b09a      	sub	sp, #104	; 0x68
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <f_open+0x18>
 8007ce4:	2309      	movs	r3, #9
 8007ce6:	e1bb      	b.n	8008060 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	f107 0114 	add.w	r1, r7, #20
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fce4 	bl	80076c8 <find_volume>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007d06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f040 819f 	bne.w	800804e <f_open+0x37e>
		dj.obj.fs = fs;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fbc3 	bl	80074a8 <follow_path>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007d28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d11a      	bne.n	8007d66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007d30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d34:	b25b      	sxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da03      	bge.n	8007d42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007d3a:	2306      	movs	r3, #6
 8007d3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d40:	e011      	b.n	8007d66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf14      	ite	ne
 8007d4c:	2301      	movne	r3, #1
 8007d4e:	2300      	moveq	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	f107 0318 	add.w	r3, r7, #24
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd fe54 	bl	8005a08 <chk_lock>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	f003 031c 	and.w	r3, r3, #28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d07f      	beq.n	8007e70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007d70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d017      	beq.n	8007da8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d10e      	bne.n	8007d9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d80:	f7fd fe9e 	bl	8005ac0 <enq_lock>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d006      	beq.n	8007d98 <f_open+0xc8>
 8007d8a:	f107 0318 	add.w	r3, r7, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fffc 	bl	8006d8c <dir_register>
 8007d94:	4603      	mov	r3, r0
 8007d96:	e000      	b.n	8007d9a <f_open+0xca>
 8007d98:	2312      	movs	r3, #18
 8007d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	f043 0308 	orr.w	r3, r3, #8
 8007da4:	71fb      	strb	r3, [r7, #7]
 8007da6:	e010      	b.n	8007dca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007da8:	7fbb      	ldrb	r3, [r7, #30]
 8007daa:	f003 0311 	and.w	r3, r3, #17
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <f_open+0xea>
					res = FR_DENIED;
 8007db2:	2307      	movs	r3, #7
 8007db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007db8:	e007      	b.n	8007dca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <f_open+0xfa>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007dca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d168      	bne.n	8007ea4 <f_open+0x1d4>
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d063      	beq.n	8007ea4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007ddc:	f7fd fabe 	bl	800535c <get_fattime>
 8007de0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	330e      	adds	r3, #14
 8007de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd fd63 	bl	80058b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	3316      	adds	r3, #22
 8007df2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd fd5d 	bl	80058b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	330b      	adds	r3, #11
 8007dfe:	2220      	movs	r2, #32
 8007e00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fd35 	bl	8006878 <ld_clust>
 8007e0e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e14:	2200      	movs	r2, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fd4d 	bl	80068b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	331c      	adds	r3, #28
 8007e20:	2100      	movs	r1, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fd fd46 	bl	80058b4 <st_dword>
					fs->wflag = 1;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d037      	beq.n	8007ea4 <f_open+0x1d4>
						dw = fs->winsect;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007e3a:	f107 0318 	add.w	r3, r7, #24
 8007e3e:	2200      	movs	r2, #0
 8007e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fa3d 	bl	80062c2 <remove_chain>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d126      	bne.n	8007ea4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fd ff84 	bl	8005d68 <move_window>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	615a      	str	r2, [r3, #20]
 8007e6e:	e019      	b.n	8007ea4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d115      	bne.n	8007ea4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e78:	7fbb      	ldrb	r3, [r7, #30]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007e82:	2304      	movs	r3, #4
 8007e84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e88:	e00c      	b.n	8007ea4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <f_open+0x1d4>
 8007e94:	7fbb      	ldrb	r3, [r7, #30]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <f_open+0x1d4>
						res = FR_DENIED;
 8007e9e:	2307      	movs	r3, #7
 8007ea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ea4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d128      	bne.n	8007efe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf14      	ite	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	2300      	moveq	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	f107 0318 	add.w	r3, r7, #24
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd fe0d 	bl	8005b04 <inc_lock>
 8007eea:	4602      	mov	r2, r0
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <f_open+0x22e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007efe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 80a3 	bne.w	800804e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fcb2 	bl	8006878 <ld_clust>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	331c      	adds	r3, #28
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fd fc8a 	bl	8005838 <ld_dword>
 8007f24:	4602      	mov	r2, r0
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	88da      	ldrh	r2, [r3, #6]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	79fa      	ldrb	r2, [r7, #7]
 8007f42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3330      	adds	r3, #48	; 0x30
 8007f5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fd fcf4 	bl	800594e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d06e      	beq.n	800804e <f_open+0x37e>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d06a      	beq.n	800804e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	895b      	ldrh	r3, [r3, #10]
 8007f84:	461a      	mov	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	899b      	ldrh	r3, [r3, #12]
 8007f8a:	fb03 f302 	mul.w	r3, r3, r2
 8007f8e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f9c:	e016      	b.n	8007fcc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd ff9d 	bl	8005ee2 <get_fat>
 8007fa8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d802      	bhi.n	8007fb6 <f_open+0x2e6>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fbc:	d102      	bne.n	8007fc4 <f_open+0x2f4>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007fc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <f_open+0x30c>
 8007fd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d8e0      	bhi.n	8007f9e <f_open+0x2ce>
				}
				fp->clust = clst;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fe0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007fe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d131      	bne.n	800804e <f_open+0x37e>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	899b      	ldrh	r3, [r3, #12]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ff6:	fb02 f201 	mul.w	r2, r2, r1
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d026      	beq.n	800804e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd ff4d 	bl	8005ea4 <clust2sect>
 800800a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800800c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <f_open+0x34a>
						res = FR_INT_ERR;
 8008012:	2302      	movs	r3, #2
 8008014:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008018:	e019      	b.n	800804e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	899b      	ldrh	r3, [r3, #12]
 800801e:	461a      	mov	r2, r3
 8008020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008022:	fbb3 f2f2 	udiv	r2, r3, r2
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	441a      	add	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	7858      	ldrb	r0, [r3, #1]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1a      	ldr	r2, [r3, #32]
 800803c:	2301      	movs	r3, #1
 800803e:	f7fd fb85 	bl	800574c <disk_read>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <f_open+0x37e>
 8008048:	2301      	movs	r3, #1
 800804a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800804e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <f_open+0x38c>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800805c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008060:	4618      	mov	r0, r3
 8008062:	3768      	adds	r7, #104	; 0x68
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	; 0x38
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f107 0214 	add.w	r2, r7, #20
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fda5 	bl	8007bd8 <validate>
 800808e:	4603      	mov	r3, r0
 8008090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008098:	2b00      	cmp	r3, #0
 800809a:	d107      	bne.n	80080ac <f_read+0x44>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	7d5b      	ldrb	r3, [r3, #21]
 80080a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80080a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <f_read+0x4a>
 80080ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080b0:	e135      	b.n	800831e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	7d1b      	ldrb	r3, [r3, #20]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <f_read+0x5a>
 80080be:	2307      	movs	r3, #7
 80080c0:	e12d      	b.n	800831e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f240 811e 	bls.w	8008314 <f_read+0x2ac>
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80080dc:	e11a      	b.n	8008314 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	8992      	ldrh	r2, [r2, #12]
 80080e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80080ea:	fb02 f201 	mul.w	r2, r2, r1
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 80d5 	bne.w	80082a0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	8992      	ldrh	r2, [r2, #12]
 80080fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	8952      	ldrh	r2, [r2, #10]
 8008106:	3a01      	subs	r2, #1
 8008108:	4013      	ands	r3, r2
 800810a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d12f      	bne.n	8008172 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	633b      	str	r3, [r7, #48]	; 0x30
 8008120:	e013      	b.n	800814a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	4619      	mov	r1, r3
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7fe f9c3 	bl	80064bc <clmt_clust>
 8008136:	6338      	str	r0, [r7, #48]	; 0x30
 8008138:	e007      	b.n	800814a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fd fecd 	bl	8005ee2 <get_fat>
 8008148:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	2b01      	cmp	r3, #1
 800814e:	d804      	bhi.n	800815a <f_read+0xf2>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2202      	movs	r2, #2
 8008154:	755a      	strb	r2, [r3, #21]
 8008156:	2302      	movs	r3, #2
 8008158:	e0e1      	b.n	800831e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008160:	d104      	bne.n	800816c <f_read+0x104>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	755a      	strb	r2, [r3, #21]
 8008168:	2301      	movs	r3, #1
 800816a:	e0d8      	b.n	800831e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008170:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fd fe92 	bl	8005ea4 <clust2sect>
 8008180:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <f_read+0x12a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2202      	movs	r2, #2
 800818c:	755a      	strb	r2, [r3, #21]
 800818e:	2302      	movs	r3, #2
 8008190:	e0c5      	b.n	800831e <f_read+0x2b6>
			sect += csect;
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	899b      	ldrh	r3, [r3, #12]
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d041      	beq.n	8008232 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	4413      	add	r3, r2
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	8952      	ldrh	r2, [r2, #10]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d905      	bls.n	80081c8 <f_read+0x160>
					cc = fs->csize - csect;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	461a      	mov	r2, r3
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	7858      	ldrb	r0, [r3, #1]
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081d2:	f7fd fabb 	bl	800574c <disk_read>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <f_read+0x17e>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	755a      	strb	r2, [r3, #21]
 80081e2:	2301      	movs	r3, #1
 80081e4:	e09b      	b.n	800831e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	7d1b      	ldrb	r3, [r3, #20]
 80081ea:	b25b      	sxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da18      	bge.n	8008222 <f_read+0x1ba>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d911      	bls.n	8008222 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6a1a      	ldr	r2, [r3, #32]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	8992      	ldrh	r2, [r2, #12]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008210:	18d0      	adds	r0, r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	899b      	ldrh	r3, [r3, #12]
 800821c:	461a      	mov	r2, r3
 800821e:	f7fd fb75 	bl	800590c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	899b      	ldrh	r3, [r3, #12]
 8008226:	461a      	mov	r2, r3
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008230:	e05c      	b.n	80082ec <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	429a      	cmp	r2, r3
 800823a:	d02e      	beq.n	800829a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	7d1b      	ldrb	r3, [r3, #20]
 8008240:	b25b      	sxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	da18      	bge.n	8008278 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	7858      	ldrb	r0, [r3, #1]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1a      	ldr	r2, [r3, #32]
 8008254:	2301      	movs	r3, #1
 8008256:	f7fd fa99 	bl	800578c <disk_write>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <f_read+0x202>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	755a      	strb	r2, [r3, #21]
 8008266:	2301      	movs	r3, #1
 8008268:	e059      	b.n	800831e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	7d1b      	ldrb	r3, [r3, #20]
 800826e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	7858      	ldrb	r0, [r3, #1]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008282:	2301      	movs	r3, #1
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	f7fd fa61 	bl	800574c <disk_read>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <f_read+0x232>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	755a      	strb	r2, [r3, #21]
 8008296:	2301      	movs	r3, #1
 8008298:	e041      	b.n	800831e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	899b      	ldrh	r3, [r3, #12]
 80082a4:	4618      	mov	r0, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	8992      	ldrh	r2, [r2, #12]
 80082ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80082b2:	fb02 f201 	mul.w	r2, r2, r1
 80082b6:	1a9b      	subs	r3, r3, r2
 80082b8:	1ac3      	subs	r3, r0, r3
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80082bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d901      	bls.n	80082c8 <f_read+0x260>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	8992      	ldrh	r2, [r2, #12]
 80082d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80082da:	fb02 f200 	mul.w	r2, r2, r0
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	440b      	add	r3, r1
 80082e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e4:	4619      	mov	r1, r3
 80082e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082e8:	f7fd fb10 	bl	800590c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80082ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	4413      	add	r3, r2
 80082f2:	627b      	str	r3, [r7, #36]	; 0x24
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	441a      	add	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	619a      	str	r2, [r3, #24]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	441a      	add	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f47f aee1 	bne.w	80080de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3738      	adds	r7, #56	; 0x38
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b08c      	sub	sp, #48	; 0x30
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f107 0210 	add.w	r2, r7, #16
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fc46 	bl	8007bd8 <validate>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d107      	bne.n	800836a <f_write+0x44>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	7d5b      	ldrb	r3, [r3, #21]
 800835e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <f_write+0x4a>
 800836a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800836e:	e16a      	b.n	8008646 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	7d1b      	ldrb	r3, [r3, #20]
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <f_write+0x5a>
 800837c:	2307      	movs	r3, #7
 800837e:	e162      	b.n	8008646 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699a      	ldr	r2, [r3, #24]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	441a      	add	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	429a      	cmp	r2, r3
 800838e:	f080 814c 	bcs.w	800862a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	43db      	mvns	r3, r3
 8008398:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800839a:	e146      	b.n	800862a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	8992      	ldrh	r2, [r2, #12]
 80083a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80083a8:	fb02 f201 	mul.w	r2, r2, r1
 80083ac:	1a9b      	subs	r3, r3, r2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f040 80f1 	bne.w	8008596 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	8992      	ldrh	r2, [r2, #12]
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	8952      	ldrh	r2, [r2, #10]
 80083c4:	3a01      	subs	r2, #1
 80083c6:	4013      	ands	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d143      	bne.n	8008458 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10c      	bne.n	80083f2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d11a      	bne.n	800841a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fd ffcf 	bl	800638c <create_chain>
 80083ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80083f0:	e013      	b.n	800841a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	4619      	mov	r1, r3
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7fe f85b 	bl	80064bc <clmt_clust>
 8008406:	62b8      	str	r0, [r7, #40]	; 0x28
 8008408:	e007      	b.n	800841a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7fd ffba 	bl	800638c <create_chain>
 8008418:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8109 	beq.w	8008634 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	2b01      	cmp	r3, #1
 8008426:	d104      	bne.n	8008432 <f_write+0x10c>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2202      	movs	r2, #2
 800842c:	755a      	strb	r2, [r3, #21]
 800842e:	2302      	movs	r3, #2
 8008430:	e109      	b.n	8008646 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008438:	d104      	bne.n	8008444 <f_write+0x11e>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	755a      	strb	r2, [r3, #21]
 8008440:	2301      	movs	r3, #1
 8008442:	e100      	b.n	8008646 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008448:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <f_write+0x132>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008456:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	7d1b      	ldrb	r3, [r3, #20]
 800845c:	b25b      	sxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	da18      	bge.n	8008494 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	7858      	ldrb	r0, [r3, #1]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a1a      	ldr	r2, [r3, #32]
 8008470:	2301      	movs	r3, #1
 8008472:	f7fd f98b 	bl	800578c <disk_write>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <f_write+0x160>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2301      	movs	r3, #1
 8008484:	e0df      	b.n	8008646 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	7d1b      	ldrb	r3, [r3, #20]
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7fd fd01 	bl	8005ea4 <clust2sect>
 80084a2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <f_write+0x18e>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2202      	movs	r2, #2
 80084ae:	755a      	strb	r2, [r3, #21]
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0c8      	b.n	8008646 <f_write+0x320>
			sect += csect;
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	4413      	add	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	899b      	ldrh	r3, [r3, #12]
 80084c0:	461a      	mov	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d043      	beq.n	8008558 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	4413      	add	r3, r2
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	8952      	ldrh	r2, [r2, #10]
 80084da:	4293      	cmp	r3, r2
 80084dc:	d905      	bls.n	80084ea <f_write+0x1c4>
					cc = fs->csize - csect;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	895b      	ldrh	r3, [r3, #10]
 80084e2:	461a      	mov	r2, r3
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	7858      	ldrb	r0, [r3, #1]
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	69f9      	ldr	r1, [r7, #28]
 80084f4:	f7fd f94a 	bl	800578c <disk_write>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <f_write+0x1e2>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	755a      	strb	r2, [r3, #21]
 8008504:	2301      	movs	r3, #1
 8008506:	e09e      	b.n	8008646 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1a      	ldr	r2, [r3, #32]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	6a3a      	ldr	r2, [r7, #32]
 8008512:	429a      	cmp	r2, r3
 8008514:	d918      	bls.n	8008548 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	8992      	ldrh	r2, [r2, #12]
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	18d1      	adds	r1, r2, r3
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	899b      	ldrh	r3, [r3, #12]
 8008534:	461a      	mov	r2, r3
 8008536:	f7fd f9e9 	bl	800590c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	7d1b      	ldrb	r3, [r3, #20]
 800853e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008542:	b2da      	uxtb	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	899b      	ldrh	r3, [r3, #12]
 800854c:	461a      	mov	r2, r3
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	fb02 f303 	mul.w	r3, r2, r3
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008556:	e04b      	b.n	80085f0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	429a      	cmp	r2, r3
 8008560:	d016      	beq.n	8008590 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800856a:	429a      	cmp	r2, r3
 800856c:	d210      	bcs.n	8008590 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	7858      	ldrb	r0, [r3, #1]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008578:	2301      	movs	r3, #1
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	f7fd f8e6 	bl	800574c <disk_read>
 8008580:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	755a      	strb	r2, [r3, #21]
 800858c:	2301      	movs	r3, #1
 800858e:	e05a      	b.n	8008646 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	899b      	ldrh	r3, [r3, #12]
 800859a:	4618      	mov	r0, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	8992      	ldrh	r2, [r2, #12]
 80085a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a8:	fb02 f201 	mul.w	r2, r2, r1
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	1ac3      	subs	r3, r0, r3
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d901      	bls.n	80085be <f_write+0x298>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	8992      	ldrh	r2, [r2, #12]
 80085cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80085d0:	fb02 f200 	mul.w	r2, r2, r0
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	440b      	add	r3, r1
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	69f9      	ldr	r1, [r7, #28]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd f995 	bl	800590c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	7d1b      	ldrb	r3, [r3, #20]
 80085e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	4413      	add	r3, r2
 80085f6:	61fb      	str	r3, [r7, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	619a      	str	r2, [r3, #24]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	bf38      	it	cc
 8008610:	461a      	movcc	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	441a      	add	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f aeb5 	bne.w	800839c <f_write+0x76>
 8008632:	e000      	b.n	8008636 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008634:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	7d1b      	ldrb	r3, [r3, #20]
 800863a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863e:	b2da      	uxtb	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3730      	adds	r7, #48	; 0x30
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f107 0208 	add.w	r2, r7, #8
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff faba 	bl	8007bd8 <validate>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d168      	bne.n	8008740 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7d1b      	ldrb	r3, [r3, #20]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	d062      	beq.n	8008740 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	7d1b      	ldrb	r3, [r3, #20]
 800867e:	b25b      	sxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	da15      	bge.n	80086b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	7858      	ldrb	r0, [r3, #1]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	2301      	movs	r3, #1
 8008694:	f7fd f87a 	bl	800578c <disk_write>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <f_sync+0x54>
 800869e:	2301      	movs	r3, #1
 80086a0:	e04f      	b.n	8008742 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7d1b      	ldrb	r3, [r3, #20]
 80086a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80086b0:	f7fc fe54 	bl	800535c <get_fattime>
 80086b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f7fd fb52 	bl	8005d68 <move_window>
 80086c4:	4603      	mov	r3, r0
 80086c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d138      	bne.n	8008740 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	330b      	adds	r3, #11
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	330b      	adds	r3, #11
 80086de:	f042 0220 	orr.w	r2, r2, #32
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68f9      	ldr	r1, [r7, #12]
 80086f2:	f7fe f8e0 	bl	80068b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f103 021c 	add.w	r2, r3, #28
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7fd f8d6 	bl	80058b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3316      	adds	r3, #22
 800870c:	6939      	ldr	r1, [r7, #16]
 800870e:	4618      	mov	r0, r3
 8008710:	f7fd f8d0 	bl	80058b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3312      	adds	r3, #18
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f7fd f8af 	bl	800587e <st_word>
					fs->wflag = 1;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2201      	movs	r2, #1
 8008724:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4618      	mov	r0, r3
 800872a:	f7fd fb4b 	bl	8005dc4 <sync_fs>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7d1b      	ldrb	r3, [r3, #20]
 8008736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873a:	b2da      	uxtb	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008740:	7dfb      	ldrb	r3, [r7, #23]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff ff7b 	bl	800864e <f_sync>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d118      	bne.n	8008794 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f107 0208 	add.w	r2, r7, #8
 8008768:	4611      	mov	r1, r2
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff fa34 	bl	8007bd8 <validate>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10c      	bne.n	8008794 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fd fa4e 	bl	8005c20 <dec_lock>
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b090      	sub	sp, #64	; 0x40
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	1d3b      	adds	r3, r7, #4
 80087ae:	2200      	movs	r2, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe ff89 	bl	80076c8 <find_volume>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80087bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d11f      	bne.n	8008804 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fe6b 	bl	80074a8 <follow_path>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80087d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d111      	bne.n	8008804 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80087e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da03      	bge.n	80087f2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80087ea:	2306      	movs	r3, #6
 80087ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80087f0:	e008      	b.n	8008804 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <f_stat+0x66>
 80087f8:	f107 0308 	add.w	r3, r7, #8
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fbbc 	bl	8006f7c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008804:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008808:	4618      	mov	r0, r3
 800880a:	3740      	adds	r7, #64	; 0x40
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008826:	4b1f      	ldr	r3, [pc, #124]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008828:	7a5b      	ldrb	r3, [r3, #9]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d131      	bne.n	8008894 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008830:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008832:	7a5b      	ldrb	r3, [r3, #9]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	461a      	mov	r2, r3
 8008838:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 800883a:	2100      	movs	r1, #0
 800883c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800883e:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008840:	7a5b      	ldrb	r3, [r3, #9]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4a17      	ldr	r2, [pc, #92]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008850:	7a5b      	ldrb	r3, [r3, #9]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008858:	4413      	add	r3, r2
 800885a:	79fa      	ldrb	r2, [r7, #7]
 800885c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800885e:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 8008860:	7a5b      	ldrb	r3, [r3, #9]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	b2d1      	uxtb	r1, r2
 8008868:	4a0e      	ldr	r2, [pc, #56]	; (80088a4 <FATFS_LinkDriverEx+0x94>)
 800886a:	7251      	strb	r1, [r2, #9]
 800886c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800886e:	7dbb      	ldrb	r3, [r7, #22]
 8008870:	3330      	adds	r3, #48	; 0x30
 8008872:	b2da      	uxtb	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3301      	adds	r3, #1
 800887c:	223a      	movs	r2, #58	; 0x3a
 800887e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	3302      	adds	r3, #2
 8008884:	222f      	movs	r2, #47	; 0x2f
 8008886:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	3303      	adds	r3, #3
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000250 	.word	0x20000250

080088a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088b2:	2200      	movs	r2, #0
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff ffaa 	bl	8008810 <FATFS_LinkDriverEx>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	6039      	str	r1, [r7, #0]
 80088d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	2b7f      	cmp	r3, #127	; 0x7f
 80088d8:	d802      	bhi.n	80088e0 <ff_convert+0x18>
		c = chr;
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	81fb      	strh	r3, [r7, #14]
 80088de:	e025      	b.n	800892c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80088e6:	88fb      	ldrh	r3, [r7, #6]
 80088e8:	2bff      	cmp	r3, #255	; 0xff
 80088ea:	d805      	bhi.n	80088f8 <ff_convert+0x30>
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	3b80      	subs	r3, #128	; 0x80
 80088f0:	4a12      	ldr	r2, [pc, #72]	; (800893c <ff_convert+0x74>)
 80088f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f6:	e000      	b.n	80088fa <ff_convert+0x32>
 80088f8:	2300      	movs	r3, #0
 80088fa:	81fb      	strh	r3, [r7, #14]
 80088fc:	e016      	b.n	800892c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80088fe:	2300      	movs	r3, #0
 8008900:	81fb      	strh	r3, [r7, #14]
 8008902:	e009      	b.n	8008918 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008904:	89fb      	ldrh	r3, [r7, #14]
 8008906:	4a0d      	ldr	r2, [pc, #52]	; (800893c <ff_convert+0x74>)
 8008908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800890c:	88fa      	ldrh	r2, [r7, #6]
 800890e:	429a      	cmp	r2, r3
 8008910:	d006      	beq.n	8008920 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008912:	89fb      	ldrh	r3, [r7, #14]
 8008914:	3301      	adds	r3, #1
 8008916:	81fb      	strh	r3, [r7, #14]
 8008918:	89fb      	ldrh	r3, [r7, #14]
 800891a:	2b7f      	cmp	r3, #127	; 0x7f
 800891c:	d9f2      	bls.n	8008904 <ff_convert+0x3c>
 800891e:	e000      	b.n	8008922 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008920:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008922:	89fb      	ldrh	r3, [r7, #14]
 8008924:	3380      	adds	r3, #128	; 0x80
 8008926:	b29b      	uxth	r3, r3
 8008928:	b2db      	uxtb	r3, r3
 800892a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800892c:	89fb      	ldrh	r3, [r7, #14]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	08008c7c 	.word	0x08008c7c

08008940 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008950:	d201      	bcs.n	8008956 <ff_wtoupper+0x16>
 8008952:	4b3e      	ldr	r3, [pc, #248]	; (8008a4c <ff_wtoupper+0x10c>)
 8008954:	e000      	b.n	8008958 <ff_wtoupper+0x18>
 8008956:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <ff_wtoupper+0x110>)
 8008958:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	1c9a      	adds	r2, r3, #2
 800895e:	617a      	str	r2, [r7, #20]
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008964:	8a7b      	ldrh	r3, [r7, #18]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d068      	beq.n	8008a3c <ff_wtoupper+0xfc>
 800896a:	88fa      	ldrh	r2, [r7, #6]
 800896c:	8a7b      	ldrh	r3, [r7, #18]
 800896e:	429a      	cmp	r2, r3
 8008970:	d364      	bcc.n	8008a3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	1c9a      	adds	r2, r3, #2
 8008976:	617a      	str	r2, [r7, #20]
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	823b      	strh	r3, [r7, #16]
 800897c:	8a3b      	ldrh	r3, [r7, #16]
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	81fb      	strh	r3, [r7, #14]
 8008982:	8a3b      	ldrh	r3, [r7, #16]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	8a79      	ldrh	r1, [r7, #18]
 800898c:	8a3b      	ldrh	r3, [r7, #16]
 800898e:	440b      	add	r3, r1
 8008990:	429a      	cmp	r2, r3
 8008992:	da49      	bge.n	8008a28 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008994:	89fb      	ldrh	r3, [r7, #14]
 8008996:	2b08      	cmp	r3, #8
 8008998:	d84f      	bhi.n	8008a3a <ff_wtoupper+0xfa>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <ff_wtoupper+0x60>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089d7 	.word	0x080089d7
 80089a8:	080089ed 	.word	0x080089ed
 80089ac:	080089f5 	.word	0x080089f5
 80089b0:	080089fd 	.word	0x080089fd
 80089b4:	08008a05 	.word	0x08008a05
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a1d 	.word	0x08008a1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80089c4:	88fa      	ldrh	r2, [r7, #6]
 80089c6:	8a7b      	ldrh	r3, [r7, #18]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	80fb      	strh	r3, [r7, #6]
 80089d4:	e027      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80089d6:	88fa      	ldrh	r2, [r7, #6]
 80089d8:	8a7b      	ldrh	r3, [r7, #18]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	88fa      	ldrh	r2, [r7, #6]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	80fb      	strh	r3, [r7, #6]
 80089ea:	e01c      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	3b10      	subs	r3, #16
 80089f0:	80fb      	strh	r3, [r7, #6]
 80089f2:	e018      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	3b20      	subs	r3, #32
 80089f8:	80fb      	strh	r3, [r7, #6]
 80089fa:	e014      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	3b30      	subs	r3, #48	; 0x30
 8008a00:	80fb      	strh	r3, [r7, #6]
 8008a02:	e010      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	3b1a      	subs	r3, #26
 8008a08:	80fb      	strh	r3, [r7, #6]
 8008a0a:	e00c      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	80fb      	strh	r3, [r7, #6]
 8008a12:	e008      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	3b50      	subs	r3, #80	; 0x50
 8008a18:	80fb      	strh	r3, [r7, #6]
 8008a1a:	e004      	b.n	8008a26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008a22:	80fb      	strh	r3, [r7, #6]
 8008a24:	bf00      	nop
			}
			break;
 8008a26:	e008      	b.n	8008a3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008a28:	89fb      	ldrh	r3, [r7, #14]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d195      	bne.n	800895a <ff_wtoupper+0x1a>
 8008a2e:	8a3b      	ldrh	r3, [r7, #16]
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4413      	add	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008a38:	e78f      	b.n	800895a <ff_wtoupper+0x1a>
			break;
 8008a3a:	bf00      	nop
	}

	return chr;
 8008a3c:	88fb      	ldrh	r3, [r7, #6]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	08008d7c 	.word	0x08008d7c
 8008a50:	08008f70 	.word	0x08008f70

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4d0d      	ldr	r5, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2600      	movs	r6, #0
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4d0b      	ldr	r5, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f000 f82e 	bl	8008ac8 <_init>
 8008a6c:	1b64      	subs	r4, r4, r5
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2600      	movs	r6, #0
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7c:	4798      	blx	r3
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a86:	4798      	blx	r3
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	0800902c 	.word	0x0800902c
 8008a90:	0800902c 	.word	0x0800902c
 8008a94:	0800902c 	.word	0x0800902c
 8008a98:	08009030 	.word	0x08009030

08008a9c <memcpy>:
 8008a9c:	440a      	add	r2, r1
 8008a9e:	4291      	cmp	r1, r2
 8008aa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008aa4:	d100      	bne.n	8008aa8 <memcpy+0xc>
 8008aa6:	4770      	bx	lr
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab2:	4291      	cmp	r1, r2
 8008ab4:	d1f9      	bne.n	8008aaa <memcpy+0xe>
 8008ab6:	bd10      	pop	{r4, pc}

08008ab8 <memset>:
 8008ab8:	4402      	add	r2, r0
 8008aba:	4603      	mov	r3, r0
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d100      	bne.n	8008ac2 <memset+0xa>
 8008ac0:	4770      	bx	lr
 8008ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac6:	e7f9      	b.n	8008abc <memset+0x4>

08008ac8 <_init>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr

08008ad4 <_fini>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr
