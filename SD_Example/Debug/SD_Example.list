
SD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08008c10  08008c10  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009128  08009128  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08009128  08009128  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009128  08009128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  2000000c  0800913c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  200007e8  0800913c  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3b  00000000  00000000  000357fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00038638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00039440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c4c  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012525  00000000  00000000  00061d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eab20  00000000  00000000  00074261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ed81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  0015edd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bf8 	.word	0x08008bf8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008bf8 	.word	0x08008bf8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; //fatfs function common result code
	uint32_t byteswritten, bytesread; //file write/read counts
	uint8_t wtext[] = "STM32 FATFS works great!"; //file buffer
 80001e0:	4b3c      	ldr	r3, [pc, #240]	; (80002d4 <main+0xfc>)
 80001e2:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f0:	c403      	stmia	r4!, {r0, r1}
 80001f2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fb17 	bl	8000826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f878 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f932 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000200:	f000 f90a 	bl	8000418 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000204:	f000 f8e8 	bl	80003d8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000208:	f005 fac6 	bl	8005798 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //mount SD card

  if(!BSP_SD_IsDetected()) {
 800020c:	f005 fb7b 	bl	8005906 <BSP_SD_IsDetected>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d101      	bne.n	800021a <main+0x42>
	  Error_Handler();
 8000216:	f000 f969 	bl	80004ec <Error_Handler>
  }

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 1) != FR_OK) {
 800021a:	2201      	movs	r2, #1
 800021c:	492e      	ldr	r1, [pc, #184]	; (80002d8 <main+0x100>)
 800021e:	482f      	ldr	r0, [pc, #188]	; (80002dc <main+0x104>)
 8000220:	f007 fe3c 	bl	8007e9c <f_mount>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d002      	beq.n	8000230 <main+0x58>
	  Error_Handler();
 800022a:	f000 f95f 	bl	80004ec <Error_Handler>
 800022e:	e009      	b.n	8000244 <main+0x6c>
  }
  else { //file system already exists, try to open a file

	  //open file for writing using create
	  if(f_open(&SDFile, "stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8000230:	220a      	movs	r2, #10
 8000232:	492b      	ldr	r1, [pc, #172]	; (80002e0 <main+0x108>)
 8000234:	482b      	ldr	r0, [pc, #172]	; (80002e4 <main+0x10c>)
 8000236:	f007 fe77 	bl	8007f28 <f_open>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <main+0x6c>
		  Error_Handler();
 8000240:	f000 f954 	bl	80004ec <Error_Handler>
		  }
	  }

  //write to the text file
  res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 8000244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000248:	4618      	mov	r0, r3
 800024a:	f7ff ffbd 	bl	80001c8 <strlen>
 800024e:	4602      	mov	r2, r0
 8000250:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000254:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8000258:	4822      	ldr	r0, [pc, #136]	; (80002e4 <main+0x10c>)
 800025a:	f008 f962 	bl	8008522 <f_write>
 800025e:	4603      	mov	r3, r0
 8000260:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
  if((byteswritten == 0) || (res != FR_OK)) {
 8000264:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <main+0x9c>
 800026c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <main+0xa2>
	  Error_Handler();
 8000274:	f000 f93a 	bl	80004ec <Error_Handler>
 8000278:	e026      	b.n	80002c8 <main+0xf0>
  } else {
	  f_close(&SDFile);
 800027a:	481a      	ldr	r0, [pc, #104]	; (80002e4 <main+0x10c>)
 800027c:	f008 fb44 	bl	8008908 <f_close>

	  //test read the file
	  f_open(&SDFile, "STM32.TXT", FA_READ);
 8000280:	2201      	movs	r2, #1
 8000282:	4919      	ldr	r1, [pc, #100]	; (80002e8 <main+0x110>)
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <main+0x10c>)
 8000286:	f007 fe4f 	bl	8007f28 <f_open>
	  memset(rtext, 0, sizeof(rtext));
 800028a:	463b      	mov	r3, r7
 800028c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f008 fca8 	bl	8008be8 <memset>
	  res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000298:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800029c:	4639      	mov	r1, r7
 800029e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a2:	4810      	ldr	r0, [pc, #64]	; (80002e4 <main+0x10c>)
 80002a4:	f007 fffe 	bl	80082a4 <f_read>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	  if((bytesread == 0) || (res == FR_OK)) {
 80002ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d003      	beq.n	80002be <main+0xe6>
 80002b6:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <main+0xea>
		  Error_Handler();
 80002be:	f000 f915 	bl	80004ec <Error_Handler>
	  }
	  f_close(&SDFile);
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0x10c>)
 80002c4:	f008 fb20 	bl	8008908 <f_close>
  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2100      	movs	r1, #0
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0x104>)
 80002ce:	f007 fde5 	bl	8007e9c <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <main+0xfa>
 80002d4:	08008c28 	.word	0x08008c28
 80002d8:	20000380 	.word	0x20000380
 80002dc:	200005b4 	.word	0x200005b4
 80002e0:	08008c10 	.word	0x08008c10
 80002e4:	20000384 	.word	0x20000384
 80002e8:	08008c1c 	.word	0x08008c1c

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b0b8      	sub	sp, #224	; 0xe0
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002f6:	2244      	movs	r2, #68	; 0x44
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f008 fc74 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2288      	movs	r2, #136	; 0x88
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f008 fc66 	bl	8008be8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800031c:	2310      	movs	r3, #16
 800031e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800032e:	2360      	movs	r3, #96	; 0x60
 8000330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800033e:	4618      	mov	r0, r3
 8000340:	f001 f87a 	bl	8001438 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800034a:	f000 f8cf 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fc46 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800037e:	f000 f8b5 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000382:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000386:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000388:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800038c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800038e:	2301      	movs	r3, #1
 8000390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000392:	2301      	movs	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000396:	2310      	movs	r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800039a:	2307      	movs	r3, #7
 800039c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800039e:	2304      	movs	r3, #4
 80003a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	463b      	mov	r3, r7
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fe2e 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003ba:	f000 f897 	bl	80004ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003c2:	f000 ffe3 	bl	800138c <HAL_PWREx_ControlVoltageScaling>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80003cc:	f000 f88e 	bl	80004ec <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	37e0      	adds	r7, #224	; 0xe0
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003de:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <MX_SDMMC1_SD_Init+0x3c>)
 80003e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <MX_SDMMC1_SD_Init+0x38>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
 // hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
  /* USER CODE END SDMMC1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	20000264 	.word	0x20000264
 8000414:	40012800 	.word	0x40012800

08000418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_DMA_Init+0x48>)
 8000420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <MX_DMA_Init+0x48>)
 8000424:	f043 0302 	orr.w	r3, r3, #2
 8000428:	6493      	str	r3, [r2, #72]	; 0x48
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <MX_DMA_Init+0x48>)
 800042c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	203b      	movs	r0, #59	; 0x3b
 800043c:	f000 fb67 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000440:	203b      	movs	r0, #59	; 0x3b
 8000442:	f000 fb80 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	203c      	movs	r0, #60	; 0x3c
 800044c:	f000 fb5f 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000450:	203c      	movs	r0, #60	; 0x3c
 8000452:	f000 fb78 	bl	8000b46 <HAL_NVIC_EnableIRQ>

}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_GPIO_Init+0x84>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <MX_GPIO_Init+0x84>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_GPIO_Init+0x84>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_GPIO_Init+0x84>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <MX_GPIO_Init+0x84>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_GPIO_Init+0x84>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_GPIO_Init+0x84>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <MX_GPIO_Init+0x84>)
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x84>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0308 	and.w	r3, r3, #8
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Detected_Pin */
  GPIO_InitStruct.Pin = SD_Detected_Pin;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004cc:	2302      	movs	r3, #2
 80004ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_Detected_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fd87 	bl	8000fec <HAL_GPIO_Init>

}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x44>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x44>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6613      	str	r3, [r2, #96]	; 0x60
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x44>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_MspInit+0x44>)
 8000518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_MspInit+0x44>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	6593      	str	r3, [r2, #88]	; 0x58
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_MspInit+0x44>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a56      	ldr	r2, [pc, #344]	; (80006b8 <HAL_SD_MspInit+0x178>)
 800055e:	4293      	cmp	r3, r2
 8000560:	f040 80a5 	bne.w	80006ae <HAL_SD_MspInit+0x16e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000564:	4b55      	ldr	r3, [pc, #340]	; (80006bc <HAL_SD_MspInit+0x17c>)
 8000566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000568:	4a54      	ldr	r2, [pc, #336]	; (80006bc <HAL_SD_MspInit+0x17c>)
 800056a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800056e:	6613      	str	r3, [r2, #96]	; 0x60
 8000570:	4b52      	ldr	r3, [pc, #328]	; (80006bc <HAL_SD_MspInit+0x17c>)
 8000572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <HAL_SD_MspInit+0x17c>)
 800057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000580:	4a4e      	ldr	r2, [pc, #312]	; (80006bc <HAL_SD_MspInit+0x17c>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000588:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <HAL_SD_MspInit+0x17c>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000594:	4b49      	ldr	r3, [pc, #292]	; (80006bc <HAL_SD_MspInit+0x17c>)
 8000596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000598:	4a48      	ldr	r2, [pc, #288]	; (80006bc <HAL_SD_MspInit+0x17c>)
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a0:	4b46      	ldr	r3, [pc, #280]	; (80006bc <HAL_SD_MspInit+0x17c>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80005ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80005b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005be:	230c      	movs	r3, #12
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	483d      	ldr	r0, [pc, #244]	; (80006c0 <HAL_SD_MspInit+0x180>)
 80005ca:	f000 fd0f 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ce:	2304      	movs	r3, #4
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80005de:	230c      	movs	r3, #12
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4836      	ldr	r0, [pc, #216]	; (80006c4 <HAL_SD_MspInit+0x184>)
 80005ea:	f000 fcff 	bl	8000fec <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <HAL_SD_MspInit+0x188>)
 80005f0:	4a36      	ldr	r2, [pc, #216]	; (80006cc <HAL_SD_MspInit+0x18c>)
 80005f2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <HAL_SD_MspInit+0x188>)
 80005f6:	2207      	movs	r2, #7
 80005f8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HAL_SD_MspInit+0x188>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <HAL_SD_MspInit+0x188>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <HAL_SD_MspInit+0x188>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <HAL_SD_MspInit+0x188>)
 800060e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000612:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <HAL_SD_MspInit+0x188>)
 8000616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800061a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <HAL_SD_MspInit+0x188>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <HAL_SD_MspInit+0x188>)
 8000624:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000628:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800062a:	4827      	ldr	r0, [pc, #156]	; (80006c8 <HAL_SD_MspInit+0x188>)
 800062c:	f000 faa6 	bl	8000b7c <HAL_DMA_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_SD_MspInit+0xfa>
    {
      Error_Handler();
 8000636:	f7ff ff59 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <HAL_SD_MspInit+0x188>)
 800063e:	641a      	str	r2, [r3, #64]	; 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <HAL_SD_MspInit+0x188>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <HAL_SD_MspInit+0x194>)
 800064a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_SD_MspInit+0x190>)
 800064e:	2207      	movs	r2, #7
 8000650:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000654:	2210      	movs	r2, #16
 8000656:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_SD_MspInit+0x190>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_SD_MspInit+0x190>)
 800066e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000672:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_SD_MspInit+0x190>)
 800067c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000680:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000684:	f000 fa7a 	bl	8000b7c <HAL_DMA_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_SD_MspInit+0x152>
    {
      Error_Handler();
 800068e:	f7ff ff2d 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_SD_MspInit+0x190>)
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <HAL_SD_MspInit+0x190>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2031      	movs	r0, #49	; 0x31
 80006a4:	f000 fa33 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006a8:	2031      	movs	r0, #49	; 0x31
 80006aa:	f000 fa4c 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40012800 	.word	0x40012800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000800 	.word	0x48000800
 80006c4:	48000c00 	.word	0x48000c00
 80006c8:	200002e8 	.word	0x200002e8
 80006cc:	40020444 	.word	0x40020444
 80006d0:	20000330 	.word	0x20000330
 80006d4:	40020458 	.word	0x40020458

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f8d4 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <SDMMC1_IRQHandler+0x10>)
 8000732:	f003 f9ff 	bl	8003b34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000264 	.word	0x20000264

08000740 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <DMA2_Channel4_IRQHandler+0x10>)
 8000746:	f000 fb72 	bl	8000e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200002e8 	.word	0x200002e8

08000754 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <DMA2_Channel5_IRQHandler+0x10>)
 800075a:	f000 fb68 	bl	8000e2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000330 	.word	0x20000330

08000768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <SystemInit+0x64>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <SystemInit+0x64>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SystemInit+0x68>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <SystemInit+0x68>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <SystemInit+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <SystemInit+0x68>)
 8000794:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000798:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800079c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <SystemInit+0x68>)
 80007a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <SystemInit+0x68>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <SystemInit+0x68>)
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <SystemInit+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SystemInit+0x64>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	609a      	str	r2, [r3, #8]
#endif
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	40021000 	.word	0x40021000

080007d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800080c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d8:	f7ff ffc6 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
	ldr	r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopForever+0x12>)
	b	LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LoopForever+0x16>)
	cmp	r2, r3
 80007fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f008 f9cd 	bl	8008ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000806:	f7ff fce7 	bl	80001d8 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800080c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000810:	08009130 	.word	0x08009130
	ldr	r0, =_sdata
 8000814:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000818:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000820:	200007e8 	.word	0x200007e8

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>

08000826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f961 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	e001      	b.n	800084c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff fe56 	bl	80004f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d023      	beq.n	80008b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_InitTick+0x70>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_InitTick+0x6c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f96d 	bl	8000b62 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10f      	bne.n	80008ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d809      	bhi.n	80008a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089c:	f000 f937 	bl	8000b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_InitTick+0x74>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	e001      	b.n	80008b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000378 	.word	0x20000378

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000378 	.word	0x20000378

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff ffee 	bl	80008f8 <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffde 	bl	80008f8 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <__NVIC_EnableIRQ+0x38>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff29 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff3e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff31 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e098      	b.n	8000cc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <HAL_DMA_Init+0x150>)
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d80f      	bhi.n	8000bba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <HAL_DMA_Init+0x154>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a4b      	ldr	r2, [pc, #300]	; (8000cd4 <HAL_DMA_Init+0x158>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	009a      	lsls	r2, r3, #2
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <HAL_DMA_Init+0x15c>)
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb8:	e00e      	b.n	8000bd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <HAL_DMA_Init+0x160>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a43      	ldr	r2, [pc, #268]	; (8000cd4 <HAL_DMA_Init+0x158>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	009a      	lsls	r2, r3, #2
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a42      	ldr	r2, [pc, #264]	; (8000ce0 <HAL_DMA_Init+0x164>)
 8000bd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d039      	beq.n	8000ca8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <HAL_DMA_Init+0x15c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11a      	bne.n	8000c74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_DMA_Init+0x168>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f003 031c 	and.w	r3, r3, #28
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4924      	ldr	r1, [pc, #144]	; (8000ce4 <HAL_DMA_Init+0x168>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_DMA_Init+0x168>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	f003 031c 	and.w	r3, r3, #28
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	491d      	ldr	r1, [pc, #116]	; (8000ce4 <HAL_DMA_Init+0x168>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
 8000c72:	e019      	b.n	8000ca8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_DMA_Init+0x16c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	f003 031c 	and.w	r3, r3, #28
 8000c80:	210f      	movs	r1, #15
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4917      	ldr	r1, [pc, #92]	; (8000ce8 <HAL_DMA_Init+0x16c>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_DMA_Init+0x16c>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6859      	ldr	r1, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f003 031c 	and.w	r3, r3, #28
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <HAL_DMA_Init+0x16c>)
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40020407 	.word	0x40020407
 8000cd0:	bffdfff8 	.word	0xbffdfff8
 8000cd4:	cccccccd 	.word	0xcccccccd
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	bffdfbf8 	.word	0xbffdfbf8
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	400200a8 	.word	0x400200a8
 8000ce8:	400204a8 	.word	0x400204a8

08000cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_DMA_Start_IT+0x20>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e04b      	b.n	8000da4 <HAL_DMA_Start_IT+0xb8>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d13a      	bne.n	8000d96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2202      	movs	r2, #2
 8000d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f000 f921 	bl	8000f8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d008      	beq.n	8000d64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 020e 	orr.w	r2, r2, #14
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e00f      	b.n	8000d84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0204 	bic.w	r2, r2, #4
 8000d72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 020a 	orr.w	r2, r2, #10
 8000d82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e005      	b.n	8000da2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d005      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e029      	b.n	8000e24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f003 021c 	and.w	r2, r3, #28
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
    }
  }
  return status;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f003 031c 	and.w	r3, r3, #28
 8000e4e:	2204      	movs	r2, #4
 8000e50:	409a      	lsls	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d026      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0x7a>
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d021      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0204 	bic.w	r2, r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f003 021c 	and.w	r2, r3, #28
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2104      	movs	r1, #4
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d071      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000ea6:	e06c      	b.n	8000f82 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f003 031c 	and.w	r3, r3, #28
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02e      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xec>
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 020a 	bic.w	r2, r2, #10
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	f003 021c 	and.w	r2, r3, #28
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2102      	movs	r1, #2
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d038      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f18:	e033      	b.n	8000f82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 031c 	and.w	r3, r3, #28
 8000f22:	2208      	movs	r2, #8
 8000f24:	409a      	lsls	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d02a      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x156>
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d025      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 020e 	bic.w	r2, r2, #14
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	f003 021c 	and.w	r2, r3, #28
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 021c 	and.w	r2, r3, #28
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b10      	cmp	r3, #16
 8000fbc:	d108      	bne.n	8000fd0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fce:	e007      	b.n	8000fe0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	60da      	str	r2, [r3, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	e17f      	b.n	80012fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8171 	beq.w	80012f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00b      	beq.n	8001034 <HAL_GPIO_Init+0x48>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	2b11      	cmp	r3, #17
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d118      	bne.n	80010d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	f003 0201 	and.w	r2, r3, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x128>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b12      	cmp	r3, #18
 8001112:	d123      	bne.n	800115c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80ac 	beq.w	80012f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_GPIO_Init+0x330>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <HAL_GPIO_Init+0x330>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6613      	str	r3, [r2, #96]	; 0x60
 80011aa:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_GPIO_Init+0x330>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b6:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_GPIO_Init+0x334>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x242>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x338>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x23e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x33c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x23a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x340>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x236>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x344>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x232>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x348>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x22e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_GPIO_Init+0x34c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x22a>
 8001212:	2306      	movs	r3, #6
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x244>
 8001216:	2307      	movs	r3, #7
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x244>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x244>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x244>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x244>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x244>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x244>
 800122e:	2300      	movs	r3, #0
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001240:	4937      	ldr	r1, [pc, #220]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_GPIO_Init+0x350>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_GPIO_Init+0x350>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_GPIO_Init+0x350>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_GPIO_Init+0x350>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_GPIO_Init+0x350>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_GPIO_Init+0x350>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_GPIO_Init+0x350>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_GPIO_Init+0x350>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	f47f ae78 	bne.w	8000ffc <HAL_GPIO_Init+0x10>
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800
 800132c:	48000c00 	.word	0x48000c00
 8001330:	48001000 	.word	0x48001000
 8001334:	48001400 	.word	0x48001400
 8001338:	48001800 	.word	0x48001800
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e001      	b.n	8001362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_PWREx_GetVoltageRange+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	d130      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a8:	d038      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2232      	movs	r2, #50	; 0x32
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9b      	lsrs	r3, r3, #18
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d0:	e002      	b.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	d102      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d110      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e00f      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140a:	d007      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40007000 	.word	0x40007000
 8001430:	20000000 	.word	0x20000000
 8001434:	431bde83 	.word	0x431bde83

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3d4      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4ba1      	ldr	r3, [pc, #644]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001454:	4b9e      	ldr	r3, [pc, #632]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80e4 	beq.w	8001634 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_RCC_OscConfig+0x4a>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b0c      	cmp	r3, #12
 8001476:	f040 808b 	bne.w	8001590 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b01      	cmp	r3, #1
 800147e:	f040 8087 	bne.w	8001590 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001482:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x62>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e3ac      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <HAL_RCC_OscConfig+0x7c>
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b2:	e005      	b.n	80014c0 <HAL_RCC_OscConfig+0x88>
 80014b4:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d223      	bcs.n	800150c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd41 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e38d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7c      	ldr	r2, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4977      	ldr	r1, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	4972      	ldr	r1, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e025      	b.n	8001558 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b6d      	ldr	r3, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	496a      	ldr	r1, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	4965      	ldr	r1, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fd01 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e34d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001558:	f000 fc36 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	495a      	ldr	r1, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x29c>)
 800156a:	5ccb      	ldrb	r3, [r1, r3]
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_OscConfig+0x2a0>)
 8001576:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <HAL_RCC_OscConfig+0x2a4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f96b 	bl	8000858 <HAL_InitTick>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d052      	beq.n	8001632 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	e331      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d032      	beq.n	80015fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9a8 	bl	80008f8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ac:	f7ff f9a4 	bl	80008f8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e31a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	493b      	ldr	r1, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e01a      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a33      	ldr	r2, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160a:	f7ff f975 	bl	80008f8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001612:	f7ff f971 	bl	80008f8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e2e7      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x1da>
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d074      	beq.n	800172a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x21a>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d10e      	bne.n	800166a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d064      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f0>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d160      	bne.n	8001728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e2c4      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x24a>
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e01d      	b.n	80016be <HAL_RCC_OscConfig+0x286>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x26e>
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 8001692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x286>
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x298>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff f917 	bl	80008f8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016cc:	e011      	b.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08008c8c 	.word	0x08008c8c
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff f90a 	bl	80008f8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e280      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	4baf      	ldr	r3, [pc, #700]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2a8>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f8fa 	bl	80008f8 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff f8f6 	bl	80008f8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e26c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	4ba5      	ldr	r3, [pc, #660]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d0>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d060      	beq.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x310>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d119      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d116      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001748:	4b99      	ldr	r3, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x328>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e249      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4990      	ldr	r1, [pc, #576]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	e040      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a8b      	ldr	r2, [pc, #556]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff f8b5 	bl	80008f8 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f8b1 	bl	80008f8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e227      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	497c      	ldr	r1, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a79      	ldr	r2, [pc, #484]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff f891 	bl	80008f8 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff f88d 	bl	80008f8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e203      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ec:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f86c 	bl	80008f8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f868 	bl	80008f8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1de      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001836:	4b5e      	ldr	r3, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x3ec>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b5a      	ldr	r3, [pc, #360]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff f84f 	bl	80008f8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff f84b 	bl	80008f8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1c1      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a6 	beq.w	80019d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001890:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a43      	ldr	r2, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_OscConfig+0x57c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d118      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_OscConfig+0x57c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_RCC_OscConfig+0x57c>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7ff f812 	bl	80008f8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff f80e 	bl	80008f8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e184      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x57c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d8>
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190e:	e024      	b.n	800195a <HAL_RCC_OscConfig+0x522>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d110      	bne.n	800193a <HAL_RCC_OscConfig+0x502>
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	4a20      	ldr	r2, [pc, #128]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001938:	e00f      	b.n	800195a <HAL_RCC_OscConfig+0x522>
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7fe ffc9 	bl	80008f8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe ffc5 	bl	80008f8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e139      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x578>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0ed      	beq.n	800196a <HAL_RCC_OscConfig+0x532>
 800198e:	e01a      	b.n	80019c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7fe ffb2 	bl	80008f8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7fe ffae 	bl	80008f8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d906      	bls.n	80019b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e122      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e8      	bne.n	8001998 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8108 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	f040 80d0 	bne.w	8001b8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ec:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d130      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d127      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11f      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a2c:	2a07      	cmp	r2, #7
 8001a2e:	bf14      	ite	ne
 8001a30:	2201      	movne	r2, #1
 8001a32:	2200      	moveq	r2, #0
 8001a34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d113      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d06e      	beq.n	8001b40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d069      	beq.n	8001b3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a68:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b7      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a84:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a5c      	ldr	r2, [pc, #368]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7fe ff32 	bl	80008f8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe ff2e 	bl	80008f8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0a4      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <HAL_RCC_OscConfig+0x7c8>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ad0:	0212      	lsls	r2, r2, #8
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad8:	0852      	lsrs	r2, r2, #1
 8001ada:	3a01      	subs	r2, #1
 8001adc:	0552      	lsls	r2, r2, #21
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae4:	0852      	lsrs	r2, r2, #1
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	0652      	lsls	r2, r2, #25
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001af0:	0912      	lsrs	r2, r2, #4
 8001af2:	0452      	lsls	r2, r2, #17
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4941      	ldr	r1, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b08:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b14:	f7fe fef0 	bl	80008f8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7fe feec 	bl	80008f8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e062      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3a:	e05a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e059      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d152      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b64:	f7fe fec8 	bl	80008f8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe fec4 	bl	80008f8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e03a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x734>
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d02d      	beq.n	8001bee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001bbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fe97 	bl	80008f8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe fe93 	bl	80008f8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_OscConfig+0x7c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x796>
 8001bec:	e001      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	f99d808c 	.word	0xf99d808c

08001c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0c8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4961      	ldr	r1, [pc, #388]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b0      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d04c      	beq.n	8001cee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5c:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d121      	bne.n	8001cac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e09e      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e092      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e086      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e07e      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 0203 	bic.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	493f      	ldr	r1, [pc, #252]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cbe:	f7fe fe1b 	bl	80008f8 <HAL_GetTick>
 8001cc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7fe fe17 	bl	80008f8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e066      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 020c 	and.w	r2, r3, #12
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d1eb      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	492c      	ldr	r1, [pc, #176]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d210      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4924      	ldr	r1, [pc, #144]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e036      	b.n	8001daa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4910      	ldr	r1, [pc, #64]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d7a:	f000 f825 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fd5a 	bl	8000858 <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001da8:	7afb      	ldrb	r3, [r7, #11]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08008c8c 	.word	0x08008c8c
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d121      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d11e      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dfc:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e005      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e24:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	e004      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d134      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xac>
 8001e6c:	e005      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e002      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	fb02 f203 	mul.w	r2, r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	0e5b      	lsrs	r3, r3, #25
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08008ca4 	.word	0x08008ca4
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001efc:	f7ff fff0 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08008c9c 	.word	0x08008c9c

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f28:	f7ff ffda 	bl	8001ee0 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0adb      	lsrs	r3, r3, #11
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4904      	ldr	r1, [pc, #16]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08008c9c 	.word	0x08008c9c

08001f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff fa02 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	e014      	b.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff f9f2 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d10b      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d919      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2ba0      	cmp	r3, #160	; 0xa0
 8001fac:	d902      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e013      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e010      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d902      	bls.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e00a      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d102      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e004      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b70      	cmp	r3, #112	; 0x70
 8001fd6:	d101      	bne.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	4909      	ldr	r1, [pc, #36]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002018:	2300      	movs	r3, #0
 800201a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800201c:	2300      	movs	r3, #0
 800201e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002028:	2b00      	cmp	r3, #0
 800202a:	d041      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002030:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002034:	d02a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002036:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800203a:	d824      	bhi.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800203c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002040:	d008      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002046:	d81e      	bhi.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800204c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002050:	d010      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002052:	e018      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002054:	4b86      	ldr	r3, [pc, #536]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a85      	ldr	r2, [pc, #532]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002060:	e015      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f001 f825 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 800206e:	4603      	mov	r3, r0
 8002070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002072:	e00c      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3320      	adds	r3, #32
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f910 	bl	80032a0 <RCCEx_PLLSAI2_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e003      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	74fb      	strb	r3, [r7, #19]
      break;
 800208a:	e000      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800208c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020a2:	4973      	ldr	r1, [pc, #460]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020aa:	e001      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d041      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020c4:	d02a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ca:	d824      	bhi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d0:	d008      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d6:	d81e      	bhi.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d010      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020e2:	e018      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e4:	4b62      	ldr	r3, [pc, #392]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e015      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ffdd 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002102:	e00c      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3320      	adds	r3, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f001 f8c8 	bl	80032a0 <RCCEx_PLLSAI2_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e003      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]
      break;
 800211a:	e000      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800211c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002132:	494f      	ldr	r1, [pc, #316]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a0 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002162:	2300      	movs	r3, #0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002180:	2301      	movs	r3, #1
 8002182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002190:	f7fe fbb2 	bl	80008f8 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe fbae 	bl	80008f8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	74fb      	strb	r3, [r7, #19]
        break;
 80021aa:	e005      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d15c      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d019      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fb6d 	bl	80008f8 <HAL_GetTick>
 800221e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	e00b      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fb69 	bl	80008f8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d902      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	74fb      	strb	r3, [r7, #19]
            break;
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ec      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225e:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002266:	e009      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	e006      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a9d      	ldr	r2, [pc, #628]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229a:	4b98      	ldr	r3, [pc, #608]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4994      	ldr	r1, [pc, #592]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022bc:	4b8f      	ldr	r3, [pc, #572]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 020c 	bic.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	498c      	ldr	r1, [pc, #560]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022de:	4b87      	ldr	r3, [pc, #540]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4983      	ldr	r1, [pc, #524]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	497b      	ldr	r1, [pc, #492]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	4972      	ldr	r1, [pc, #456]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	496a      	ldr	r1, [pc, #424]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	4961      	ldr	r1, [pc, #388]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4959      	ldr	r1, [pc, #356]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	4950      	ldr	r1, [pc, #320]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	4948      	ldr	r1, [pc, #288]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	493f      	ldr	r1, [pc, #252]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d028      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242e:	d106      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
 800243c:	e011      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d10c      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fe32 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	491f      	ldr	r1, [pc, #124]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248c:	d106      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002498:	60d3      	str	r3, [r2, #12]
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fe03 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	4908      	ldr	r1, [pc, #32]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d109      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e014      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2101      	movs	r1, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fdd1 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800253e:	4928      	ldr	r1, [pc, #160]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254e:	d10d      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fdae 	bl	80030b8 <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
 800256a:	e011      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002574:	d10c      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3320      	adds	r3, #32
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fe8f 	bl	80032a0 <RCCEx_PLLSAI2_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025aa:	490d      	ldr	r1, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ce:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f6:	d13e      	bne.n	8002676 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80025f8:	4bbe      	ldr	r3, [pc, #760]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800260a:	d028      	beq.n	800265e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002612:	f200 853e 	bhi.w	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d005      	beq.n	800262a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002624:	d00e      	beq.n	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002626:	f000 bd34 	b.w	8003092 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800262a:	4bb2      	ldr	r3, [pc, #712]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	f040 852e 	bne.w	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 800263a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263e:	61fb      	str	r3, [r7, #28]
      break;
 8002640:	f000 bd29 	b.w	8003096 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002644:	4bab      	ldr	r3, [pc, #684]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	f040 8523 	bne.w	800309a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 8002654:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002658:	61fb      	str	r3, [r7, #28]
      break;
 800265a:	f000 bd1e 	b.w	800309a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800265e:	4ba5      	ldr	r3, [pc, #660]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800266a:	f040 8518 	bne.w	800309e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 800266e:	4ba2      	ldr	r3, [pc, #648]	; (80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8002670:	61fb      	str	r3, [r7, #28]
      break;
 8002672:	f000 bd14 	b.w	800309e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002676:	4b9f      	ldr	r3, [pc, #636]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d036      	beq.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d840      	bhi.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d020      	beq.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002698:	e039      	b.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d116      	bne.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80026a6:	4b93      	ldr	r3, [pc, #588]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80026b2:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	e005      	b.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80026be:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	4a8c      	ldr	r2, [pc, #560]	; (80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80026d2:	e01f      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
      break;
 80026d8:	e01c      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026da:	4b86      	ldr	r3, [pc, #536]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d102      	bne.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80026e8:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80026ea:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80026ec:	e012      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
      break;
 80026f2:	e00f      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026f4:	4b7f      	ldr	r3, [pc, #508]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002700:	d102      	bne.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8002702:	4b80      	ldr	r3, [pc, #512]	; (8002904 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8002704:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002706:	e005      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
      break;
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
      break;
 8002712:	bf00      	nop
    }

    switch(PeriphClk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800271a:	f000 80d2 	beq.w	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002724:	f200 84bd 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272e:	f000 80c8 	beq.w	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002738:	f200 84b3 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	f000 835b 	beq.w	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	f200 84a9 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	f000 847f 	beq.w	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002760:	f200 849f 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276a:	f000 82ce 	beq.w	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	f200 8495 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	f000 80a0 	beq.w	80028c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	f200 848b 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	f000 808f 	beq.w	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	f200 8481 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a6:	d07e      	beq.n	80028a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ae:	f200 8478 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b8:	f000 8404 	beq.w	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	f200 846e 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	f000 83b0 	beq.w	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d6:	f200 8464 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e0:	f000 837a 	beq.w	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ea:	f200 845a 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	f000 8345 	beq.w	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	f200 8452 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b20      	cmp	r3, #32
 8002802:	d84b      	bhi.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 844b 	beq.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	2b1f      	cmp	r3, #31
 8002812:	f200 8446 	bhi.w	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002a07 	.word	0x08002a07
 8002820:	08002a77 	.word	0x08002a77
 8002824:	080030a3 	.word	0x080030a3
 8002828:	08002b0b 	.word	0x08002b0b
 800282c:	080030a3 	.word	0x080030a3
 8002830:	080030a3 	.word	0x080030a3
 8002834:	080030a3 	.word	0x080030a3
 8002838:	08002b83 	.word	0x08002b83
 800283c:	080030a3 	.word	0x080030a3
 8002840:	080030a3 	.word	0x080030a3
 8002844:	080030a3 	.word	0x080030a3
 8002848:	080030a3 	.word	0x080030a3
 800284c:	080030a3 	.word	0x080030a3
 8002850:	080030a3 	.word	0x080030a3
 8002854:	080030a3 	.word	0x080030a3
 8002858:	08002c07 	.word	0x08002c07
 800285c:	080030a3 	.word	0x080030a3
 8002860:	080030a3 	.word	0x080030a3
 8002864:	080030a3 	.word	0x080030a3
 8002868:	080030a3 	.word	0x080030a3
 800286c:	080030a3 	.word	0x080030a3
 8002870:	080030a3 	.word	0x080030a3
 8002874:	080030a3 	.word	0x080030a3
 8002878:	080030a3 	.word	0x080030a3
 800287c:	080030a3 	.word	0x080030a3
 8002880:	080030a3 	.word	0x080030a3
 8002884:	080030a3 	.word	0x080030a3
 8002888:	080030a3 	.word	0x080030a3
 800288c:	080030a3 	.word	0x080030a3
 8002890:	080030a3 	.word	0x080030a3
 8002894:	080030a3 	.word	0x080030a3
 8002898:	08002c89 	.word	0x08002c89
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	f000 82bd 	beq.w	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80028a4:	e3fd      	b.n	80030a2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028ac:	f000 fdd6 	bl	800345c <RCCEx_GetSAIxPeriphCLKFreq>
 80028b0:	61f8      	str	r0, [r7, #28]
      break;
 80028b2:	e3f7      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80028b4:	69b9      	ldr	r1, [r7, #24]
 80028b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028ba:	f000 fdcf 	bl	800345c <RCCEx_GetSAIxPeriphCLKFreq>
 80028be:	61f8      	str	r0, [r7, #28]
      break;
 80028c0:	e3f0      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80028d4:	d018      	beq.n	8002908 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80028dc:	f200 808b 	bhi.w	80029f6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e6:	d059      	beq.n	800299c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ee:	d028      	beq.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 80028f0:	e081      	b.n	80029f6 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	0003d090 	.word	0x0003d090
 80028fc:	08008ca4 	.word	0x08008ca4
 8002900:	00f42400 	.word	0x00f42400
 8002904:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002908:	4bae      	ldr	r3, [pc, #696]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d172      	bne.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002914:	4bab      	ldr	r3, [pc, #684]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8002920:	4ba8      	ldr	r3, [pc, #672]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	e005      	b.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800292c:	4ba5      	ldr	r3, [pc, #660]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	4aa3      	ldr	r2, [pc, #652]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61fb      	str	r3, [r7, #28]
          break;
 8002940:	e05b      	b.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002942:	4ba0      	ldr	r3, [pc, #640]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294e:	d156      	bne.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002950:	4b9c      	ldr	r3, [pc, #624]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295c:	d14f      	bne.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800295e:	4b99      	ldr	r3, [pc, #612]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002968:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	3301      	adds	r3, #1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002984:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0d5b      	lsrs	r3, r3, #21
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	61fb      	str	r3, [r7, #28]
          break;
 800299a:	e030      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800299c:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a8:	d12b      	bne.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80029aa:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b6:	d124      	bne.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80029b8:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	fb02 f203 	mul.w	r2, r2, r3
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	3301      	adds	r3, #1
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80029de:	4b79      	ldr	r3, [pc, #484]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	0d5b      	lsrs	r3, r3, #21
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	3301      	adds	r3, #1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	61fb      	str	r3, [r7, #28]
          break;
 80029f4:	e005      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 80029f6:	bf00      	nop
 80029f8:	e354      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029fa:	bf00      	nop
 80029fc:	e352      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80029fe:	bf00      	nop
 8002a00:	e350      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a02:	bf00      	nop
        break;
 8002a04:	e34e      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d828      	bhi.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a39 	.word	0x08002a39
 8002a28:	08002a41 	.word	0x08002a41
 8002a2c:	08002a55 	.word	0x08002a55
          frequency = HAL_RCC_GetPCLK2Freq();
 8002a30:	f7ff fa78 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002a34:	61f8      	str	r0, [r7, #28]
          break;
 8002a36:	e01d      	b.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a38:	f7ff f9c6 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002a3c:	61f8      	str	r0, [r7, #28]
          break;
 8002a3e:	e019      	b.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a40:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d10f      	bne.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002a50:	61fb      	str	r3, [r7, #28]
          break;
 8002a52:	e00c      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a54:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d107      	bne.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a66:	61fb      	str	r3, [r7, #28]
          break;
 8002a68:	e003      	b.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8002a6a:	bf00      	nop
 8002a6c:	e31a      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a6e:	bf00      	nop
 8002a70:	e318      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002a72:	bf00      	nop
        break;
 8002a74:	e316      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002a76:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d83a      	bhi.n	8002afe <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002aff 	.word	0x08002aff
 8002a98:	08002aff 	.word	0x08002aff
 8002a9c:	08002aff 	.word	0x08002aff
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002aff 	.word	0x08002aff
 8002aa8:	08002aff 	.word	0x08002aff
 8002aac:	08002aff 	.word	0x08002aff
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002aff 	.word	0x08002aff
 8002ab8:	08002aff 	.word	0x08002aff
 8002abc:	08002aff 	.word	0x08002aff
 8002ac0:	08002ae9 	.word	0x08002ae9
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f7ff fa18 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	61f8      	str	r0, [r7, #28]
          break;
 8002aca:	e01d      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8002acc:	f7ff f97c 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002ad0:	61f8      	str	r0, [r7, #28]
          break;
 8002ad2:	e019      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d10f      	bne.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002ae4:	61fb      	str	r3, [r7, #28]
          break;
 8002ae6:	e00c      	b.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8002af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afa:	61fb      	str	r3, [r7, #28]
          break;
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8002afe:	bf00      	nop
 8002b00:	e2d0      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b02:	bf00      	nop
 8002b04:	e2ce      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b06:	bf00      	nop
        break;
 8002b08:	e2cc      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b30      	cmp	r3, #48	; 0x30
 8002b1a:	d021      	beq.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b30      	cmp	r3, #48	; 0x30
 8002b20:	d829      	bhi.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d011      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d823      	bhi.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d004      	beq.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f7ff f9dc 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002b40:	61f8      	str	r0, [r7, #28]
          break;
 8002b42:	e01d      	b.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002b44:	f7ff f940 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002b48:	61f8      	str	r0, [r7, #28]
          break;
 8002b4a:	e019      	b.n	8002b80 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d10f      	bne.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8002b5c:	61fb      	str	r3, [r7, #28]
          break;
 8002b5e:	e00c      	b.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8002b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b72:	61fb      	str	r3, [r7, #28]
          break;
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8002b76:	bf00      	nop
 8002b78:	e294      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b7a:	bf00      	nop
 8002b7c:	e292      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002b7e:	bf00      	nop
        break;
 8002b80:	e290      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2bc0      	cmp	r3, #192	; 0xc0
 8002b92:	d027      	beq.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2bc0      	cmp	r3, #192	; 0xc0
 8002b98:	d82f      	bhi.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d017      	beq.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d829      	bhi.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d004      	beq.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8002bb2:	e022      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff f9a0 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	61f8      	str	r0, [r7, #28]
          break;
 8002bba:	e023      	b.n	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8002bbc:	f7ff f904 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002bc0:	61f8      	str	r0, [r7, #28]
          break;
 8002bc2:	e01f      	b.n	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08008ca4 	.word	0x08008ca4
 8002bcc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002bd0:	4ba9      	ldr	r3, [pc, #676]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bdc:	d10f      	bne.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8002bde:	4ba7      	ldr	r3, [pc, #668]	; (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002be0:	61fb      	str	r3, [r7, #28]
          break;
 8002be2:	e00c      	b.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002be4:	4ba4      	ldr	r3, [pc, #656]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8002bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf6:	61fb      	str	r3, [r7, #28]
          break;
 8002bf8:	e003      	b.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8002bfa:	bf00      	nop
 8002bfc:	e252      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002bfe:	bf00      	nop
 8002c00:	e250      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c02:	bf00      	nop
        break;
 8002c04:	e24e      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002c06:	4b9c      	ldr	r3, [pc, #624]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c18:	d025      	beq.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c20:	d82c      	bhi.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d013      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d824      	bhi.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3e:	d004      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8002c40:	e01c      	b.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff f959 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002c46:	61f8      	str	r0, [r7, #28]
          break;
 8002c48:	e01d      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c4a:	f7ff f8bd 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002c4e:	61f8      	str	r0, [r7, #28]
          break;
 8002c50:	e019      	b.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002c52:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d10f      	bne.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8002c60:	4b86      	ldr	r3, [pc, #536]	; (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002c62:	61fb      	str	r3, [r7, #28]
          break;
 8002c64:	e00c      	b.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002c66:	4b84      	ldr	r3, [pc, #528]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d107      	bne.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8002c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c78:	61fb      	str	r3, [r7, #28]
          break;
 8002c7a:	e003      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8002c7c:	bf00      	nop
 8002c7e:	e211      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c80:	bf00      	nop
 8002c82:	e20f      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002c84:	bf00      	nop
        break;
 8002c86:	e20d      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002c88:	4b7b      	ldr	r3, [pc, #492]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c9a:	d025      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ca2:	d82c      	bhi.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb2:	d824      	bhi.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d004      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002cc4:	f7ff f918 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	61f8      	str	r0, [r7, #28]
          break;
 8002cca:	e01d      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ccc:	f7ff f87c 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002cd0:	61f8      	str	r0, [r7, #28]
          break;
 8002cd2:	e019      	b.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002cd4:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 8002ce2:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002ce4:	61fb      	str	r3, [r7, #28]
          break;
 8002ce6:	e00c      	b.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ce8:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	61fb      	str	r3, [r7, #28]
          break;
 8002cfc:	e003      	b.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8002cfe:	bf00      	nop
 8002d00:	e1d0      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002d02:	bf00      	nop
 8002d04:	e1ce      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002d06:	bf00      	nop
        break;
 8002d08:	e1cc      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d1c:	d00c      	beq.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d24:	d864      	bhi.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d34:	d030      	beq.n	8002d98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 8002d36:	e05b      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 8002d38:	f7ff f846 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002d3c:	61f8      	str	r0, [r7, #28]
          break;
 8002d3e:	e05c      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4c:	d152      	bne.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04c      	beq.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d64:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	fb02 f203 	mul.w	r2, r2, r3
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	3301      	adds	r3, #1
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	0e5b      	lsrs	r3, r3, #25
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	61fb      	str	r3, [r7, #28]
          break;
 8002d96:	e02d      	b.n	8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da4:	d128      	bne.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002da6:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d022      	beq.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	fb02 f203 	mul.w	r2, r2, r3
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	0e5b      	lsrs	r3, r3, #25
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	61fb      	str	r3, [r7, #28]
          break;
 8002dee:	e003      	b.n	8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 8002df0:	bf00      	nop
 8002df2:	e157      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002df4:	bf00      	nop
 8002df6:	e155      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002df8:	bf00      	nop
        break;
 8002dfa:	e153      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e06:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e0e:	f7ff f889 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002e12:	61f8      	str	r0, [r7, #28]
        break;
 8002e14:	e146      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e16:	f7fe ffd7 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002e1a:	61f8      	str	r0, [r7, #28]
        break;
 8002e1c:	e142      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e30:	d013      	beq.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e38:	d819      	bhi.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	d004      	beq.n	8002e52 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8002e48:	e011      	b.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e4a:	f7ff f855 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002e4e:	61f8      	str	r0, [r7, #28]
          break;
 8002e50:	e010      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e52:	f7fe ffb9 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002e56:	61f8      	str	r0, [r7, #28]
          break;
 8002e58:	e00c      	b.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d104      	bne.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8002e6a:	61fb      	str	r3, [r7, #28]
          break;
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 8002e6e:	bf00      	nop
 8002e70:	e118      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002e72:	bf00      	nop
        break;
 8002e74:	e116      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002e80:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e92:	d013      	beq.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea8:	d004      	beq.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8002eaa:	e011      	b.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7ff f824 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
          break;
 8002eb2:	e010      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8002eb4:	f7fe ff88 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002eb8:	61f8      	str	r0, [r7, #28]
          break;
 8002eba:	e00c      	b.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ebc:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d104      	bne.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8002eca:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002ecc:	61fb      	str	r3, [r7, #28]
          break;
 8002ece:	e001      	b.n	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8002ed0:	bf00      	nop
 8002ed2:	e0e7      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002ed4:	bf00      	nop
        break;
 8002ed6:	e0e5      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002ed8:	4b75      	ldr	r3, [pc, #468]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eea:	d013      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef2:	d819      	bhi.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d004      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 8002f02:	e011      	b.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7fe fff8 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002f08:	61f8      	str	r0, [r7, #28]
          break;
 8002f0a:	e010      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f0c:	f7fe ff5c 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8002f10:	61f8      	str	r0, [r7, #28]
          break;
 8002f12:	e00c      	b.n	8002f2e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f14:	4b66      	ldr	r3, [pc, #408]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d104      	bne.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 8002f22:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002f24:	61fb      	str	r3, [r7, #28]
          break;
 8002f26:	e001      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 8002f28:	bf00      	nop
 8002f2a:	e0bb      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002f2c:	bf00      	nop
        break;
 8002f2e:	e0b9      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f42:	d02c      	beq.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f4a:	d833      	bhi.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f52:	d01a      	beq.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f5a:	d82b      	bhi.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f68:	d004      	beq.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 8002f6a:	e023      	b.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7fe ffc4 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002f70:	61f8      	str	r0, [r7, #28]
          break;
 8002f72:	e026      	b.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002f74:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 8002f82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002f86:	61fb      	str	r3, [r7, #28]
          break;
 8002f88:	e016      	b.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d111      	bne.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8002f9a:	61fb      	str	r3, [r7, #28]
          break;
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f9e:	4b44      	ldr	r3, [pc, #272]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8002fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb0:	61fb      	str	r3, [r7, #28]
          break;
 8002fb2:	e005      	b.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8002fb4:	bf00      	nop
 8002fb6:	e075      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fb8:	bf00      	nop
 8002fba:	e073      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fbc:	bf00      	nop
 8002fbe:	e071      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8002fc0:	bf00      	nop
        break;
 8002fc2:	e06f      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fd6:	d02c      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fde:	d833      	bhi.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe6:	d01a      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fee:	d82b      	bhi.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ffc:	d004      	beq.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8002ffe:	e023      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003000:	f7fe ff7a 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8003004:	61f8      	str	r0, [r7, #28]
          break;
 8003006:	e026      	b.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003008:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d11a      	bne.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8003016:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800301a:	61fb      	str	r3, [r7, #28]
          break;
 800301c:	e016      	b.n	800304c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d111      	bne.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800302e:	61fb      	str	r3, [r7, #28]
          break;
 8003030:	e00e      	b.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003032:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d109      	bne.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003044:	61fb      	str	r3, [r7, #28]
          break;
 8003046:	e005      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8003048:	bf00      	nop
 800304a:	e02b      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800304c:	bf00      	nop
 800304e:	e029      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003050:	bf00      	nop
 8003052:	e027      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003054:	bf00      	nop
        break;
 8003056:	e025      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d004      	beq.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 8003072:	e00d      	b.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003074:	f7fe ff40 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8003078:	61f8      	str	r0, [r7, #28]
          break;
 800307a:	e009      	b.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d101      	bne.n	800308e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800308c:	61fb      	str	r3, [r7, #28]
          break;
 800308e:	bf00      	nop
        break;
 8003090:	e008      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003092:	bf00      	nop
 8003094:	e006      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8003096:	bf00      	nop
 8003098:	e004      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800309a:	bf00      	nop
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 80030a2:	bf00      	nop
    }
  }

  return(frequency);
 80030a4:	69fb      	ldr	r3, [r7, #28]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00f42400 	.word	0x00f42400

080030b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c6:	4b75      	ldr	r3, [pc, #468]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030d2:	4b72      	ldr	r3, [pc, #456]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
       ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ea:	4b6c      	ldr	r3, [pc, #432]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
       ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d047      	beq.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d018      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x86>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d825      	bhi.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <RCCEx_PLLSAI1_Config+0x62>
 8003114:	2b02      	cmp	r3, #2
 8003116:	d009      	beq.n	800312c <RCCEx_PLLSAI1_Config+0x74>
 8003118:	e020      	b.n	800315c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800311a:	4b60      	ldr	r3, [pc, #384]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11d      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e01a      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800312c:	4b5b      	ldr	r3, [pc, #364]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e013      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800315a:	e006      	b.n	800316a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e004      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316a:	bf00      	nop
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003172:	4b4a      	ldr	r3, [pc, #296]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	430b      	orrs	r3, r1
 8003188:	4944      	ldr	r1, [pc, #272]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d17d      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a40      	ldr	r2, [pc, #256]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800319e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fbaa 	bl	80008f8 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a8:	f7fd fba6 	bl	80008f8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ef      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d160      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	0912      	lsrs	r2, r2, #4
 80031ec:	0452      	lsls	r2, r2, #17
 80031ee:	430a      	orrs	r2, r1
 80031f0:	492a      	ldr	r1, [pc, #168]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
 80031f6:	e027      	b.n	8003248 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d112      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003206:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6892      	ldr	r2, [r2, #8]
 800320e:	0211      	lsls	r1, r2, #8
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6912      	ldr	r2, [r2, #16]
 8003214:	0852      	lsrs	r2, r2, #1
 8003216:	3a01      	subs	r2, #1
 8003218:	0552      	lsls	r2, r2, #21
 800321a:	430a      	orrs	r2, r1
 800321c:	491f      	ldr	r1, [pc, #124]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	610b      	str	r3, [r1, #16]
 8003222:	e011      	b.n	8003248 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800322c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6892      	ldr	r2, [r2, #8]
 8003234:	0211      	lsls	r1, r2, #8
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6952      	ldr	r2, [r2, #20]
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	3a01      	subs	r2, #1
 800323e:	0652      	lsls	r2, r2, #25
 8003240:	430a      	orrs	r2, r1
 8003242:	4916      	ldr	r1, [pc, #88]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a13      	ldr	r2, [pc, #76]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fb50 	bl	80008f8 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800325a:	e009      	b.n	8003270 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800325c:	f7fd fb4c 	bl	80008f8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	73fb      	strb	r3, [r7, #15]
          break;
 800326e:	e005      	b.n	800327c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ef      	beq.n	800325c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4904      	ldr	r1, [pc, #16]	; (800329c <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000

080032a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ae:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032ba:	4b67      	ldr	r3, [pc, #412]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d10d      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
       ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
       ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d047      	beq.n	8003376 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e044      	b.n	8003376 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d018      	beq.n	8003326 <RCCEx_PLLSAI2_Config+0x86>
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d825      	bhi.n	8003344 <RCCEx_PLLSAI2_Config+0xa4>
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d002      	beq.n	8003302 <RCCEx_PLLSAI2_Config+0x62>
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d009      	beq.n	8003314 <RCCEx_PLLSAI2_Config+0x74>
 8003300:	e020      	b.n	8003344 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003302:	4b55      	ldr	r3, [pc, #340]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11d      	bne.n	800334a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003312:	e01a      	b.n	800334a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e013      	b.n	800334e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003342:	e006      	b.n	8003352 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e004      	b.n	8003354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003352:	bf00      	nop
    }

    if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	430b      	orrs	r3, r1
 8003370:	4939      	ldr	r1, [pc, #228]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d167      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a35      	ldr	r2, [pc, #212]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fd fab6 	bl	80008f8 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003390:	f7fd fab2 	bl	80008f8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
        break;
 80033a2:	e005      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ef      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d14a      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	0912      	lsrs	r2, r2, #4
 80033d4:	0452      	lsls	r2, r2, #17
 80033d6:	430a      	orrs	r2, r1
 80033d8:	491f      	ldr	r1, [pc, #124]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	614b      	str	r3, [r1, #20]
 80033de:	e011      	b.n	8003404 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	0211      	lsls	r1, r2, #8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6912      	ldr	r2, [r2, #16]
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0652      	lsls	r2, r2, #25
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4916      	ldr	r1, [pc, #88]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003400:	4313      	orrs	r3, r2
 8003402:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fd fa72 	bl	80008f8 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003416:	e009      	b.n	800342c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003418:	f7fd fa6e 	bl	80008f8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	73fb      	strb	r3, [r7, #15]
          break;
 800342a:	e005      	b.n	8003438 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	4313      	orrs	r3, r2
 800344a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003478:	d10c      	bne.n	8003494 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800347a:	4b6e      	ldr	r3, [pc, #440]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003484:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348c:	d112      	bne.n	80034b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800348e:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e00f      	b.n	80034b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d10b      	bne.n	80034b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800349c:	4b65      	ldr	r3, [pc, #404]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80034a6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ae:	d101      	bne.n	80034b4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80034b2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 80b4 	bne.w	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c6:	d003      	beq.n	80034d0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ce:	d135      	bne.n	800353c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80034d0:	4b58      	ldr	r3, [pc, #352]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034dc:	f040 80a1 	bne.w	8003622 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80034e0:	4b54      	ldr	r3, [pc, #336]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 809a 	beq.w	8003622 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	3301      	adds	r3, #1
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003502:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003514:	4b47      	ldr	r3, [pc, #284]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8003520:	2311      	movs	r3, #17
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e001      	b.n	800352a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8003526:	2307      	movs	r3, #7
 8003528:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	fb02 f203 	mul.w	r2, r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800353a:	e072      	b.n	8003622 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d133      	bne.n	80035aa <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003542:	4b3c      	ldr	r3, [pc, #240]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d169      	bne.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d063      	beq.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	3301      	adds	r3, #1
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800357a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800358e:	2311      	movs	r3, #17
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e001      	b.n	8003598 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003594:	2307      	movs	r3, #7
 8003596:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	fb02 f203 	mul.w	r2, r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	e03c      	b.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b0:	d003      	beq.n	80035ba <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b8:	d134      	bne.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c6:	d12d      	bne.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d027      	beq.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	3301      	adds	r3, #1
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8003606:	2311      	movs	r3, #17
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e001      	b.n	8003610 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800360c:	2307      	movs	r3, #7
 800360e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	fb02 f203 	mul.w	r2, r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e000      	b.n	8003624 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003622:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8003624:	69fb      	ldr	r3, [r7, #28]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	001fff68 	.word	0x001fff68

0800363c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fc ff6d 	bl	8000540 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f814 	bl	800369c <HAL_SD_InitCard>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e00a      	b.n	8003694 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b090      	sub	sp, #64	; 0x40
 80036a0:	af04      	add	r7, sp, #16
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80036b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036bc:	f7fe ff92 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80036c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e08d      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	09db      	lsrs	r3, r3, #7
 80036e0:	4a47      	ldr	r2, [pc, #284]	; (8003800 <HAL_SD_InitCard+0x164>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	3b02      	subs	r3, #2
 80036ea:	623b      	str	r3, [r7, #32]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681d      	ldr	r5, [r3, #0]
 80036f0:	466c      	mov	r4, sp
 80036f2:	f107 0318 	add.w	r3, r7, #24
 80036f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003704:	4628      	mov	r0, r5
 8003706:	f001 fad1 	bl	8004cac <SDMMC_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8003710:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06d      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fb06 	bl	8004d42 <SDMMC_PowerState_ON>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 800373c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_SD_InitCard+0xac>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e057      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	3302      	adds	r3, #2
 800375c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003764:	4a27      	ldr	r2, [pc, #156]	; (8003804 <HAL_SD_InitCard+0x168>)
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	3301      	adds	r3, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd f8ce 	bl	8000910 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 ffdd 	bl	8004734 <SD_PowerON>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e02e      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fefe 	bl	800459c <SD_InitCard>
 80037a0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_SD_InitCard+0x124>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e01b      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fb4d 	bl	8004e68 <SDMMC_CmdBlockLength>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_SD_InitCard+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_SD_InitCard+0x16c>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_SD_InitCard+0x15c>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3730      	adds	r7, #48	; 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003800:	014f8b59 	.word	0x014f8b59
 8003804:	00012110 	.word	0x00012110
 8003808:	004005ff 	.word	0x004005ff

0800380c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0a9      	b.n	8003988 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 80a2 	bne.w	8003986 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	429a      	cmp	r2, r3
 8003854:	d907      	bls.n	8003866 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e090      	b.n	8003988 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2203      	movs	r2, #3
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a45      	ldr	r2, [pc, #276]	; (8003990 <HAL_SD_ReadBlocks_DMA+0x184>)
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a44      	ldr	r2, [pc, #272]	; (8003994 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2200      	movs	r2, #0
 800388c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3380      	adds	r3, #128	; 0x80
 8003898:	4619      	mov	r1, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	025b      	lsls	r3, r3, #9
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	f7fd fa23 	bl	8000cec <HAL_DMA_Start_IT>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00f      	beq.n	80038cc <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a39      	ldr	r2, [pc, #228]	; (8003998 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e05d      	b.n	8003988 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0208 	orr.w	r2, r2, #8
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d002      	beq.n	80038ea <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	025b      	lsls	r3, r3, #9
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80038f6:	2390      	movs	r3, #144	; 0x90
 80038f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003902:	2301      	movs	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f107 0210 	add.w	r2, r7, #16
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fa7d 	bl	8004e10 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d90a      	bls.n	8003932 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2282      	movs	r2, #130	; 0x82
 8003920:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003928:	4618      	mov	r0, r3
 800392a:	f001 fae1 	bl	8004ef0 <SDMMC_CmdReadMultiBlock>
 800392e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003930:	e009      	b.n	8003946 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2281      	movs	r2, #129	; 0x81
 8003936:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fab4 	bl	8004eac <SDMMC_CmdReadSingleBlock>
 8003944:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	431a      	orrs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e00a      	b.n	8003988 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	080043b7 	.word	0x080043b7
 8003994:	08004429 	.word	0x08004429
 8003998:	004005ff 	.word	0x004005ff

0800399c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0ac      	b.n	8003b1e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 80a5 	bne.w	8003b1c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	441a      	add	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d907      	bls.n	80039f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e093      	b.n	8003b1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	4a46      	ldr	r2, [pc, #280]	; (8003b2c <HAL_SD_WriteBlocks_DMA+0x190>)
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d002      	beq.n	8003a2c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d90a      	bls.n	8003a48 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	22a0      	movs	r2, #160	; 0xa0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 fa9a 	bl	8004f78 <SDMMC_CmdWriteMultiBlock>
 8003a44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a46:	e009      	b.n	8003a5c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2290      	movs	r2, #144	; 0x90
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fa6d 	bl	8004f34 <SDMMC_CmdWriteSingleBlock>
 8003a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a32      	ldr	r2, [pc, #200]	; (8003b30 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e04a      	b.n	8003b1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3380      	adds	r3, #128	; 0x80
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	025b      	lsls	r3, r3, #9
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	f7fd f91e 	bl	8000cec <HAL_DMA_Start_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d012      	beq.n	8003adc <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e020      	b.n	8003b1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ae0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	025b      	lsls	r3, r3, #9
 8003ae6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003ae8:	2390      	movs	r3, #144	; 0x90
 8003aea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f107 0210 	add.w	r2, r7, #16
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f984 	bl	8004e10 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 021a 	orr.w	r2, r2, #26
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3730      	adds	r7, #48	; 0x30
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	0800438d 	.word	0x0800438d
 8003b2c:	08004429 	.word	0x08004429
 8003b30:	004005ff 	.word	0x004005ff

08003b34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_SD_IRQHandler+0x2e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 f800 	bl	8004b60 <SD_Read_IT>
 8003b60:	e155      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808f 	beq.w	8003c90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003b8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003b8e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d039      	beq.n	8003c1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_SD_IRQHandler+0x8a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f9fa 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8003bc8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f91f 	bl	8003e20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <HAL_SD_IRQHandler+0xda>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f001 fe68 	bl	80058e4 <HAL_SD_RxCpltCallback>
 8003c14:	e0fb      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 fe5a 	bl	80058d0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003c1c:	e0f7      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80f2 	beq.w	8003e0e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d011      	beq.n	8003c58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f9bf 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8003c3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8e4 	bl	8003e20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 80d5 	bne.w	8003e0e <HAL_SD_IRQHandler+0x2da>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 80cf 	bne.w	8003e0e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0208 	bic.w	r2, r2, #8
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f001 fe21 	bl	80058d0 <HAL_SD_TxCpltCallback>
}
 8003c8e:	e0be      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_SD_IRQHandler+0x17c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 ffaa 	bl	8004c02 <SD_Write_IT>
 8003cae:	e0ae      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80a7 	beq.w	8003e0e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f043 0208 	orr.w	r2, r3, #8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	f043 0210 	orr.w	r2, r3, #16
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 f938 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f855 	bl	8003e20 <HAL_SD_ErrorCallback>
}
 8003d76:	e04a      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d045      	beq.n	8003e0e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_SD_IRQHandler+0x262>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d011      	beq.n	8003dba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_SD_IRQHandler+0x2e4>)
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f802 	bl	8000dac <HAL_DMA_Abort_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02f      	beq.n	8003e0e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb84 	bl	80044c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003db8:	e029      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <HAL_SD_IRQHandler+0x29a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_SD_IRQHandler+0x2e8>)
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc ffe6 	bl	8000dac <HAL_DMA_Abort_IT>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb9f 	bl	800452e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003df0:	e00d      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 fd58 	bl	80058bc <HAL_SD_AbortCallback>
}
 8003e0c:	e7ff      	b.n	8003e0e <HAL_SD_IRQHandler+0x2da>
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080044c1 	.word	0x080044c1
 8003e1c:	0800452f 	.word	0x0800452f

08003e20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e42:	0f9b      	lsrs	r3, r3, #30
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e60:	0e1b      	lsrs	r3, r3, #24
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e94:	0d1b      	lsrs	r3, r3, #20
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb2:	0bdb      	lsrs	r3, r3, #15
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec4:	0b9b      	lsrs	r3, r3, #14
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed6:	0b5b      	lsrs	r3, r3, #13
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee8:	0b1b      	lsrs	r3, r3, #12
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d163      	bne.n	8003fcc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f14:	0f92      	lsrs	r2, r2, #30
 8003f16:	431a      	orrs	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f20:	0edb      	lsrs	r3, r3, #27
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	0e1b      	lsrs	r3, r3, #24
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f44:	0d5b      	lsrs	r3, r3, #21
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f56:	0c9b      	lsrs	r3, r3, #18
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f68:	0bdb      	lsrs	r3, r3, #15
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	7e1b      	ldrb	r3, [r3, #24]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f96:	fb02 f203 	mul.w	r2, r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	7a1b      	ldrb	r3, [r3, #8]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fb8:	0a52      	lsrs	r2, r2, #9
 8003fba:	fb02 f203 	mul.w	r2, r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60
 8003fca:	e031      	b.n	8004030 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d11d      	bne.n	8004010 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	029a      	lsls	r2, r3, #10
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004004:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
 800400e:	e00f      	b.n	8004030 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_SD_GetCardCSD+0x344>)
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e09d      	b.n	800416c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	0b9b      	lsrs	r3, r3, #14
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004046:	09db      	lsrs	r3, r3, #7
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404e:	b2da      	uxtb	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	0fdb      	lsrs	r3, r3, #31
 800406a:	b2da      	uxtb	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	0f5b      	lsrs	r3, r3, #29
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	b2da      	uxtb	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	0d9b      	lsrs	r3, r3, #22
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	0d5b      	lsrs	r3, r3, #21
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	0bdb      	lsrs	r3, r3, #15
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	0b9b      	lsrs	r3, r3, #14
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	0b5b      	lsrs	r3, r3, #13
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	0b1b      	lsrs	r3, r3, #12
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	b2da      	uxtb	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415a:	b2da      	uxtb	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	004005ff 	.word	0x004005ff

0800417c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b090      	sub	sp, #64	; 0x40
 80041d8:	af04      	add	r7, sp, #16
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2203      	movs	r2, #3
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d02e      	beq.n	8004252 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d106      	bne.n	800420a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
 8004208:	e029      	b.n	800425e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004210:	d10a      	bne.n	8004228 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb44 	bl	80048a0 <SD_WideBus_Enable>
 8004218:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
 8004226:	e01a      	b.n	800425e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb81 	bl	8004936 <SD_WideBus_Disable>
 8004234:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
 8004242:	e00c      	b.n	800425e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
 8004250:	e005      	b.n	800425e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a35      	ldr	r2, [pc, #212]	; (8004340 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004274:	e041      	b.n	80042fa <HAL_SD_ConfigWideBusOperation+0x126>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004276:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800427a:	f7fe f9b3 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800427e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d030      	beq.n	80042e8 <HAL_SD_ConfigWideBusOperation+0x114>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	3302      	adds	r3, #2
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	4a25      	ldr	r2, [pc, #148]	; (8004344 <HAL_SD_ConfigWideBusOperation+0x170>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d907      	bls.n	80042c2 <HAL_SD_ConfigWideBusOperation+0xee>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_SD_ConfigWideBusOperation+0x174>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0ddb      	lsrs	r3, r3, #23
 80042bc:	3b02      	subs	r3, #2
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	e002      	b.n	80042c8 <HAL_SD_ConfigWideBusOperation+0xf4>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681d      	ldr	r5, [r3, #0]
 80042cc:	466c      	mov	r4, sp
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fce3 	bl	8004cac <SDMMC_Init>
 80042e6:	e008      	b.n	80042fa <HAL_SD_ConfigWideBusOperation+0x126>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fdb0 	bl	8004e68 <SDMMC_CmdBlockLength>
 8004308:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_SD_ConfigWideBusOperation+0x156>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004336:	4618      	mov	r0, r3
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bdb0      	pop	{r4, r5, r7, pc}
 800433e:	bf00      	nop
 8004340:	004005ff 	.word	0x004005ff
 8004344:	017d7840 	.word	0x017d7840
 8004348:	55e63b89 	.word	0x55e63b89

0800434c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa76 	bl	8004850 <SD_SendStatus>
 8004364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004382:	693b      	ldr	r3, [r7, #16]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	2b82      	cmp	r3, #130	; 0x82
 80043ca:	d111      	bne.n	80043f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fdf3 	bl	8004fbc <SDMMC_CmdStopTransfer>
 80043d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff fd18 	bl	8003e20 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0208 	bic.w	r2, r2, #8
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f240 523a 	movw	r2, #1338	; 0x53a
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f001 fa63 	bl	80058e4 <HAL_SD_RxCpltCallback>
#endif
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <SD_DMAError+0x2a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12d      	bne.n	80044ae <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <SD_DMAError+0x94>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff68 	bl	800434c <HAL_SD_GetCardState>
 800447c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b06      	cmp	r3, #6
 8004482:	d002      	beq.n	800448a <SD_DMAError+0x62>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d10a      	bne.n	80044a0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fd94 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8004494:	4602      	mov	r2, r0
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	431a      	orrs	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff fcb6 	bl	8003e20 <HAL_SD_ErrorCallback>
#endif
}
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	004005ff 	.word	0x004005ff

080044c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ff37 	bl	800434c <HAL_SD_GetCardState>
 80044de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d002      	beq.n	80044fa <SD_DMATxAbort+0x3a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d10a      	bne.n	8004510 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd5c 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 f9cf 	bl	80058bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800451e:	e002      	b.n	8004526 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff fc7d 	bl	8003e20 <HAL_SD_ErrorCallback>
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f240 523a 	movw	r2, #1338	; 0x53a
 8004544:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff ff00 	bl	800434c <HAL_SD_GetCardState>
 800454c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d002      	beq.n	8004568 <SD_DMARxAbort+0x3a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10a      	bne.n	800457e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fd25 	bl	8004fbc <SDMMC_CmdStopTransfer>
 8004572:	4602      	mov	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f001 f998 	bl	80058bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800458c:	e002      	b.n	8004594 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff fc46 	bl	8003e20 <HAL_SD_ErrorCallback>
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b094      	sub	sp, #80	; 0x50
 80045a0:	af04      	add	r7, sp, #16
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80045a4:	2301      	movs	r3, #1
 80045a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fbd7 	bl	8004d60 <SDMMC_GetPowerState>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045bc:	e0b6      	b.n	800472c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d02f      	beq.n	8004626 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fe00 	bl	80051d0 <SDMMC_CmdSendCID>
 80045d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SD_InitCard+0x40>
    {
      return errorstate;
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	e0a7      	b.n	800472c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fc01 	bl	8004dea <SDMMC_GetResponse>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2104      	movs	r1, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fbf8 	bl	8004dea <SDMMC_GetResponse>
 80045fa:	4602      	mov	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2108      	movs	r1, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fbef 	bl	8004dea <SDMMC_GetResponse>
 800460c:	4602      	mov	r2, r0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	210c      	movs	r1, #12
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fbe6 	bl	8004dea <SDMMC_GetResponse>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	2b03      	cmp	r3, #3
 800462c:	d00d      	beq.n	800464a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f107 020e 	add.w	r2, r7, #14
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fe06 	bl	800524a <SDMMC_CmdSetRelAdd>
 800463e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <SD_InitCard+0xae>
    {
      return errorstate;
 8004646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004648:	e070      	b.n	800472c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	2b03      	cmp	r3, #3
 8004650:	d036      	beq.n	80046c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f000 fdd0 	bl	800520c <SDMMC_CmdSendCSD>
 800466c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004676:	e059      	b.n	800472c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fbb3 	bl	8004dea <SDMMC_GetResponse>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2104      	movs	r1, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fbaa 	bl	8004dea <SDMMC_GetResponse>
 8004696:	4602      	mov	r2, r0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2108      	movs	r1, #8
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fba1 	bl	8004dea <SDMMC_GetResponse>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	210c      	movs	r1, #12
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fb98 	bl	8004dea <SDMMC_GetResponse>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2104      	movs	r1, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb8f 	bl	8004dea <SDMMC_GetResponse>
 80046cc:	4603      	mov	r3, r0
 80046ce:	0d1a      	lsrs	r2, r3, #20
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fbaa 	bl	8003e34 <HAL_SD_GetCardCSD>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046ea:	e01f      	b.n	800472c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	461a      	mov	r2, r3
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	4608      	mov	r0, r1
 80046fe:	f000 fc7f 	bl	8005000 <SDMMC_CmdSelDesel>
 8004702:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <SD_InitCard+0x172>
  {
    return errorstate;
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	e00e      	b.n	800472c <SD_InitCard+0x190>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681d      	ldr	r5, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	466c      	mov	r4, sp
 8004716:	f103 0210 	add.w	r2, r3, #16
 800471a:	ca07      	ldmia	r2, {r0, r1, r2}
 800471c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004720:	3304      	adds	r3, #4
 8004722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004724:	4628      	mov	r0, r5
 8004726:	f000 fac1 	bl	8004cac <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3740      	adds	r7, #64	; 0x40
 8004730:	46bd      	mov	sp, r7
 8004732:	bdb0      	pop	{r4, r5, r7, pc}

08004734 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fc7a 	bl	8005046 <SDMMC_CmdGoIdleState>
 8004752:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <SD_PowerON+0x2a>
  {
    return errorstate;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e072      	b.n	8004844 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc8d 	bl	8005082 <SDMMC_CmdOperCond>
 8004768:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fc63 	bl	8005046 <SDMMC_CmdGoIdleState>
 8004780:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e05b      	b.n	8004844 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	2b01      	cmp	r3, #1
 8004798:	d137      	bne.n	800480a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fc8d 	bl	80050c0 <SDMMC_CmdAppCommand>
 80047a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02d      	beq.n	800480a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047b2:	e047      	b.n	8004844 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fc80 	bl	80050c0 <SDMMC_CmdAppCommand>
 80047c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <SD_PowerON+0x98>
    {
      return errorstate;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	e03b      	b.n	8004844 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	491e      	ldr	r1, [pc, #120]	; (800484c <SD_PowerON+0x118>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc96 	bl	8005104 <SDMMC_CmdAppOperCommand>
 80047d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047e4:	e02e      	b.n	8004844 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fafc 	bl	8004dea <SDMMC_GetResponse>
 80047f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	0fdb      	lsrs	r3, r3, #31
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <SD_PowerON+0xcc>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <SD_PowerON+0xce>
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]

    count++;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3301      	adds	r3, #1
 8004808:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004810:	4293      	cmp	r3, r2
 8004812:	d802      	bhi.n	800481a <SD_PowerON+0xe6>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0cc      	beq.n	80047b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004820:	4293      	cmp	r3, r2
 8004822:	d902      	bls.n	800482a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004828:	e00c      	b.n	8004844 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
 800483a:	e002      	b.n	8004842 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	c1100000 	.word	0xc1100000

08004850 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004864:	e018      	b.n	8004898 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fd0a 	bl	800528c <SDMMC_CmdSendStatus>
 8004878:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	e009      	b.n	8004898 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 faad 	bl	8004dea <SDMMC_GetResponse>
 8004890:	4602      	mov	r2, r0
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa97 	bl	8004dea <SDMMC_GetResponse>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c6:	d102      	bne.n	80048ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048cc:	e02f      	b.n	800492e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f879 	bl	80049cc <SD_FindSCR>
 80048da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	e023      	b.n	800492e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01c      	beq.n	800492a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f000 fbdf 	bl	80050c0 <SDMMC_CmdAppCommand>
 8004902:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e00f      	b.n	800492e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2102      	movs	r1, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fc18 	bl	800514a <SDMMC_CmdBusWidth>
 800491a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	e003      	b.n	800492e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004926:	2300      	movs	r3, #0
 8004928:	e001      	b.n	800492e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800492a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fa4c 	bl	8004dea <SDMMC_GetResponse>
 8004952:	4603      	mov	r3, r0
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800495c:	d102      	bne.n	8004964 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800495e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004962:	e02f      	b.n	80049c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f82e 	bl	80049cc <SD_FindSCR>
 8004970:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	e023      	b.n	80049c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01c      	beq.n	80049c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fb94 	bl	80050c0 <SDMMC_CmdAppCommand>
 8004998:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	e00f      	b.n	80049c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fbcd 	bl	800514a <SDMMC_CmdBusWidth>
 80049b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	e003      	b.n	80049c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049bc:	2300      	movs	r3, #0
 80049be:	e001      	b.n	80049c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b08f      	sub	sp, #60	; 0x3c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80049d6:	f7fb ff8f 	bl	80008f8 <HAL_GetTick>
 80049da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2108      	movs	r1, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa38 	bl	8004e68 <SDMMC_CmdBlockLength>
 80049f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	e0a9      	b.n	8004b58 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f000 fb55 	bl	80050c0 <SDMMC_CmdAppCommand>
 8004a16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	e09a      	b.n	8004b58 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004a28:	2308      	movs	r3, #8
 8004a2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004a2c:	2330      	movs	r3, #48	; 0x30
 8004a2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a30:	2302      	movs	r3, #2
 8004a32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f107 0210 	add.w	r2, r7, #16
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f9e2 	bl	8004e10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb9c 	bl	800518e <SDMMC_CmdSendSCR>
 8004a56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d022      	beq.n	8004aa4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	e07a      	b.n	8004b58 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f107 0208 	add.w	r2, r7, #8
 8004a7c:	18d4      	adds	r4, r2, r3
 8004a7e:	4608      	mov	r0, r1
 8004a80:	f000 f941 	bl	8004d06 <SDMMC_ReadFIFO>
 8004a84:	4603      	mov	r3, r0
 8004a86:	6023      	str	r3, [r4, #0]
      index++;
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a8e:	f7fb ff33 	bl	80008f8 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9c:	d102      	bne.n	8004aa4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004a9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aa2:	e059      	b.n	8004b58 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aaa:	f240 432a 	movw	r3, #1066	; 0x42a
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0d6      	beq.n	8004a62 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004aca:	2308      	movs	r3, #8
 8004acc:	e044      	b.n	8004b58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e037      	b.n	8004b58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2220      	movs	r2, #32
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004afe:	2320      	movs	r3, #32
 8004b00:	e02a      	b.n	8004b58 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	061a      	lsls	r2, r3, #24
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b18:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b22:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	601a      	str	r2, [r3, #0]
    scr++;
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	3304      	adds	r3, #4
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	061a      	lsls	r2, r3, #24
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b40:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b4a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	373c      	adds	r7, #60	; 0x3c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}

08004b60 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03f      	beq.n	8004bfa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e033      	b.n	8004be8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f8be 	bl	8004d06 <SDMMC_ReadFIFO>
 8004b8a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	0e1b      	lsrs	r3, r3, #24
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	3301      	adds	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b07      	cmp	r3, #7
 8004bec:	d9c8      	bls.n	8004b80 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d043      	beq.n	8004ca4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e037      	b.n	8004c92 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	021a      	lsls	r2, r3, #8
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	041a      	lsls	r2, r3, #16
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	061a      	lsls	r2, r3, #24
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f107 0208 	add.w	r2, r7, #8
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f84a 	bl	8004d20 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b07      	cmp	r3, #7
 8004c96:	d9c4      	bls.n	8004c22 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004cac:	b084      	sub	sp, #16
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	f107 001c 	add.w	r0, r7, #28
 8004cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004cca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8004cce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004cd2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004cd6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004cda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004cea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	b004      	add	sp, #16
 8004d04:	4770      	bx	lr

08004d06 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004d50:	2002      	movs	r0, #2
 8004d52:	f7fb fddd 	bl	8000910 <HAL_Delay>

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004d9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004da0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004da6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004db6:	f023 030f 	bic.w	r3, r3, #15
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	b2db      	uxtb	r3, r3
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3314      	adds	r3, #20
 8004df8:	461a      	mov	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e36:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004e3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004e42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0

}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004e76:	2310      	movs	r3, #16
 8004e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e88:	f107 0308 	add.w	r3, r7, #8
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff74 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	2110      	movs	r1, #16
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa18 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004eba:	2311      	movs	r3, #17
 8004ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ebe:	2340      	movs	r3, #64	; 0x40
 8004ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ff52 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	2111      	movs	r1, #17
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9f6 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004efe:	2312      	movs	r3, #18
 8004f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f02:	2340      	movs	r3, #64	; 0x40
 8004f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ff30 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	2112      	movs	r1, #18
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9d4 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004f42:	2318      	movs	r3, #24
 8004f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f54:	f107 0308 	add.w	r3, r7, #8
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff ff0e 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f64:	2118      	movs	r1, #24
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9b2 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004f86:	2319      	movs	r3, #25
 8004f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff feec 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	2119      	movs	r1, #25
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f990 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004fc8:	230c      	movs	r3, #12
 8004fca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd8:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fecb 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <SDMMC_CmdStopTransfer+0x40>)
 8004fe8:	210c      	movs	r1, #12
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f970 	bl	80052d0 <SDMMC_GetCmdResp1>
 8004ff0:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	05f5e100 	.word	0x05f5e100

08005000 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005010:	2307      	movs	r3, #7
 8005012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800501c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005020:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005022:	f107 0310 	add.w	r3, r7, #16
 8005026:	4619      	mov	r1, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fea7 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800502e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005032:	2107      	movs	r1, #7
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f94b 	bl	80052d0 <SDMMC_GetCmdResp1>
 800503a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800503e:	4618      	mov	r0, r3
 8005040:	3728      	adds	r7, #40	; 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b088      	sub	sp, #32
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800505e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fe86 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb65 	bl	8005740 <SDMMC_GetCmdError>
 8005076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005078:	69fb      	ldr	r3, [r7, #28]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800508a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800508e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005090:	2308      	movs	r3, #8
 8005092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800509c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff fe67 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 faf8 	bl	80056a4 <SDMMC_GetCmdResp7>
 80050b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050b6:	69fb      	ldr	r3, [r7, #28]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80050ce:	2337      	movs	r3, #55	; 0x37
 80050d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fe48 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80050ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f0:	2137      	movs	r1, #55	; 0x37
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8ec 	bl	80052d0 <SDMMC_GetCmdResp1>
 80050f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050fa:	69fb      	ldr	r3, [r7, #28]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005118:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800511a:	2329      	movs	r3, #41	; 0x29
 800511c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800512c:	f107 0308 	add.w	r3, r7, #8
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fe22 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f9ff 	bl	800553c <SDMMC_GetCmdResp3>
 800513e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005140:	69fb      	ldr	r3, [r7, #28]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b088      	sub	sp, #32
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005158:	2306      	movs	r3, #6
 800515a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff fe03 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	2106      	movs	r1, #6
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f8a7 	bl	80052d0 <SDMMC_GetCmdResp1>
 8005182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005184:	69fb      	ldr	r3, [r7, #28]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b088      	sub	sp, #32
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800519a:	2333      	movs	r3, #51	; 0x33
 800519c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fde2 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	2133      	movs	r1, #51	; 0x33
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f886 	bl	80052d0 <SDMMC_GetCmdResp1>
 80051c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c6:	69fb      	ldr	r3, [r7, #28]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80051dc:	2302      	movs	r3, #2
 80051de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80051e0:	23c0      	movs	r3, #192	; 0xc0
 80051e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051ee:	f107 0308 	add.w	r3, r7, #8
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fdc1 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f956 	bl	80054ac <SDMMC_GetCmdResp2>
 8005200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005202:	69fb      	ldr	r3, [r7, #28]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800521a:	2309      	movs	r3, #9
 800521c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800521e:	23c0      	movs	r3, #192	; 0xc0
 8005220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fda2 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f937 	bl	80054ac <SDMMC_GetCmdResp2>
 800523e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005240:	69fb      	ldr	r3, [r7, #28]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b088      	sub	sp, #32
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005258:	2303      	movs	r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fd83 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	2103      	movs	r1, #3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f99c 	bl	80055b8 <SDMMC_GetCmdResp6>
 8005280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005282:	69fb      	ldr	r3, [r7, #28]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800529a:	230d      	movs	r3, #13
 800529c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800529e:	2340      	movs	r3, #64	; 0x40
 80052a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fd62 	bl	8004d7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	210d      	movs	r1, #13
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f806 	bl	80052d0 <SDMMC_GetCmdResp1>
 80052c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	460b      	mov	r3, r1
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80052de:	4b70      	ldr	r3, [pc, #448]	; (80054a0 <SDMMC_GetCmdResp1+0x1d0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a70      	ldr	r2, [pc, #448]	; (80054a4 <SDMMC_GetCmdResp1+0x1d4>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	0a5a      	lsrs	r2, r3, #9
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	61fa      	str	r2, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005300:	e0c9      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ef      	beq.n	80052f2 <SDMMC_GetCmdResp1+0x22>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ea      	bne.n	80052f2 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2204      	movs	r2, #4
 800532c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800532e:	2304      	movs	r3, #4
 8005330:	e0b1      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005344:	2301      	movs	r3, #1
 8005346:	e0a6      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	22c5      	movs	r2, #197	; 0xc5
 800534c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff fd3e 	bl	8004dd0 <SDMMC_GetCommandResponse>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	4293      	cmp	r3, r2
 800535c:	d001      	beq.n	8005362 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800535e:	2301      	movs	r3, #1
 8005360:	e099      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005362:	2100      	movs	r1, #0
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fd40 	bl	8004dea <SDMMC_GetResponse>
 800536a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4b4e      	ldr	r3, [pc, #312]	; (80054a8 <SDMMC_GetCmdResp1+0x1d8>)
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005376:	2300      	movs	r3, #0
 8005378:	e08d      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	da02      	bge.n	8005386 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005384:	e087      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005390:	2340      	movs	r3, #64	; 0x40
 8005392:	e080      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	e079      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80053ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b0:	e071      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80053bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c0:	e069      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80053cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d0:	e061      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80053dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053e0:	e059      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80053ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f0:	e051      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005400:	e049      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800540c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005410:	e041      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800541c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005420:	e039      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800542c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005430:	e031      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800543c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005440:	e029      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800544c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005450:	e021      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800545c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005460:	e019      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800546c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005470:	e011      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800547c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005480:	e009      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800548c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005490:	e001      	b.n	8005496 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000000 	.word	0x20000000
 80054a4:	10624dd3 	.word	0x10624dd3
 80054a8:	fdffe008 	.word	0xfdffe008

080054ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054b4:	4b1f      	ldr	r3, [pc, #124]	; (8005534 <SDMMC_GetCmdResp2+0x88>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <SDMMC_GetCmdResp2+0x8c>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0a5b      	lsrs	r3, r3, #9
 80054c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1e5a      	subs	r2, r3, #1
 80054ce:	60fa      	str	r2, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054d8:	e026      	b.n	8005528 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ef      	beq.n	80054ca <SDMMC_GetCmdResp2+0x1e>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1ea      	bne.n	80054ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2204      	movs	r2, #4
 8005504:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005506:	2304      	movs	r3, #4
 8005508:	e00e      	b.n	8005528 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800551c:	2301      	movs	r3, #1
 800551e:	e003      	b.n	8005528 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	22c5      	movs	r2, #197	; 0xc5
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000000 	.word	0x20000000
 8005538:	10624dd3 	.word	0x10624dd3

0800553c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <SDMMC_GetCmdResp3+0x74>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <SDMMC_GetCmdResp3+0x78>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	0a5b      	lsrs	r3, r3, #9
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	fb02 f303 	mul.w	r3, r2, r3
 8005558:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1e5a      	subs	r2, r3, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005568:	e01b      	b.n	80055a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ef      	beq.n	800555a <SDMMC_GetCmdResp3+0x1e>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ea      	bne.n	800555a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2204      	movs	r2, #4
 8005594:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005596:	2304      	movs	r3, #4
 8005598:	e003      	b.n	80055a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	22c5      	movs	r2, #197	; 0xc5
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000000 	.word	0x20000000
 80055b4:	10624dd3 	.word	0x10624dd3

080055b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	460b      	mov	r3, r1
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055c6:	4b35      	ldr	r3, [pc, #212]	; (800569c <SDMMC_GetCmdResp6+0xe4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <SDMMC_GetCmdResp6+0xe8>)
 80055cc:	fba2 2303 	umull	r2, r3, r2, r3
 80055d0:	0a5b      	lsrs	r3, r3, #9
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1e5a      	subs	r2, r3, #1
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055ea:	e052      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ef      	beq.n	80055dc <SDMMC_GetCmdResp6+0x24>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ea      	bne.n	80055dc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2204      	movs	r2, #4
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005618:	2304      	movs	r3, #4
 800561a:	e03a      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800562e:	2301      	movs	r3, #1
 8005630:	e02f      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fbcc 	bl	8004dd0 <SDMMC_GetCommandResponse>
 8005638:	4603      	mov	r3, r0
 800563a:	461a      	mov	r2, r3
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	4293      	cmp	r3, r2
 8005640:	d001      	beq.n	8005646 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005642:	2301      	movs	r3, #1
 8005644:	e025      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22c5      	movs	r2, #197	; 0xc5
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800564c:	2100      	movs	r1, #0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fbcb 	bl	8004dea <SDMMC_GetResponse>
 8005654:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	e011      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800567c:	e009      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800568c:	e001      	b.n	8005692 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800568e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000000 	.word	0x20000000
 80056a0:	10624dd3 	.word	0x10624dd3

080056a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <SDMMC_GetCmdResp7+0x94>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <SDMMC_GetCmdResp7+0x98>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a5b      	lsrs	r3, r3, #9
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1e5a      	subs	r2, r3, #1
 80056c6:	60fa      	str	r2, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d0:	e02c      	b.n	800572c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <SDMMC_GetCmdResp7+0x1e>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1ea      	bne.n	80056c2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2204      	movs	r2, #4
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056fe:	2304      	movs	r3, #4
 8005700:	e014      	b.n	800572c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005714:	2301      	movs	r3, #1
 8005716:	e009      	b.n	800572c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800572a:	2300      	movs	r3, #0

}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3

08005740 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <SDMMC_GetCmdError+0x50>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a11      	ldr	r2, [pc, #68]	; (8005794 <SDMMC_GetCmdError+0x54>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a5b      	lsrs	r3, r3, #9
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800576c:	e009      	b.n	8005782 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f1      	beq.n	800575e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	22c5      	movs	r2, #197	; 0xc5
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000000 	.word	0x20000000
 8005794:	10624dd3 	.word	0x10624dd3

08005798 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800579c:	4904      	ldr	r1, [pc, #16]	; (80057b0 <MX_FATFS_Init+0x18>)
 800579e:	4805      	ldr	r0, [pc, #20]	; (80057b4 <MX_FATFS_Init+0x1c>)
 80057a0:	f003 f928 	bl	80089f4 <FATFS_LinkDriver>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <MX_FATFS_Init+0x20>)
 80057aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000380 	.word	0x20000380
 80057b4:	08008cd4 	.word	0x08008cd4
 80057b8:	2000037c 	.word	0x2000037c

080057bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80057c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80057d6:	f000 f896 	bl	8005906 <BSP_SD_IsDetected>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80057e0:	2302      	movs	r3, #2
 80057e2:	e012      	b.n	800580a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80057e4:	480b      	ldr	r0, [pc, #44]	; (8005814 <BSP_SD_Init+0x48>)
 80057e6:	f7fd ff29 	bl	800363c <HAL_SD_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80057f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057f8:	4806      	ldr	r0, [pc, #24]	; (8005814 <BSP_SD_Init+0x48>)
 80057fa:	f7fe fceb 	bl	80041d4 <HAL_SD_ConfigWideBusOperation>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005808:	79fb      	ldrb	r3, [r7, #7]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000264 	.word	0x20000264

08005818 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	4806      	ldr	r0, [pc, #24]	; (8005848 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005830:	f7fd ffec 	bl	800380c <HAL_SD_ReadBlocks_DMA>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000264 	.word	0x20000264

0800584c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	68f9      	ldr	r1, [r7, #12]
 8005862:	4806      	ldr	r0, [pc, #24]	; (800587c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005864:	f7fe f89a 	bl	800399c <HAL_SD_WriteBlocks_DMA>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000264 	.word	0x20000264

08005880 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005884:	4805      	ldr	r0, [pc, #20]	; (800589c <BSP_SD_GetCardState+0x1c>)
 8005886:	f7fe fd61 	bl	800434c <HAL_SD_GetCardState>
 800588a:	4603      	mov	r3, r0
 800588c:	2b04      	cmp	r3, #4
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
}
 8005896:	4618      	mov	r0, r3
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000264 	.word	0x20000264

080058a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4803      	ldr	r0, [pc, #12]	; (80058b8 <BSP_SD_GetCardInfo+0x18>)
 80058ac:	f7fe fc66 	bl	800417c <HAL_SD_GetCardInfo>
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000264 	.word	0x20000264

080058bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80058c4:	f000 f818 	bl	80058f8 <BSP_SD_AbortCallback>
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80058d8:	f000 f9a6 	bl	8005c28 <BSP_SD_WriteCpltCallback>
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80058ec:	f000 f9a8 	bl	8005c40 <BSP_SD_ReadCpltCallback>
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0

}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800590c:	2301      	movs	r3, #1
 800590e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005910:	f000 f80b 	bl	800592a <BSP_PlatformIsDetected>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800591a:	2300      	movs	r3, #0
 800591c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	b2db      	uxtb	r3, r3
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005930:	2301      	movs	r3, #1
 8005932:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800593c:	f7fb fd00 	bl	8001340 <HAL_GPIO_ReadPin>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8005946:	2300      	movs	r3, #0
 8005948:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800594a:	79fb      	ldrb	r3, [r7, #7]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800595c:	f7fa ffcc 	bl	80008f8 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005962:	e006      	b.n	8005972 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005964:	f7ff ff8c 	bl	8005880 <BSP_SD_GetCardState>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800596e:	2300      	movs	r3, #0
 8005970:	e009      	b.n	8005986 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005972:	f7fa ffc1 	bl	80008f8 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d8f0      	bhi.n	8005964 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <SD_CheckStatus+0x38>)
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80059a0:	f7ff ff6e 	bl	8005880 <BSP_SD_GetCardState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <SD_CheckStatus+0x38>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <SD_CheckStatus+0x38>)
 80059b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80059ba:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <SD_CheckStatus+0x38>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	b2db      	uxtb	r3, r3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000009 	.word	0x20000009

080059cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80059d6:	f7ff fef9 	bl	80057cc <BSP_SD_Init>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff ffd4 	bl	8005990 <SD_CheckStatus>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <SD_initialize+0x34>)
 80059ee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <SD_initialize+0x34>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000009 	.word	0x20000009

08005a04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ffbd 	bl	8005990 <SD_CheckStatus>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005a34:	f247 5030 	movw	r0, #30000	; 0x7530
 8005a38:	f7ff ff8c 	bl	8005954 <SD_CheckStatusWithTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da01      	bge.n	8005a46 <SD_read+0x26>
  {
    return res;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	e03b      	b.n	8005abe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f7ff fee4 	bl	8005818 <BSP_SD_ReadBlocks_DMA>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d132      	bne.n	8005abc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <SD_read+0xa8>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005a5c:	f7fa ff4c 	bl	80008f8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005a62:	bf00      	nop
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <SD_read+0xa8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d108      	bne.n	8005a7e <SD_read+0x5e>
 8005a6c:	f7fa ff44 	bl	80008f8 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f247 522f 	movw	r2, #29999	; 0x752f
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d9f2      	bls.n	8005a64 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <SD_read+0xa8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
 8005a8a:	e017      	b.n	8005abc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <SD_read+0xa8>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005a92:	f7fa ff31 	bl	80008f8 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005a98:	e007      	b.n	8005aaa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005a9a:	f7ff fef1 	bl	8005880 <BSP_SD_GetCardState>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <SD_read+0x8a>
          {
            res = RES_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005aa8:	e008      	b.n	8005abc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005aaa:	f7fa ff25 	bl	80008f8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f247 522f 	movw	r2, #29999	; 0x752f
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d9ee      	bls.n	8005a9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000002c 	.word	0x2000002c

08005acc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4603      	mov	r3, r0
 8005ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005ae0:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <SD_write+0xa8>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005ae6:	f247 5030 	movw	r0, #30000	; 0x7530
 8005aea:	f7ff ff33 	bl	8005954 <SD_CheckStatusWithTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	da01      	bge.n	8005af8 <SD_write+0x2c>
  {
    return res;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	e038      	b.n	8005b6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	68b8      	ldr	r0, [r7, #8]
 8005afe:	f7ff fea5 	bl	800584c <BSP_SD_WriteBlocks_DMA>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d12f      	bne.n	8005b68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005b08:	f7fa fef6 	bl	80008f8 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005b0e:	bf00      	nop
 8005b10:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <SD_write+0xa8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <SD_write+0x5e>
 8005b18:	f7fa feee 	bl	80008f8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d9f2      	bls.n	8005b10 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <SD_write+0xa8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
 8005b36:	e017      	b.n	8005b68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <SD_write+0xa8>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005b3e:	f7fa fedb 	bl	80008f8 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005b44:	e007      	b.n	8005b56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b46:	f7ff fe9b 	bl	8005880 <BSP_SD_GetCardState>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d102      	bne.n	8005b56 <SD_write+0x8a>
          {
            res = RES_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	75fb      	strb	r3, [r7, #23]
            break;
 8005b54:	e008      	b.n	8005b68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005b56:	f7fa fecf 	bl	80008f8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f247 522f 	movw	r2, #29999	; 0x752f
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d9ee      	bls.n	8005b46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000028 	.word	0x20000028

08005b78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08c      	sub	sp, #48	; 0x30
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	603a      	str	r2, [r7, #0]
 8005b82:	71fb      	strb	r3, [r7, #7]
 8005b84:	460b      	mov	r3, r1
 8005b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b8e:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <SD_ioctl+0xac>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <SD_ioctl+0x28>
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e03c      	b.n	8005c1a <SD_ioctl+0xa2>

  switch (cmd)
 8005ba0:	79bb      	ldrb	r3, [r7, #6]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d834      	bhi.n	8005c10 <SD_ioctl+0x98>
 8005ba6:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <SD_ioctl+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bdd 	.word	0x08005bdd
 8005bb8:	08005bf7 	.word	0x08005bf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bc2:	e028      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fe69 	bl	80058a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bda:	e01c      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fe5d 	bl	80058a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bf4:	e00f      	b.n	8005c16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005bf6:	f107 030c 	add.w	r3, r7, #12
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fe50 	bl	80058a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	0a5a      	lsrs	r2, r3, #9
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c0e:	e002      	b.n	8005c16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c10:	2304      	movs	r3, #4
 8005c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3730      	adds	r7, #48	; 0x30
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000009 	.word	0x20000009

08005c28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <BSP_SD_WriteCpltCallback+0x14>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000028 	.word	0x20000028

08005c40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <BSP_SD_ReadCpltCallback+0x14>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	2000002c 	.word	0x2000002c

08005c58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <disk_status+0x30>)
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	79fa      	ldrb	r2, [r7, #7]
 8005c70:	4905      	ldr	r1, [pc, #20]	; (8005c88 <disk_status+0x30>)
 8005c72:	440a      	add	r2, r1
 8005c74:	7a12      	ldrb	r2, [r2, #8]
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000258 	.word	0x20000258

08005c8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <disk_initialize+0x48>)
 8005c9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <disk_initialize+0x48>)
 8005ca8:	2101      	movs	r1, #1
 8005caa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <disk_initialize+0x48>)
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	79fa      	ldrb	r2, [r7, #7]
 8005cba:	4906      	ldr	r1, [pc, #24]	; (8005cd4 <disk_initialize+0x48>)
 8005cbc:	440a      	add	r2, r1
 8005cbe:	7a12      	ldrb	r2, [r2, #8]
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000258 	.word	0x20000258

08005cd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <disk_read+0x3c>)
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	689c      	ldr	r4, [r3, #8]
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <disk_read+0x3c>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	7a18      	ldrb	r0, [r3, #8]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	47a0      	blx	r4
 8005d04:	4603      	mov	r3, r0
 8005d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000258 	.word	0x20000258

08005d18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <disk_write+0x3c>)
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68dc      	ldr	r4, [r3, #12]
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <disk_write+0x3c>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	7a18      	ldrb	r0, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	47a0      	blx	r4
 8005d44:	4603      	mov	r3, r0
 8005d46:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000258 	.word	0x20000258

08005d58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	603a      	str	r2, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	460b      	mov	r3, r1
 8005d66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <disk_ioctl+0x38>)
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	79fa      	ldrb	r2, [r7, #7]
 8005d76:	4906      	ldr	r1, [pc, #24]	; (8005d90 <disk_ioctl+0x38>)
 8005d78:	440a      	add	r2, r1
 8005d7a:	7a10      	ldrb	r0, [r2, #8]
 8005d7c:	79b9      	ldrb	r1, [r7, #6]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4798      	blx	r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000258 	.word	0x20000258

08005d94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	b21a      	sxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b21b      	sxth	r3, r3
 8005db4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005db6:	89fb      	ldrh	r3, [r7, #14]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3303      	adds	r3, #3
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	3202      	adds	r2, #2
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	3201      	adds	r2, #1
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	887a      	ldrh	r2, [r7, #2]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	0a1b      	lsrs	r3, r3, #8
 8005e5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	1c53      	adds	r3, r2, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1c59      	adds	r1, r3, #1
 8005ebc:	6179      	str	r1, [r7, #20]
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f1      	bne.n	8005eb2 <mem_cpy+0x1a>
	}
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	617a      	str	r2, [r7, #20]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f3      	bne.n	8005eea <mem_set+0x10>
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	; 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	61fa      	str	r2, [r7, #28]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4619      	mov	r1, r3
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	61ba      	str	r2, [r7, #24]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	1acb      	subs	r3, r1, r3
 8005f3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <mem_cmp+0x40>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0eb      	beq.n	8005f28 <mem_cmp+0x18>

	return r;
 8005f50:	697b      	ldr	r3, [r7, #20]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3724      	adds	r7, #36	; 0x24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f68:	e002      	b.n	8005f70 <chk_chr+0x12>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <chk_chr+0x26>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d1f2      	bne.n	8005f6a <chk_chr+0xc>
	return *str;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	781b      	ldrb	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	e029      	b.n	8005ffc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <chk_lock+0xb4>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	4413      	add	r3, r2
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01d      	beq.n	8005ff2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <chk_lock+0xb4>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d116      	bne.n	8005ff6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <chk_lock+0xb4>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4413      	add	r3, r2
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d10c      	bne.n	8005ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <chk_lock+0xb4>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d102      	bne.n	8005ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ff0:	e007      	b.n	8006002 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d9d2      	bls.n	8005fa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d109      	bne.n	800601c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <chk_lock+0x80>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d101      	bne.n	8006018 <chk_lock+0x84>
 8006014:	2300      	movs	r3, #0
 8006016:	e010      	b.n	800603a <chk_lock+0xa6>
 8006018:	2312      	movs	r3, #18
 800601a:	e00e      	b.n	800603a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <chk_lock+0xa0>
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <chk_lock+0xb4>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	4413      	add	r3, r2
 800602a:	330c      	adds	r3, #12
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006032:	d101      	bne.n	8006038 <chk_lock+0xa4>
 8006034:	2310      	movs	r3, #16
 8006036:	e000      	b.n	800603a <chk_lock+0xa6>
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000038 	.word	0x20000038

0800604c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	e002      	b.n	800605e <enq_lock+0x12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3301      	adds	r3, #1
 800605c:	607b      	str	r3, [r7, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d806      	bhi.n	8006072 <enq_lock+0x26>
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <enq_lock+0x40>)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4413      	add	r3, r2
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f2      	bne.n	8006058 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b02      	cmp	r3, #2
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000038 	.word	0x20000038

08006090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e01f      	b.n	80060e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060a0:	4a41      	ldr	r2, [pc, #260]	; (80061a8 <inc_lock+0x118>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	4413      	add	r3, r2
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d113      	bne.n	80060da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060b2:	4a3d      	ldr	r2, [pc, #244]	; (80061a8 <inc_lock+0x118>)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	4413      	add	r3, r2
 80060ba:	3304      	adds	r3, #4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d109      	bne.n	80060da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80060c6:	4a38      	ldr	r2, [pc, #224]	; (80061a8 <inc_lock+0x118>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	3308      	adds	r3, #8
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d006      	beq.n	80060e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3301      	adds	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d9dc      	bls.n	80060a0 <inc_lock+0x10>
 80060e6:	e000      	b.n	80060ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80060e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d132      	bne.n	8006156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e002      	b.n	80060fc <inc_lock+0x6c>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d806      	bhi.n	8006110 <inc_lock+0x80>
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <inc_lock+0x118>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	4413      	add	r3, r2
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f2      	bne.n	80060f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d101      	bne.n	800611a <inc_lock+0x8a>
 8006116:	2300      	movs	r3, #0
 8006118:	e040      	b.n	800619c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4922      	ldr	r1, [pc, #136]	; (80061a8 <inc_lock+0x118>)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	440b      	add	r3, r1
 8006126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	491e      	ldr	r1, [pc, #120]	; (80061a8 <inc_lock+0x118>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	440b      	add	r3, r1
 8006134:	3304      	adds	r3, #4
 8006136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	491a      	ldr	r1, [pc, #104]	; (80061a8 <inc_lock+0x118>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	440b      	add	r3, r1
 8006144:	3308      	adds	r3, #8
 8006146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <inc_lock+0x118>)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	4413      	add	r3, r2
 8006150:	330c      	adds	r3, #12
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d009      	beq.n	8006170 <inc_lock+0xe0>
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <inc_lock+0x118>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	4413      	add	r3, r2
 8006164:	330c      	adds	r3, #12
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <inc_lock+0xe0>
 800616c:	2300      	movs	r3, #0
 800616e:	e015      	b.n	800619c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <inc_lock+0xf8>
 8006176:	4a0c      	ldr	r2, [pc, #48]	; (80061a8 <inc_lock+0x118>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	4413      	add	r3, r2
 800617e:	330c      	adds	r3, #12
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	e001      	b.n	800618c <inc_lock+0xfc>
 8006188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800618c:	4906      	ldr	r1, [pc, #24]	; (80061a8 <inc_lock+0x118>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	440b      	add	r3, r1
 8006194:	330c      	adds	r3, #12
 8006196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000038 	.word	0x20000038

080061ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d825      	bhi.n	800620c <dec_lock+0x60>
		n = Files[i].ctr;
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <dec_lock+0x74>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	330c      	adds	r3, #12
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061ce:	89fb      	ldrh	r3, [r7, #14]
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	d101      	bne.n	80061da <dec_lock+0x2e>
 80061d6:	2300      	movs	r3, #0
 80061d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061da:	89fb      	ldrh	r3, [r7, #14]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <dec_lock+0x3a>
 80061e0:	89fb      	ldrh	r3, [r7, #14]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061e6:	4a0e      	ldr	r2, [pc, #56]	; (8006220 <dec_lock+0x74>)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	4413      	add	r3, r2
 80061ee:	330c      	adds	r3, #12
 80061f0:	89fa      	ldrh	r2, [r7, #14]
 80061f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061f4:	89fb      	ldrh	r3, [r7, #14]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <dec_lock+0x5a>
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <dec_lock+0x74>)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	4413      	add	r3, r2
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	737b      	strb	r3, [r7, #13]
 800620a:	e001      	b.n	8006210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800620c:	2302      	movs	r3, #2
 800620e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006210:	7b7b      	ldrb	r3, [r7, #13]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000038 	.word	0x20000038

08006224 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e010      	b.n	8006254 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006232:	4a0d      	ldr	r2, [pc, #52]	; (8006268 <clear_lock+0x44>)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	4413      	add	r3, r2
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	429a      	cmp	r2, r3
 8006240:	d105      	bne.n	800624e <clear_lock+0x2a>
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <clear_lock+0x44>)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d9eb      	bls.n	8006232 <clear_lock+0xe>
	}
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000038 	.word	0x20000038

0800626c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d034      	beq.n	80062ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	7858      	ldrb	r0, [r3, #1]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006290:	2301      	movs	r3, #1
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	f7ff fd40 	bl	8005d18 <disk_write>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e022      	b.n	80062ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d217      	bcs.n	80062ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	789b      	ldrb	r3, [r3, #2]
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e010      	b.n	80062e4 <sync_window+0x78>
					wsect += fs->fsize;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7858      	ldrb	r0, [r3, #1]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062d6:	2301      	movs	r3, #1
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	f7ff fd1d 	bl	8005d18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d8eb      	bhi.n	80062c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d01b      	beq.n	8006344 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffad 	bl	800626c <sync_window>
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d113      	bne.n	8006344 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7858      	ldrb	r0, [r3, #1]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006326:	2301      	movs	r3, #1
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	f7ff fcd5 	bl	8005cd8 <disk_read>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006338:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff87 	bl	800626c <sync_window>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d158      	bne.n	800641a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d148      	bne.n	8006402 <sync_fs+0xb2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	791b      	ldrb	r3, [r3, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d144      	bne.n	8006402 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3334      	adds	r3, #52	; 0x34
 800637c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fda9 	bl	8005eda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3334      	adds	r3, #52	; 0x34
 800638c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006390:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fd38 	bl	8005e0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3334      	adds	r3, #52	; 0x34
 800639e:	4921      	ldr	r1, [pc, #132]	; (8006424 <sync_fs+0xd4>)
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fd4d 	bl	8005e40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3334      	adds	r3, #52	; 0x34
 80063aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063ae:	491e      	ldr	r1, [pc, #120]	; (8006428 <sync_fs+0xd8>)
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fd45 	bl	8005e40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3334      	adds	r3, #52	; 0x34
 80063ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7ff fd3b 	bl	8005e40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3334      	adds	r3, #52	; 0x34
 80063ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7ff fd31 	bl	8005e40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	7858      	ldrb	r0, [r3, #1]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f6:	2301      	movs	r3, #1
 80063f8:	f7ff fc8e 	bl	8005d18 <disk_write>
			fs->fsi_flag = 0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2200      	movs	r2, #0
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fca4 	bl	8005d58 <disk_ioctl>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <sync_fs+0xca>
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800641a:	7bfb      	ldrb	r3, [r7, #15]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	41615252 	.word	0x41615252
 8006428:	61417272 	.word	0x61417272

0800642c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	3b02      	subs	r3, #2
 800643a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	3b02      	subs	r3, #2
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d301      	bcc.n	800644c <clust2sect+0x20>
 8006448:	2300      	movs	r3, #0
 800644a:	e008      	b.n	800645e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	895b      	ldrh	r3, [r3, #10]
 8006450:	461a      	mov	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	fb03 f202 	mul.w	r2, r3, r2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4413      	add	r3, r2
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d904      	bls.n	800648a <get_fat+0x20>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <get_fat+0x26>
		val = 1;	/* Internal error */
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e08f      	b.n	80065b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006494:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d062      	beq.n	8006564 <get_fat+0xfa>
 800649e:	2b03      	cmp	r3, #3
 80064a0:	dc7c      	bgt.n	800659c <get_fat+0x132>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d002      	beq.n	80064ac <get_fat+0x42>
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d042      	beq.n	8006530 <get_fat+0xc6>
 80064aa:	e077      	b.n	800659c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0a5b      	lsrs	r3, r3, #9
 80064c2:	4413      	add	r3, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	6938      	ldr	r0, [r7, #16]
 80064c8:	f7ff ff14 	bl	80062f4 <move_window>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d167      	bne.n	80065a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	60fa      	str	r2, [r7, #12]
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	0a5b      	lsrs	r3, r3, #9
 80064ee:	4413      	add	r3, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	f7ff fefe 	bl	80062f4 <move_window>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d153      	bne.n	80065a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <get_fat+0xbc>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	e002      	b.n	800652c <get_fat+0xc2>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652c:	617b      	str	r3, [r7, #20]
			break;
 800652e:	e03f      	b.n	80065b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	4413      	add	r3, r2
 800653a:	4619      	mov	r1, r3
 800653c:	6938      	ldr	r0, [r7, #16]
 800653e:	f7ff fed9 	bl	80062f4 <move_window>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d130      	bne.n	80065aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006556:	4413      	add	r3, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fc1b 	bl	8005d94 <ld_word>
 800655e:	4603      	mov	r3, r0
 8006560:	617b      	str	r3, [r7, #20]
			break;
 8006562:	e025      	b.n	80065b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	09db      	lsrs	r3, r3, #7
 800656c:	4413      	add	r3, r2
 800656e:	4619      	mov	r1, r3
 8006570:	6938      	ldr	r0, [r7, #16]
 8006572:	f7ff febf 	bl	80062f4 <move_window>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d118      	bne.n	80065ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800658a:	4413      	add	r3, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fc19 	bl	8005dc4 <ld_dword>
 8006592:	4603      	mov	r3, r0
 8006594:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006598:	617b      	str	r3, [r7, #20]
			break;
 800659a:	e009      	b.n	80065b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e006      	b.n	80065b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065a2:	bf00      	nop
 80065a4:	e004      	b.n	80065b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065ae:	bf00      	nop
		}
	}

	return val;
 80065b0:	697b      	ldr	r3, [r7, #20]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065ba:	b590      	push	{r4, r7, lr}
 80065bc:	b089      	sub	sp, #36	; 0x24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065c6:	2302      	movs	r3, #2
 80065c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	f240 80d2 	bls.w	8006776 <put_fat+0x1bc>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	f080 80cc 	bcs.w	8006776 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	f000 8096 	beq.w	8006714 <put_fat+0x15a>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	f300 80cd 	bgt.w	8006788 <put_fat+0x1ce>
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d002      	beq.n	80065f8 <put_fat+0x3e>
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d06e      	beq.n	80066d4 <put_fat+0x11a>
 80065f6:	e0c7      	b.n	8006788 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4413      	add	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	0a5b      	lsrs	r3, r3, #9
 800660e:	4413      	add	r3, r2
 8006610:	4619      	mov	r1, r3
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff fe6e 	bl	80062f4 <move_window>
 8006618:	4603      	mov	r3, r0
 800661a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800661c:	7ffb      	ldrb	r3, [r7, #31]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 80ab 	bne.w	800677a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	61b9      	str	r1, [r7, #24]
 8006630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006634:	4413      	add	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <put_fat+0xa4>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b25b      	sxtb	r3, r3
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	b25a      	sxtb	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	b25b      	sxtb	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b25b      	sxtb	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	e001      	b.n	8006662 <put_fat+0xa8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	0a5b      	lsrs	r3, r3, #9
 8006674:	4413      	add	r3, r2
 8006676:	4619      	mov	r1, r3
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff fe3b 	bl	80062f4 <move_window>
 800667e:	4603      	mov	r3, r0
 8006680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d17a      	bne.n	800677e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006694:	4413      	add	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <put_fat+0xf0>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	e00e      	b.n	80066c8 <put_fat+0x10e>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	b25b      	sxtb	r3, r3
 80066b0:	f023 030f 	bic.w	r3, r3, #15
 80066b4:	b25a      	sxtb	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0a1b      	lsrs	r3, r3, #8
 80066ba:	b25b      	sxtb	r3, r3
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2201      	movs	r2, #1
 80066d0:	70da      	strb	r2, [r3, #3]
			break;
 80066d2:	e059      	b.n	8006788 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	4413      	add	r3, r2
 80066de:	4619      	mov	r1, r3
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff fe07 	bl	80062f4 <move_window>
 80066e6:	4603      	mov	r3, r0
 80066e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d148      	bne.n	8006782 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066fe:	4413      	add	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	b292      	uxth	r2, r2
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fb7f 	bl	8005e0a <st_word>
			fs->wflag = 1;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	70da      	strb	r2, [r3, #3]
			break;
 8006712:	e039      	b.n	8006788 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	09db      	lsrs	r3, r3, #7
 800671c:	4413      	add	r3, r2
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fde7 	bl	80062f4 <move_window>
 8006726:	4603      	mov	r3, r0
 8006728:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800672a:	7ffb      	ldrb	r3, [r7, #31]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d12a      	bne.n	8006786 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006744:	4413      	add	r3, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fb3c 	bl	8005dc4 <ld_dword>
 800674c:	4603      	mov	r3, r0
 800674e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006752:	4323      	orrs	r3, r4
 8006754:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006764:	4413      	add	r3, r2
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fb69 	bl	8005e40 <st_dword>
			fs->wflag = 1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	70da      	strb	r2, [r3, #3]
			break;
 8006774:	e008      	b.n	8006788 <put_fat+0x1ce>
		}
	}
 8006776:	bf00      	nop
 8006778:	e006      	b.n	8006788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800677a:	bf00      	nop
 800677c:	e004      	b.n	8006788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800677e:	bf00      	nop
 8006780:	e002      	b.n	8006788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006786:	bf00      	nop
	return res;
 8006788:	7ffb      	ldrb	r3, [r7, #31]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}

08006792 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b088      	sub	sp, #32
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d904      	bls.n	80067b8 <remove_chain+0x26>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d301      	bcc.n	80067bc <remove_chain+0x2a>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e04b      	b.n	8006854 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	69b8      	ldr	r0, [r7, #24]
 80067ca:	f7ff fef6 	bl	80065ba <put_fat>
 80067ce:	4603      	mov	r3, r0
 80067d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067d2:	7ffb      	ldrb	r3, [r7, #31]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <remove_chain+0x4a>
 80067d8:	7ffb      	ldrb	r3, [r7, #31]
 80067da:	e03b      	b.n	8006854 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fe43 	bl	800646a <get_fat>
 80067e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d031      	beq.n	8006850 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <remove_chain+0x64>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e02e      	b.n	8006854 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fc:	d101      	bne.n	8006802 <remove_chain+0x70>
 80067fe:	2301      	movs	r3, #1
 8006800:	e028      	b.n	8006854 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006802:	2200      	movs	r2, #0
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	69b8      	ldr	r0, [r7, #24]
 8006808:	f7ff fed7 	bl	80065ba <put_fat>
 800680c:	4603      	mov	r3, r0
 800680e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006810:	7ffb      	ldrb	r3, [r7, #31]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <remove_chain+0x88>
 8006816:	7ffb      	ldrb	r3, [r7, #31]
 8006818:	e01c      	b.n	8006854 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	3b02      	subs	r3, #2
 8006824:	429a      	cmp	r2, r3
 8006826:	d20b      	bcs.n	8006840 <remove_chain+0xae>
			fs->free_clst++;
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3c6      	bcc.n	80067dc <remove_chain+0x4a>
 800684e:	e000      	b.n	8006852 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006850:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <create_chain+0x2c>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	429a      	cmp	r2, r3
 8006886:	d31b      	bcc.n	80068c0 <create_chain+0x64>
 8006888:	2301      	movs	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	e018      	b.n	80068c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fdea 	bl	800646a <get_fat>
 8006896:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d801      	bhi.n	80068a2 <create_chain+0x46>
 800689e:	2301      	movs	r3, #1
 80068a0:	e070      	b.n	8006984 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a8:	d101      	bne.n	80068ae <create_chain+0x52>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	e06a      	b.n	8006984 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d201      	bcs.n	80068bc <create_chain+0x60>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	e063      	b.n	8006984 <create_chain+0x128>
		scl = clst;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d307      	bcc.n	80068e4 <create_chain+0x88>
				ncl = 2;
 80068d4:	2302      	movs	r3, #2
 80068d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d901      	bls.n	80068e4 <create_chain+0x88>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e04f      	b.n	8006984 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fdbf 	bl	800646a <get_fat>
 80068ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d003      	beq.n	8006902 <create_chain+0xa6>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006900:	d101      	bne.n	8006906 <create_chain+0xaa>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	e03e      	b.n	8006984 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	429a      	cmp	r2, r3
 800690c:	d1da      	bne.n	80068c4 <create_chain+0x68>
 800690e:	2300      	movs	r3, #0
 8006910:	e038      	b.n	8006984 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006912:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006918:	69f9      	ldr	r1, [r7, #28]
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f7ff fe4d 	bl	80065ba <put_fat>
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <create_chain+0xe2>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6938      	ldr	r0, [r7, #16]
 8006936:	f7ff fe40 	bl	80065ba <put_fat>
 800693a:	4603      	mov	r3, r0
 800693c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d116      	bne.n	8006972 <create_chain+0x116>
		fs->last_clst = ncl;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	3b02      	subs	r3, #2
 8006954:	429a      	cmp	r2, r3
 8006956:	d804      	bhi.n	8006962 <create_chain+0x106>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	1e5a      	subs	r2, r3, #1
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	711a      	strb	r2, [r3, #4]
 8006970:	e007      	b.n	8006982 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d102      	bne.n	800697e <create_chain+0x122>
 8006978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800697c:	e000      	b.n	8006980 <create_chain+0x124>
 800697e:	2301      	movs	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006982:	69fb      	ldr	r3, [r7, #28]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	3304      	adds	r3, #4
 80069a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	0a5b      	lsrs	r3, r3, #9
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	8952      	ldrh	r2, [r2, #10]
 80069ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	613a      	str	r2, [r7, #16]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <clmt_clust+0x3a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	e010      	b.n	80069e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d307      	bcc.n	80069de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3304      	adds	r3, #4
 80069da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069dc:	e7e9      	b.n	80069b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80069de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	4413      	add	r3, r2
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a0a:	d204      	bcs.n	8006a16 <dir_sdi+0x22>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a16:	2302      	movs	r3, #2
 8006a18:	e063      	b.n	8006ae2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <dir_sdi+0x46>
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d902      	bls.n	8006a3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	8912      	ldrh	r2, [r2, #8]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d301      	bcc.n	8006a50 <dir_sdi+0x5c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e048      	b.n	8006ae2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	61da      	str	r2, [r3, #28]
 8006a58:	e029      	b.n	8006aae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	895b      	ldrh	r3, [r3, #10]
 8006a5e:	025b      	lsls	r3, r3, #9
 8006a60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a62:	e019      	b.n	8006a98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6979      	ldr	r1, [r7, #20]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff fcfe 	bl	800646a <get_fat>
 8006a6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a76:	d101      	bne.n	8006a7c <dir_sdi+0x88>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e032      	b.n	8006ae2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d904      	bls.n	8006a8c <dir_sdi+0x98>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d301      	bcc.n	8006a90 <dir_sdi+0x9c>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e028      	b.n	8006ae2 <dir_sdi+0xee>
			ofs -= csz;
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d2e1      	bcs.n	8006a64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	6938      	ldr	r0, [r7, #16]
 8006aa4:	f7ff fcc2 	bl	800642c <clust2sect>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <dir_sdi+0xcc>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e010      	b.n	8006ae2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	0a5b      	lsrs	r3, r3, #9
 8006ac8:	441a      	add	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	441a      	add	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	3320      	adds	r3, #32
 8006b00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <dir_next+0x28>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b10:	d301      	bcc.n	8006b16 <dir_next+0x2c>
 8006b12:	2304      	movs	r3, #4
 8006b14:	e0aa      	b.n	8006c6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8098 	bne.w	8006c52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	8912      	ldrh	r2, [r2, #8]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	f0c0 8088 	bcc.w	8006c52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	61da      	str	r2, [r3, #28]
 8006b48:	2304      	movs	r3, #4
 8006b4a:	e08f      	b.n	8006c6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	0a5b      	lsrs	r3, r3, #9
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	8952      	ldrh	r2, [r2, #10]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d17a      	bne.n	8006c52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7ff fc80 	bl	800646a <get_fat>
 8006b6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d801      	bhi.n	8006b76 <dir_next+0x8c>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e07a      	b.n	8006c6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7c:	d101      	bne.n	8006b82 <dir_next+0x98>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e074      	b.n	8006c6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d358      	bcc.n	8006c3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	61da      	str	r2, [r3, #28]
 8006b98:	2304      	movs	r3, #4
 8006b9a:	e067      	b.n	8006c6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f7ff fe59 	bl	800685c <create_chain>
 8006baa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <dir_next+0xcc>
 8006bb2:	2307      	movs	r3, #7
 8006bb4:	e05a      	b.n	8006c6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <dir_next+0xd6>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e055      	b.n	8006c6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc6:	d101      	bne.n	8006bcc <dir_next+0xe2>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e04f      	b.n	8006c6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fb4d 	bl	800626c <sync_window>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <dir_next+0xf2>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e047      	b.n	8006c6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3334      	adds	r3, #52	; 0x34
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff f977 	bl	8005eda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	6979      	ldr	r1, [r7, #20]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fc1a 	bl	800642c <clust2sect>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8006bfe:	e012      	b.n	8006c26 <dir_next+0x13c>
						fs->wflag = 1;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fb30 	bl	800626c <sync_window>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <dir_next+0x12c>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e02a      	b.n	8006c6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	895b      	ldrh	r3, [r3, #10]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d3e6      	bcc.n	8006c00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad2      	subs	r2, r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fbf0 	bl	800642c <clust2sect>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c84:	2100      	movs	r1, #0
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff feb4 	bl	80069f4 <dir_sdi>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d12b      	bne.n	8006cee <dir_alloc+0x7a>
		n = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fb27 	bl	80062f4 <move_window>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11d      	bne.n	8006cec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2be5      	cmp	r3, #229	; 0xe5
 8006cb8:	d004      	beq.n	8006cc4 <dir_alloc+0x50>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d107      	bne.n	8006cd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d102      	bne.n	8006cd8 <dir_alloc+0x64>
 8006cd2:	e00c      	b.n	8006cee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006cd8:	2101      	movs	r1, #1
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff ff05 	bl	8006aea <dir_next>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0d7      	beq.n	8006c9a <dir_alloc+0x26>
 8006cea:	e000      	b.n	8006cee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006cec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d101      	bne.n	8006cf8 <dir_alloc+0x84>
 8006cf4:	2307      	movs	r3, #7
 8006cf6:	75fb      	strb	r3, [r7, #23]
	return res;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	331a      	adds	r3, #26
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f83f 	bl	8005d94 <ld_word>
 8006d16:	4603      	mov	r3, r0
 8006d18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d109      	bne.n	8006d36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	3314      	adds	r3, #20
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff f834 	bl	8005d94 <ld_word>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	041b      	lsls	r3, r3, #16
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d36:	68fb      	ldr	r3, [r7, #12]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	331a      	adds	r3, #26
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	b292      	uxth	r2, r2
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff f857 	bl	8005e0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d109      	bne.n	8006d78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f103 0214 	add.w	r2, r3, #20
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f7ff f849 	bl	8005e0a <st_word>
	}
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	331a      	adds	r3, #26
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff f800 	bl	8005d94 <ld_word>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <cmp_lfn+0x1e>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e059      	b.n	8006e52 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006db4:	2301      	movs	r3, #1
 8006db6:	81fb      	strh	r3, [r7, #14]
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	e033      	b.n	8006e26 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006dbe:	4a27      	ldr	r2, [pc, #156]	; (8006e5c <cmp_lfn+0xdc>)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe ffe1 	bl	8005d94 <ld_word>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006dd6:	89fb      	ldrh	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01a      	beq.n	8006e12 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2bfe      	cmp	r3, #254	; 0xfe
 8006de0:	d812      	bhi.n	8006e08 <cmp_lfn+0x88>
 8006de2:	89bb      	ldrh	r3, [r7, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 fe51 	bl	8008a8c <ff_wtoupper>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461c      	mov	r4, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	617a      	str	r2, [r7, #20]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fe45 	bl	8008a8c <ff_wtoupper>
 8006e02:	4603      	mov	r3, r0
 8006e04:	429c      	cmp	r4, r3
 8006e06:	d001      	beq.n	8006e0c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e022      	b.n	8006e52 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006e0c:	89bb      	ldrh	r3, [r7, #12]
 8006e0e:	81fb      	strh	r3, [r7, #14]
 8006e10:	e006      	b.n	8006e20 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e12:	89bb      	ldrh	r3, [r7, #12]
 8006e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d001      	beq.n	8006e20 <cmp_lfn+0xa0>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e018      	b.n	8006e52 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3301      	adds	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d9c8      	bls.n	8006dbe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <cmp_lfn+0xd0>
 8006e38:	89fb      	ldrh	r3, [r7, #14]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <cmp_lfn+0xd0>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <cmp_lfn+0xd0>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e000      	b.n	8006e52 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e50:	2301      	movs	r3, #1
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd90      	pop	{r4, r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08008d68 	.word	0x08008d68

08006e60 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	460b      	mov	r3, r1
 8006e70:	71fb      	strb	r3, [r7, #7]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	330d      	adds	r3, #13
 8006e7a:	79ba      	ldrb	r2, [r7, #6]
 8006e7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	330b      	adds	r3, #11
 8006e82:	220f      	movs	r2, #15
 8006e84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	331a      	adds	r3, #26
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe ffb8 	bl	8005e0a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	1e5a      	subs	r2, r3, #1
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	82fb      	strh	r3, [r7, #22]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d007      	beq.n	8006ecc <put_lfn+0x6c>
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	61fa      	str	r2, [r7, #28]
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006ecc:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <put_lfn+0xcc>)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	8afa      	ldrh	r2, [r7, #22]
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe ff93 	bl	8005e0a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ee4:	8afb      	ldrh	r3, [r7, #22]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d102      	bne.n	8006ef0 <put_lfn+0x90>
 8006eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d9da      	bls.n	8006eb2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006efc:	8afb      	ldrh	r3, [r7, #22]
 8006efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d006      	beq.n	8006f14 <put_lfn+0xb4>
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <put_lfn+0xbc>
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	79fa      	ldrb	r2, [r7, #7]
 8006f20:	701a      	strb	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08008d68 	.word	0x08008d68

08006f30 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08c      	sub	sp, #48	; 0x30
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006f3e:	220b      	movs	r2, #11
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7fe ffa8 	bl	8005e98 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d92b      	bls.n	8006fa6 <gen_numname+0x76>
		sr = seq;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f52:	e022      	b.n	8006f9a <gen_numname+0x6a>
			wc = *lfn++;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1c9a      	adds	r2, r3, #2
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	e017      	b.n	8006f94 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	005a      	lsls	r2, r3, #1
 8006f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	4413      	add	r3, r2
 8006f70:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <gen_numname+0x5e>
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f88:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f8c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	3301      	adds	r3, #1
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d9e4      	bls.n	8006f64 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1d8      	bne.n	8006f54 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	3330      	adds	r3, #48	; 0x30
 8006fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fbe:	2b39      	cmp	r3, #57	; 0x39
 8006fc0:	d904      	bls.n	8006fcc <gen_numname+0x9c>
 8006fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fc6:	3307      	adds	r3, #7
 8006fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006fdc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	091b      	lsrs	r3, r3, #4
 8006fe4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1de      	bne.n	8006faa <gen_numname+0x7a>
	ns[i] = '~';
 8006fec:	f107 0214 	add.w	r2, r7, #20
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	4413      	add	r3, r2
 8006ff4:	227e      	movs	r2, #126	; 0x7e
 8006ff6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8006ffc:	e002      	b.n	8007004 <gen_numname+0xd4>
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	3301      	adds	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
 8007004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	429a      	cmp	r2, r3
 800700a:	d205      	bcs.n	8007018 <gen_numname+0xe8>
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	4413      	add	r3, r2
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b20      	cmp	r3, #32
 8007016:	d1f2      	bne.n	8006ffe <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	2b07      	cmp	r3, #7
 800701c:	d808      	bhi.n	8007030 <gen_numname+0x100>
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	62ba      	str	r2, [r7, #40]	; 0x28
 8007024:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007028:	4413      	add	r3, r2
 800702a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800702e:	e000      	b.n	8007032 <gen_numname+0x102>
 8007030:	2120      	movs	r1, #32
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	627a      	str	r2, [r7, #36]	; 0x24
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	460a      	mov	r2, r1
 800703e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	2b07      	cmp	r3, #7
 8007044:	d9e8      	bls.n	8007018 <gen_numname+0xe8>
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3730      	adds	r7, #48	; 0x30
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800705c:	230b      	movs	r3, #11
 800705e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	0852      	lsrs	r2, r2, #1
 8007066:	01db      	lsls	r3, r3, #7
 8007068:	4313      	orrs	r3, r2
 800706a:	b2da      	uxtb	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1c59      	adds	r1, r3, #1
 8007070:	6079      	str	r1, [r7, #4]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	4413      	add	r3, r2
 8007076:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3b01      	subs	r3, #1
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ed      	bne.n	8007060 <sum_sfn+0x10>
	return sum;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b086      	sub	sp, #24
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff fca6 	bl	80069f4 <dir_sdi>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <dir_find+0x24>
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	e0a9      	b.n	800720a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80070b6:	23ff      	movs	r3, #255	; 0xff
 80070b8:	753b      	strb	r3, [r7, #20]
 80070ba:	7d3b      	ldrb	r3, [r7, #20]
 80070bc:	757b      	strb	r3, [r7, #21]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6938      	ldr	r0, [r7, #16]
 80070ce:	f7ff f911 	bl	80062f4 <move_window>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 8090 	bne.w	80071fe <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80070e6:	7dbb      	ldrb	r3, [r7, #22]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <dir_find+0x60>
 80070ec:	2304      	movs	r3, #4
 80070ee:	75fb      	strb	r3, [r7, #23]
 80070f0:	e08a      	b.n	8007208 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	330b      	adds	r3, #11
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	7bfa      	ldrb	r2, [r7, #15]
 8007104:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007106:	7dbb      	ldrb	r3, [r7, #22]
 8007108:	2be5      	cmp	r3, #229	; 0xe5
 800710a:	d007      	beq.n	800711c <dir_find+0x8a>
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <dir_find+0x98>
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d006      	beq.n	800712a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800711c:	23ff      	movs	r3, #255	; 0xff
 800711e:	757b      	strb	r3, [r7, #21]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
 8007128:	e05e      	b.n	80071e8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b0f      	cmp	r3, #15
 800712e:	d136      	bne.n	800719e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d154      	bne.n	80071e8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800713e:	7dbb      	ldrb	r3, [r7, #22]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00d      	beq.n	8007164 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	7b5b      	ldrb	r3, [r3, #13]
 800714e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007150:	7dbb      	ldrb	r3, [r7, #22]
 8007152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007156:	75bb      	strb	r3, [r7, #22]
 8007158:	7dbb      	ldrb	r3, [r7, #22]
 800715a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007164:	7dba      	ldrb	r2, [r7, #22]
 8007166:	7d7b      	ldrb	r3, [r7, #21]
 8007168:	429a      	cmp	r2, r3
 800716a:	d115      	bne.n	8007198 <dir_find+0x106>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	330d      	adds	r3, #13
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	7d3a      	ldrb	r2, [r7, #20]
 8007176:	429a      	cmp	r2, r3
 8007178:	d10e      	bne.n	8007198 <dir_find+0x106>
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7ff fdfb 	bl	8006d80 <cmp_lfn>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <dir_find+0x106>
 8007190:	7d7b      	ldrb	r3, [r7, #21]
 8007192:	3b01      	subs	r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e000      	b.n	800719a <dir_find+0x108>
 8007198:	23ff      	movs	r3, #255	; 0xff
 800719a:	757b      	strb	r3, [r7, #21]
 800719c:	e024      	b.n	80071e8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800719e:	7d7b      	ldrb	r3, [r7, #21]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <dir_find+0x126>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ff51 	bl	8007050 <sum_sfn>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	7d3b      	ldrb	r3, [r7, #20]
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d024      	beq.n	8007202 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <dir_find+0x14a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a18      	ldr	r0, [r3, #32]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	220b      	movs	r2, #11
 80071d0:	4619      	mov	r1, r3
 80071d2:	f7fe fe9d 	bl	8005f10 <mem_cmp>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d014      	beq.n	8007206 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071dc:	23ff      	movs	r3, #255	; 0xff
 80071de:	757b      	strb	r3, [r7, #21]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80071e8:	2100      	movs	r1, #0
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fc7d 	bl	8006aea <dir_next>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f43f af65 	beq.w	80070c6 <dir_find+0x34>
 80071fc:	e004      	b.n	8007208 <dir_find+0x176>
		if (res != FR_OK) break;
 80071fe:	bf00      	nop
 8007200:	e002      	b.n	8007208 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007202:	bf00      	nop
 8007204:	e000      	b.n	8007208 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007206:	bf00      	nop

	return res;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08c      	sub	sp, #48	; 0x30
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007228:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <dir_register+0x20>
 8007230:	2306      	movs	r3, #6
 8007232:	e0e0      	b.n	80073f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007234:	2300      	movs	r3, #0
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	e002      	b.n	8007240 <dir_register+0x2c>
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	3301      	adds	r3, #1
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f4      	bne.n	800723a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	220c      	movs	r2, #12
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fe1b 	bl	8005e98 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d032      	beq.n	80072d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2240      	movs	r2, #64	; 0x40
 8007270:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007274:	2301      	movs	r3, #1
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
 8007278:	e016      	b.n	80072a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	f107 010c 	add.w	r1, r7, #12
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	f7ff fe51 	bl	8006f30 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff feff 	bl	8007092 <dir_find>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800729a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	3301      	adds	r3, #1
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	2b63      	cmp	r3, #99	; 0x63
 80072ac:	d9e5      	bls.n	800727a <dir_register+0x66>
 80072ae:	e000      	b.n	80072b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80072b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	2b64      	cmp	r3, #100	; 0x64
 80072b6:	d101      	bne.n	80072bc <dir_register+0xa8>
 80072b8:	2307      	movs	r3, #7
 80072ba:	e09c      	b.n	80073f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80072bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d002      	beq.n	80072ca <dir_register+0xb6>
 80072c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072c8:	e095      	b.n	80073f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80072ca:	7dfa      	ldrb	r2, [r7, #23]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <dir_register+0xd8>
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	330c      	adds	r3, #12
 80072e0:	4a47      	ldr	r2, [pc, #284]	; (8007400 <dir_register+0x1ec>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	089b      	lsrs	r3, r3, #2
 80072e8:	3301      	adds	r3, #1
 80072ea:	e000      	b.n	80072ee <dir_register+0xda>
 80072ec:	2301      	movs	r3, #1
 80072ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80072f0:	6a39      	ldr	r1, [r7, #32]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff fcbe 	bl	8006c74 <dir_alloc>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80072fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007302:	2b00      	cmp	r3, #0
 8007304:	d148      	bne.n	8007398 <dir_register+0x184>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	3b01      	subs	r3, #1
 800730a:	623b      	str	r3, [r7, #32]
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d042      	beq.n	8007398 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	015b      	lsls	r3, r3, #5
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fb68 	bl	80069f4 <dir_sdi>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800732a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800732e:	2b00      	cmp	r3, #0
 8007330:	d132      	bne.n	8007398 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff fe8a 	bl	8007050 <sum_sfn>
 800733c:	4603      	mov	r3, r0
 800733e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	4619      	mov	r1, r3
 8007346:	69f8      	ldr	r0, [r7, #28]
 8007348:	f7fe ffd4 	bl	80062f4 <move_window>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11d      	bne.n	8007396 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	68d8      	ldr	r0, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a19      	ldr	r1, [r3, #32]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	7efb      	ldrb	r3, [r7, #27]
 8007368:	f7ff fd7a 	bl	8006e60 <put_lfn>
				fs->wflag = 1;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2201      	movs	r2, #1
 8007370:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fbb8 	bl	8006aea <dir_next>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007384:	2b00      	cmp	r3, #0
 8007386:	d107      	bne.n	8007398 <dir_register+0x184>
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	3b01      	subs	r3, #1
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1d5      	bne.n	8007340 <dir_register+0x12c>
 8007394:	e000      	b.n	8007398 <dir_register+0x184>
				if (res != FR_OK) break;
 8007396:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739c:	2b00      	cmp	r3, #0
 800739e:	d128      	bne.n	80073f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4619      	mov	r1, r3
 80073a6:	69f8      	ldr	r0, [r7, #28]
 80073a8:	f7fe ffa4 	bl	80062f4 <move_window>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80073b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d11b      	bne.n	80073f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	2220      	movs	r2, #32
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fd89 	bl	8005eda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a18      	ldr	r0, [r3, #32]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	220b      	movs	r2, #11
 80073d2:	4619      	mov	r1, r3
 80073d4:	f7fe fd60 	bl	8005e98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	330c      	adds	r3, #12
 80073e4:	f002 0218 	and.w	r2, r2, #24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2201      	movs	r2, #1
 80073f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80073f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3730      	adds	r7, #48	; 0x30
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	4ec4ec4f 	.word	0x4ec4ec4f

08007404 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	61ba      	str	r2, [r7, #24]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007434:	2b1f      	cmp	r3, #31
 8007436:	d940      	bls.n	80074ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743a:	2b2f      	cmp	r3, #47	; 0x2f
 800743c:	d006      	beq.n	800744c <create_name+0x48>
 800743e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007440:	2b5c      	cmp	r3, #92	; 0x5c
 8007442:	d110      	bne.n	8007466 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007444:	e002      	b.n	800744c <create_name+0x48>
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3301      	adds	r3, #1
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	4413      	add	r3, r2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b2f      	cmp	r3, #47	; 0x2f
 8007456:	d0f6      	beq.n	8007446 <create_name+0x42>
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4413      	add	r3, r2
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b5c      	cmp	r3, #92	; 0x5c
 8007462:	d0f0      	beq.n	8007446 <create_name+0x42>
			break;
 8007464:	e02a      	b.n	80074bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2bfe      	cmp	r3, #254	; 0xfe
 800746a:	d901      	bls.n	8007470 <create_name+0x6c>
 800746c:	2306      	movs	r3, #6
 800746e:	e177      	b.n	8007760 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007472:	b2db      	uxtb	r3, r3
 8007474:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007478:	2101      	movs	r1, #1
 800747a:	4618      	mov	r0, r3
 800747c:	f001 faca 	bl	8008a14 <ff_convert>
 8007480:	4603      	mov	r3, r0
 8007482:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <create_name+0x8a>
 800748a:	2306      	movs	r3, #6
 800748c:	e168      	b.n	8007760 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800748e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007490:	2b7f      	cmp	r3, #127	; 0x7f
 8007492:	d809      	bhi.n	80074a8 <create_name+0xa4>
 8007494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007496:	4619      	mov	r1, r3
 8007498:	48b3      	ldr	r0, [pc, #716]	; (8007768 <create_name+0x364>)
 800749a:	f7fe fd60 	bl	8005f5e <chk_chr>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <create_name+0xa4>
 80074a4:	2306      	movs	r3, #6
 80074a6:	e15b      	b.n	8007760 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	617a      	str	r2, [r7, #20]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80074b8:	e7b4      	b.n	8007424 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80074ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	441a      	add	r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80074c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c8:	2b1f      	cmp	r3, #31
 80074ca:	d801      	bhi.n	80074d0 <create_name+0xcc>
 80074cc:	2304      	movs	r3, #4
 80074ce:	e000      	b.n	80074d2 <create_name+0xce>
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074d6:	e011      	b.n	80074fc <create_name+0xf8>
		w = lfn[di - 1];
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074de:	3b01      	subs	r3, #1
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80074ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d002      	beq.n	80074f6 <create_name+0xf2>
 80074f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f2:	2b2e      	cmp	r3, #46	; 0x2e
 80074f4:	d106      	bne.n	8007504 <create_name+0x100>
		di--;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1ea      	bne.n	80074d8 <create_name+0xd4>
 8007502:	e000      	b.n	8007506 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007504:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	2200      	movs	r2, #0
 8007510:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <create_name+0x118>
 8007518:	2306      	movs	r3, #6
 800751a:	e121      	b.n	8007760 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	220b      	movs	r2, #11
 8007522:	2120      	movs	r1, #32
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fcd8 	bl	8005eda <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e002      	b.n	8007536 <create_name+0x132>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	3301      	adds	r3, #1
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	2b20      	cmp	r3, #32
 8007542:	d0f5      	beq.n	8007530 <create_name+0x12c>
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	2b2e      	cmp	r3, #46	; 0x2e
 8007550:	d0ee      	beq.n	8007530 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <create_name+0x168>
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	f043 0303 	orr.w	r3, r3, #3
 8007560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007564:	e002      	b.n	800756c <create_name+0x168>
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	3b01      	subs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <create_name+0x182>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007578:	3b01      	subs	r3, #1
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	2b2e      	cmp	r3, #46	; 0x2e
 8007584:	d1ef      	bne.n	8007566 <create_name+0x162>

	i = b = 0; ni = 8;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800758c:	2300      	movs	r3, #0
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	2308      	movs	r3, #8
 8007592:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	61ba      	str	r2, [r7, #24]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80075a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8090 	beq.w	80076cc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80075ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d006      	beq.n	80075c0 <create_name+0x1bc>
 80075b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b4:	2b2e      	cmp	r3, #46	; 0x2e
 80075b6:	d10a      	bne.n	80075ce <create_name+0x1ca>
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d006      	beq.n	80075ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80075c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c4:	f043 0303 	orr.w	r3, r3, #3
 80075c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075cc:	e07d      	b.n	80076ca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d203      	bcs.n	80075de <create_name+0x1da>
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d123      	bne.n	8007626 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	2b0b      	cmp	r3, #11
 80075e2:	d106      	bne.n	80075f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80075e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e8:	f043 0303 	orr.w	r3, r3, #3
 80075ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075f0:	e06f      	b.n	80076d2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d005      	beq.n	8007606 <create_name+0x202>
 80075fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075fe:	f043 0303 	orr.w	r3, r3, #3
 8007602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	429a      	cmp	r2, r3
 800760c:	d860      	bhi.n	80076d0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	2308      	movs	r3, #8
 8007614:	623b      	str	r3, [r7, #32]
 8007616:	230b      	movs	r3, #11
 8007618:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800761a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007624:	e051      	b.n	80076ca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007628:	2b7f      	cmp	r3, #127	; 0x7f
 800762a:	d914      	bls.n	8007656 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800762c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800762e:	2100      	movs	r1, #0
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f9ef 	bl	8008a14 <ff_convert>
 8007636:	4603      	mov	r3, r0
 8007638:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800763a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <create_name+0x246>
 8007640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007642:	3b80      	subs	r3, #128	; 0x80
 8007644:	4a49      	ldr	r2, [pc, #292]	; (800776c <create_name+0x368>)
 8007646:	5cd3      	ldrb	r3, [r2, r3]
 8007648:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800764a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764e:	f043 0302 	orr.w	r3, r3, #2
 8007652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <create_name+0x268>
 800765c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800765e:	4619      	mov	r1, r3
 8007660:	4843      	ldr	r0, [pc, #268]	; (8007770 <create_name+0x36c>)
 8007662:	f7fe fc7c 	bl	8005f5e <chk_chr>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800766c:	235f      	movs	r3, #95	; 0x5f
 800766e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007674:	f043 0303 	orr.w	r3, r3, #3
 8007678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800767c:	e01b      	b.n	80076b6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800767e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d909      	bls.n	8007698 <create_name+0x294>
 8007684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007686:	2b5a      	cmp	r3, #90	; 0x5a
 8007688:	d806      	bhi.n	8007698 <create_name+0x294>
					b |= 2;
 800768a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800768e:	f043 0302 	orr.w	r3, r3, #2
 8007692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007696:	e00e      	b.n	80076b6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769a:	2b60      	cmp	r3, #96	; 0x60
 800769c:	d90b      	bls.n	80076b6 <create_name+0x2b2>
 800769e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076a0:	2b7a      	cmp	r3, #122	; 0x7a
 80076a2:	d808      	bhi.n	80076b6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80076a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b2:	3b20      	subs	r3, #32
 80076b4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	623a      	str	r2, [r7, #32]
 80076bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076be:	b2d1      	uxtb	r1, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	460a      	mov	r2, r1
 80076c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80076ca:	e763      	b.n	8007594 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80076d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076d8:	2be5      	cmp	r3, #229	; 0xe5
 80076da:	d103      	bne.n	80076e4 <create_name+0x2e0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2205      	movs	r2, #5
 80076e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d104      	bne.n	80076f4 <create_name+0x2f0>
 80076ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80076f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076f8:	f003 030c 	and.w	r3, r3, #12
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d005      	beq.n	800770c <create_name+0x308>
 8007700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	2b03      	cmp	r3, #3
 800770a:	d105      	bne.n	8007718 <create_name+0x314>
 800770c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d117      	bne.n	8007754 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d105      	bne.n	800773c <create_name+0x338>
 8007730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007734:	f043 0310 	orr.w	r3, r3, #16
 8007738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800773c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007740:	f003 030c 	and.w	r3, r3, #12
 8007744:	2b04      	cmp	r3, #4
 8007746:	d105      	bne.n	8007754 <create_name+0x350>
 8007748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800774c:	f043 0308 	orr.w	r3, r3, #8
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800775a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800775e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007760:	4618      	mov	r0, r3
 8007762:	3728      	adds	r7, #40	; 0x28
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	08008c44 	.word	0x08008c44
 800776c:	08008ce8 	.word	0x08008ce8
 8007770:	08008c50 	.word	0x08008c50

08007774 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007788:	e002      	b.n	8007790 <follow_path+0x1c>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b2f      	cmp	r3, #47	; 0x2f
 8007796:	d0f8      	beq.n	800778a <follow_path+0x16>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b5c      	cmp	r3, #92	; 0x5c
 800779e:	d0f4      	beq.n	800778a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2200      	movs	r2, #0
 80077a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b1f      	cmp	r3, #31
 80077ac:	d80a      	bhi.n	80077c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff f91b 	bl	80069f4 <dir_sdi>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]
 80077c2:	e043      	b.n	800784c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077c4:	463b      	mov	r3, r7
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff fe1b 	bl	8007404 <create_name>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d134      	bne.n	8007842 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fc5a 	bl	8007092 <dir_find>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d127      	bne.n	8007846 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d122      	bne.n	8007846 <follow_path+0xd2>
 8007800:	2305      	movs	r3, #5
 8007802:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007804:	e01f      	b.n	8007846 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11c      	bne.n	800784a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	799b      	ldrb	r3, [r3, #6]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800781c:	2305      	movs	r3, #5
 800781e:	75fb      	strb	r3, [r7, #23]
 8007820:	e014      	b.n	800784c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007830:	4413      	add	r3, r2
 8007832:	4619      	mov	r1, r3
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff fa64 	bl	8006d02 <ld_clust>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007840:	e7c0      	b.n	80077c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <follow_path+0xd8>
				break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800784a:	bf00      	nop
			}
		}
	}

	return res;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007856:	b480      	push	{r7}
 8007858:	b087      	sub	sp, #28
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007862:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d031      	beq.n	80078d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e002      	b.n	800787a <get_ldnumber+0x24>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3301      	adds	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b1f      	cmp	r3, #31
 8007880:	d903      	bls.n	800788a <get_ldnumber+0x34>
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b3a      	cmp	r3, #58	; 0x3a
 8007888:	d1f4      	bne.n	8007874 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b3a      	cmp	r3, #58	; 0x3a
 8007890:	d11c      	bne.n	80078cc <get_ldnumber+0x76>
			tp = *path;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	60fa      	str	r2, [r7, #12]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	3b30      	subs	r3, #48	; 0x30
 80078a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d80e      	bhi.n	80078c8 <get_ldnumber+0x72>
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d10a      	bne.n	80078c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d107      	bne.n	80078c8 <get_ldnumber+0x72>
					vol = (int)i;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3301      	adds	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	e002      	b.n	80078d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80078d0:	693b      	ldr	r3, [r7, #16]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	70da      	strb	r2, [r3, #3]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fe fcfa 	bl	80062f4 <move_window>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <check_fs+0x2a>
 8007906:	2304      	movs	r3, #4
 8007908:	e038      	b.n	800797c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3334      	adds	r3, #52	; 0x34
 800790e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fa3e 	bl	8005d94 <ld_word>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007920:	429a      	cmp	r2, r3
 8007922:	d001      	beq.n	8007928 <check_fs+0x48>
 8007924:	2303      	movs	r3, #3
 8007926:	e029      	b.n	800797c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800792e:	2be9      	cmp	r3, #233	; 0xe9
 8007930:	d009      	beq.n	8007946 <check_fs+0x66>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007938:	2beb      	cmp	r3, #235	; 0xeb
 800793a:	d11e      	bne.n	800797a <check_fs+0x9a>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007942:	2b90      	cmp	r3, #144	; 0x90
 8007944:	d119      	bne.n	800797a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3334      	adds	r3, #52	; 0x34
 800794a:	3336      	adds	r3, #54	; 0x36
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fa39 	bl	8005dc4 <ld_dword>
 8007952:	4603      	mov	r3, r0
 8007954:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007958:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <check_fs+0xa4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <check_fs+0x82>
 800795e:	2300      	movs	r3, #0
 8007960:	e00c      	b.n	800797c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3334      	adds	r3, #52	; 0x34
 8007966:	3352      	adds	r3, #82	; 0x52
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fa2b 	bl	8005dc4 <ld_dword>
 800796e:	4603      	mov	r3, r0
 8007970:	4a05      	ldr	r2, [pc, #20]	; (8007988 <check_fs+0xa8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d101      	bne.n	800797a <check_fs+0x9a>
 8007976:	2300      	movs	r3, #0
 8007978:	e000      	b.n	800797c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800797a:	2302      	movs	r3, #2
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	00544146 	.word	0x00544146
 8007988:	33544146 	.word	0x33544146

0800798c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b096      	sub	sp, #88	; 0x58
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff ff58 	bl	8007856 <get_ldnumber>
 80079a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da01      	bge.n	80079b2 <find_volume+0x26>
 80079ae:	230b      	movs	r3, #11
 80079b0:	e231      	b.n	8007e16 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079b2:	4aa8      	ldr	r2, [pc, #672]	; (8007c54 <find_volume+0x2c8>)
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <find_volume+0x3a>
 80079c2:	230c      	movs	r3, #12
 80079c4:	e227      	b.n	8007e16 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f939 	bl	8005c58 <disk_status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <find_volume+0x82>
 80079fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e203      	b.n	8007e16 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e201      	b.n	8007e16 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f931 	bl	8005c8c <disk_initialize>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e1ea      	b.n	8007e16 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <find_volume+0xca>
 8007a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a52:	230a      	movs	r3, #10
 8007a54:	e1df      	b.n	8007e16 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a5e:	f7ff ff3f 	bl	80078e0 <check_fs>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d14b      	bne.n	8007b08 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a70:	2300      	movs	r3, #0
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
 8007a74:	e01f      	b.n	8007ab6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a84:	4413      	add	r3, r2
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d006      	beq.n	8007aa0 <find_volume+0x114>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	3308      	adds	r3, #8
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe f994 	bl	8005dc4 <ld_dword>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	e000      	b.n	8007aa2 <find_volume+0x116>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007aaa:	440b      	add	r3, r1
 8007aac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d9dc      	bls.n	8007a76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007abc:	2300      	movs	r3, #0
 8007abe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <find_volume+0x140>
 8007ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ada:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <find_volume+0x162>
 8007ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae6:	f7ff fefb 	bl	80078e0 <check_fs>
 8007aea:	4603      	mov	r3, r0
 8007aec:	e000      	b.n	8007af0 <find_volume+0x164>
 8007aee:	2303      	movs	r3, #3
 8007af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d905      	bls.n	8007b08 <find_volume+0x17c>
 8007afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afe:	3301      	adds	r3, #1
 8007b00:	643b      	str	r3, [r7, #64]	; 0x40
 8007b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d9e1      	bls.n	8007acc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d101      	bne.n	8007b14 <find_volume+0x188>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e180      	b.n	8007e16 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d901      	bls.n	8007b20 <find_volume+0x194>
 8007b1c:	230d      	movs	r3, #13
 8007b1e:	e17a      	b.n	8007e16 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	3334      	adds	r3, #52	; 0x34
 8007b24:	330b      	adds	r3, #11
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe f934 	bl	8005d94 <ld_word>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b32:	d001      	beq.n	8007b38 <find_volume+0x1ac>
 8007b34:	230d      	movs	r3, #13
 8007b36:	e16e      	b.n	8007e16 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	3334      	adds	r3, #52	; 0x34
 8007b3c:	3316      	adds	r3, #22
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe f928 	bl	8005d94 <ld_word>
 8007b44:	4603      	mov	r3, r0
 8007b46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <find_volume+0x1d0>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	3334      	adds	r3, #52	; 0x34
 8007b52:	3324      	adds	r3, #36	; 0x24
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe f935 	bl	8005dc4 <ld_dword>
 8007b5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b60:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	789b      	ldrb	r3, [r3, #2]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d005      	beq.n	8007b80 <find_volume+0x1f4>
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	789b      	ldrb	r3, [r3, #2]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d001      	beq.n	8007b80 <find_volume+0x1f4>
 8007b7c:	230d      	movs	r3, #13
 8007b7e:	e14a      	b.n	8007e16 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	789b      	ldrb	r3, [r3, #2]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	895b      	ldrh	r3, [r3, #10]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <find_volume+0x228>
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	895b      	ldrh	r3, [r3, #10]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	895b      	ldrh	r3, [r3, #10]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <find_volume+0x22c>
 8007bb4:	230d      	movs	r3, #13
 8007bb6:	e12e      	b.n	8007e16 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	3334      	adds	r3, #52	; 0x34
 8007bbc:	3311      	adds	r3, #17
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe f8e8 	bl	8005d94 <ld_word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	891b      	ldrh	r3, [r3, #8]
 8007bd0:	f003 030f 	and.w	r3, r3, #15
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <find_volume+0x252>
 8007bda:	230d      	movs	r3, #13
 8007bdc:	e11b      	b.n	8007e16 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	3334      	adds	r3, #52	; 0x34
 8007be2:	3313      	adds	r3, #19
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe f8d5 	bl	8005d94 <ld_word>
 8007bea:	4603      	mov	r3, r0
 8007bec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <find_volume+0x276>
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	3334      	adds	r3, #52	; 0x34
 8007bf8:	3320      	adds	r3, #32
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe f8e2 	bl	8005dc4 <ld_dword>
 8007c00:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	3334      	adds	r3, #52	; 0x34
 8007c06:	330e      	adds	r3, #14
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe f8c3 	bl	8005d94 <ld_word>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <find_volume+0x290>
 8007c18:	230d      	movs	r3, #13
 8007c1a:	e0fc      	b.n	8007e16 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c20:	4413      	add	r3, r2
 8007c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c24:	8912      	ldrh	r2, [r2, #8]
 8007c26:	0912      	lsrs	r2, r2, #4
 8007c28:	b292      	uxth	r2, r2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d201      	bcs.n	8007c3a <find_volume+0x2ae>
 8007c36:	230d      	movs	r3, #13
 8007c38:	e0ed      	b.n	8007e16 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c42:	8952      	ldrh	r2, [r2, #10]
 8007c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <find_volume+0x2cc>
 8007c50:	230d      	movs	r3, #13
 8007c52:	e0e0      	b.n	8007e16 <find_volume+0x48a>
 8007c54:	20000030 	.word	0x20000030
		fmt = FS_FAT32;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d802      	bhi.n	8007c6e <find_volume+0x2e2>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d802      	bhi.n	8007c7e <find_volume+0x2f2>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	1c9a      	adds	r2, r3, #2
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c8a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c90:	441a      	add	r2, r3
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007c96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	441a      	add	r2, r3
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d11e      	bne.n	8007ce6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	3334      	adds	r3, #52	; 0x34
 8007cac:	332a      	adds	r3, #42	; 0x2a
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f870 	bl	8005d94 <ld_word>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <find_volume+0x332>
 8007cba:	230d      	movs	r3, #13
 8007cbc:	e0ab      	b.n	8007e16 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	891b      	ldrh	r3, [r3, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <find_volume+0x33e>
 8007cc6:	230d      	movs	r3, #13
 8007cc8:	e0a5      	b.n	8007e16 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	3334      	adds	r3, #52	; 0x34
 8007cce:	332c      	adds	r3, #44	; 0x2c
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe f877 	bl	8005dc4 <ld_dword>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce4:	e01f      	b.n	8007d26 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	891b      	ldrh	r3, [r3, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <find_volume+0x366>
 8007cee:	230d      	movs	r3, #13
 8007cf0:	e091      	b.n	8007e16 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf8:	441a      	add	r2, r3
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d103      	bne.n	8007d0e <find_volume+0x382>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	e00a      	b.n	8007d24 <find_volume+0x398>
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	085a      	lsrs	r2, r3, #1
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d24:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007d30:	0a5b      	lsrs	r3, r3, #9
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d201      	bcs.n	8007d3a <find_volume+0x3ae>
 8007d36:	230d      	movs	r3, #13
 8007d38:	e06d      	b.n	8007e16 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d40:	615a      	str	r2, [r3, #20]
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	695a      	ldr	r2, [r3, #20]
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	2280      	movs	r2, #128	; 0x80
 8007d4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d149      	bne.n	8007dec <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	3334      	adds	r3, #52	; 0x34
 8007d5c:	3330      	adds	r3, #48	; 0x30
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe f818 	bl	8005d94 <ld_word>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d140      	bne.n	8007dec <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d72:	f7fe fabf 	bl	80062f4 <move_window>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d137      	bne.n	8007dec <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	2200      	movs	r2, #0
 8007d80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	3334      	adds	r3, #52	; 0x34
 8007d86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe f802 	bl	8005d94 <ld_word>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d127      	bne.n	8007dec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	3334      	adds	r3, #52	; 0x34
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe f80f 	bl	8005dc4 <ld_dword>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <find_volume+0x494>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d11e      	bne.n	8007dec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	3334      	adds	r3, #52	; 0x34
 8007db2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe f804 	bl	8005dc4 <ld_dword>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <find_volume+0x498>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d113      	bne.n	8007dec <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	3334      	adds	r3, #52	; 0x34
 8007dc8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fd fff9 	bl	8005dc4 <ld_dword>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	3334      	adds	r3, #52	; 0x34
 8007ddc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd ffef 	bl	8005dc4 <ld_dword>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007df2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <find_volume+0x49c>)
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <find_volume+0x49c>)
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <find_volume+0x49c>)
 8007e02:	881a      	ldrh	r2, [r3, #0]
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <find_volume+0x4a0>)
 8007e0c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e10:	f7fe fa08 	bl	8006224 <clear_lock>
#endif
	return FR_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3758      	adds	r7, #88	; 0x58
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	41615252 	.word	0x41615252
 8007e24:	61417272 	.word	0x61417272
 8007e28:	20000034 	.word	0x20000034
 8007e2c:	20000058 	.word	0x20000058

08007e30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e3a:	2309      	movs	r3, #9
 8007e3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01c      	beq.n	8007e7e <validate+0x4e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <validate+0x4e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d013      	beq.n	8007e7e <validate+0x4e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	889a      	ldrh	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	88db      	ldrh	r3, [r3, #6]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d10c      	bne.n	8007e7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fd fef4 	bl	8005c58 <disk_status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <validate+0x4e>
			res = FR_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <validate+0x5a>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	e000      	b.n	8007e8c <validate+0x5c>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	6013      	str	r3, [r2, #0]
	return res;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007eae:	f107 0310 	add.w	r3, r7, #16
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fccf 	bl	8007856 <get_ldnumber>
 8007eb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da01      	bge.n	8007ec4 <f_mount+0x28>
 8007ec0:	230b      	movs	r3, #11
 8007ec2:	e02b      	b.n	8007f1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <f_mount+0x88>)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ecc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ed4:	69b8      	ldr	r0, [r7, #24]
 8007ed6:	f7fe f9a5 	bl	8006224 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	490d      	ldr	r1, [pc, #52]	; (8007f24 <f_mount+0x88>)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <f_mount+0x66>
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d001      	beq.n	8007f06 <f_mount+0x6a>
 8007f02:	2300      	movs	r3, #0
 8007f04:	e00a      	b.n	8007f1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007f06:	f107 010c 	add.w	r1, r7, #12
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fd3b 	bl	800798c <find_volume>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000030 	.word	0x20000030

08007f28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b09a      	sub	sp, #104	; 0x68
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <f_open+0x18>
 8007f3c:	2309      	movs	r3, #9
 8007f3e:	e1ad      	b.n	800829c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f48:	79fa      	ldrb	r2, [r7, #7]
 8007f4a:	f107 0114 	add.w	r1, r7, #20
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fd1a 	bl	800798c <find_volume>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007f5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f040 8191 	bne.w	800828a <f_open+0x362>
		dj.obj.fs = fs;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff fbfd 	bl	8007774 <follow_path>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007f80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11a      	bne.n	8007fbe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da03      	bge.n	8007f9a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007f92:	2306      	movs	r3, #6
 8007f94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f98:	e011      	b.n	8007fbe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bf14      	ite	ne
 8007fa4:	2301      	movne	r3, #1
 8007fa6:	2300      	moveq	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	f107 0318 	add.w	r3, r7, #24
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fd ffee 	bl	8005f94 <chk_lock>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	f003 031c 	and.w	r3, r3, #28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d07f      	beq.n	80080c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d10e      	bne.n	8007ff6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007fd8:	f7fe f838 	bl	800604c <enq_lock>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <f_open+0xc8>
 8007fe2:	f107 0318 	add.w	r3, r7, #24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f914 	bl	8007214 <dir_register>
 8007fec:	4603      	mov	r3, r0
 8007fee:	e000      	b.n	8007ff2 <f_open+0xca>
 8007ff0:	2312      	movs	r3, #18
 8007ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f043 0308 	orr.w	r3, r3, #8
 8007ffc:	71fb      	strb	r3, [r7, #7]
 8007ffe:	e010      	b.n	8008022 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008000:	7fbb      	ldrb	r3, [r7, #30]
 8008002:	f003 0311 	and.w	r3, r3, #17
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <f_open+0xea>
					res = FR_DENIED;
 800800a:	2307      	movs	r3, #7
 800800c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008010:	e007      	b.n	8008022 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <f_open+0xfa>
 800801c:	2308      	movs	r3, #8
 800801e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008022:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008026:	2b00      	cmp	r3, #0
 8008028:	d168      	bne.n	80080fc <f_open+0x1d4>
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d063      	beq.n	80080fc <f_open+0x1d4>
				dw = GET_FATTIME();
 8008034:	f7fd fbc2 	bl	80057bc <get_fattime>
 8008038:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	330e      	adds	r3, #14
 800803e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008040:	4618      	mov	r0, r3
 8008042:	f7fd fefd 	bl	8005e40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	3316      	adds	r3, #22
 800804a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd fef7 	bl	8005e40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	330b      	adds	r3, #11
 8008056:	2220      	movs	r2, #32
 8008058:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fe4e 	bl	8006d02 <ld_clust>
 8008066:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800806c:	2200      	movs	r2, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fe66 	bl	8006d40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	331c      	adds	r3, #28
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd fee0 	bl	8005e40 <st_dword>
					fs->wflag = 1;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2201      	movs	r2, #1
 8008084:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008088:	2b00      	cmp	r3, #0
 800808a:	d037      	beq.n	80080fc <f_open+0x1d4>
						dw = fs->winsect;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008092:	f107 0318 	add.w	r3, r7, #24
 8008096:	2200      	movs	r2, #0
 8008098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fb79 	bl	8006792 <remove_chain>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80080a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d126      	bne.n	80080fc <f_open+0x1d4>
							res = move_window(fs, dw);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe f91e 	bl	80062f4 <move_window>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080c2:	3a01      	subs	r2, #1
 80080c4:	611a      	str	r2, [r3, #16]
 80080c6:	e019      	b.n	80080fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80080c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d115      	bne.n	80080fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80080d0:	7fbb      	ldrb	r3, [r7, #30]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80080da:	2304      	movs	r3, #4
 80080dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080e0:	e00c      	b.n	80080fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <f_open+0x1d4>
 80080ec:	7fbb      	ldrb	r3, [r7, #30]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <f_open+0x1d4>
						res = FR_DENIED;
 80080f6:	2307      	movs	r3, #7
 80080f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80080fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008100:	2b00      	cmp	r3, #0
 8008102:	d128      	bne.n	8008156 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008114:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800811e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	f023 0301 	bic.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	bf14      	ite	ne
 800812e:	2301      	movne	r3, #1
 8008130:	2300      	moveq	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	f107 0318 	add.w	r3, r7, #24
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd ffa7 	bl	8006090 <inc_lock>
 8008142:	4602      	mov	r2, r0
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <f_open+0x22e>
 8008150:	2302      	movs	r3, #2
 8008152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008156:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 8095 	bne.w	800828a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fdcb 	bl	8006d02 <ld_clust>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	331c      	adds	r3, #28
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd fe24 	bl	8005dc4 <ld_dword>
 800817c:	4602      	mov	r2, r0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	88da      	ldrh	r2, [r3, #6]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	79fa      	ldrb	r2, [r7, #7]
 800819a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3330      	adds	r3, #48	; 0x30
 80081b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fd fe8e 	bl	8005eda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d060      	beq.n	800828a <f_open+0x362>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d05c      	beq.n	800828a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	895b      	ldrh	r3, [r3, #10]
 80081dc:	025b      	lsls	r3, r3, #9
 80081de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ec:	e016      	b.n	800821c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe f939 	bl	800646a <get_fat>
 80081f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80081fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d802      	bhi.n	8008206 <f_open+0x2de>
 8008200:	2302      	movs	r3, #2
 8008202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820c:	d102      	bne.n	8008214 <f_open+0x2ec>
 800820e:	2301      	movs	r3, #1
 8008210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800821c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <f_open+0x304>
 8008224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008228:	429a      	cmp	r2, r3
 800822a:	d8e0      	bhi.n	80081ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008230:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008236:	2b00      	cmp	r3, #0
 8008238:	d127      	bne.n	800828a <f_open+0x362>
 800823a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008240:	2b00      	cmp	r3, #0
 8008242:	d022      	beq.n	800828a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe f8ef 	bl	800642c <clust2sect>
 800824e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <f_open+0x336>
						res = FR_INT_ERR;
 8008256:	2302      	movs	r3, #2
 8008258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800825c:	e015      	b.n	800828a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800825e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008260:	0a5a      	lsrs	r2, r3, #9
 8008262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	7858      	ldrb	r0, [r3, #1]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	2301      	movs	r3, #1
 800827a:	f7fd fd2d 	bl	8005cd8 <disk_read>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <f_open+0x362>
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800828a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <f_open+0x370>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008298:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800829c:	4618      	mov	r0, r3
 800829e:	3768      	adds	r7, #104	; 0x68
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	; 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f107 0214 	add.w	r2, r7, #20
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff fdb3 	bl	8007e30 <validate>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <f_read+0x44>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	7d5b      	ldrb	r3, [r3, #21]
 80082dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <f_read+0x4a>
 80082e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082ec:	e115      	b.n	800851a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	7d1b      	ldrb	r3, [r3, #20]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <f_read+0x5a>
 80082fa:	2307      	movs	r3, #7
 80082fc:	e10d      	b.n	800851a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	429a      	cmp	r2, r3
 8008310:	f240 80fe 	bls.w	8008510 <f_read+0x26c>
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008318:	e0fa      	b.n	8008510 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	2b00      	cmp	r3, #0
 8008324:	f040 80c6 	bne.w	80084b4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	0a5b      	lsrs	r3, r3, #9
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	8952      	ldrh	r2, [r2, #10]
 8008332:	3a01      	subs	r2, #1
 8008334:	4013      	ands	r3, r2
 8008336:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d12f      	bne.n	800839e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	633b      	str	r3, [r7, #48]	; 0x30
 800834c:	e013      	b.n	8008376 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	4619      	mov	r1, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7fe fb15 	bl	800698c <clmt_clust>
 8008362:	6338      	str	r0, [r7, #48]	; 0x30
 8008364:	e007      	b.n	8008376 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f7fe f87b 	bl	800646a <get_fat>
 8008374:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	2b01      	cmp	r3, #1
 800837a:	d804      	bhi.n	8008386 <f_read+0xe2>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2202      	movs	r2, #2
 8008380:	755a      	strb	r2, [r3, #21]
 8008382:	2302      	movs	r3, #2
 8008384:	e0c9      	b.n	800851a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838c:	d104      	bne.n	8008398 <f_read+0xf4>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	755a      	strb	r2, [r3, #21]
 8008394:	2301      	movs	r3, #1
 8008396:	e0c0      	b.n	800851a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	4619      	mov	r1, r3
 80083a6:	4610      	mov	r0, r2
 80083a8:	f7fe f840 	bl	800642c <clust2sect>
 80083ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d104      	bne.n	80083be <f_read+0x11a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2202      	movs	r2, #2
 80083b8:	755a      	strb	r2, [r3, #21]
 80083ba:	2302      	movs	r3, #2
 80083bc:	e0ad      	b.n	800851a <f_read+0x276>
			sect += csect;
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	0a5b      	lsrs	r3, r3, #9
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d039      	beq.n	8008446 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	4413      	add	r3, r2
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	8952      	ldrh	r2, [r2, #10]
 80083dc:	4293      	cmp	r3, r2
 80083de:	d905      	bls.n	80083ec <f_read+0x148>
					cc = fs->csize - csect;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	895b      	ldrh	r3, [r3, #10]
 80083e4:	461a      	mov	r2, r3
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	7858      	ldrb	r0, [r3, #1]
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083f6:	f7fd fc6f 	bl	8005cd8 <disk_read>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d004      	beq.n	800840a <f_read+0x166>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	755a      	strb	r2, [r3, #21]
 8008406:	2301      	movs	r3, #1
 8008408:	e087      	b.n	800851a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	7d1b      	ldrb	r3, [r3, #20]
 800840e:	b25b      	sxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	da14      	bge.n	800843e <f_read+0x19a>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800841e:	429a      	cmp	r2, r3
 8008420:	d90d      	bls.n	800843e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	025b      	lsls	r3, r3, #9
 800842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842e:	18d0      	adds	r0, r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3330      	adds	r3, #48	; 0x30
 8008434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008438:	4619      	mov	r1, r3
 800843a:	f7fd fd2d 	bl	8005e98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	025b      	lsls	r3, r3, #9
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008444:	e050      	b.n	80084e8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	429a      	cmp	r2, r3
 800844e:	d02e      	beq.n	80084ae <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	b25b      	sxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	da18      	bge.n	800848c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	7858      	ldrb	r0, [r3, #1]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	2301      	movs	r3, #1
 800846a:	f7fd fc55 	bl	8005d18 <disk_write>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <f_read+0x1da>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	755a      	strb	r2, [r3, #21]
 800847a:	2301      	movs	r3, #1
 800847c:	e04d      	b.n	800851a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7d1b      	ldrb	r3, [r3, #20]
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	b2da      	uxtb	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	7858      	ldrb	r0, [r3, #1]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008496:	2301      	movs	r3, #1
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	f7fd fc1d 	bl	8005cd8 <disk_read>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <f_read+0x20a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	755a      	strb	r2, [r3, #21]
 80084aa:	2301      	movs	r3, #1
 80084ac:	e035      	b.n	800851a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80084c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d901      	bls.n	80084ce <f_read+0x22a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084dc:	4413      	add	r3, r2
 80084de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e0:	4619      	mov	r1, r3
 80084e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084e4:	f7fd fcd8 	bl	8005e98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80084e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	4413      	add	r3, r2
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	441a      	add	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	619a      	str	r2, [r3, #24]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	441a      	add	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f47f af01 	bne.w	800831a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3738      	adds	r7, #56	; 0x38
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08c      	sub	sp, #48	; 0x30
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f107 0210 	add.w	r2, r7, #16
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fc74 	bl	8007e30 <validate>
 8008548:	4603      	mov	r3, r0
 800854a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800854e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <f_write+0x44>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	7d5b      	ldrb	r3, [r3, #21]
 800855a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800855e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <f_write+0x4a>
 8008566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800856a:	e14b      	b.n	8008804 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	7d1b      	ldrb	r3, [r3, #20]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <f_write+0x5a>
 8008578:	2307      	movs	r3, #7
 800857a:	e143      	b.n	8008804 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699a      	ldr	r2, [r3, #24]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	441a      	add	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	429a      	cmp	r2, r3
 800858a:	f080 812d 	bcs.w	80087e8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	43db      	mvns	r3, r3
 8008594:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008596:	e127      	b.n	80087e8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f040 80e3 	bne.w	800876c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	0a5b      	lsrs	r3, r3, #9
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	8952      	ldrh	r2, [r2, #10]
 80085b0:	3a01      	subs	r2, #1
 80085b2:	4013      	ands	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d143      	bne.n	8008644 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10c      	bne.n	80085de <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11a      	bne.n	8008606 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe f941 	bl	800685c <create_chain>
 80085da:	62b8      	str	r0, [r7, #40]	; 0x28
 80085dc:	e013      	b.n	8008606 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	4619      	mov	r1, r3
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7fe f9cd 	bl	800698c <clmt_clust>
 80085f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80085f4:	e007      	b.n	8008606 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fe f92c 	bl	800685c <create_chain>
 8008604:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80f2 	beq.w	80087f2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	2b01      	cmp	r3, #1
 8008612:	d104      	bne.n	800861e <f_write+0xfc>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2202      	movs	r2, #2
 8008618:	755a      	strb	r2, [r3, #21]
 800861a:	2302      	movs	r3, #2
 800861c:	e0f2      	b.n	8008804 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008624:	d104      	bne.n	8008630 <f_write+0x10e>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	755a      	strb	r2, [r3, #21]
 800862c:	2301      	movs	r3, #1
 800862e:	e0e9      	b.n	8008804 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008634:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d102      	bne.n	8008644 <f_write+0x122>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008642:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	7d1b      	ldrb	r3, [r3, #20]
 8008648:	b25b      	sxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	da18      	bge.n	8008680 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	7858      	ldrb	r0, [r3, #1]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1a      	ldr	r2, [r3, #32]
 800865c:	2301      	movs	r3, #1
 800865e:	f7fd fb5b 	bl	8005d18 <disk_write>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <f_write+0x150>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	755a      	strb	r2, [r3, #21]
 800866e:	2301      	movs	r3, #1
 8008670:	e0c8      	b.n	8008804 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7d1b      	ldrb	r3, [r3, #20]
 8008676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fd fecf 	bl	800642c <clust2sect>
 800868e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <f_write+0x17e>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2202      	movs	r2, #2
 800869a:	755a      	strb	r2, [r3, #21]
 800869c:	2302      	movs	r3, #2
 800869e:	e0b1      	b.n	8008804 <f_write+0x2e2>
			sect += csect;
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	4413      	add	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	0a5b      	lsrs	r3, r3, #9
 80086ac:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d03c      	beq.n	800872e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	4413      	add	r3, r2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	8952      	ldrh	r2, [r2, #10]
 80086be:	4293      	cmp	r3, r2
 80086c0:	d905      	bls.n	80086ce <f_write+0x1ac>
					cc = fs->csize - csect;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	895b      	ldrh	r3, [r3, #10]
 80086c6:	461a      	mov	r2, r3
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	7858      	ldrb	r0, [r3, #1]
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	69f9      	ldr	r1, [r7, #28]
 80086d8:	f7fd fb1e 	bl	8005d18 <disk_write>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <f_write+0x1ca>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	755a      	strb	r2, [r3, #21]
 80086e8:	2301      	movs	r3, #1
 80086ea:	e08b      	b.n	8008804 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	6a3a      	ldr	r2, [r7, #32]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d915      	bls.n	8008726 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1a      	ldr	r2, [r3, #32]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	025b      	lsls	r3, r3, #9
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008712:	4619      	mov	r1, r3
 8008714:	f7fd fbc0 	bl	8005e98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	7d1b      	ldrb	r3, [r3, #20]
 800871c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	025b      	lsls	r3, r3, #9
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800872c:	e03f      	b.n	80087ae <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d016      	beq.n	8008766 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008740:	429a      	cmp	r2, r3
 8008742:	d210      	bcs.n	8008766 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	7858      	ldrb	r0, [r3, #1]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800874e:	2301      	movs	r3, #1
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	f7fd fac1 	bl	8005cd8 <disk_read>
 8008756:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	755a      	strb	r2, [r3, #21]
 8008762:	2301      	movs	r3, #1
 8008764:	e04e      	b.n	8008804 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008774:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800877a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	429a      	cmp	r2, r3
 8008780:	d901      	bls.n	8008786 <f_write+0x264>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	4413      	add	r3, r2
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	4618      	mov	r0, r3
 800879c:	f7fd fb7c 	bl	8005e98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	7d1b      	ldrb	r3, [r3, #20]
 80087a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	4413      	add	r3, r2
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	441a      	add	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	619a      	str	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	bf38      	it	cc
 80087ce:	461a      	movcc	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	441a      	add	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f47f aed4 	bne.w	8008598 <f_write+0x76>
 80087f0:	e000      	b.n	80087f4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	7d1b      	ldrb	r3, [r3, #20]
 80087f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3730      	adds	r7, #48	; 0x30
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f107 0208 	add.w	r2, r7, #8
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fb07 	bl	8007e30 <validate>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d168      	bne.n	80088fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7d1b      	ldrb	r3, [r3, #20]
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d062      	beq.n	80088fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7d1b      	ldrb	r3, [r3, #20]
 800883c:	b25b      	sxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	da15      	bge.n	800886e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	7858      	ldrb	r0, [r3, #1]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1a      	ldr	r2, [r3, #32]
 8008850:	2301      	movs	r3, #1
 8008852:	f7fd fa61 	bl	8005d18 <disk_write>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <f_sync+0x54>
 800885c:	2301      	movs	r3, #1
 800885e:	e04f      	b.n	8008900 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7d1b      	ldrb	r3, [r3, #20]
 8008864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008868:	b2da      	uxtb	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800886e:	f7fc ffa5 	bl	80057bc <get_fattime>
 8008872:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f7fd fd39 	bl	80062f4 <move_window>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d138      	bne.n	80088fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	330b      	adds	r3, #11
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	330b      	adds	r3, #11
 800889c:	f042 0220 	orr.w	r2, r2, #32
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	461a      	mov	r2, r3
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	f7fe fa46 	bl	8006d40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f103 021c 	add.w	r2, r3, #28
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7fd fabd 	bl	8005e40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3316      	adds	r3, #22
 80088ca:	6939      	ldr	r1, [r7, #16]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fd fab7 	bl	8005e40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3312      	adds	r3, #18
 80088d6:	2100      	movs	r1, #0
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd fa96 	bl	8005e0a <st_word>
					fs->wflag = 1;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2201      	movs	r2, #1
 80088e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd fd32 	bl	8006350 <sync_fs>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7d1b      	ldrb	r3, [r3, #20]
 80088f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff7b 	bl	800880c <f_sync>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d118      	bne.n	8008952 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f107 0208 	add.w	r2, r7, #8
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fa81 	bl	8007e30 <validate>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10c      	bne.n	8008952 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	4618      	mov	r0, r3
 800893e:	f7fd fc35 	bl	80061ac <dec_lock>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008972:	4b1f      	ldr	r3, [pc, #124]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008974:	7a5b      	ldrb	r3, [r3, #9]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d131      	bne.n	80089e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800897c:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800897e:	7a5b      	ldrb	r3, [r3, #9]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008986:	2100      	movs	r1, #0
 8008988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800898c:	7a5b      	ldrb	r3, [r3, #9]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 800899c:	7a5b      	ldrb	r3, [r3, #9]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089a4:	4413      	add	r3, r2
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089aa:	4b11      	ldr	r3, [pc, #68]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089ac:	7a5b      	ldrb	r3, [r3, #9]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	b2d1      	uxtb	r1, r2
 80089b4:	4a0e      	ldr	r2, [pc, #56]	; (80089f0 <FATFS_LinkDriverEx+0x94>)
 80089b6:	7251      	strb	r1, [r2, #9]
 80089b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089ba:	7dbb      	ldrb	r3, [r7, #22]
 80089bc:	3330      	adds	r3, #48	; 0x30
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3301      	adds	r3, #1
 80089c8:	223a      	movs	r2, #58	; 0x3a
 80089ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3302      	adds	r3, #2
 80089d0:	222f      	movs	r2, #47	; 0x2f
 80089d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3303      	adds	r3, #3
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000258 	.word	0x20000258

080089f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089fe:	2200      	movs	r2, #0
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff ffaa 	bl	800895c <FATFS_LinkDriverEx>
 8008a08:	4603      	mov	r3, r0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	2b7f      	cmp	r3, #127	; 0x7f
 8008a24:	d802      	bhi.n	8008a2c <ff_convert+0x18>
		c = chr;
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	81fb      	strh	r3, [r7, #14]
 8008a2a:	e025      	b.n	8008a78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00b      	beq.n	8008a4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	2bff      	cmp	r3, #255	; 0xff
 8008a36:	d805      	bhi.n	8008a44 <ff_convert+0x30>
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	3b80      	subs	r3, #128	; 0x80
 8008a3c:	4a12      	ldr	r2, [pc, #72]	; (8008a88 <ff_convert+0x74>)
 8008a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a42:	e000      	b.n	8008a46 <ff_convert+0x32>
 8008a44:	2300      	movs	r3, #0
 8008a46:	81fb      	strh	r3, [r7, #14]
 8008a48:	e016      	b.n	8008a78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	81fb      	strh	r3, [r7, #14]
 8008a4e:	e009      	b.n	8008a64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	4a0d      	ldr	r2, [pc, #52]	; (8008a88 <ff_convert+0x74>)
 8008a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d006      	beq.n	8008a6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008a5e:	89fb      	ldrh	r3, [r7, #14]
 8008a60:	3301      	adds	r3, #1
 8008a62:	81fb      	strh	r3, [r7, #14]
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	2b7f      	cmp	r3, #127	; 0x7f
 8008a68:	d9f2      	bls.n	8008a50 <ff_convert+0x3c>
 8008a6a:	e000      	b.n	8008a6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008a6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008a6e:	89fb      	ldrh	r3, [r7, #14]
 8008a70:	3380      	adds	r3, #128	; 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008a78:	89fb      	ldrh	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	08008d78 	.word	0x08008d78

08008a8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9c:	d201      	bcs.n	8008aa2 <ff_wtoupper+0x16>
 8008a9e:	4b3e      	ldr	r3, [pc, #248]	; (8008b98 <ff_wtoupper+0x10c>)
 8008aa0:	e000      	b.n	8008aa4 <ff_wtoupper+0x18>
 8008aa2:	4b3e      	ldr	r3, [pc, #248]	; (8008b9c <ff_wtoupper+0x110>)
 8008aa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	1c9a      	adds	r2, r3, #2
 8008aaa:	617a      	str	r2, [r7, #20]
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008ab0:	8a7b      	ldrh	r3, [r7, #18]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d068      	beq.n	8008b88 <ff_wtoupper+0xfc>
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d364      	bcc.n	8008b88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	1c9a      	adds	r2, r3, #2
 8008ac2:	617a      	str	r2, [r7, #20]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	823b      	strh	r3, [r7, #16]
 8008ac8:	8a3b      	ldrh	r3, [r7, #16]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	81fb      	strh	r3, [r7, #14]
 8008ace:	8a3b      	ldrh	r3, [r7, #16]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008ad4:	88fa      	ldrh	r2, [r7, #6]
 8008ad6:	8a79      	ldrh	r1, [r7, #18]
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	440b      	add	r3, r1
 8008adc:	429a      	cmp	r2, r3
 8008ade:	da49      	bge.n	8008b74 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d84f      	bhi.n	8008b86 <ff_wtoupper+0xfa>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <ff_wtoupper+0x60>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b39 	.word	0x08008b39
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b49 	.word	0x08008b49
 8008b00:	08008b51 	.word	0x08008b51
 8008b04:	08008b59 	.word	0x08008b59
 8008b08:	08008b61 	.word	0x08008b61
 8008b0c:	08008b69 	.word	0x08008b69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	8a7b      	ldrh	r3, [r7, #18]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	80fb      	strh	r3, [r7, #6]
 8008b20:	e027      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	8a7b      	ldrh	r3, [r7, #18]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	88fa      	ldrh	r2, [r7, #6]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	80fb      	strh	r3, [r7, #6]
 8008b36:	e01c      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	3b10      	subs	r3, #16
 8008b3c:	80fb      	strh	r3, [r7, #6]
 8008b3e:	e018      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	3b20      	subs	r3, #32
 8008b44:	80fb      	strh	r3, [r7, #6]
 8008b46:	e014      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008b48:	88fb      	ldrh	r3, [r7, #6]
 8008b4a:	3b30      	subs	r3, #48	; 0x30
 8008b4c:	80fb      	strh	r3, [r7, #6]
 8008b4e:	e010      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	3b1a      	subs	r3, #26
 8008b54:	80fb      	strh	r3, [r7, #6]
 8008b56:	e00c      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	e008      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	3b50      	subs	r3, #80	; 0x50
 8008b64:	80fb      	strh	r3, [r7, #6]
 8008b66:	e004      	b.n	8008b72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008b6e:	80fb      	strh	r3, [r7, #6]
 8008b70:	bf00      	nop
			}
			break;
 8008b72:	e008      	b.n	8008b86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008b74:	89fb      	ldrh	r3, [r7, #14]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d195      	bne.n	8008aa6 <ff_wtoupper+0x1a>
 8008b7a:	8a3b      	ldrh	r3, [r7, #16]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008b84:	e78f      	b.n	8008aa6 <ff_wtoupper+0x1a>
			break;
 8008b86:	bf00      	nop
	}

	return chr;
 8008b88:	88fb      	ldrh	r3, [r7, #6]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	08008e78 	.word	0x08008e78
 8008b9c:	0800906c 	.word	0x0800906c

08008ba0 <__libc_init_array>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4d0d      	ldr	r5, [pc, #52]	; (8008bd8 <__libc_init_array+0x38>)
 8008ba4:	4c0d      	ldr	r4, [pc, #52]	; (8008bdc <__libc_init_array+0x3c>)
 8008ba6:	1b64      	subs	r4, r4, r5
 8008ba8:	10a4      	asrs	r4, r4, #2
 8008baa:	2600      	movs	r6, #0
 8008bac:	42a6      	cmp	r6, r4
 8008bae:	d109      	bne.n	8008bc4 <__libc_init_array+0x24>
 8008bb0:	4d0b      	ldr	r5, [pc, #44]	; (8008be0 <__libc_init_array+0x40>)
 8008bb2:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x44>)
 8008bb4:	f000 f820 	bl	8008bf8 <_init>
 8008bb8:	1b64      	subs	r4, r4, r5
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	42a6      	cmp	r6, r4
 8008bc0:	d105      	bne.n	8008bce <__libc_init_array+0x2e>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc8:	4798      	blx	r3
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7ee      	b.n	8008bac <__libc_init_array+0xc>
 8008bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd2:	4798      	blx	r3
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	e7f2      	b.n	8008bbe <__libc_init_array+0x1e>
 8008bd8:	08009128 	.word	0x08009128
 8008bdc:	08009128 	.word	0x08009128
 8008be0:	08009128 	.word	0x08009128
 8008be4:	0800912c 	.word	0x0800912c

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
